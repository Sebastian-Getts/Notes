{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/tranquilpeak/source/assets/css/all.css","path":"assets/css/all.css","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/css/gitalk.css","path":"assets/css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/css/gitment.css","path":"assets/css/gitment.css","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/css/jquery.fancybox.css","path":"assets/css/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/css/style-spzjrm9no8kcbknku5bsn1dr9dpp94iq1g86qdztxtoqwlgtrnwyi2tucypv.min.css","path":"assets/css/style-spzjrm9no8kcbknku5bsn1dr9dpp94iq1g86qdztxtoqwlgtrnwyi2tucypv.min.css","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/css/style.css","path":"assets/css/style.css","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/css/thumbs.css","path":"assets/css/thumbs.css","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/css/tranquilpeak.css","path":"assets/css/tranquilpeak.css","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-brands-400.eot","path":"assets/fonts/fa-brands-400.eot","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-brands-400.svg","path":"assets/fonts/fa-brands-400.svg","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-brands-400.ttf","path":"assets/fonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-brands-400.woff","path":"assets/fonts/fa-brands-400.woff","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-brands-400.woff2","path":"assets/fonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-regular-400.eot","path":"assets/fonts/fa-regular-400.eot","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-regular-400.svg","path":"assets/fonts/fa-regular-400.svg","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-regular-400.ttf","path":"assets/fonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-regular-400.woff","path":"assets/fonts/fa-regular-400.woff","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-regular-400.woff2","path":"assets/fonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-solid-900.eot","path":"assets/fonts/fa-solid-900.eot","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-solid-900.svg","path":"assets/fonts/fa-solid-900.svg","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-solid-900.ttf","path":"assets/fonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-solid-900.woff","path":"assets/fonts/fa-solid-900.woff","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-solid-900.woff2","path":"assets/fonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/merriweather-bold-italic.ttf","path":"assets/fonts/merriweather-bold-italic.ttf","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/merriweather-bold.ttf","path":"assets/fonts/merriweather-bold.ttf","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/merriweather-light-italic.ttf","path":"assets/fonts/merriweather-light-italic.ttf","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/merriweather-light.ttf","path":"assets/fonts/merriweather-light.ttf","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/merriweather.ttf","path":"assets/fonts/merriweather.ttf","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/open-sans-bold.ttf","path":"assets/fonts/open-sans-bold.ttf","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/open-sans.ttf","path":"assets/fonts/open-sans.ttf","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/js/algoliasearch.js","path":"assets/js/algoliasearch.js","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/js/gitalk.js","path":"assets/js/gitalk.js","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/js/gitment.js","path":"assets/js/gitment.js","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/js/jquery.fancybox.js","path":"assets/js/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/js/jquery.js","path":"assets/js/jquery.js","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/js/moment-with-locales.js","path":"assets/js/moment-with-locales.js","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/js/script-karbquxnkadaf4yf1hq6g6fyv6nvvrwpv3vf2u1wz8k7osddfqtxf5wbfcfg.min.js","path":"assets/js/script-karbquxnkadaf4yf1hq6g6fyv6nvvrwpv3vf2u1wz8k7osddfqtxf5wbfcfg.min.js","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/js/script.js","path":"assets/js/script.js","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/js/thumbs.js","path":"assets/js/thumbs.js","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/js/tranquilpeak.js","path":"assets/js/tranquilpeak.js","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/images/avatar.jpg","path":"assets/images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/images/cover-v1.2.0.jpg","path":"assets/images/cover-v1.2.0.jpg","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/images/cover.jpg","path":"assets/images/cover.jpg","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/images/logo-algolia-nebula-blue-full.svg","path":"assets/images/logo-algolia-nebula-blue-full.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/FS.md","hash":"4f0abc33ef1083e9b30de0f3b1b9996e7741aa0a","modified":1595179753366},{"_id":"source/_posts/Pascal-s-Triangle.md","hash":"753c3618e1dcd92fcf46c31a4ef7b5126d106375","modified":1595179753366},{"_id":"source/_posts/ProbablityAndStatics.md","hash":"97ef5fb94cdce23831cfab61f44f94bf6f792a63","modified":1597490619651},{"_id":"source/_posts/annotation.md","hash":"062d3b734bc33921880ec407bacbe8c661cf485a","modified":1597935708201},{"_id":"source/_posts/bat.md","hash":"007db3c85fa8b7d372d7cb5604737f74c2f113ea","modified":1595179753366},{"_id":"source/_posts/bitwise.md","hash":"e432378421cad9c100e07bd267360fcbf4e415e0","modified":1596902245149},{"_id":"source/_posts/bt01.md","hash":"f55f3422fa552d389ca171cc697721b724d2b6df","modified":1595179753366},{"_id":"source/_posts/bt02.md","hash":"611bc93a0706a2001455bd7d91a59e430fbb4ea6","modified":1595179753366},{"_id":"source/_posts/bt03.md","hash":"642d79863f9b3873f65e8e39f77053795104b1b7","modified":1595179753366},{"_id":"source/_posts/contest200.md","hash":"c68b5064a92a3fcbd3f84c348dea4bfbdc684ebb","modified":1596348222348},{"_id":"source/_posts/contest201.md","hash":"bd260341d42c02016a549ee95cbfa97d50c3f513","modified":1596952241788},{"_id":"source/_posts/contest202.md","hash":"ff7d44f03dd7681bb0b3d8cf862af07a4a29a40f","modified":1597562072244},{"_id":"source/_posts/contest203.md","hash":"506cdc75078718c8bf5643df8416f5e9dce1b812","modified":1598165459923},{"_id":"source/_posts/decorating.md","hash":"b49862b75eab2267915042786a6df5c45208caff","modified":1595179753366},{"_id":"source/_posts/elasticSearch.md","hash":"6655cad7c1243d53571dde73ef33b4260b425584","modified":1595179753366},{"_id":"source/_posts/gcd.md","hash":"9c41f44e5d2069a205328db6466b714bf208918a","modified":1597490642895},{"_id":"source/_posts/goodleTest.md","hash":"4a6e22c1601b58eb7f6ed22a841ea6d02b9dd870","modified":1595179753366},{"_id":"source/_posts/hashmap.md","hash":"628366af0f729bea11929c108e6eaf0fe7b0a610","modified":1598088005379},{"_id":"source/_posts/heap.md","hash":"712bd551b9ec195eacc671ba92e05fd20a592322","modified":1595179753366},{"_id":"source/_posts/https.md","hash":"14a02c81c40ec171d0129f5ed75c6207df3e30ce","modified":1595179753366},{"_id":"source/_posts/javaFX.md","hash":"0afeec6f872980811bf209e73caa76646c39efcc","modified":1595179753366},{"_id":"source/_posts/jvm.md","hash":"b3114ece9daccaf267b7b111c04227a1fa1045fc","modified":1596713752358},{"_id":"source/_posts/kafka.md","hash":"63c58e790291526a93f022e539758f76a9a83c3a","modified":1595251820863},{"_id":"source/_posts/kmp.md","hash":"67030a6a49d77523fd90149e288dccd45ab03a4a","modified":1595179753366},{"_id":"source/_posts/lcoaldatetime.md","hash":"c7eb0fdbb1b2b124d9f72cddee5a38a171f84d89","modified":1595179753366},{"_id":"source/_posts/leecode.md","hash":"36116b974ced409823af1ff27d3d8f77ae2e31ff","modified":1597490604014},{"_id":"source/_posts/leecode2.md","hash":"40d66333c9d9521b0b4e2690190f40b20d3a5cb2","modified":1595179753366},{"_id":"source/_posts/lock.md","hash":"c8c80b88f63bfb80eded1cc7505718b07651a0c1","modified":1598149431331},{"_id":"source/_posts/mybatis.md","hash":"05a0686732c5a777370af6d94882eddcaad3bf4a","modified":1596643338465},{"_id":"source/_posts/nginx.md","hash":"43adb94f931736a928d1b2c80bc1b8513d244168","modified":1595179753366},{"_id":"source/_posts/observer.md","hash":"1d22bc6852178154284f5db2fa76bb2d62d1f870","modified":1595179753366},{"_id":"source/_posts/redis.md","hash":"bdc31bde46b4e469d2ef9bcdbc25db0a146fd6d0","modified":1596715866098},{"_id":"source/_posts/regex.md","hash":"12cd403afedf9ddf8d236090a8677ce33c3efaeb","modified":1595179753366},{"_id":"source/_posts/restful.md","hash":"8e4fb53ae3329c9286453d771d2bf90c53399ce4","modified":1595179753366},{"_id":"source/_posts/springAOP.md","hash":"ba49cc222ef8aaae3c492eb1c46c92897d6b4f80","modified":1595179753366},{"_id":"source/_posts/static-final.md","hash":"4d7bc907d0f056dbc21fc9326d99bcc2474d3d46","modified":1597490526137},{"_id":"source/_posts/subsets.md","hash":"ce893143d50986c95eea70866c239216b54f3321","modified":1595179753366},{"_id":"source/_posts/swagger.md","hash":"b217a54659247d418f62ef163c57dc82a5906e98","modified":1595179753366},{"_id":"source/_posts/tensorflow01.md","hash":"97f57e68f25e2debe684c873073ebceb84907142","modified":1595179753366},{"_id":"source/_posts/tensorflow02.md","hash":"7881a4f02b2099d3c038d9a9d4d2ae761d533f0c","modified":1597490515877},{"_id":"source/_posts/thymeleaf01.md","hash":"bf15c55c2135a7f1a34166e7465252581bb3ec56","modified":1595179753366},{"_id":"source/_posts/tree.md","hash":"3659cf1188f5cb2bc4569984472b3bb25f5a985e","modified":1597490635507},{"_id":"source/_posts/vue01.md","hash":"4bb9ee5a4a03860ec472e5df8c5a93ca47088912","modified":1595179753366},{"_id":"source/_posts/uml.md","hash":"3486af2f10efacb5f68dd533568a78f042bfe992","modified":1595179753366},{"_id":"source/_posts/vue02.md","hash":"e8c4e077cfac7b39350248b56c3d90cd72575cfb","modified":1595179753366},{"_id":"source/_posts/vue03.md","hash":"67e4ce62bbbcff2b54b579e650ede2a97100b58f","modified":1595179753366},{"_id":"source/_posts/vue04.md","hash":"404bcfd820cd53ae382240661e013a57121f5803","modified":1595179753366},{"_id":"source/_posts/vue05.md","hash":"ba89df31d08ff7aef8439ea9d27cd41be532a726","modified":1595179753366},{"_id":"source/_posts/vue06.md","hash":"43682c186ae0af5dd9c6c43f41fa47473c6e5e75","modified":1595179753366},{"_id":"source/_posts/mq.md","hash":"cba47c0da597e997b680bd69c9d1880f4e613c4e","modified":1597555455951},{"_id":"source/all-categories/index.md","hash":"5ba8c7b70cc60dc7bf0cefeb22b4d9b86d1aa2e0","modified":1597553987010},{"_id":"source/all-archives/index.md","hash":"fa34028baad36af6c9feb24ef61cc0f3b3c51746","modified":1597553939619},{"_id":"source/about/index.md","hash":"d0ec051b60eab664ce613d6a7df07508e1cbdb54","modified":1597490711268},{"_id":"source/all-tags/index.md","hash":"9328f34da1aa2d20dadfdf895d6356720a484353","modified":1597553965642},{"_id":"source/_posts/volatile.md","hash":"bfc35bbc8dea0ae74acd0e5d95e9ffcd0a27b0f8","modified":1595251567636},{"_id":"source/_posts/vim.md","hash":"dbbf228399f4c9ad440fda4639241ee453f5ce9f","modified":1597490612671},{"_id":"source/categories/index.md","hash":"5ed5ee833af50b986e1a543ace747994814a7cb0","modified":1595179753366},{"_id":"source/top/index.md","hash":"9f7492a48015822ab20b5c3ca8356d15760667bb","modified":1595179753366},{"_id":"source/tags/index.md","hash":"9c3e184d51c00399c9ab869d6345d6231025afa5","modified":1595179753366},{"_id":"themes/tranquilpeak/.gitignore","hash":"19e27dd778896662e6d604b69411d2dc3cf5fec6","modified":1586813095000},{"_id":"themes/tranquilpeak/.eslintignore","hash":"1f78f00553adf9ee374b343191ed809b0f8ba073","modified":1586813095000},{"_id":"themes/tranquilpeak/.eslintrc","hash":"ea1da9c0b0863a612ace47bd336cff95497bd878","modified":1586813095000},{"_id":"themes/tranquilpeak/DOCUMENTATION.md","hash":"daaa36cff0cf7aeb7682372d6697a55d6a0f2f5b","modified":1586813095000},{"_id":"themes/tranquilpeak/Gruntfile.js","hash":"b2b078651cf8c5dcde2e847169ce242ad3319ca3","modified":1586813095000},{"_id":"themes/tranquilpeak/README.md","hash":"c18f2fea9ceeec6efa85d892df67a191d6c84ec5","modified":1586813095000},{"_id":"themes/tranquilpeak/LICENSE","hash":"7a3b30ddb56760b35a6b7cd210aeb271cd292b60","modified":1586813095000},{"_id":"themes/tranquilpeak/package.json","hash":"ce4b638a8739ddd323a3248ca1b7ae480388d70c","modified":1586813095000},{"_id":"themes/tranquilpeak/_config.yml","hash":"3893e30c9d91460636be0e723dd965b6bac573ad","modified":1597558183998},{"_id":"themes/tranquilpeak/renovate.json","hash":"f902d35646d7a6a637f727b02cd832c4339a4ca9","modified":1586813095000},{"_id":"themes/tranquilpeak/.github/CONTRIBUTING.md","hash":"8873700e439b6fc8aa4804b70a90fd81bf310d6c","modified":1586813095000},{"_id":"themes/tranquilpeak/.github/ISSUE_TEMPLATE.md","hash":"ec6bf3eb708f8eb62736ede6d2080f6610849802","modified":1586813095000},{"_id":"themes/tranquilpeak/.github/PULL_REQUEST_TEMPLATE.md","hash":"03cdb93ca72cd6a19043ea4bb1ec4f5b7479a0a9","modified":1586813095000},{"_id":"themes/tranquilpeak/languages/de-DE.yml","hash":"c9a7514af3c5c58023f8d3ed9503be4253146015","modified":1586813095000},{"_id":"themes/tranquilpeak/languages/es.yml","hash":"b5f37df87377d985339a21f343bf54db46926f1a","modified":1586813095000},{"_id":"themes/tranquilpeak/languages/fr-FR.yml","hash":"c644bb587a5360bb70a12c2d83f8d5973fb0055c","modified":1586813095000},{"_id":"themes/tranquilpeak/languages/fa.yml","hash":"ec86c6fd655ed0c6df017c17f62b784b916d3a4a","modified":1586813095000},{"_id":"themes/tranquilpeak/languages/en.yml","hash":"8ef548fe25d2d50983e2984abdea13f958220e94","modified":1597555108963},{"_id":"themes/tranquilpeak/languages/it-IT.yml","hash":"a5655d08a311f3292df5805ea2d6d72fd68726ca","modified":1586813095000},{"_id":"themes/tranquilpeak/languages/ko.yml","hash":"b56376775c5bc7f8f1d1b356340597cc61aae392","modified":1586813095000},{"_id":"themes/tranquilpeak/languages/ja.yml","hash":"3c6f7cda21ac91abc9f728e3093b1e98b42d5295","modified":1586813095000},{"_id":"themes/tranquilpeak/languages/pt-br.yml","hash":"e2edf45fae5a5290a3dc2111ef38d5cd40d43771","modified":1586813095000},{"_id":"themes/tranquilpeak/languages/ru.yml","hash":"262f781591cf2dd1584411ed4a780369d4d2e30a","modified":1586813095000},{"_id":"themes/tranquilpeak/languages/zh-tw.yml","hash":"f04e0e91edacb8f6cae7308007bd5e5158e6c77e","modified":1586813095000},{"_id":"themes/tranquilpeak/languages/zh-cn.yml","hash":"fea995175f5aeb58f8a958b00556bc2336d37a07","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/all-archives.ejs","hash":"28a4e97d1cfe4730dbcc8fde27b079320b5eec35","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/all-categories.ejs","hash":"c2257b8265a9a328e69c92f4a88cb2cdd99c047a","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/archive.ejs","hash":"0df1edf4ed40b316715ef1949b09aa9c98d22359","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/all-tags.ejs","hash":"aabb765f51a8d7582a5bafdbc8876b46ff1e6ea1","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/index.ejs","hash":"36e89b37f520533bef85fb32b714214257fad1d0","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/layout.ejs","hash":"29c1291c7ca3f5da7bee6385b7f716d179199933","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/category.ejs","hash":"67902c418e299399133fe2a7ebc39cadd17de861","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/page.ejs","hash":"ae761feddc98f4d3260e7591ed9fc91d9a49d0ab","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/post.ejs","hash":"ae761feddc98f4d3260e7591ed9fc91d9a49d0ab","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/tag.ejs","hash":"72bff1ae241fbe2ddca0537e8ed77c791a7d1766","modified":1586813095000},{"_id":"themes/tranquilpeak/scripts/.eslintrc.json","hash":"4cd7451f0bc15440bc8147912c63a11acd0e280f","modified":1586813095000},{"_id":"themes/tranquilpeak/tasks/pipeline.js","hash":"75b65cbd6d6ae471739ba80c9f792f602a0769d4","modified":1586813095000},{"_id":"themes/tranquilpeak/.github/ISSUE_TEMPLATE/feature-request---improvement.md","hash":"7d53b0c0d65dd28da17ff9d948e842883cab467f","modified":1586813095000},{"_id":"themes/tranquilpeak/.github/ISSUE_TEMPLATE/bug-report.md","hash":"b9a9ffe556f1fca39009403f87bb8c8e840dc369","modified":1586813095000},{"_id":"themes/tranquilpeak/.github/ISSUE_TEMPLATE/question.md","hash":"443c4f27268d39e89390edb7dcffda407a070fd7","modified":1586813095000},{"_id":"themes/tranquilpeak/.github/workflows/nodejs.yml","hash":"595c32bcb8ba72cd0737c6009f24dabda12af834","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/_partial/about.ejs","hash":"c92588fcb4435e19b8c7e10fe24484aa6639060e","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/_partial/archive-post.ejs","hash":"e19455749c5c1bf773214d965f173613dd8f30f6","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/_partial/archive.ejs","hash":"bdd73d1f70bd91533863943f940f8193d44e0fdd","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/_partial/baidu-analytics.ejs","hash":"736eca2ecf6fdeea032d47c02c51688f006cafb4","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/_partial/footer.ejs","hash":"67962257d9e3cb6a4d56e3f0263f192ba9a413dd","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/_partial/cover.ejs","hash":"18b9a620fca9b648fd59467a66b3f4fdbba42613","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/_partial/google-analytics.ejs","hash":"b756aa731678a37d22c97c7dc30767331b08d109","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/_partial/head.ejs","hash":"4a166ece1d0eb3b94a3ce75a5c92709ba06fdb2d","modified":1597511806020},{"_id":"themes/tranquilpeak/layout/_partial/header.ejs","hash":"b1315ca70848602323f03659d9aba67a0586c028","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/_partial/index.ejs","hash":"34d9260021e4b8b4bf232c2786d8e90e0db5bd20","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/_partial/pagination.ejs","hash":"89d3be71ff2f5a847850d50e117896056f0ca1a6","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/_partial/post.ejs","hash":"cdccf8f0ea1c01997fafdabb7cf044d3939cbb6c","modified":1586813095000},{"_id":"themes/tranquilpeak/scripts/filters/excerpt.js","hash":"5e0e473d46f8c7aac988ebf0b25ab2eab0af73bb","modified":1586813095000},{"_id":"themes/tranquilpeak/scripts/filters/thumbnail_image_url.js","hash":"0ad2d9304c991e2989708bdbfa6a59030ee691d3","modified":1586813095000},{"_id":"themes/tranquilpeak/scripts/helpers/absolute_url.js","hash":"0d520a946b6f0abbac60529017ed3133265aac60","modified":1586813095000},{"_id":"themes/tranquilpeak/scripts/helpers/generate_sharing_link.js","hash":"89069677e8acddef5fba0d3093f5f73fde4fa485","modified":1586813095000},{"_id":"themes/tranquilpeak/scripts/helpers/is_remote_url.js","hash":"471237ea295bcc9a392a5bb6738ef4c6ab673afb","modified":1586813095000},{"_id":"themes/tranquilpeak/scripts/helpers/json_ld.js","hash":"4cd07766ed9436f0c4cb8a9ae22644272918b837","modified":1586813095000},{"_id":"themes/tranquilpeak/scripts/helpers/resolve_asset_url.js","hash":"c813e9daaed374b386b91876923f10c0cf1d624c","modified":1586813095000},{"_id":"themes/tranquilpeak/scripts/tags/alert.js","hash":"5b86358dd53c9b0d44c385ec12cf9e76383e229a","modified":1586813095000},{"_id":"themes/tranquilpeak/scripts/tags/fancybox.js","hash":"55ce02f9ef084f43932eb9b0f10db1d5e9c3a250","modified":1586813095000},{"_id":"themes/tranquilpeak/scripts/tags/highlight_text.js","hash":"8e093f21e9a4b10c19be6f300dc90bcc39685ec9","modified":1586813095000},{"_id":"themes/tranquilpeak/scripts/tags/image.js","hash":"ab6b04db8fe2ad21ec52dac5e1c3ee76400c6a79","modified":1586813095000},{"_id":"themes/tranquilpeak/scripts/tags/tabbed_codeblock.js","hash":"7dccd36bdd85c96eb7af125b30d634f44125700c","modified":1586813095000},{"_id":"themes/tranquilpeak/scripts/tags/video.js","hash":"497d64fd454cc6fd5c26a42cb8e38db90b83cf4f","modified":1586813095000},{"_id":"themes/tranquilpeak/scripts/tags/wide_image.js","hash":"d3596c62694548a3a684e8dfeb5372038ef6f450","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/_partial/script.ejs","hash":"e484e5c07687fb20374990a0c355fd30fb887e2b","modified":1597511806020},{"_id":"themes/tranquilpeak/layout/_partial/sidebar.ejs","hash":"39fb0c9f214cc36f4f96cbcacc832e542d723881","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/_partial/search.ejs","hash":"0fd5f75117912cd1e6e7e6094079bccdc79c0000","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/tranquilpeak.scss","hash":"e69c62b19ece4ab35d992e163b47f2a8374d7611","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_fonts/merriweather-bold-italic.ttf","hash":"c1b8593dc9ddbf1a1a6268d31e08c4041448ed76","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_fonts/merriweather-bold.ttf","hash":"e6d0ffb2d0348d9e22de97e57214b7db795e9513","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_fonts/merriweather-light-italic.ttf","hash":"c3835119c62e78a21cfb33e2de6686fb4a5929a0","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_fonts/merriweather-light.ttf","hash":"69bd3f15962cf91348a133d3d38571a5c67eca65","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_fonts/open-sans.ttf","hash":"618b78a8f6ffe7e1998eab67268859e2ab54be8e","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_fonts/open-sans-bold.ttf","hash":"3823779db9f51a34658809ce66bdd6ed1145ed8e","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_fonts/merriweather.ttf","hash":"d392237948e74246a2fb0d0d886498776a185e54","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_images/logo-algolia-nebula-blue-full.svg","hash":"d5e4426b6bd2d8b8c3f477f83d348d8f3b3ec1ca","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_js/.eslintrc.json","hash":"27d4e7223eee3eca7eb717bea2d28d35714eccbc","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_js/about.js","hash":"ce68bcc929192dfca6e699fe8e528990cd2d9590","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_js/archives-filter.js","hash":"8b8998b0e67c745a20450001c0739f6977b63309","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_js/categories-filter.js","hash":"a5f3c4b9bbef1c8ec881eb39551060ca95bfbb33","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_js/codeblock-resizer.js","hash":"391c2c9135579ea50c2060e0612e7105e06a8ff7","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_js/fancybox.js","hash":"659aaad375ecff9748a5d3b0ff1378a549236513","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_js/header.js","hash":"58ca619f851ebff35724c07dca7f1ed25e9cd5f2","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_js/image-gallery.js","hash":"90efc47246af69b7e17fab6e0bd1578043fcc2b0","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_js/post-bottom-bar.js","hash":"64f78c44d29d3559d5e14e436b8cfe1d24b8c965","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_js/search-modal.js","hash":"7ea9ab668bc3118c28e6212516f366ef764d3550","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_js/share-options.js","hash":"c2046697540786721ff7c4754774f94fcaf32696","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_js/sidebar.js","hash":"18dc623dd237c519bb79ce93283a5446cc11a487","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_js/smartresize.js","hash":"7342a21f94d7bb0525ccbd917d43a6824d7ae63e","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_js/tabbed-codeblocks.js","hash":"1282e11aacb036c8c9310cac49b75d7e2200125c","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_js/tags-filter.js","hash":"d33625df51d7b9788eeea338626f04387c96f053","modified":1586813095000},{"_id":"themes/tranquilpeak/tasks/config/concat.js","hash":"0c2c4dbbfac52f20a3035a2f8cd1c24f1759b17e","modified":1586813095000},{"_id":"themes/tranquilpeak/tasks/config/copy.js","hash":"4b9a4e724c65ec71cfec36b387a2625fc0f1074c","modified":1586813095000},{"_id":"themes/tranquilpeak/tasks/config/cssmin.js","hash":"352185864437728c9c19169f4fec6fc3308e8b6d","modified":1586813095000},{"_id":"themes/tranquilpeak/tasks/config/clean.js","hash":"ea70743eb4ed0d9ead68d6fc8b65b9f936229a00","modified":1586813095000},{"_id":"themes/tranquilpeak/tasks/config/replace.js","hash":"984ba7ed966c16b1fadf47c62f76e99940d4b12d","modified":1586813095000},{"_id":"themes/tranquilpeak/tasks/config/sails-linker.js","hash":"c1103119ec7d1f04cfbb1cda83b40d11e8f2d218","modified":1586813095000},{"_id":"themes/tranquilpeak/tasks/config/sass.js","hash":"84ba6be74f99c502543b7f77a105ce16931fd38e","modified":1586813095000},{"_id":"themes/tranquilpeak/tasks/config/sync.js","hash":"fbc09d0ed201993bc1918223b8f8ad5b68f50490","modified":1586813095000},{"_id":"themes/tranquilpeak/tasks/config/watch.js","hash":"933eecd8a2506c627dbb9a1137305a16dd2d9f9a","modified":1586813095000},{"_id":"themes/tranquilpeak/tasks/config/uglify.js","hash":"57c7341a004b61539f5b3f02bd772f40494b8306","modified":1586813095000},{"_id":"themes/tranquilpeak/tasks/register/build.js","hash":"f64c77127a2d4bfdbb9866fcf368913334f44603","modified":1586813095000},{"_id":"themes/tranquilpeak/tasks/register/eslint.js","hash":"718cd8a80d060e2587b84e0e20ceaa39c2cc9411","modified":1586813095000},{"_id":"themes/tranquilpeak/tasks/register/linkAssets.js","hash":"079cd274cb29f9984eb7150d88f61819d2ef6235","modified":1586813095000},{"_id":"themes/tranquilpeak/tasks/register/syncAssets.js","hash":"0813093c3e252a58371db53e914183a97e3186a1","modified":1586813095000},{"_id":"themes/tranquilpeak/tasks/register/linkAssetsProd.js","hash":"37f2fab80f25757be3e34b40bc5a26a82f088491","modified":1586813095000},{"_id":"themes/tranquilpeak/tasks/register/default.js","hash":"80174db9b8a729980770e639e70999ce5a816b78","modified":1586813095000},{"_id":"themes/tranquilpeak/tasks/register/buildProd.js","hash":"450ff77a1bf631d1799206d218c6468592a59862","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/_partial/post/actions.ejs","hash":"419223bff6146c46d4e993e4aa2e3636b051edc8","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/base/_base.scss","hash":"f0a46b090a0a4dd21edfd89095761895c5278ecb","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/_partial/post/category.ejs","hash":"d4b26aa8c66aa8dbfae7a4aafed874745efb2f8e","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/_partial/post/duoshuo.ejs","hash":"992368f8863f34d1dccf90c0cabc33d5dcdbe92a","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/_partial/post/gitalk.ejs","hash":"8c91c60ffeab780a8a628145c572456187142101","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/_partial/post/gallery.ejs","hash":"71b4ad77ab08c0980bf85b85c98a90c7de2be107","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/_partial/post/disqus.ejs","hash":"9e0d238ed918e3138d5a9bb23a90408669e19169","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/_partial/post/gitment.ejs","hash":"1dcfdca4d20bab5a43bda44cf37df506ab3a0fb7","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/_partial/post/header-cover.ejs","hash":"4d3a73d0c6f26769f778d02a559e5055ef1ee0ca","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/_partial/post/header.ejs","hash":"19c5f0d680db08fe2880f41de3a085ef0298a386","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/_partial/post/meta.ejs","hash":"f13cb5089b0d5898c9606519d1c872725a63a5f9","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/_partial/post/share-options.ejs","hash":"896158d62beba2ecb7d6af6e0f01f8f1ea23e706","modified":1586813095000},{"_id":"themes/tranquilpeak/layout/_partial/post/tag.ejs","hash":"2a52f38fa359f8ec8ae776e44e92c48795e31272","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/layouts/_about.scss","hash":"4a1c4cca6623449602208256dee6422173daf1ef","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/layouts/_blog.scss","hash":"2450e07594a5e5186170fb5b5b157cc340808a9a","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/layouts/_bottom-bar.scss","hash":"c7816c7ebc253d46466355860ead6669a3707ac6","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/layouts/_cover.scss","hash":"03a951c9b35dd4e35456caa36950e6d6bef77ac3","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/layouts/_footer.scss","hash":"645161942c66e6afbd666b4755337a6a6261e5e0","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/layouts/_sidebar.scss","hash":"facaff0ca816a4ace67c7689e4286e88eb1010c2","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/layouts/_main.scss","hash":"ee4648502b355db51fc6cb7b05375003331f2f6e","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/layouts/_header.scss","hash":"d840a4be850cb258167ee1081e1b288dc64b3d2c","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/components/_alert.scss","hash":"1e6bf40de34a341dd0228357e288153b9292977c","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/components/_archive.scss","hash":"cfdf53475d228643d5c5e62689b3c6a593e4ccce","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/components/_box.scss","hash":"eebaacf55234fdaa156edb7dc4d9a4f382eaf4d4","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/components/_button.scss","hash":"ea9bd41800fe04860f7e892c17010588b2563a06","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/components/_caption.scss","hash":"dad2683f5f3235b335eebcbda3db59a1cfbb2283","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/components/_fancybox.scss","hash":"e162e2ecafc2be70238a9885fd57a9a7ad642757","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/components/_code.scss","hash":"0a14fe197c221a4d4d91ee9d41541ce7969043ca","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/components/_form.scss","hash":"368187e0c5f1a57d8c423f2ec23e897ee94a1a27","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/components/_figure.scss","hash":"9828521c34d91f04813db23e174708f510fe30bf","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/components/_hide.scss","hash":"c2f5ed51086b9ea5d94ff548bdc4653ea5cd7912","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/components/_highlight-text.scss","hash":"7a7a8a78f75d6c43a46fd020e2d44546e716751b","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/components/_icon.scss","hash":"60dc972bcd81b4f95ab2c067ca910a5bf324d907","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/components/_image-gallery.scss","hash":"95ee5be04c523bf914596042574780ee527e6b38","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/components/_link.scss","hash":"7460155ebf7ce0d3e9acd090b6b99673127fd0be","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/components/_markdown.scss","hash":"ba6d7e8f84b3b6dfef339f28b5c6ae372ead674f","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/components/_main-content.scss","hash":"90c46c87289a8b3cf7c14d36900f5ced9db36c25","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/components/_media.scss","hash":"84aa03c01b741bbeb31c6b48122930f30ad40de3","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/components/_modal.scss","hash":"bc56f823cd67b2ed65b5cf2c3e1851fa3e82f0f9","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/components/_pagination.scss","hash":"809b9330a0e2d79c9285c1a452d61648248c8b70","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/components/_post-actions.scss","hash":"1cc3ba46b1752043207bb820f4f886b0f982e445","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/components/_post.scss","hash":"0457c281b7893f8fde8a0590e4c1ff2ffb4bc1a6","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/components/_pullquote.scss","hash":"86bc35ba358d1340debc459a344f5f6d34acaa42","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/components/_post-header-cover.scss","hash":"c4bf950602ccb3fbdad54938979651a7b488236e","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/components/_postShorten.scss","hash":"a1b1ab16751fb99a3937cc0797426c658a2921f7","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/components/_tag.scss","hash":"ddd1c2ce17f0116655bdacda598e7f1d6fd18262","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/components/_share-options-bar.scss","hash":"f6289a7cce6efe039614c77085945923c32d9673","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/components/_text.scss","hash":"7b38858248da2f73cf64c5949fd475a8e0a246ae","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/components/_tooltip.scss","hash":"f33ad3e677761af1ceb42d337691b8b354ff70bd","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/components/_video.scss","hash":"f9727fd300d73e8844abf0e2575c45e6c7769333","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/pages/_search.scss","hash":"5f7cde0b68156ea802c3caf6cd673cab948b09d9","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/themes/_hljs-custom.scss","hash":"a0ffab53db35bbd4881aeb077400cba55551f3bd","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/themes/_hljs-tranquilpeak.scss","hash":"3c1e0d8b6e2f37820d00572878d060080c5a6fe7","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/utils/_fonts.scss","hash":"4da4074668be0e0abe756aa537a406d14da7ceff","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/utils/_variables.scss","hash":"fc62fcffcdb16fb823c3cb170bbcf34493f0467f","modified":1586813095000},{"_id":"themes/tranquilpeak/source/assets/css/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/css/gitment.css","hash":"7fbb18b73b44ed11193739c55fce53a6f173cf68","modified":1597511800816},{"_id":"themes/tranquilpeak/source/assets/css/jquery.fancybox.css","hash":"00ce8430edb0a4ca35e08a9813e039d3a4b7868c","modified":1597511800984},{"_id":"themes/tranquilpeak/source/assets/css/thumbs.css","hash":"133acf84f948218219d3f23eb466fe54aceda97d","modified":499162500000},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_bottom-bar.scss","hash":"ab28b4d66f021e44d7a46a76157c6a2b5fd23496","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_button.scss","hash":"70c64560144d7d6015bbedeca0531258f9bafa07","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_category.scss","hash":"8cfc45772365e537949a4cd20cfa2a79e1a75dc8","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_form.scss","hash":"14026f13b54ef9f2cd7109cf1bca43040816e542","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_header.scss","hash":"52de2cb5f49a3b5748557fe2d25791ce52457d62","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_main.scss","hash":"0ad55a6191d0a533917845006ceae329353c0b90","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_opacity.scss","hash":"cfc9905b6df3b5100a30b5c47fd331068f238f97","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_share-options-bar.scss","hash":"06f84bceb82df4d3bda64144f6fe4ad8e3e45f89","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_post-header-cover.scss","hash":"ecd9078372d8bd1b7f4979bae3251e8efb345a9b","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_prefix.scss","hash":"5e04cd54ba375f69c97b62b7d4e535118ec78177","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_tag.scss","hash":"c8a87e586e27f999ffa46f273f78a812f1cf2f0a","modified":1586813095000},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_sidebar.scss","hash":"6c3dc034c3d5fdf7f0c4c39a6913f5bae4fc4767","modified":1586813095000},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-regular-400.eot","hash":"af1d634a307219795957412a586abaf626f4829b","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-regular-400.ttf","hash":"bb89a35e00d0ba8a5382cc66809abe3d5cd3e932","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-regular-400.woff","hash":"dc2741902e041fc638697d76733b6252c68f1f99","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-regular-400.woff2","hash":"37b761c26708037d19664cebea70416852487087","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/fonts/merriweather-bold-italic.ttf","hash":"c1b8593dc9ddbf1a1a6268d31e08c4041448ed76","modified":1597511800976},{"_id":"themes/tranquilpeak/source/assets/fonts/merriweather-light-italic.ttf","hash":"c3835119c62e78a21cfb33e2de6686fb4a5929a0","modified":1597511800976},{"_id":"themes/tranquilpeak/source/assets/fonts/merriweather-light.ttf","hash":"69bd3f15962cf91348a133d3d38571a5c67eca65","modified":1597511800976},{"_id":"themes/tranquilpeak/source/assets/fonts/merriweather-bold.ttf","hash":"e6d0ffb2d0348d9e22de97e57214b7db795e9513","modified":1597511800976},{"_id":"themes/tranquilpeak/source/assets/fonts/open-sans.ttf","hash":"618b78a8f6ffe7e1998eab67268859e2ab54be8e","modified":1597511800980},{"_id":"themes/tranquilpeak/source/assets/fonts/merriweather.ttf","hash":"d392237948e74246a2fb0d0d886498776a185e54","modified":1597511800980},{"_id":"themes/tranquilpeak/source/assets/fonts/open-sans-bold.ttf","hash":"3823779db9f51a34658809ce66bdd6ed1145ed8e","modified":1597511800980},{"_id":"themes/tranquilpeak/source/assets/js/thumbs.js","hash":"ee9a65e280178b9525441b751ad7c0e6eb887022","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/js/tranquilpeak.js","hash":"ed9d93b9de4037c97c8699b7b9b985ec48c1b25d","modified":1597511800996},{"_id":"themes/tranquilpeak/source/assets/css/all.css","hash":"5244302dc004caa8d255a74db305ca3308a33b67","modified":1597511800988},{"_id":"themes/tranquilpeak/source/assets/css/tranquilpeak.css","hash":"fccd55b879d432eeba95c58fecb4c1f7e78fdb83","modified":1597511800988},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-brands-400.woff","hash":"3023db69a482111f7a17f29cee621a933cc5f4b9","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-brands-400.woff2","hash":"3a175545f961094f3614f208f2166187b642355f","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-solid-900.woff","hash":"120dab7a8a93da819ab3025da6a9f3d3ccd65cce","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-solid-900.woff2","hash":"af776f52d579da211590e0691d554b88a69dfe61","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/images/avatar.jpg","hash":"937c65e60e6825cdc080818f552d28e38a6fc181","modified":1597553135818},{"_id":"themes/tranquilpeak/source/assets/images/logo-algolia-nebula-blue-full.svg","hash":"d5e4426b6bd2d8b8c3f477f83d348d8f3b3ec1ca","modified":1597511800976},{"_id":"themes/tranquilpeak/tasks/register/compileAssets.js","hash":"a65122ba0d1a1b6044e3b635a644882577b628ba","modified":1586813095000},{"_id":"themes/tranquilpeak/source/assets/css/style-spzjrm9no8kcbknku5bsn1dr9dpp94iq1g86qdztxtoqwlgtrnwyi2tucypv.min.css","hash":"9a48b4ab6421c394fa299f75e53f52f203b8031b","modified":1597511801936},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-brands-400.eot","hash":"e6feaa7a93ad42acb348529c9a684a0cf5cbf2ee","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-brands-400.ttf","hash":"d9b2f287f46c950737c434e4153777968a73cecc","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-regular-400.svg","hash":"53983550b89268aff9bbe00cbde3ef423c00716f","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/js/jquery.fancybox.js","hash":"048f1f8464eba59ccc706250693bc2ab060098a9","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/js/gitment.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1597511800812},{"_id":"themes/tranquilpeak/source/assets/css/style.css","hash":"b0ab5c4db42e22edac04fa05bb887e2ea46d04f2","modified":1597511801000},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-solid-900.eot","hash":"e13aaeda706af85d9382d7c39f5a3f79d612cd31","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/js/algoliasearch.js","hash":"6948fcdf071e4983e784e8c458cf201536f77792","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/js/script-karbquxnkadaf4yf1hq6g6fyv6nvvrwpv3vf2u1wz8k7osddfqtxf5wbfcfg.min.js","hash":"7ae95cfeeaa668775d426aa5e7f6aea91569215a","modified":1597511805992},{"_id":"themes/tranquilpeak/source/_images/cover.jpg","hash":"df915f5b3eeed6bad93a183f65e5c6f536e551fe","modified":1586813095000},{"_id":"themes/tranquilpeak/source/assets/js/jquery.js","hash":"7faa15a054093f3b5d674e63b6567c835a6fa217","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-solid-900.ttf","hash":"481530e4da272092a90415b3403b4e533416e295","modified":499162500000},{"_id":"themes/tranquilpeak/package-lock.json","hash":"b16b710fe54258616f29cc821afdb6b2f01727ad","modified":1586813095000},{"_id":"themes/tranquilpeak/source/assets/images/cover-v1.2.0.jpg","hash":"a98b9bf4d6be3af0156c0b6e781f067e343a682d","modified":1597511800976},{"_id":"themes/tranquilpeak/source/assets/images/cover.jpg","hash":"df915f5b3eeed6bad93a183f65e5c6f536e551fe","modified":1597511800976},{"_id":"themes/tranquilpeak/source/_images/cover-v1.2.0.jpg","hash":"a98b9bf4d6be3af0156c0b6e781f067e343a682d","modified":1586813095000},{"_id":"themes/tranquilpeak/source/assets/js/moment-with-locales.js","hash":"67e795cf9f15093505f4886267f1ba0d234659e9","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/js/script.js","hash":"a8a3124ad02f5ba5fb75ff916c1d804405bdb01c","modified":1597511801008},{"_id":"themes/tranquilpeak/source/assets/js/gitalk.js","hash":"adfac600bc92ac1714874ac6022bb5bfffe0161c","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-brands-400.svg","hash":"8730dd14f32b5c64c935b7d0d583589703fc6dd7","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-solid-900.svg","hash":"cae06b2de99cc3f05225d54eb630352dc40dc6ef","modified":499162500000},{"_id":"public/atom.xml","hash":"24491eae6c1e73a7439dd26b9a84534969dd85bc","modified":1598169106678},{"_id":"public/about/index.html","hash":"3f46c9b70ae1e2842265d5bd1dff06e8132f9fb7","modified":1598169106678},{"_id":"public/categories/index.html","hash":"fa9b2477e7fb6f8e3aef66c4dfaf04d2602f9bb9","modified":1598169106678},{"_id":"public/tags/index.html","hash":"1c283e7037b079aeef4ba8e035781078da5bc1aa","modified":1598169106678},{"_id":"public/top/index.html","hash":"4aafb3d7025a46a1a39e7a024c01e0c4d0204c66","modified":1598169106678},{"_id":"public/archives/2019/10/index.html","hash":"ecc6af2153b075ceb2c3276c178099a1c9bb4d1e","modified":1598169106678},{"_id":"public/archives/2020/04/index.html","hash":"4df22055962a8310c1c04275f8ad52cc3d4935b6","modified":1598169106678},{"_id":"public/archives/2020/05/index.html","hash":"5af8c14be9e942f1eb5ffdf46f070cfa89e03e30","modified":1598169106678},{"_id":"public/archives/2020/07/index.html","hash":"748b0d79abbf820d6cede008dbc333c7f0c55856","modified":1598169106678},{"_id":"public/categories/Math/index.html","hash":"58a39b6e9db71ac52d12b576ad800a5296039fa3","modified":1598169106678},{"_id":"public/categories/Bitcoin/index.html","hash":"c15c3a7bdb22035f652166d781f7f4e459e190dd","modified":1598169106678},{"_id":"public/categories/Leetcode/index.html","hash":"cd9895d4a180582d6196759a82dae3017aebba7a","modified":1598169106678},{"_id":"public/categories/C/index.html","hash":"c5105686f14b51b8f3da9288a4c562b6edc674e5","modified":1598169106678},{"_id":"public/categories/JVM/index.html","hash":"daa49aa50c5fa0c6497e221940d3e1ac5ca7b6ec","modified":1598169106678},{"_id":"public/categories/MiddleWare/index.html","hash":"1673d2520ca5b5dd62d34557c5ec8fd8657acbed","modified":1598169106678},{"_id":"public/categories/DB/index.html","hash":"b516f273d61fa91c12b5de437d28f926799e0545","modified":1598169106678},{"_id":"public/categories/Spring/index.html","hash":"708ec5d49ac4576ba5219c168820e7e9897c68ed","modified":1598169106678},{"_id":"public/categories/Tensorflow/index.html","hash":"a493051c3c61b265e32b356a1bcb02be6b77e3ff","modified":1598169106678},{"_id":"public/tags/fs/index.html","hash":"8da3255a7cfbd452794f5a4beb5aedc1c4c3555b","modified":1598169106678},{"_id":"public/tags/PermutationAndCombination/index.html","hash":"c29597acda7a4e2fa51329a33e73be43fbe1441c","modified":1598169106678},{"_id":"public/tags/parobablity-Statics/index.html","hash":"6b2e8d6070000d790d3e2d1f4e8ff5a89ff7e933","modified":1598169106678},{"_id":"public/tags/annatation-reflect/index.html","hash":"a0f396a099914cae20dcb1629b1c2d9dfdcda5d4","modified":1598169106678},{"_id":"public/tags/Windows/index.html","hash":"051241a601d0d646972dd4dea072ce4364a5ccff","modified":1598169106678},{"_id":"public/tags/bitwise/index.html","hash":"79c272400168edbe01d91f3aea42416646a2fe29","modified":1598169106678},{"_id":"public/tags/密码学/index.html","hash":"caf8c4f3de7cebe5f3e2098e41de8bad06bade14","modified":1598169106678},{"_id":"public/tags/数据结构/index.html","hash":"b6d45d837071f2c2803e78d9edbbc615c35e59e5","modified":1598169106678},{"_id":"public/tags/principle/index.html","hash":"5fad6103394771339f5ce263b8445e2be19a8138","modified":1598169106678},{"_id":"public/tags/algorithm/index.html","hash":"6cf233a07566e6fc958210e91f4977e82a18737e","modified":1598169106678},{"_id":"public/tags/LeetCode/index.html","hash":"a4a790e1e7ca36e6b612b12382b7a0de350ba0c1","modified":1598169106678},{"_id":"public/tags/design-patterns/index.html","hash":"d33299a66027de09768d2cbe3d7a13c76f7f1dda","modified":1598169106678},{"_id":"public/tags/gcd/index.html","hash":"a22c5c330c9ff3e9dd1436831415c8061c627874","modified":1598169106678},{"_id":"public/tags/test/index.html","hash":"407597da77797b283f91e1c60589595dd66fe0fd","modified":1598169106678},{"_id":"public/tags/hashmap-data-structure/index.html","hash":"46f879ace705ff1dd7068e596498f6b66fba3a3a","modified":1598169106678},{"_id":"public/tags/http/index.html","hash":"6abbd9e3808539711fa11092b6641d86c9631701","modified":1598169106678},{"_id":"public/tags/https/index.html","hash":"2e1b52d0080a4d1aeddc44acf3ab64587ea3db2a","modified":1598169106678},{"_id":"public/tags/JavaFX/index.html","hash":"5904d56fc2842ed1398e2e324fe23c9eafcc2e31","modified":1598169106678},{"_id":"public/tags/jvm/index.html","hash":"1e9d50e16c601e0f07d5d6981a3f5b5c1c701b0d","modified":1598169106678},{"_id":"public/tags/kafka/index.html","hash":"f49e17f800ee76ce04deda6dafe4d4961c2d5df9","modified":1598169106678},{"_id":"public/tags/kmp/index.html","hash":"790744ef79de0dc06ce3bfa912eec5a29e632498","modified":1598169106678},{"_id":"public/tags/dp/index.html","hash":"4b6d391af38ec3317212fa3ee75178b5ad98eded","modified":1598169106678},{"_id":"public/tags/utils/index.html","hash":"03606ae1f8b49984c9f925329a23e246e78014e3","modified":1598169106678},{"_id":"public/tags/lcs/index.html","hash":"05bcfc9da9e13a5b5082444a152f0c11f4b381c7","modified":1598169106678},{"_id":"public/tags/recursion/index.html","hash":"2fce866a3bb67eee47e578cd9ff1a253195a1000","modified":1598169106678},{"_id":"public/tags/lock/index.html","hash":"ad0f1158971abd06aa7126030f333f33b5619a0b","modified":1598169106678},{"_id":"public/tags/mybatis/index.html","hash":"a6d4479510bab31048826c0d72ffa10aeaeadb0a","modified":1598169106678},{"_id":"public/tags/redis/index.html","hash":"43cb03c053b618a5960961786bcd6f76c8a56f88","modified":1598169106678},{"_id":"public/tags/nosql/index.html","hash":"70f4904203d8572951a582a75f6a176def7578e6","modified":1598169106678},{"_id":"public/tags/regex/index.html","hash":"47a94a45b5bbd3355a33fd2956f005106bf3049b","modified":1598169106678},{"_id":"public/tags/aop/index.html","hash":"b1e314684b52513dd204cb86a6d0103f1b80b5f7","modified":1598169106678},{"_id":"public/tags/static/index.html","hash":"35e93dc7d02d2b97b047a46018467c1be59591da","modified":1598169106678},{"_id":"public/tags/final/index.html","hash":"4a94379cac451dc7cc1aa16f92b072462187b835","modified":1598169106678},{"_id":"public/tags/tensorflow/index.html","hash":"dee5add0be6ade6fc4780082ccd983a029f12a0d","modified":1598169106678},{"_id":"public/tags/python/index.html","hash":"2273dc78079dc2824606440800bfe4ba427b83e9","modified":1598169106678},{"_id":"public/tags/springboot/index.html","hash":"a13d357df46026110d7b4c75314b375ca9006214","modified":1598169106678},{"_id":"public/tags/thymeleaf/index.html","hash":"ad8390ef0e2f0c0b51dfa1b2fd684c5a88312703","modified":1598169106678},{"_id":"public/tags/vim/index.html","hash":"64e62c005b9e5e1daf7919d00d16fb79cb001e26","modified":1598169106678},{"_id":"public/tags/activemq/index.html","hash":"4ee2c9d8a8810d40cc7daa80fbbab6914e4ba830","modified":1598169106678},{"_id":"public/all-archives/index.html","hash":"fda0db59fcf28484dfc3751ab2f1b45a18dc6086","modified":1598169106678},{"_id":"public/all-categories/index.html","hash":"228b333563f3b9a6f330f879caf73054d5b4ba1c","modified":1598169106678},{"_id":"public/all-tags/index.html","hash":"2561d7977649b395f91f4162b833c85697b12660","modified":1598169106678},{"_id":"public/2020/08/23/contest203/index.html","hash":"ada349f1f6800413c53d467d81c160fff2335a6f","modified":1598169106678},{"_id":"public/2020/08/20/hashmap/index.html","hash":"14b4d2548faabca5df9f4edcf0cf31962ce780ae","modified":1598169106678},{"_id":"public/2020/08/16/contest202/index.html","hash":"0a1ae340ec782390aa785376b3c372eb7ff36838","modified":1598169106678},{"_id":"public/2020/08/09/contest201/index.html","hash":"0d221d0711d22cb6ad62d1bb8769a1d5ee7ee194","modified":1598169106678},{"_id":"public/2020/08/05/mybatis/index.html","hash":"b421e64375d5cfcdde6268a38674ab8e16258e52","modified":1598169106678},{"_id":"public/2020/08/02/contest200/index.html","hash":"e86044f6759be805525907b816548d6e18f965a3","modified":1598169106678},{"_id":"public/2020/07/20/lock/index.html","hash":"ef15f51d1c3261abae83a3994a93c5ef33bc6b0c","modified":1598169106678},{"_id":"public/2020/07/20/volatile/index.html","hash":"20ad7c4a52a2ede2e86bbcc8ae0c409b3edd34c5","modified":1598169106678},{"_id":"public/2020/07/20/mq/index.html","hash":"90f8851002fbb6626e5f6a2b9d4390c4f30842e3","modified":1598169106678},{"_id":"public/2020/06/27/subsets/index.html","hash":"0cdb3acfff4f842a152f8884476689e0c5ecde4e","modified":1598169106678},{"_id":"public/2020/06/22/goodleTest/index.html","hash":"0d7ecb09309e7e21382fb06b92b7cb86911e0d8c","modified":1598169106678},{"_id":"public/2020/06/12/decorating/index.html","hash":"b52b667fea10cb5bc8382939c3ed2df038ac9ed2","modified":1598169106678},{"_id":"public/2020/06/12/observer/index.html","hash":"058be48d290b118534b1d33be1fca7af15566005","modified":1598169106678},{"_id":"public/2020/06/09/FS/index.html","hash":"23a5e75f769f6d2f32ee4da8f801eacc2b98f8d7","modified":1598169106678},{"_id":"public/2020/06/09/redis/index.html","hash":"48a6f02ffcedf5b2d0931b02faa494b0869b405b","modified":1598169106678},{"_id":"public/2020/06/06/heap/index.html","hash":"8d9a60ef35e030c3286e01e994d5c7d2f9252b0f","modified":1598169106678},{"_id":"public/2020/06/01/regex/index.html","hash":"0f1cf8f1ea6c31e1f4172113a81c62b24299f40f","modified":1598169106678},{"_id":"public/2020/06/01/bitwise/index.html","hash":"fbed13edd5ed3c2a72446ab217127a1949bfd912","modified":1598169106678},{"_id":"public/2020/05/30/elasticSearch/index.html","hash":"efe85bc3922746d3e185f2d20d297726509b035a","modified":1598169106678},{"_id":"public/2020/05/27/annotation/index.html","hash":"87fb7ca32015a798ec9883b76231bf55cadcfbd9","modified":1598169106678},{"_id":"public/2020/05/24/jvm/index.html","hash":"3050bd04da78d0a42ac863efa12df59c613bd047","modified":1598169106678},{"_id":"public/2020/04/12/static-final/index.html","hash":"defd17cdbe535145c8daa8adeefe3c07b3dd642f","modified":1598169106678},{"_id":"public/2020/03/28/springAOP/index.html","hash":"ab179f46c2b8cc13ab426eb0299d146718fec48f","modified":1598169106678},{"_id":"public/2020/03/22/gcd/index.html","hash":"2a6e6967bd49f2ed31dfb4cdeea60c155f09ece1","modified":1598169106678},{"_id":"public/2020/03/18/kmp/index.html","hash":"f042322672efa534caa414508aa212b9f1da9613","modified":1598169106678},{"_id":"public/2020/03/14/https/index.html","hash":"97e3578d3391b9542a36825b959ed875d2e3b90a","modified":1598169106678},{"_id":"public/2020/03/07/leecode2/index.html","hash":"141c09447ba42390f167348da0aebed2c21d2f18","modified":1598169106678},{"_id":"public/2020/02/22/tree/index.html","hash":"75d6661e1d7bb3784b90db892d45df59006eb616","modified":1598169106678},{"_id":"public/2020/01/19/vue06/index.html","hash":"cd6970aa5ae44c0f3b0ac20c8390a9f66cc34e21","modified":1598169106678},{"_id":"public/2020/01/19/vue05/index.html","hash":"4d22992433ca8ba3b3124fd61e92ad733ae7e056","modified":1598169106678},{"_id":"public/2020/01/19/vue04/index.html","hash":"d90626f0883d607e1fc2ff43108ba2bc02d6b7b7","modified":1598169106678},{"_id":"public/2020/01/18/vue03/index.html","hash":"f314d1e2a3e81fdd8e767d0441ffcb936316cfac","modified":1598169106678},{"_id":"public/2020/01/17/vue02/index.html","hash":"03bd1b7ec66fb6a5e84c4ee68d914bc6368e3451","modified":1598169106678},{"_id":"public/2020/01/17/vue01/index.html","hash":"6cc77008b19acab89111b805ec30f441d88e4a6d","modified":1598169106678},{"_id":"public/2020/01/12/uml/index.html","hash":"422b177acab22286e1f13c7892e42514e338a9d1","modified":1598169106678},{"_id":"public/2020/01/11/lcoaldatetime/index.html","hash":"7c395d148c7ae5da808b615afc833b2ddb9dd2c4","modified":1598169106678},{"_id":"public/2020/01/05/vim/index.html","hash":"62d08db11d99f86fa06538c8eac435068854c896","modified":1598169106678},{"_id":"public/2019/12/10/leecode/index.html","hash":"14d979a43df2901f3eb0f8c29b63251383e7d16b","modified":1598169106678},{"_id":"public/2019/12/08/tensorflow02/index.html","hash":"08ac60d1949eedee2f42cf7cf858f30ab07c5105","modified":1598169106678},{"_id":"public/2019/12/07/tensorflow01/index.html","hash":"70819fffb179cc795c6fd83866fe596cd6c5c304","modified":1598169106678},{"_id":"public/2019/12/03/kafka/index.html","hash":"f12e1915b90e0adf0dd322d3b7fbe31420014128","modified":1598169106678},{"_id":"public/2019/11/28/restful/index.html","hash":"92a545af73f4bfa2f5291ca3a5064d1768fc1839","modified":1598169106678},{"_id":"public/2019/11/18/javaFX/index.html","hash":"e47077ae4bc46fcf27e0e7afdb9c7c6f6560d48f","modified":1598169106678},{"_id":"public/2019/11/17/bt03/index.html","hash":"2ffeeedf6536e24e7959034506493189c80c3035","modified":1598169106678},{"_id":"public/2019/11/17/bt02/index.html","hash":"ce2eb7a658211c2b15d2e2d3ece0661028bc8ba7","modified":1598169106678},{"_id":"public/2019/11/14/ProbablityAndStatics/index.html","hash":"eab995d6858f76f98c04d0c2a9a93989dd33ae43","modified":1598169106678},{"_id":"public/2019/11/13/thymeleaf01/index.html","hash":"d19b7c1ee0e89b911a993d80869efa932b6feb44","modified":1598169106678},{"_id":"public/2019/11/04/Pascal-s-Triangle/index.html","hash":"3abf28836d467eae76a1866f169762cb5c49c8fa","modified":1598169106678},{"_id":"public/2019/11/03/bt01/index.html","hash":"7404df6bbbd0887ed0a7f29d6e38a4cf688bffda","modified":1598169106678},{"_id":"public/2019/11/02/nginx/index.html","hash":"7d9527978ef7915f64854a18b35ffb642a576a88","modified":1598169106678},{"_id":"public/2019/11/02/swagger/index.html","hash":"3ae093561582d6cec60a4b1cfd97f29a27d77ef3","modified":1598169106678},{"_id":"public/2019/10/31/bat/index.html","hash":"0b36053bbd2d1c8c5fc15a181e54a4f7dde152a7","modified":1598169106678},{"_id":"public/archives/index.html","hash":"6c56d6f1221d707d6fcdfa4f8ab1bd1de6422b94","modified":1598169106678},{"_id":"public/archives/page/2/index.html","hash":"e6d0ce7be0e9dad657c58a73e255c75950dee02e","modified":1598169106678},{"_id":"public/archives/page/3/index.html","hash":"f9d43fdc661d257e55bfd59a249233034ab0a261","modified":1598169106678},{"_id":"public/archives/page/4/index.html","hash":"57e3236dfeb132f776f7365b42e952059231e294","modified":1598169106678},{"_id":"public/archives/page/5/index.html","hash":"a7516ba1b795dc2706fc4c038ea14366aaf4ddea","modified":1598169106678},{"_id":"public/archives/page/6/index.html","hash":"27614ff09994290462221ee84c594e0e03ebec91","modified":1598169106678},{"_id":"public/archives/2019/index.html","hash":"7bc025711d33fa8e8cd511830281d4e76b697942","modified":1598169106678},{"_id":"public/archives/2019/page/2/index.html","hash":"f4bf1ba3b81f8e6f45fef120db230011c62bb247","modified":1598169106678},{"_id":"public/archives/2019/11/index.html","hash":"fdab395075f5476fdac4d9593adf77a01b8475b6","modified":1598169106678},{"_id":"public/archives/2019/12/index.html","hash":"7079800d80bd9aed12baa8394a20722d5214c092","modified":1598169106678},{"_id":"public/archives/2020/index.html","hash":"76fd24eab327717a1b5555dde2ad59a937ab0903","modified":1598169106678},{"_id":"public/archives/2020/page/2/index.html","hash":"95844899c647dff05b5288078aa1d511e03c267f","modified":1598169106678},{"_id":"public/archives/2020/page/3/index.html","hash":"5a86103b2c9bd9c03349d8d87f37066c84c10418","modified":1598169106678},{"_id":"public/archives/2020/page/4/index.html","hash":"d1dbdac3f5f2e934be16a37bc21b4a5b0db50ba5","modified":1598169106678},{"_id":"public/archives/2020/01/index.html","hash":"69a38bfe8fea876732281d1de27ee78f34124201","modified":1598169106678},{"_id":"public/archives/2020/02/index.html","hash":"2263df9f80ce3a8f440066d5d4f7e4a4903022e8","modified":1598169106678},{"_id":"public/archives/2020/03/index.html","hash":"fee30dc99b946fe1c42dfd7c5b186e6838bc3c58","modified":1598169106678},{"_id":"public/archives/2020/06/index.html","hash":"89b7d0052127809cac3bdb9b0177bc135e915950","modified":1598169106678},{"_id":"public/archives/2020/08/index.html","hash":"f3caa59e4fc7cf3066a8daf87005897c503efd74","modified":1598169106678},{"_id":"public/categories/Java/index.html","hash":"a92136bba217f6e49b80ef13afafa2d580e77dc0","modified":1598169106678},{"_id":"public/categories/Java/page/2/index.html","hash":"49dd993f16c9db262b635280ead073391a8617a0","modified":1598169106678},{"_id":"public/categories/Utils/index.html","hash":"c9c79174a5634068105106553bc034b0ebda91ee","modified":1598169106678},{"_id":"public/categories/Leecode/index.html","hash":"b9630a0d84331f94689ec101536608b4eea1572a","modified":1598169106678},{"_id":"public/categories/Network/index.html","hash":"1482afa5b228b6d4b0f373024ee5748563bf62f6","modified":1598169106678},{"_id":"public/categories/Vue/index.html","hash":"4fffe89865304c94458378d531d887c1fb19a207","modified":1598169106678},{"_id":"public/index.html","hash":"69b1622df6a8dcd3e6ea8911f4bbcb364c159e60","modified":1598169106678},{"_id":"public/page/2/index.html","hash":"fa6e423c322174c47ad4cd56ecf13692c1221298","modified":1598169106678},{"_id":"public/page/3/index.html","hash":"648fa1fd907041002502cf497e918a738b0700df","modified":1598169106678},{"_id":"public/page/4/index.html","hash":"a3ca4f63dde9f62399c5b0efc590efa94f8b4305","modified":1598169106678},{"_id":"public/page/5/index.html","hash":"5da98db0599112560430e688ea0e8fe0a4c7cf25","modified":1598169106678},{"_id":"public/page/6/index.html","hash":"248723e5dbe444fd9521d2f257f61c80b372bb34","modified":1598169106678},{"_id":"public/tags/datastructure/index.html","hash":"956f52d6930478901aaeadaaecaa5283324c819c","modified":1598169106678},{"_id":"public/tags/leecode-easy/index.html","hash":"38d25a7ab5a985f8383d122d32657998842f35dd","modified":1598169106678},{"_id":"public/tags/network/index.html","hash":"f59fff676cbcfa9971066742183d6c88fb1a47bb","modified":1598169106678},{"_id":"public/tags/swagger/index.html","hash":"4cd146031d310982d177ac38632096052d5110ce","modified":1598169106678},{"_id":"public/tags/SpringBoot/index.html","hash":"05de2c119db680f6d30855798f9fca4342ef5a4c","modified":1598169106678},{"_id":"public/tags/vue/index.html","hash":"0b4448149ddb6375a700e8cb89f682626cb15160","modified":1598169106678},{"_id":"public/assets/fonts/fa-regular-400.eot","hash":"af1d634a307219795957412a586abaf626f4829b","modified":1598169106678},{"_id":"public/assets/fonts/fa-regular-400.ttf","hash":"bb89a35e00d0ba8a5382cc66809abe3d5cd3e932","modified":1598169106678},{"_id":"public/assets/fonts/fa-regular-400.woff","hash":"dc2741902e041fc638697d76733b6252c68f1f99","modified":1598169106678},{"_id":"public/assets/fonts/fa-regular-400.woff2","hash":"37b761c26708037d19664cebea70416852487087","modified":1598169106678},{"_id":"public/assets/fonts/merriweather-bold-italic.ttf","hash":"c1b8593dc9ddbf1a1a6268d31e08c4041448ed76","modified":1598169106678},{"_id":"public/assets/fonts/merriweather-bold.ttf","hash":"e6d0ffb2d0348d9e22de97e57214b7db795e9513","modified":1598169106678},{"_id":"public/assets/fonts/merriweather-light-italic.ttf","hash":"c3835119c62e78a21cfb33e2de6686fb4a5929a0","modified":1598169106678},{"_id":"public/assets/fonts/merriweather-light.ttf","hash":"69bd3f15962cf91348a133d3d38571a5c67eca65","modified":1598169106678},{"_id":"public/assets/fonts/merriweather.ttf","hash":"d392237948e74246a2fb0d0d886498776a185e54","modified":1598169106678},{"_id":"public/assets/fonts/open-sans-bold.ttf","hash":"3823779db9f51a34658809ce66bdd6ed1145ed8e","modified":1598169106678},{"_id":"public/assets/fonts/open-sans.ttf","hash":"618b78a8f6ffe7e1998eab67268859e2ab54be8e","modified":1598169106678},{"_id":"public/assets/images/logo-algolia-nebula-blue-full.svg","hash":"d5e4426b6bd2d8b8c3f477f83d348d8f3b3ec1ca","modified":1598169106678},{"_id":"public/assets/fonts/fa-brands-400.woff","hash":"3023db69a482111f7a17f29cee621a933cc5f4b9","modified":1598169106678},{"_id":"public/assets/fonts/fa-brands-400.woff2","hash":"3a175545f961094f3614f208f2166187b642355f","modified":1598169106678},{"_id":"public/assets/fonts/fa-solid-900.woff","hash":"120dab7a8a93da819ab3025da6a9f3d3ccd65cce","modified":1598169106678},{"_id":"public/assets/fonts/fa-solid-900.woff2","hash":"af776f52d579da211590e0691d554b88a69dfe61","modified":1598169106678},{"_id":"public/assets/images/avatar.jpg","hash":"937c65e60e6825cdc080818f552d28e38a6fc181","modified":1598169106678},{"_id":"public/assets/fonts/fa-brands-400.eot","hash":"e6feaa7a93ad42acb348529c9a684a0cf5cbf2ee","modified":1598169106678},{"_id":"public/assets/fonts/fa-brands-400.ttf","hash":"d9b2f287f46c950737c434e4153777968a73cecc","modified":1598169106678},{"_id":"public/assets/fonts/fa-regular-400.svg","hash":"53983550b89268aff9bbe00cbde3ef423c00716f","modified":1598169106678},{"_id":"public/assets/css/thumbs.css","hash":"3673ba1f616738f588fe887863846a958343b970","modified":1598169106678},{"_id":"public/assets/js/thumbs.js","hash":"1dacca749bad458211a886d3bcbbeb4600aaceac","modified":1598169106678},{"_id":"public/assets/css/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1598169106678},{"_id":"public/assets/css/jquery.fancybox.css","hash":"e43435fb9eaa918f5b8e35c9e110124b8bd13751","modified":1598169106678},{"_id":"public/assets/css/gitment.css","hash":"7fbb18b73b44ed11193739c55fce53a6f173cf68","modified":1598169106678},{"_id":"public/assets/fonts/fa-solid-900.eot","hash":"e13aaeda706af85d9382d7c39f5a3f79d612cd31","modified":1598169106678},{"_id":"public/assets/fonts/fa-solid-900.ttf","hash":"481530e4da272092a90415b3403b4e533416e295","modified":1598169106678},{"_id":"public/assets/images/cover.jpg","hash":"df915f5b3eeed6bad93a183f65e5c6f536e551fe","modified":1598169106678},{"_id":"public/assets/js/tranquilpeak.js","hash":"ed9d93b9de4037c97c8699b7b9b985ec48c1b25d","modified":1598169106678},{"_id":"public/assets/css/all.css","hash":"5244302dc004caa8d255a74db305ca3308a33b67","modified":1598169106678},{"_id":"public/assets/images/cover-v1.2.0.jpg","hash":"a98b9bf4d6be3af0156c0b6e781f067e343a682d","modified":1598169106678},{"_id":"public/assets/css/tranquilpeak.css","hash":"fccd55b879d432eeba95c58fecb4c1f7e78fdb83","modified":1598169106678},{"_id":"public/assets/js/gitment.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1598169106678},{"_id":"public/assets/js/jquery.fancybox.js","hash":"27f034e5db8c32e268e2959b9a7c1258d36e4510","modified":1598169106678},{"_id":"public/assets/js/script-karbquxnkadaf4yf1hq6g6fyv6nvvrwpv3vf2u1wz8k7osddfqtxf5wbfcfg.min.js","hash":"7ae95cfeeaa668775d426aa5e7f6aea91569215a","modified":1598169106678},{"_id":"public/assets/css/style-spzjrm9no8kcbknku5bsn1dr9dpp94iq1g86qdztxtoqwlgtrnwyi2tucypv.min.css","hash":"9a48b4ab6421c394fa299f75e53f52f203b8031b","modified":1598169106678},{"_id":"public/assets/fonts/fa-brands-400.svg","hash":"8730dd14f32b5c64c935b7d0d583589703fc6dd7","modified":1598169106678},{"_id":"public/assets/js/algoliasearch.js","hash":"6948fcdf071e4983e784e8c458cf201536f77792","modified":1598169106678},{"_id":"public/assets/fonts/fa-solid-900.svg","hash":"cae06b2de99cc3f05225d54eb630352dc40dc6ef","modified":1598169106678},{"_id":"public/assets/css/style.css","hash":"d052a703bbd272dd4f4b4184671d20b4033f4e7b","modified":1598169106678},{"_id":"public/assets/js/jquery.js","hash":"7faa15a054093f3b5d674e63b6567c835a6fa217","modified":1598169106678},{"_id":"public/assets/js/gitalk.js","hash":"0dc919ab7e5da764e4ed3cb1e27078691fec156d","modified":1598169106678},{"_id":"public/assets/js/script.js","hash":"e80fd7908bd121b3058f5528c57cccefe1f7c20f","modified":1598169106678},{"_id":"public/assets/js/moment-with-locales.js","hash":"67e795cf9f15093505f4886267f1ba0d234659e9","modified":1598169106678}],"Category":[{"name":"Java","_id":"cke6smgbf0004byihg7kwdscf"},{"name":"Math","_id":"cke6smgbm000cbyih4breh4cf"},{"name":"Utils","_id":"cke6smgbx000rbyih8b1sbu2t"},{"name":"Bitcoin","_id":"cke6smgc1000ybyiha0dtbl90"},{"name":"Leetcode","_id":"cke6smgce001gbyih3t2zfxyy"},{"name":"Leecode","_id":"cke6smgct0021byih845ceotn"},{"name":"C++","_id":"cke6smgcw0028byih30w389vr"},{"name":"Network","_id":"cke6smgd0002ebyih1ylv9dxw"},{"name":"JVM","_id":"cke6smgd2002lbyihdvwk93lp"},{"name":"MiddleWare","_id":"cke6smgd8002ubyih3ed33otu"},{"name":"DB","_id":"cke6smgdh0038byih80ft33ei"},{"name":"Spring","_id":"cke6smgdk003fbyihc5ao5gf6"},{"name":"Tensorflow","_id":"cke6smgdm003mbyihdgi8axzp"},{"name":"Vue","_id":"cke6smgdw0045byihee6j52tz"}],"Data":[],"Page":[{"title":"about","date":"2019-11-02T16:17:30.000Z","type":"about","_content":"\n姓名：秦绍伟\n\n职业：不入流程序员\n\n爱好：写写代码\n\n----\n\n\nI'm finding a good job.\n\n\n稀里糊涂地过完了大学，初入社会。\n\n目前从事**Java后端**开发，碰巧又接触了微信小程序，页面样式写的还能凑合着看。如今算是个伪全栈。\n\n目前在以下领域浅耕：\n\n- Java\n- Docker Swarm\n- Kafka\n- 微服务\n- Leecode\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-11-03 00:17:30\ntype: about\n---\n\n姓名：秦绍伟\n\n职业：不入流程序员\n\n爱好：写写代码\n\n----\n\n\nI'm finding a good job.\n\n\n稀里糊涂地过完了大学，初入社会。\n\n目前从事**Java后端**开发，碰巧又接触了微信小程序，页面样式写的还能凑合着看。如今算是个伪全栈。\n\n目前在以下领域浅耕：\n\n- Java\n- Docker Swarm\n- Kafka\n- 微服务\n- Leecode\n\n","updated":"2020-08-15T11:25:11.268Z","path":"about/index.html","comments":1,"layout":"page","_id":"cke6smg810000byih6mg6a14p","content":"<p>姓名：秦绍伟</p>\n<p>职业：不入流程序员</p>\n<p>爱好：写写代码</p>\n<hr>\n<p>I’m finding a good job.</p>\n<p>稀里糊涂地过完了大学，初入社会。</p>\n<p>目前从事<strong>Java后端</strong>开发，碰巧又接触了微信小程序，页面样式写的还能凑合着看。如今算是个伪全栈。</p>\n<p>目前在以下领域浅耕：</p>\n<ul>\n<li>Java</li>\n<li>Docker Swarm</li>\n<li>Kafka</li>\n<li>微服务</li>\n<li>Leecode</li>\n</ul>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"","more":"<p>姓名：秦绍伟</p>\n<p>职业：不入流程序员</p>\n<p>爱好：写写代码</p>\n<hr>\n<p>I’m finding a good job.</p>\n<p>稀里糊涂地过完了大学，初入社会。</p>\n<p>目前从事<strong>Java后端</strong>开发，碰巧又接触了微信小程序，页面样式写的还能凑合着看。如今算是个伪全栈。</p>\n<p>目前在以下领域浅耕：</p>\n<ul>\n<li>Java</li>\n<li>Docker Swarm</li>\n<li>Kafka</li>\n<li>微服务</li>\n<li>Leecode</li>\n</ul>\n"},{"title":"all-archives","layout":"all-archives","date":"2020-08-16T04:51:57.000Z","_content":"","source":"all-archives/index.md","raw":"---\ntitle: all-archives\nlayout: all-archives\ndate: 2020-08-16 12:51:57\n---\n","updated":"2020-08-16T04:58:59.619Z","path":"all-archives/index.html","comments":1,"_id":"cke6smgbb0002byihfxm378pg","content":"","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"","more":""},{"title":"all-categories","layout":"all-categories","date":"2020-08-16T04:51:22.000Z","_content":"","source":"all-categories/index.md","raw":"---\ntitle: all-categories\nlayout: all-categories\ndate: 2020-08-16 12:51:22\n---\n","updated":"2020-08-16T04:59:47.010Z","path":"all-categories/index.html","comments":1,"_id":"cke6smgbh0006byih50mme0tv","content":"","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"","more":""},{"title":"all-tags","layout":"all-tags","date":"2020-08-16T04:51:43.000Z","_content":"","source":"all-tags/index.md","raw":"---\ntitle: all-tags\nlayout: all-tags\ndate: 2020-08-16 12:51:43\n---\n","updated":"2020-08-16T04:59:25.642Z","path":"all-tags/index.html","comments":1,"_id":"cke6smgbj0008byih5hlm352j","content":"","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"","more":""},{"title":"categories","date":"2019-11-01T07:35:36.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-11-01 15:35:36\ntype: categories\n---\n","updated":"2020-07-19T17:29:13.366Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cke6smgbl000abyiheyieevzk","content":"","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"","more":""},{"title":"tags","date":"2019-11-01T07:08:49.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-11-01 15:08:49\ntype: tags\n---","updated":"2020-07-19T17:29:13.366Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cke6smgbo000fbyihecii87jl","content":"","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"","more":""},{"title":"top","date":"2019-11-01T13:50:25.000Z","_content":"<div id=\"post-rank\"></div>\n\n<script src=\"//cdn.jsdelivr.net/npm/leancloud-storage@3.10.0/dist/av-min.js\"></script>\n<script>\n  var APP_ID = ******;  //输入个人LeanCloud账号AppID\n  var APP_KEY = ******;  //输入个人LeanCloud账号AppKey\n  AV.init({\n    appId: APP_ID,\n    appKey: APP_KEY\n  });\n\n  var query = new AV.Query('Counter');//表名\n  query.descending('time'); //结果按阅读次数降序排序\n  query.limit(10);  //最终只返回10条结果\n  query.find().then( response => {\n    var content = response.reduce( (accum, {attributes}) => {\n      accum += `<p><div class=\"prefix\">热度 ${attributes.time} ℃</div><div><a href=\"${attributes.url}\">${attributes.title}</a></div></p>`\n      return accum;\n    },\"\")\n    document.querySelector(\"#post-rank\").innerHTML = content;\n  })\n  .catch( error => {\n    console.log(error);\n  });\n</script>\n\n<style type=\"text/css\">\n  #post-rank {\n    text-align: center;\n  }\n  #post-rank .prefix {\n    color: #ff4d4f;\n  }\n</style>","source":"top/index.md","raw":"---\ntitle: top\ndate: 2019-11-01 21:50:25\n---\n<div id=\"post-rank\"></div>\n\n<script src=\"//cdn.jsdelivr.net/npm/leancloud-storage@3.10.0/dist/av-min.js\"></script>\n<script>\n  var APP_ID = ******;  //输入个人LeanCloud账号AppID\n  var APP_KEY = ******;  //输入个人LeanCloud账号AppKey\n  AV.init({\n    appId: APP_ID,\n    appKey: APP_KEY\n  });\n\n  var query = new AV.Query('Counter');//表名\n  query.descending('time'); //结果按阅读次数降序排序\n  query.limit(10);  //最终只返回10条结果\n  query.find().then( response => {\n    var content = response.reduce( (accum, {attributes}) => {\n      accum += `<p><div class=\"prefix\">热度 ${attributes.time} ℃</div><div><a href=\"${attributes.url}\">${attributes.title}</a></div></p>`\n      return accum;\n    },\"\")\n    document.querySelector(\"#post-rank\").innerHTML = content;\n  })\n  .catch( error => {\n    console.log(error);\n  });\n</script>\n\n<style type=\"text/css\">\n  #post-rank {\n    text-align: center;\n  }\n  #post-rank .prefix {\n    color: #ff4d4f;\n  }\n</style>","updated":"2020-07-19T17:29:13.366Z","path":"top/index.html","comments":1,"layout":"page","_id":"cke6smgbq000hbyih7vz05uxd","content":"<div id=\"post-rank\"></div>\n\n<script src=\"//cdn.jsdelivr.net/npm/leancloud-storage@3.10.0/dist/av-min.js\"></script>\n<script>\n  var APP_ID = ******;  //输入个人LeanCloud账号AppID\n  var APP_KEY = ******;  //输入个人LeanCloud账号AppKey\n  AV.init({\n    appId: APP_ID,\n    appKey: APP_KEY\n  });\n\n  var query = new AV.Query('Counter');//表名\n  query.descending('time'); //结果按阅读次数降序排序\n  query.limit(10);  //最终只返回10条结果\n  query.find().then( response => {\n    var content = response.reduce( (accum, {attributes}) => {\n      accum += `<p><div class=\"prefix\">热度 ${attributes.time} ℃</div><div><a href=\"${attributes.url}\">${attributes.title}</a></div></p>`\n      return accum;\n    },\"\")\n    document.querySelector(\"#post-rank\").innerHTML = content;\n  })\n  .catch( error => {\n    console.log(error);\n  });\n</script>\n\n<style type=\"text/css\">\n  #post-rank {\n    text-align: center;\n  }\n  #post-rank .prefix {\n    color: #ff4d4f;\n  }\n</style>","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"","more":"<div id=\"post-rank\"></div>\n\n<script src=\"//cdn.jsdelivr.net/npm/leancloud-storage@3.10.0/dist/av-min.js\"></script>\n<script>\n  var APP_ID = ******;  //输入个人LeanCloud账号AppID\n  var APP_KEY = ******;  //输入个人LeanCloud账号AppKey\n  AV.init({\n    appId: APP_ID,\n    appKey: APP_KEY\n  });\n\n  var query = new AV.Query('Counter');//表名\n  query.descending('time'); //结果按阅读次数降序排序\n  query.limit(10);  //最终只返回10条结果\n  query.find().then( response => {\n    var content = response.reduce( (accum, {attributes}) => {\n      accum += `<p><div class=\"prefix\">热度 ${attributes.time} ℃</div><div><a href=\"${attributes.url}\">${attributes.title}</a></div></p>`\n      return accum;\n    },\"\")\n    document.querySelector(\"#post-rank\").innerHTML = content;\n  })\n  .catch( error => {\n    console.log(error);\n  });\n</script>\n\n<style type=\"text/css\">\n  #post-rank {\n    text-align: center;\n  }\n  #post-rank .prefix {\n    color: #ff4d4f;\n  }\n</style>"}],"Post":[{"title":"FS","date":"2020-06-09T15:41:57.000Z","_content":"\nFastDFS, TFS, GFS, HDFS, OSS ...","source":"_posts/FS.md","raw":"---\ntitle: FS\ndate: 2020-06-09 23:41:57\ncategories: Java\ntags: fs\n---\n\nFastDFS, TFS, GFS, HDFS, OSS ...","slug":"FS","published":1,"updated":"2020-07-19T17:29:13.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgb40001byih3z3d3asz","content":"<p>FastDFS, TFS, GFS, HDFS, OSS …</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"","more":"<p>FastDFS, TFS, GFS, HDFS, OSS …</p>\n"},{"title":"Pascal's Triangle","date":"2019-11-04T05:02:35.000Z","mathjax":true,"_content":"\n读华罗庚的著作《杨辉三角》有感：杨辉三角引申出的杨辉恒等式，利用了排列组合的原理，可以作用在二项式、开方等等的方面，简直amazing。。。。。。。。Btw，练习了Latex语法。\n\n<!--more-->\n\n# 杨辉三角\n\n类似下方的三角形，被称为杨辉三角，外国称其为帕斯卡三角。\n\n```markdown\n   1\n  1 1\n 1 2 1\n1 3 3 1\n.....\n```\n\n\n\n可以推出一般规律：\n\n第n+1行：\n$$\n1, C_n^1, Cn^2, ..., 1\n$$\n\n\n其中，用到了熟悉的组合：\n$$\nC_n^r=\\frac{n(n-1)...(n-r+1)}{r!}=\\frac{n!}{r!(n-r)!}\n$$\n他表示**从n件东西中取出r件东西的组合数**。\n\n从杨辉三角中可以看出：两条斜边都是1，而其余的数都是由其肩上的两个数之和。\n\n于是有了**杨辉恒等式**：\n$$\nC_{n-1}^{r}+C_{n-1}^{r-1}=C_{n}^{r}(r=1,2,3...n)\n$$\n这里是将本没有意义的记号赋予了值：\n$$\nC_{n}^{0}=1, C_{n-1}{n}=0\n$$\n杨辉恒等式的具体证明结果如下：\n$$\nC_{n-1}^{r}+C_{n-1}^{r-1}=\\frac{(n-1)!}{r!(n-1-r)!}+\\frac{(n-1)!}{(r-1)!(n-r)!}\n=\\frac{(n-1)!}{r!(n-r)!}(n-r)+\\frac{(n-1)!}{r!(n-r)!}r=\\frac{n!}{r!(n-r)!}\n=C_{n}^{r}\n$$\n\n### 应用\n\n- 二项式定理\n- 开方\n- 高阶等差级数\n- ……\n\n## 二项式定理\n\n虽然是初中的知识，但是如今换个角度去思考，感觉还蛮新鲜的。而且，以前学的粗糙，没有思考的那么深。先摆个定理：\n$$\n(a+b)^n=a^n+na^{n-1}b+\\frac{n(n-1)}{2!}a^{n-2}b^2+...+b^n =a^n+C_n^1a^{n-1}b+C_n^2a^{n-2}b^2+...+b^n\n$$\n要证明这个**二项式定理**，放在这里当然就是要用到杨辉三角，证明方式是**数学归纳法**。\n\n数学归纳法：\n\n如果有命题\n\n1. 命题对n=1是正确的。\n2. 命题对任一正整数n=k-1为真命题，就可以推出它对n=k也正确。\n\n那么对所有的正整数n都正确。\n\n`证明`：\n\n1. 对于n=1，是显而易见成立的。\n\n2. 假设，对于任一正整数n=k-1是成立的，那么\n   $$\n   (a+b)^k = (a+b)(a+b)^{k-1}=(a+b)(a^{k-1}+C_{k-1}^1a^{k-2}b+...+b^{k-1})=(a^k+C_{k-1}^1a^{k-1}b+..)+(a^{k-1}b+...)\n   $$\n   由杨辉恒等式可得：\n   $$\n   (a+b)^k = a^k+(C_{k-1}^1+1)a^{k-1}b+...=a^k+(C_{k-1}^1+C_{k-1}^0)a^{k-1}b+...=a^k+C_k^1a^{k-1}b+...\n   $$\n   \n   证毕。\n\n#### 二项式定理的周边\n\n- 杨辉三角的第n+1行的数字之后等于2的n次方\n  $$\n  2^n = (1+1)^n = 1 + C_n^1 + C_n^2 + ... + 1\n  $$\n  \n- 交错相加减，所得数为0\n  $$\n  (1-1)^n = [1+(-1)]^n = 1 - C_n^1+C_n^2-...+(-1)^n = 0\n  $$\n  \n\n### Latex\n\n组合：\n\n```latex\nC_{n-1}^{r}, \\tbinom{n}{m}\n```\n\n$$\nC_{n-1}^{r},\\tbinom{n}{m}\n$$\n\n分数：\n\n```latex\n\\frac{(n-1)!}{r!(n-1-r)!}\n```\n\n$$\n\\frac{(n-1)!}{r!(n-1-r)!}\n$$\n\n- note: 如果想使用mathjax，开启latex，需要在头部添加：\n\n  ```properties\n  mathjax: true\n  ```\n\n\n\n\n## 相关\n\n一道leecode数组相关的算法题目，给一个二维数组，输入一个数字，生成相应高度的杨辉三角。\n\n```java\npublic List<List<Integer>> generate(int numRows){\n    if(numRows==0){\n        return null;\n    }\n    List<List<Integer>> result = new ArrayList<>();\n    List<Integer>> pre = new ArrayList<>();\n    pre.add(1);\n    result.add(pre);\n    \n    for(int i=2; i <= numRows; i++){\n        List<Integer> cur = new ArrayList<>();\n        cur.add(1);\n        for(int j=0;j < pre.size()-1; j++){\n            //middle\n            cur.add(pre.get(j) + pre.get(j+1));\n        }\n        cur.add(1);\n        result.add(cur);\n        pre = cur;\n    }\n    return result;\n}\n```\n\n\n\n","source":"_posts/Pascal-s-Triangle.md","raw":"---\ntitle: Pascal's Triangle\ndate: 2019-11-04 13:02:35\ncategories: Math\ntags: PermutationAndCombination\nmathjax: true\n---\n\n读华罗庚的著作《杨辉三角》有感：杨辉三角引申出的杨辉恒等式，利用了排列组合的原理，可以作用在二项式、开方等等的方面，简直amazing。。。。。。。。Btw，练习了Latex语法。\n\n<!--more-->\n\n# 杨辉三角\n\n类似下方的三角形，被称为杨辉三角，外国称其为帕斯卡三角。\n\n```markdown\n   1\n  1 1\n 1 2 1\n1 3 3 1\n.....\n```\n\n\n\n可以推出一般规律：\n\n第n+1行：\n$$\n1, C_n^1, Cn^2, ..., 1\n$$\n\n\n其中，用到了熟悉的组合：\n$$\nC_n^r=\\frac{n(n-1)...(n-r+1)}{r!}=\\frac{n!}{r!(n-r)!}\n$$\n他表示**从n件东西中取出r件东西的组合数**。\n\n从杨辉三角中可以看出：两条斜边都是1，而其余的数都是由其肩上的两个数之和。\n\n于是有了**杨辉恒等式**：\n$$\nC_{n-1}^{r}+C_{n-1}^{r-1}=C_{n}^{r}(r=1,2,3...n)\n$$\n这里是将本没有意义的记号赋予了值：\n$$\nC_{n}^{0}=1, C_{n-1}{n}=0\n$$\n杨辉恒等式的具体证明结果如下：\n$$\nC_{n-1}^{r}+C_{n-1}^{r-1}=\\frac{(n-1)!}{r!(n-1-r)!}+\\frac{(n-1)!}{(r-1)!(n-r)!}\n=\\frac{(n-1)!}{r!(n-r)!}(n-r)+\\frac{(n-1)!}{r!(n-r)!}r=\\frac{n!}{r!(n-r)!}\n=C_{n}^{r}\n$$\n\n### 应用\n\n- 二项式定理\n- 开方\n- 高阶等差级数\n- ……\n\n## 二项式定理\n\n虽然是初中的知识，但是如今换个角度去思考，感觉还蛮新鲜的。而且，以前学的粗糙，没有思考的那么深。先摆个定理：\n$$\n(a+b)^n=a^n+na^{n-1}b+\\frac{n(n-1)}{2!}a^{n-2}b^2+...+b^n =a^n+C_n^1a^{n-1}b+C_n^2a^{n-2}b^2+...+b^n\n$$\n要证明这个**二项式定理**，放在这里当然就是要用到杨辉三角，证明方式是**数学归纳法**。\n\n数学归纳法：\n\n如果有命题\n\n1. 命题对n=1是正确的。\n2. 命题对任一正整数n=k-1为真命题，就可以推出它对n=k也正确。\n\n那么对所有的正整数n都正确。\n\n`证明`：\n\n1. 对于n=1，是显而易见成立的。\n\n2. 假设，对于任一正整数n=k-1是成立的，那么\n   $$\n   (a+b)^k = (a+b)(a+b)^{k-1}=(a+b)(a^{k-1}+C_{k-1}^1a^{k-2}b+...+b^{k-1})=(a^k+C_{k-1}^1a^{k-1}b+..)+(a^{k-1}b+...)\n   $$\n   由杨辉恒等式可得：\n   $$\n   (a+b)^k = a^k+(C_{k-1}^1+1)a^{k-1}b+...=a^k+(C_{k-1}^1+C_{k-1}^0)a^{k-1}b+...=a^k+C_k^1a^{k-1}b+...\n   $$\n   \n   证毕。\n\n#### 二项式定理的周边\n\n- 杨辉三角的第n+1行的数字之后等于2的n次方\n  $$\n  2^n = (1+1)^n = 1 + C_n^1 + C_n^2 + ... + 1\n  $$\n  \n- 交错相加减，所得数为0\n  $$\n  (1-1)^n = [1+(-1)]^n = 1 - C_n^1+C_n^2-...+(-1)^n = 0\n  $$\n  \n\n### Latex\n\n组合：\n\n```latex\nC_{n-1}^{r}, \\tbinom{n}{m}\n```\n\n$$\nC_{n-1}^{r},\\tbinom{n}{m}\n$$\n\n分数：\n\n```latex\n\\frac{(n-1)!}{r!(n-1-r)!}\n```\n\n$$\n\\frac{(n-1)!}{r!(n-1-r)!}\n$$\n\n- note: 如果想使用mathjax，开启latex，需要在头部添加：\n\n  ```properties\n  mathjax: true\n  ```\n\n\n\n\n## 相关\n\n一道leecode数组相关的算法题目，给一个二维数组，输入一个数字，生成相应高度的杨辉三角。\n\n```java\npublic List<List<Integer>> generate(int numRows){\n    if(numRows==0){\n        return null;\n    }\n    List<List<Integer>> result = new ArrayList<>();\n    List<Integer>> pre = new ArrayList<>();\n    pre.add(1);\n    result.add(pre);\n    \n    for(int i=2; i <= numRows; i++){\n        List<Integer> cur = new ArrayList<>();\n        cur.add(1);\n        for(int j=0;j < pre.size()-1; j++){\n            //middle\n            cur.add(pre.get(j) + pre.get(j+1));\n        }\n        cur.add(1);\n        result.add(cur);\n        pre = cur;\n    }\n    return result;\n}\n```\n\n\n\n","slug":"Pascal-s-Triangle","published":1,"updated":"2020-07-19T17:29:13.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgbd0003byiha6jp7izh","content":"<p>读华罗庚的著作《杨辉三角》有感：杨辉三角引申出的杨辉恒等式，利用了排列组合的原理，可以作用在二项式、开方等等的方面，简直amazing。。。。。。。。Btw，练习了Latex语法。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"杨辉三角\"><a href=\"#杨辉三角\" class=\"headerlink\" title=\"杨辉三角\"></a>杨辉三角</h1><p>类似下方的三角形，被称为杨辉三角，外国称其为帕斯卡三角。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   1</span><br><span class=\"line\">  1 1</span><br><span class=\"line\"> 1 2 1</span><br><span class=\"line\">1 3 3 1</span><br><span class=\"line\">.....</span><br></pre></td></tr></table></figure>\n\n\n\n<p>可以推出一般规律：</p>\n<p>第n+1行：<br>$$<br>1, C_n^1, Cn^2, …, 1<br>$$</p>\n<p>其中，用到了熟悉的组合：<br>$$<br>C_n^r=\\frac{n(n-1)…(n-r+1)}{r!}=\\frac{n!}{r!(n-r)!}<br>$$<br>他表示<strong>从n件东西中取出r件东西的组合数</strong>。</p>\n<p>从杨辉三角中可以看出：两条斜边都是1，而其余的数都是由其肩上的两个数之和。</p>\n<p>于是有了<strong>杨辉恒等式</strong>：<br>$$<br>C_{n-1}^{r}+C_{n-1}^{r-1}=C_{n}^{r}(r=1,2,3…n)<br>$$<br>这里是将本没有意义的记号赋予了值：<br>$$<br>C_{n}^{0}=1, C_{n-1}{n}=0<br>$$<br>杨辉恒等式的具体证明结果如下：<br>$$<br>C_{n-1}^{r}+C_{n-1}^{r-1}=\\frac{(n-1)!}{r!(n-1-r)!}+\\frac{(n-1)!}{(r-1)!(n-r)!}<br>=\\frac{(n-1)!}{r!(n-r)!}(n-r)+\\frac{(n-1)!}{r!(n-r)!}r=\\frac{n!}{r!(n-r)!}<br>=C_{n}^{r}<br>$$</p>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><ul>\n<li>二项式定理</li>\n<li>开方</li>\n<li>高阶等差级数</li>\n<li>……</li>\n</ul>\n<h2 id=\"二项式定理\"><a href=\"#二项式定理\" class=\"headerlink\" title=\"二项式定理\"></a>二项式定理</h2><p>虽然是初中的知识，但是如今换个角度去思考，感觉还蛮新鲜的。而且，以前学的粗糙，没有思考的那么深。先摆个定理：<br>$$<br>(a+b)^n=a^n+na^{n-1}b+\\frac{n(n-1)}{2!}a^{n-2}b^2+…+b^n =a^n+C_n^1a^{n-1}b+C_n^2a^{n-2}b^2+…+b^n<br>$$<br>要证明这个<strong>二项式定理</strong>，放在这里当然就是要用到杨辉三角，证明方式是<strong>数学归纳法</strong>。</p>\n<p>数学归纳法：</p>\n<p>如果有命题</p>\n<ol>\n<li>命题对n=1是正确的。</li>\n<li>命题对任一正整数n=k-1为真命题，就可以推出它对n=k也正确。</li>\n</ol>\n<p>那么对所有的正整数n都正确。</p>\n<p><code>证明</code>：</p>\n<ol>\n<li><p>对于n=1，是显而易见成立的。</p>\n</li>\n<li><p>假设，对于任一正整数n=k-1是成立的，那么<br>$$<br>(a+b)^k = (a+b)(a+b)^{k-1}=(a+b)(a^{k-1}+C_{k-1}^1a^{k-2}b+…+b^{k-1})=(a^k+C_{k-1}^1a^{k-1}b+..)+(a^{k-1}b+…)<br>$$<br>由杨辉恒等式可得：<br>$$<br>(a+b)^k = a^k+(C_{k-1}^1+1)a^{k-1}b+…=a^k+(C_{k-1}^1+C_{k-1}^0)a^{k-1}b+…=a^k+C_k^1a^{k-1}b+…<br>$$</p>\n<p>证毕。</p>\n</li>\n</ol>\n<h4 id=\"二项式定理的周边\"><a href=\"#二项式定理的周边\" class=\"headerlink\" title=\"二项式定理的周边\"></a>二项式定理的周边</h4><ul>\n<li><p>杨辉三角的第n+1行的数字之后等于2的n次方<br>$$<br>2^n = (1+1)^n = 1 + C_n^1 + C_n^2 + … + 1<br>$$</p>\n</li>\n<li><p>交错相加减，所得数为0<br>$$<br>(1-1)^n = [1+(-1)]^n = 1 - C_n^1+C_n^2-…+(-1)^n = 0<br>$$</p>\n</li>\n</ul>\n<h3 id=\"Latex\"><a href=\"#Latex\" class=\"headerlink\" title=\"Latex\"></a>Latex</h3><p>组合：</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C_&#123;n-1&#125;^&#123;r&#125;, <span class=\"tag\">\\<span class=\"name\">tbinom</span><span class=\"string\">&#123;n&#125;</span><span class=\"string\">&#123;m&#125;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>$$<br>C_{n-1}^{r},\\tbinom{n}{m}<br>$$</p>\n<p>分数：</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;(n-1)!&#125;</span><span class=\"string\">&#123;r!(n-1-r)!&#125;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>$$<br>\\frac{(n-1)!}{r!(n-1-r)!}<br>$$</p>\n<ul>\n<li><p>note: 如果想使用mathjax，开启latex，需要在头部添加：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mathjax</span>: <span class=\"string\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n</li>\n</ul>\n<h2 id=\"相关\"><a href=\"#相关\" class=\"headerlink\" title=\"相关\"></a>相关</h2><p>一道leecode数组相关的算法题目，给一个二维数组，输入一个数字，生成相应高度的杨辉三角。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; generate(<span class=\"keyword\">int</span> numRows)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(numRows==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    List&lt;Integer&gt;&gt; pre = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    pre.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">    result.add(pre);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>; i &lt;= numRows; i++)&#123;</span><br><span class=\"line\">        List&lt;Integer&gt; cur = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        cur.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j &lt; pre.size()-<span class=\"number\">1</span>; j++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//middle</span></span><br><span class=\"line\">            cur.add(pre.get(j) + pre.get(j+<span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cur.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">        result.add(cur);</span><br><span class=\"line\">        pre = cur;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>读华罗庚的著作《杨辉三角》有感：杨辉三角引申出的杨辉恒等式，利用了排列组合的原理，可以作用在二项式、开方等等的方面，简直amazing。。。。。。。。Btw，练习了Latex语法。</p>","more":"<h1 id=\"杨辉三角\"><a href=\"#杨辉三角\" class=\"headerlink\" title=\"杨辉三角\"></a>杨辉三角</h1><p>类似下方的三角形，被称为杨辉三角，外国称其为帕斯卡三角。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   1</span><br><span class=\"line\">  1 1</span><br><span class=\"line\"> 1 2 1</span><br><span class=\"line\">1 3 3 1</span><br><span class=\"line\">.....</span><br></pre></td></tr></table></figure>\n\n\n\n<p>可以推出一般规律：</p>\n<p>第n+1行：<br>$$<br>1, C_n^1, Cn^2, …, 1<br>$$</p>\n<p>其中，用到了熟悉的组合：<br>$$<br>C_n^r=\\frac{n(n-1)…(n-r+1)}{r!}=\\frac{n!}{r!(n-r)!}<br>$$<br>他表示<strong>从n件东西中取出r件东西的组合数</strong>。</p>\n<p>从杨辉三角中可以看出：两条斜边都是1，而其余的数都是由其肩上的两个数之和。</p>\n<p>于是有了<strong>杨辉恒等式</strong>：<br>$$<br>C_{n-1}^{r}+C_{n-1}^{r-1}=C_{n}^{r}(r=1,2,3…n)<br>$$<br>这里是将本没有意义的记号赋予了值：<br>$$<br>C_{n}^{0}=1, C_{n-1}{n}=0<br>$$<br>杨辉恒等式的具体证明结果如下：<br>$$<br>C_{n-1}^{r}+C_{n-1}^{r-1}=\\frac{(n-1)!}{r!(n-1-r)!}+\\frac{(n-1)!}{(r-1)!(n-r)!}<br>=\\frac{(n-1)!}{r!(n-r)!}(n-r)+\\frac{(n-1)!}{r!(n-r)!}r=\\frac{n!}{r!(n-r)!}<br>=C_{n}^{r}<br>$$</p>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><ul>\n<li>二项式定理</li>\n<li>开方</li>\n<li>高阶等差级数</li>\n<li>……</li>\n</ul>\n<h2 id=\"二项式定理\"><a href=\"#二项式定理\" class=\"headerlink\" title=\"二项式定理\"></a>二项式定理</h2><p>虽然是初中的知识，但是如今换个角度去思考，感觉还蛮新鲜的。而且，以前学的粗糙，没有思考的那么深。先摆个定理：<br>$$<br>(a+b)^n=a^n+na^{n-1}b+\\frac{n(n-1)}{2!}a^{n-2}b^2+…+b^n =a^n+C_n^1a^{n-1}b+C_n^2a^{n-2}b^2+…+b^n<br>$$<br>要证明这个<strong>二项式定理</strong>，放在这里当然就是要用到杨辉三角，证明方式是<strong>数学归纳法</strong>。</p>\n<p>数学归纳法：</p>\n<p>如果有命题</p>\n<ol>\n<li>命题对n=1是正确的。</li>\n<li>命题对任一正整数n=k-1为真命题，就可以推出它对n=k也正确。</li>\n</ol>\n<p>那么对所有的正整数n都正确。</p>\n<p><code>证明</code>：</p>\n<ol>\n<li><p>对于n=1，是显而易见成立的。</p>\n</li>\n<li><p>假设，对于任一正整数n=k-1是成立的，那么<br>$$<br>(a+b)^k = (a+b)(a+b)^{k-1}=(a+b)(a^{k-1}+C_{k-1}^1a^{k-2}b+…+b^{k-1})=(a^k+C_{k-1}^1a^{k-1}b+..)+(a^{k-1}b+…)<br>$$<br>由杨辉恒等式可得：<br>$$<br>(a+b)^k = a^k+(C_{k-1}^1+1)a^{k-1}b+…=a^k+(C_{k-1}^1+C_{k-1}^0)a^{k-1}b+…=a^k+C_k^1a^{k-1}b+…<br>$$</p>\n<p>证毕。</p>\n</li>\n</ol>\n<h4 id=\"二项式定理的周边\"><a href=\"#二项式定理的周边\" class=\"headerlink\" title=\"二项式定理的周边\"></a>二项式定理的周边</h4><ul>\n<li><p>杨辉三角的第n+1行的数字之后等于2的n次方<br>$$<br>2^n = (1+1)^n = 1 + C_n^1 + C_n^2 + … + 1<br>$$</p>\n</li>\n<li><p>交错相加减，所得数为0<br>$$<br>(1-1)^n = [1+(-1)]^n = 1 - C_n^1+C_n^2-…+(-1)^n = 0<br>$$</p>\n</li>\n</ul>\n<h3 id=\"Latex\"><a href=\"#Latex\" class=\"headerlink\" title=\"Latex\"></a>Latex</h3><p>组合：</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C_&#123;n-1&#125;^&#123;r&#125;, <span class=\"tag\">\\<span class=\"name\">tbinom</span><span class=\"string\">&#123;n&#125;</span><span class=\"string\">&#123;m&#125;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>$$<br>C_{n-1}^{r},\\tbinom{n}{m}<br>$$</p>\n<p>分数：</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;(n-1)!&#125;</span><span class=\"string\">&#123;r!(n-1-r)!&#125;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>$$<br>\\frac{(n-1)!}{r!(n-1-r)!}<br>$$</p>\n<ul>\n<li><p>note: 如果想使用mathjax，开启latex，需要在头部添加：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mathjax</span>: <span class=\"string\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n</li>\n</ul>\n<h2 id=\"相关\"><a href=\"#相关\" class=\"headerlink\" title=\"相关\"></a>相关</h2><p>一道leecode数组相关的算法题目，给一个二维数组，输入一个数字，生成相应高度的杨辉三角。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; generate(<span class=\"keyword\">int</span> numRows)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(numRows==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    List&lt;Integer&gt;&gt; pre = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    pre.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">    result.add(pre);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>; i &lt;= numRows; i++)&#123;</span><br><span class=\"line\">        List&lt;Integer&gt; cur = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        cur.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j &lt; pre.size()-<span class=\"number\">1</span>; j++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//middle</span></span><br><span class=\"line\">            cur.add(pre.get(j) + pre.get(j+<span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cur.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">        result.add(cur);</span><br><span class=\"line\">        pre = cur;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"事件的概率","date":"2019-11-14T04:52:44.000Z","mathjax":true,"_content":"\n概率论与数理统计的温习。。。\n\n<!--more-->\n\n# 事件的概率\n\n几个专有名词记了忘，忘了记。。。\n\n**事件**：是指某种情况的陈述，他可能发生，也可能不发生。发生与否要等试验过后才知道结果。。（这个好像是常识，虽然跟实际生活中的“事件”概念不一样）\n\n**古典概率**：设一个试验有*N*个**等可能**的结果，而事件*E*恰包含其中的M个结果，则事件*E*的概率，记为*P(E)*，定义为\n$$\nP(E)=\\frac{M}{N}\n$$\n**古典概率的计算主要基于排列组合**，下面聊聊关于排列组合的几个简单公式：\n\n根据古典概率公式可以看出，他的计算归结为计算两个数M和N，这种计算大多涉及排列组合，二者的区别在于：排列要计较次序而组合不计较（ab和ba是不同的排列，但是是相同的组合）。\n\n\n\n1. ### n个不同的物件中取r（r大于1小于n）个的不同排列总数\n   \n   $$\n   P^n_r=n(n-1)(n-2)...(n-r+1)\n   $$\n从n个物件中取出一个排在队列第一位的取法有*n*种，再取一个排在第二位的取法有*n-1*种……直到取一个排在第*r*位的取法为*n-r+1*种。（think over n-r+1，取完1个以后就变成了n-r，合题)\n   \n   特别，若*r=n*，由上式可得：\n   $$\n   P^n_r=n(n-1)(n-2)...1=n!\n   $$\n*0!*为1，负数的阶乘没有意义。\n   \n\n   \n2. ### n个不同物件中取r（r大于1小于n）个的不同组合数\n   \n   $$\n   C^n_r=\\frac{P^n_r}{r!}=\\frac{n!}{r!(n-r)!}\n   $$\n因为，每一个包含*r*个物件的组合，可以产生*r!*个不同的排列，所以排列数应为组合数的*r!*倍。组合数公式也常称为组合系数。\n   \n   以后会采用更为常用的组合的写法：\n   $$\n   C^n_r=\\tbinom{n}{r}\n$$\n   \n   - 约定1，0！=1\n$$\n     \\tbinom{n}{0}=\\frac{n!}{0!(n-0)!}=1\n$$\n   \n   - 只要*r*为非负整数，*n*无论为何实数，都有意义。\n$$\n     \\tbinom{n}{r}=\\frac{P^n_r}{r!}=\\frac{n(n-1)(n-2)...(n-r+1)}{r!}\n     $$\n     所以可不比限制为自然数。\n     $$\n     \\tbinom{-1}{r}=\\frac{(-1)(-2)(-3)...(-r)}{r!}=(-1)^r\n3. ### 与二项式展开的关系\n\n   组合系数又称为二项式系数: \n   $$\n    (a+b)^n=\\sum_{i=0}^n \\binom{n}{i} a^i b^{n-i}\n   $$\n   \n\n证明：为了产生$a^ib^{n-i}$这一项，在n个(a+b)中，要从其中的i个取出a，另n-i个取出b。从n个中取出i个的不同取法为$\\tbinom{n}{i}$，也就是$a^ib^{n-i}$的系数。\n\n   利用二项式系数的公式还可以推出更多有趣的组合公式：\n\n   - a=b=1\n     $$\n      2^n=\\binom{n}{0}+\\binom{n}{1}+\\binom{n}{2}+...\\binom{n}{n}\n     $$\n     \n   - a=-1, b=1\n     $$\n     0=\\binom{n}{0}-\\binom{n}{1}+\\binom{n}{2}-...(-1)^n\\binom{n}{n}\n     $$\n\n   - 另一个有用的公式，由恒等式\n     $$\n     (1+x)^{m+n}=(1+x)^m (1+x)^n\n     $$\n     即：\n     $$\n     \\sum_{j=0}^{m+n}\\binom{m+n}{j}x^j=\\sum_{j=0}^m\\binom{m}{j} \\sum_{j=0}^n\\binom{n}{j}\n     $$\n\n     比较两边系数x^k得到的（。。不晓得哪里有用 目前来说）\n\n     \n     $$\n     \\binom{m+n}{k} = \\sum_{i=0}^k \\binom{m}{i} \\binom{n}{k-i}\n     $$\n\n     \n\n4. ### *n*个不同物件分成*k*堆，各堆物件数分别为r1,r2...rk的分法\n   \n   $$\n   \\frac{n!}{r_1!..r_k!}\n   $$\n   此处的r都是非负整数，且**分成的堆要计较堆的次序**，这个式子常被称为**多项式系数**，因为他是\n   $$\n   (x_1+x_2+..+x_k)^n\n   $$\n   中的\n   $$\n   x_1^{r_1}...x_k^{r_k}\n   $$\n的系数。。。。（有啥用嘞？）\n   \n\n   \n\n   \n\n证明也不难：\n\n   先从n个中取出r1个作为第一堆，取法为\n$$\n   \\binom{n}{r_1}\n$$\n   在余下的n-1中取出r2个作为第二堆，取法为\n$$\n   \\binom{n-r_1}{r_2}\n$$\n   以此类推，得到全部的不同的分法：\n$$\n   \\binom{n}{r_1}\\binom{n-r_1}{r_2}\\binom{n-r_1-r_2}{r3}...\\binom{n-r_1-r_2-...r_{k-1}}{r_k}\n$$\n   note: n-r1-r2-..r(k-1)=rk 化简后即可得到。\n\n\n\n## 事件的运算、条件概率与独立性\n\n### 事件的互斥与对立\n\n互斥包含对立，对立是互斥的诸多情况中的一种。\n\n### 条件概率\n\n设有两事件A，B，而P(B)不为0，则在给定B发生的条件下A的条件概率，记为P(A|B)，定义为\n$$\nP(A|B)=\\frac{P(AB)}{P(B)}\n$$\n\n\n\n\n### 全概率公式与贝叶斯\n\n\n\n### 贴一些小题\n\n1. 一批产品共N个，其中废品有M个，从中随机取出n个，其中恰好m个废品的概率是？\n2. n双相异的鞋共2n只，随机地分成n堆，每堆2只，各堆都自成一双鞋的概率是？\n3. n个男孩，m个女孩（m<=n+1)随机地排成一列，任意两个女孩都不相邻的概率是？\n4. 口袋里有两盒火柴，每盒n支，每次用火柴时从口袋里随机拿出一盒并用掉一支，到某次会发现取出的那一盒已经空了，此时，另一盒恰好有m支火柴的概率是？\n\n\n\nP=N/M，有利于事件发生的概率除以事件发生的总概率\n\n\n\n### 解\n\n3. 总概率为所有人排成一排，共有排法：\n   $$\n   (n+m)!\n   $$\n   有利于事件发生的排法：\n\n   - 所有男生排成一排，排法为 *n!*， 排好之后女生可以站的位置就是*n+1*个，为了不相邻，将女生安排在这些位置中，则排法为\n     $$\n     \\binom{n+1}{m}\n     $$\n\n   - 安排好女生的站位后，女生之间可以随意调换位置，排法有*m!*种，所以有利于事件发生的排列：\n     $$\n     M=n!\\binom{n+1}{m}m!\n     $$\n     事件发生的概率为：\n     $$\n     P(E)=\\frac{n!\\binom{n+1}{m}m!}{(m+n)!}\n     $$\n     \n\n     \n\n     \n\n   \n\n2. 2n只鞋子，随机分成n堆，每堆2只，分法为：\n   $$\n   \\binom{2n}{r_1}\\binom{2n-r_1}{r_2}...\\binom{2n-r_1-r_2-...r_{k-1}}{r_k}=\\frac{(2n)!}{2^n}\n   $$\n   有利于事件的分法：将每双成对的鞋子绑在一起看作一个物件，一共有n个，分成n堆每堆1个的分法：\n   $$\n   P_1^n=n!\n   $$\n   则P(E)为两个事件的概率相除：\n   $$\n   P(E)=\\frac{M}{N}=\\frac{n!}{\\frac{(2n)!}{2_n}}=\\frac{(n!)2^n}{(2n)!}\n   $$\n   \n\n   \n\n\n\n\n\n\n\n","source":"_posts/ProbablityAndStatics.md","raw":"---\ntitle: 事件的概率\ndate: 2019-11-14 12:52:44\ncategories: Math\ntags: parobablity&Statics\nmathjax: true\n---\n\n概率论与数理统计的温习。。。\n\n<!--more-->\n\n# 事件的概率\n\n几个专有名词记了忘，忘了记。。。\n\n**事件**：是指某种情况的陈述，他可能发生，也可能不发生。发生与否要等试验过后才知道结果。。（这个好像是常识，虽然跟实际生活中的“事件”概念不一样）\n\n**古典概率**：设一个试验有*N*个**等可能**的结果，而事件*E*恰包含其中的M个结果，则事件*E*的概率，记为*P(E)*，定义为\n$$\nP(E)=\\frac{M}{N}\n$$\n**古典概率的计算主要基于排列组合**，下面聊聊关于排列组合的几个简单公式：\n\n根据古典概率公式可以看出，他的计算归结为计算两个数M和N，这种计算大多涉及排列组合，二者的区别在于：排列要计较次序而组合不计较（ab和ba是不同的排列，但是是相同的组合）。\n\n\n\n1. ### n个不同的物件中取r（r大于1小于n）个的不同排列总数\n   \n   $$\n   P^n_r=n(n-1)(n-2)...(n-r+1)\n   $$\n从n个物件中取出一个排在队列第一位的取法有*n*种，再取一个排在第二位的取法有*n-1*种……直到取一个排在第*r*位的取法为*n-r+1*种。（think over n-r+1，取完1个以后就变成了n-r，合题)\n   \n   特别，若*r=n*，由上式可得：\n   $$\n   P^n_r=n(n-1)(n-2)...1=n!\n   $$\n*0!*为1，负数的阶乘没有意义。\n   \n\n   \n2. ### n个不同物件中取r（r大于1小于n）个的不同组合数\n   \n   $$\n   C^n_r=\\frac{P^n_r}{r!}=\\frac{n!}{r!(n-r)!}\n   $$\n因为，每一个包含*r*个物件的组合，可以产生*r!*个不同的排列，所以排列数应为组合数的*r!*倍。组合数公式也常称为组合系数。\n   \n   以后会采用更为常用的组合的写法：\n   $$\n   C^n_r=\\tbinom{n}{r}\n$$\n   \n   - 约定1，0！=1\n$$\n     \\tbinom{n}{0}=\\frac{n!}{0!(n-0)!}=1\n$$\n   \n   - 只要*r*为非负整数，*n*无论为何实数，都有意义。\n$$\n     \\tbinom{n}{r}=\\frac{P^n_r}{r!}=\\frac{n(n-1)(n-2)...(n-r+1)}{r!}\n     $$\n     所以可不比限制为自然数。\n     $$\n     \\tbinom{-1}{r}=\\frac{(-1)(-2)(-3)...(-r)}{r!}=(-1)^r\n3. ### 与二项式展开的关系\n\n   组合系数又称为二项式系数: \n   $$\n    (a+b)^n=\\sum_{i=0}^n \\binom{n}{i} a^i b^{n-i}\n   $$\n   \n\n证明：为了产生$a^ib^{n-i}$这一项，在n个(a+b)中，要从其中的i个取出a，另n-i个取出b。从n个中取出i个的不同取法为$\\tbinom{n}{i}$，也就是$a^ib^{n-i}$的系数。\n\n   利用二项式系数的公式还可以推出更多有趣的组合公式：\n\n   - a=b=1\n     $$\n      2^n=\\binom{n}{0}+\\binom{n}{1}+\\binom{n}{2}+...\\binom{n}{n}\n     $$\n     \n   - a=-1, b=1\n     $$\n     0=\\binom{n}{0}-\\binom{n}{1}+\\binom{n}{2}-...(-1)^n\\binom{n}{n}\n     $$\n\n   - 另一个有用的公式，由恒等式\n     $$\n     (1+x)^{m+n}=(1+x)^m (1+x)^n\n     $$\n     即：\n     $$\n     \\sum_{j=0}^{m+n}\\binom{m+n}{j}x^j=\\sum_{j=0}^m\\binom{m}{j} \\sum_{j=0}^n\\binom{n}{j}\n     $$\n\n     比较两边系数x^k得到的（。。不晓得哪里有用 目前来说）\n\n     \n     $$\n     \\binom{m+n}{k} = \\sum_{i=0}^k \\binom{m}{i} \\binom{n}{k-i}\n     $$\n\n     \n\n4. ### *n*个不同物件分成*k*堆，各堆物件数分别为r1,r2...rk的分法\n   \n   $$\n   \\frac{n!}{r_1!..r_k!}\n   $$\n   此处的r都是非负整数，且**分成的堆要计较堆的次序**，这个式子常被称为**多项式系数**，因为他是\n   $$\n   (x_1+x_2+..+x_k)^n\n   $$\n   中的\n   $$\n   x_1^{r_1}...x_k^{r_k}\n   $$\n的系数。。。。（有啥用嘞？）\n   \n\n   \n\n   \n\n证明也不难：\n\n   先从n个中取出r1个作为第一堆，取法为\n$$\n   \\binom{n}{r_1}\n$$\n   在余下的n-1中取出r2个作为第二堆，取法为\n$$\n   \\binom{n-r_1}{r_2}\n$$\n   以此类推，得到全部的不同的分法：\n$$\n   \\binom{n}{r_1}\\binom{n-r_1}{r_2}\\binom{n-r_1-r_2}{r3}...\\binom{n-r_1-r_2-...r_{k-1}}{r_k}\n$$\n   note: n-r1-r2-..r(k-1)=rk 化简后即可得到。\n\n\n\n## 事件的运算、条件概率与独立性\n\n### 事件的互斥与对立\n\n互斥包含对立，对立是互斥的诸多情况中的一种。\n\n### 条件概率\n\n设有两事件A，B，而P(B)不为0，则在给定B发生的条件下A的条件概率，记为P(A|B)，定义为\n$$\nP(A|B)=\\frac{P(AB)}{P(B)}\n$$\n\n\n\n\n### 全概率公式与贝叶斯\n\n\n\n### 贴一些小题\n\n1. 一批产品共N个，其中废品有M个，从中随机取出n个，其中恰好m个废品的概率是？\n2. n双相异的鞋共2n只，随机地分成n堆，每堆2只，各堆都自成一双鞋的概率是？\n3. n个男孩，m个女孩（m<=n+1)随机地排成一列，任意两个女孩都不相邻的概率是？\n4. 口袋里有两盒火柴，每盒n支，每次用火柴时从口袋里随机拿出一盒并用掉一支，到某次会发现取出的那一盒已经空了，此时，另一盒恰好有m支火柴的概率是？\n\n\n\nP=N/M，有利于事件发生的概率除以事件发生的总概率\n\n\n\n### 解\n\n3. 总概率为所有人排成一排，共有排法：\n   $$\n   (n+m)!\n   $$\n   有利于事件发生的排法：\n\n   - 所有男生排成一排，排法为 *n!*， 排好之后女生可以站的位置就是*n+1*个，为了不相邻，将女生安排在这些位置中，则排法为\n     $$\n     \\binom{n+1}{m}\n     $$\n\n   - 安排好女生的站位后，女生之间可以随意调换位置，排法有*m!*种，所以有利于事件发生的排列：\n     $$\n     M=n!\\binom{n+1}{m}m!\n     $$\n     事件发生的概率为：\n     $$\n     P(E)=\\frac{n!\\binom{n+1}{m}m!}{(m+n)!}\n     $$\n     \n\n     \n\n     \n\n   \n\n2. 2n只鞋子，随机分成n堆，每堆2只，分法为：\n   $$\n   \\binom{2n}{r_1}\\binom{2n-r_1}{r_2}...\\binom{2n-r_1-r_2-...r_{k-1}}{r_k}=\\frac{(2n)!}{2^n}\n   $$\n   有利于事件的分法：将每双成对的鞋子绑在一起看作一个物件，一共有n个，分成n堆每堆1个的分法：\n   $$\n   P_1^n=n!\n   $$\n   则P(E)为两个事件的概率相除：\n   $$\n   P(E)=\\frac{M}{N}=\\frac{n!}{\\frac{(2n)!}{2_n}}=\\frac{(n!)2^n}{(2n)!}\n   $$\n   \n\n   \n\n\n\n\n\n\n\n","slug":"ProbablityAndStatics","published":1,"updated":"2020-08-15T11:23:39.651Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgbi0007byih2a6z4g5o","content":"<p>概率论与数理统计的温习。。。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"事件的概率\"><a href=\"#事件的概率\" class=\"headerlink\" title=\"事件的概率\"></a>事件的概率</h1><p>几个专有名词记了忘，忘了记。。。</p>\n<p><strong>事件</strong>：是指某种情况的陈述，他可能发生，也可能不发生。发生与否要等试验过后才知道结果。。（这个好像是常识，虽然跟实际生活中的“事件”概念不一样）</p>\n<p><strong>古典概率</strong>：设一个试验有<em>N</em>个<strong>等可能</strong>的结果，而事件<em>E</em>恰包含其中的M个结果，则事件<em>E</em>的概率，记为<em>P(E)*，定义为<br>$$<br>P(E)=\\frac{M}{N}<br>$$<br>*</em>古典概率的计算主要基于排列组合**，下面聊聊关于排列组合的几个简单公式：</p>\n<p>根据古典概率公式可以看出，他的计算归结为计算两个数M和N，这种计算大多涉及排列组合，二者的区别在于：排列要计较次序而组合不计较（ab和ba是不同的排列，但是是相同的组合）。</p>\n<ol>\n<li><h3 id=\"n个不同的物件中取r（r大于1小于n）个的不同排列总数\"><a href=\"#n个不同的物件中取r（r大于1小于n）个的不同排列总数\" class=\"headerlink\" title=\"n个不同的物件中取r（r大于1小于n）个的不同排列总数\"></a>n个不同的物件中取r（r大于1小于n）个的不同排列总数</h3><p>$$<br>P^n_r=n(n-1)(n-2)…(n-r+1)<br>$$<br>从n个物件中取出一个排在队列第一位的取法有<em>n</em>种，再取一个排在第二位的取法有<em>n-1</em>种……直到取一个排在第<em>r</em>位的取法为<em>n-r+1</em>种。（think over n-r+1，取完1个以后就变成了n-r，合题)</p>\n<p>特别，若<em>r=n</em>，由上式可得：<br>$$<br>P^n_r=n(n-1)(n-2)…1=n!<br>$$</p>\n</li>\n</ol>\n<p>*0!*为1，负数的阶乘没有意义。</p>\n<ol start=\"2\">\n<li><h3 id=\"n个不同物件中取r（r大于1小于n）个的不同组合数\"><a href=\"#n个不同物件中取r（r大于1小于n）个的不同组合数\" class=\"headerlink\" title=\"n个不同物件中取r（r大于1小于n）个的不同组合数\"></a>n个不同物件中取r（r大于1小于n）个的不同组合数</h3><p>$$<br>C^n_r=\\frac{P^n_r}{r!}=\\frac{n!}{r!(n-r)!}<br>$$<br>因为，每一个包含<em>r</em>个物件的组合，可以产生*r!<em>个不同的排列，所以排列数应为组合数的</em>r!*倍。组合数公式也常称为组合系数。</p>\n<p>以后会采用更为常用的组合的写法：<br>$$<br>C^n_r=\\tbinom{n}{r}<br>$$</p>\n<ul>\n<li><p>约定1，0！=1<br>$$<br>\\tbinom{n}{0}=\\frac{n!}{0!(n-0)!}=1<br>$$</p>\n</li>\n<li><p>只要<em>r</em>为非负整数，<em>n</em>无论为何实数，都有意义。<br>$$<br>\\tbinom{n}{r}=\\frac{P^n_r}{r!}=\\frac{n(n-1)(n-2)…(n-r+1)}{r!}<br>$$<br>所以可不比限制为自然数。<br>$$<br>\\tbinom{-1}{r}=\\frac{(-1)(-2)(-3)…(-r)}{r!}=(-1)^r</p>\n</li>\n</ul>\n</li>\n<li><h3 id=\"与二项式展开的关系\"><a href=\"#与二项式展开的关系\" class=\"headerlink\" title=\"与二项式展开的关系\"></a>与二项式展开的关系</h3><p>组合系数又称为二项式系数:<br>$$<br> (a+b)^n=\\sum_{i=0}^n \\binom{n}{i} a^i b^{n-i}<br>$$</p>\n</li>\n</ol>\n<p>证明：为了产生$a^ib^{n-i}$这一项，在n个(a+b)中，要从其中的i个取出a，另n-i个取出b。从n个中取出i个的不同取法为$\\tbinom{n}{i}$，也就是$a^ib^{n-i}$的系数。</p>\n<p>   利用二项式系数的公式还可以推出更多有趣的组合公式：</p>\n<ul>\n<li><p>a=b=1<br>$$<br> 2^n=\\binom{n}{0}+\\binom{n}{1}+\\binom{n}{2}+…\\binom{n}{n}<br>$$</p>\n</li>\n<li><p>a=-1, b=1<br>$$<br>0=\\binom{n}{0}-\\binom{n}{1}+\\binom{n}{2}-…(-1)^n\\binom{n}{n}<br>$$</p>\n</li>\n<li><p>另一个有用的公式，由恒等式<br>$$<br>(1+x)^{m+n}=(1+x)^m (1+x)^n<br>$$<br>即：<br>$$<br>\\sum_{j=0}^{m+n}\\binom{m+n}{j}x^j=\\sum_{j=0}^m\\binom{m}{j} \\sum_{j=0}^n\\binom{n}{j}<br>$$</p>\n<p>比较两边系数x^k得到的（。。不晓得哪里有用 目前来说）</p>\n</li>\n</ul>\n<pre><code> $$\n \\binom&#123;m+n&#125;&#123;k&#125; = \\sum_&#123;i=0&#125;^k \\binom&#123;m&#125;&#123;i&#125; \\binom&#123;n&#125;&#123;k-i&#125;\n $$</code></pre>\n<ol start=\"4\">\n<li><h3 id=\"n个不同物件分成k堆，各堆物件数分别为r1-r2…rk的分法\"><a href=\"#n个不同物件分成k堆，各堆物件数分别为r1-r2…rk的分法\" class=\"headerlink\" title=\"n个不同物件分成k堆，各堆物件数分别为r1,r2…rk的分法\"></a><em>n</em>个不同物件分成<em>k</em>堆，各堆物件数分别为r1,r2…rk的分法</h3><p>$$<br>\\frac{n!}{r_1!..r_k!}<br>$$<br>此处的r都是非负整数，且<strong>分成的堆要计较堆的次序</strong>，这个式子常被称为<strong>多项式系数</strong>，因为他是<br>$$<br>(x_1+x_2+..+x_k)^n<br>$$<br>中的<br>$$<br>x_1^{r_1}…x_k^{r_k}<br>$$<br>的系数。。。。（有啥用嘞？）</p>\n</li>\n</ol>\n<p>证明也不难：</p>\n<p>   先从n个中取出r1个作为第一堆，取法为<br>$$<br>   \\binom{n}{r_1}<br>$$<br>   在余下的n-1中取出r2个作为第二堆，取法为<br>$$<br>   \\binom{n-r_1}{r_2}<br>$$<br>   以此类推，得到全部的不同的分法：<br>$$<br>   \\binom{n}{r_1}\\binom{n-r_1}{r_2}\\binom{n-r_1-r_2}{r3}…\\binom{n-r_1-r_2-…r_{k-1}}{r_k}<br>$$<br>   note: n-r1-r2-..r(k-1)=rk 化简后即可得到。</p>\n<h2 id=\"事件的运算、条件概率与独立性\"><a href=\"#事件的运算、条件概率与独立性\" class=\"headerlink\" title=\"事件的运算、条件概率与独立性\"></a>事件的运算、条件概率与独立性</h2><h3 id=\"事件的互斥与对立\"><a href=\"#事件的互斥与对立\" class=\"headerlink\" title=\"事件的互斥与对立\"></a>事件的互斥与对立</h3><p>互斥包含对立，对立是互斥的诸多情况中的一种。</p>\n<h3 id=\"条件概率\"><a href=\"#条件概率\" class=\"headerlink\" title=\"条件概率\"></a>条件概率</h3><p>设有两事件A，B，而P(B)不为0，则在给定B发生的条件下A的条件概率，记为P(A|B)，定义为<br>$$<br>P(A|B)=\\frac{P(AB)}{P(B)}<br>$$</p>\n<h3 id=\"全概率公式与贝叶斯\"><a href=\"#全概率公式与贝叶斯\" class=\"headerlink\" title=\"全概率公式与贝叶斯\"></a>全概率公式与贝叶斯</h3><h3 id=\"贴一些小题\"><a href=\"#贴一些小题\" class=\"headerlink\" title=\"贴一些小题\"></a>贴一些小题</h3><ol>\n<li>一批产品共N个，其中废品有M个，从中随机取出n个，其中恰好m个废品的概率是？</li>\n<li>n双相异的鞋共2n只，随机地分成n堆，每堆2只，各堆都自成一双鞋的概率是？</li>\n<li>n个男孩，m个女孩（m&lt;=n+1)随机地排成一列，任意两个女孩都不相邻的概率是？</li>\n<li>口袋里有两盒火柴，每盒n支，每次用火柴时从口袋里随机拿出一盒并用掉一支，到某次会发现取出的那一盒已经空了，此时，另一盒恰好有m支火柴的概率是？</li>\n</ol>\n<p>P=N/M，有利于事件发生的概率除以事件发生的总概率</p>\n<h3 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h3><ol start=\"3\">\n<li><p>总概率为所有人排成一排，共有排法：<br>$$<br>(n+m)!<br>$$<br>有利于事件发生的排法：</p>\n<ul>\n<li><p>所有男生排成一排，排法为 <em>n!<em>， 排好之后女生可以站的位置就是</em>n+1</em>个，为了不相邻，将女生安排在这些位置中，则排法为<br>$$<br>\\binom{n+1}{m}<br>$$</p>\n</li>\n<li><p>安排好女生的站位后，女生之间可以随意调换位置，排法有*m!*种，所以有利于事件发生的排列：<br>$$<br>M=n!\\binom{n+1}{m}m!<br>$$<br>事件发生的概率为：<br>$$<br>P(E)=\\frac{n!\\binom{n+1}{m}m!}{(m+n)!}<br>$$</p>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"2\">\n<li>2n只鞋子，随机分成n堆，每堆2只，分法为：<br>$$<br>\\binom{2n}{r_1}\\binom{2n-r_1}{r_2}…\\binom{2n-r_1-r_2-…r_{k-1}}{r_k}=\\frac{(2n)!}{2^n}<br>$$<br>有利于事件的分法：将每双成对的鞋子绑在一起看作一个物件，一共有n个，分成n堆每堆1个的分法：<br>$$<br>P_1^n=n!<br>$$<br>则P(E)为两个事件的概率相除：<br>$$<br>P(E)=\\frac{M}{N}=\\frac{n!}{\\frac{(2n)!}{2_n}}=\\frac{(n!)2^n}{(2n)!}<br>$$</li>\n</ol>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>概率论与数理统计的温习。。。</p>","more":"<h1 id=\"事件的概率\"><a href=\"#事件的概率\" class=\"headerlink\" title=\"事件的概率\"></a>事件的概率</h1><p>几个专有名词记了忘，忘了记。。。</p>\n<p><strong>事件</strong>：是指某种情况的陈述，他可能发生，也可能不发生。发生与否要等试验过后才知道结果。。（这个好像是常识，虽然跟实际生活中的“事件”概念不一样）</p>\n<p><strong>古典概率</strong>：设一个试验有<em>N</em>个<strong>等可能</strong>的结果，而事件<em>E</em>恰包含其中的M个结果，则事件<em>E</em>的概率，记为<em>P(E)*，定义为<br>$$<br>P(E)=\\frac{M}{N}<br>$$<br>*</em>古典概率的计算主要基于排列组合**，下面聊聊关于排列组合的几个简单公式：</p>\n<p>根据古典概率公式可以看出，他的计算归结为计算两个数M和N，这种计算大多涉及排列组合，二者的区别在于：排列要计较次序而组合不计较（ab和ba是不同的排列，但是是相同的组合）。</p>\n<ol>\n<li><h3 id=\"n个不同的物件中取r（r大于1小于n）个的不同排列总数\"><a href=\"#n个不同的物件中取r（r大于1小于n）个的不同排列总数\" class=\"headerlink\" title=\"n个不同的物件中取r（r大于1小于n）个的不同排列总数\"></a>n个不同的物件中取r（r大于1小于n）个的不同排列总数</h3><p>$$<br>P^n_r=n(n-1)(n-2)…(n-r+1)<br>$$<br>从n个物件中取出一个排在队列第一位的取法有<em>n</em>种，再取一个排在第二位的取法有<em>n-1</em>种……直到取一个排在第<em>r</em>位的取法为<em>n-r+1</em>种。（think over n-r+1，取完1个以后就变成了n-r，合题)</p>\n<p>特别，若<em>r=n</em>，由上式可得：<br>$$<br>P^n_r=n(n-1)(n-2)…1=n!<br>$$</p>\n</li>\n</ol>\n<p>*0!*为1，负数的阶乘没有意义。</p>\n<ol start=\"2\">\n<li><h3 id=\"n个不同物件中取r（r大于1小于n）个的不同组合数\"><a href=\"#n个不同物件中取r（r大于1小于n）个的不同组合数\" class=\"headerlink\" title=\"n个不同物件中取r（r大于1小于n）个的不同组合数\"></a>n个不同物件中取r（r大于1小于n）个的不同组合数</h3><p>$$<br>C^n_r=\\frac{P^n_r}{r!}=\\frac{n!}{r!(n-r)!}<br>$$<br>因为，每一个包含<em>r</em>个物件的组合，可以产生*r!<em>个不同的排列，所以排列数应为组合数的</em>r!*倍。组合数公式也常称为组合系数。</p>\n<p>以后会采用更为常用的组合的写法：<br>$$<br>C^n_r=\\tbinom{n}{r}<br>$$</p>\n<ul>\n<li><p>约定1，0！=1<br>$$<br>\\tbinom{n}{0}=\\frac{n!}{0!(n-0)!}=1<br>$$</p>\n</li>\n<li><p>只要<em>r</em>为非负整数，<em>n</em>无论为何实数，都有意义。<br>$$<br>\\tbinom{n}{r}=\\frac{P^n_r}{r!}=\\frac{n(n-1)(n-2)…(n-r+1)}{r!}<br>$$<br>所以可不比限制为自然数。<br>$$<br>\\tbinom{-1}{r}=\\frac{(-1)(-2)(-3)…(-r)}{r!}=(-1)^r</p>\n</li>\n</ul>\n</li>\n<li><h3 id=\"与二项式展开的关系\"><a href=\"#与二项式展开的关系\" class=\"headerlink\" title=\"与二项式展开的关系\"></a>与二项式展开的关系</h3><p>组合系数又称为二项式系数:<br>$$<br> (a+b)^n=\\sum_{i=0}^n \\binom{n}{i} a^i b^{n-i}<br>$$</p>\n</li>\n</ol>\n<p>证明：为了产生$a^ib^{n-i}$这一项，在n个(a+b)中，要从其中的i个取出a，另n-i个取出b。从n个中取出i个的不同取法为$\\tbinom{n}{i}$，也就是$a^ib^{n-i}$的系数。</p>\n<p>   利用二项式系数的公式还可以推出更多有趣的组合公式：</p>\n<ul>\n<li><p>a=b=1<br>$$<br> 2^n=\\binom{n}{0}+\\binom{n}{1}+\\binom{n}{2}+…\\binom{n}{n}<br>$$</p>\n</li>\n<li><p>a=-1, b=1<br>$$<br>0=\\binom{n}{0}-\\binom{n}{1}+\\binom{n}{2}-…(-1)^n\\binom{n}{n}<br>$$</p>\n</li>\n<li><p>另一个有用的公式，由恒等式<br>$$<br>(1+x)^{m+n}=(1+x)^m (1+x)^n<br>$$<br>即：<br>$$<br>\\sum_{j=0}^{m+n}\\binom{m+n}{j}x^j=\\sum_{j=0}^m\\binom{m}{j} \\sum_{j=0}^n\\binom{n}{j}<br>$$</p>\n<p>比较两边系数x^k得到的（。。不晓得哪里有用 目前来说）</p>\n</li>\n</ul>\n<pre><code> $$\n \\binom&#123;m+n&#125;&#123;k&#125; = \\sum_&#123;i=0&#125;^k \\binom&#123;m&#125;&#123;i&#125; \\binom&#123;n&#125;&#123;k-i&#125;\n $$</code></pre>\n<ol start=\"4\">\n<li><h3 id=\"n个不同物件分成k堆，各堆物件数分别为r1-r2…rk的分法\"><a href=\"#n个不同物件分成k堆，各堆物件数分别为r1-r2…rk的分法\" class=\"headerlink\" title=\"n个不同物件分成k堆，各堆物件数分别为r1,r2…rk的分法\"></a><em>n</em>个不同物件分成<em>k</em>堆，各堆物件数分别为r1,r2…rk的分法</h3><p>$$<br>\\frac{n!}{r_1!..r_k!}<br>$$<br>此处的r都是非负整数，且<strong>分成的堆要计较堆的次序</strong>，这个式子常被称为<strong>多项式系数</strong>，因为他是<br>$$<br>(x_1+x_2+..+x_k)^n<br>$$<br>中的<br>$$<br>x_1^{r_1}…x_k^{r_k}<br>$$<br>的系数。。。。（有啥用嘞？）</p>\n</li>\n</ol>\n<p>证明也不难：</p>\n<p>   先从n个中取出r1个作为第一堆，取法为<br>$$<br>   \\binom{n}{r_1}<br>$$<br>   在余下的n-1中取出r2个作为第二堆，取法为<br>$$<br>   \\binom{n-r_1}{r_2}<br>$$<br>   以此类推，得到全部的不同的分法：<br>$$<br>   \\binom{n}{r_1}\\binom{n-r_1}{r_2}\\binom{n-r_1-r_2}{r3}…\\binom{n-r_1-r_2-…r_{k-1}}{r_k}<br>$$<br>   note: n-r1-r2-..r(k-1)=rk 化简后即可得到。</p>\n<h2 id=\"事件的运算、条件概率与独立性\"><a href=\"#事件的运算、条件概率与独立性\" class=\"headerlink\" title=\"事件的运算、条件概率与独立性\"></a>事件的运算、条件概率与独立性</h2><h3 id=\"事件的互斥与对立\"><a href=\"#事件的互斥与对立\" class=\"headerlink\" title=\"事件的互斥与对立\"></a>事件的互斥与对立</h3><p>互斥包含对立，对立是互斥的诸多情况中的一种。</p>\n<h3 id=\"条件概率\"><a href=\"#条件概率\" class=\"headerlink\" title=\"条件概率\"></a>条件概率</h3><p>设有两事件A，B，而P(B)不为0，则在给定B发生的条件下A的条件概率，记为P(A|B)，定义为<br>$$<br>P(A|B)=\\frac{P(AB)}{P(B)}<br>$$</p>\n<h3 id=\"全概率公式与贝叶斯\"><a href=\"#全概率公式与贝叶斯\" class=\"headerlink\" title=\"全概率公式与贝叶斯\"></a>全概率公式与贝叶斯</h3><h3 id=\"贴一些小题\"><a href=\"#贴一些小题\" class=\"headerlink\" title=\"贴一些小题\"></a>贴一些小题</h3><ol>\n<li>一批产品共N个，其中废品有M个，从中随机取出n个，其中恰好m个废品的概率是？</li>\n<li>n双相异的鞋共2n只，随机地分成n堆，每堆2只，各堆都自成一双鞋的概率是？</li>\n<li>n个男孩，m个女孩（m&lt;=n+1)随机地排成一列，任意两个女孩都不相邻的概率是？</li>\n<li>口袋里有两盒火柴，每盒n支，每次用火柴时从口袋里随机拿出一盒并用掉一支，到某次会发现取出的那一盒已经空了，此时，另一盒恰好有m支火柴的概率是？</li>\n</ol>\n<p>P=N/M，有利于事件发生的概率除以事件发生的总概率</p>\n<h3 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h3><ol start=\"3\">\n<li><p>总概率为所有人排成一排，共有排法：<br>$$<br>(n+m)!<br>$$<br>有利于事件发生的排法：</p>\n<ul>\n<li><p>所有男生排成一排，排法为 <em>n!<em>， 排好之后女生可以站的位置就是</em>n+1</em>个，为了不相邻，将女生安排在这些位置中，则排法为<br>$$<br>\\binom{n+1}{m}<br>$$</p>\n</li>\n<li><p>安排好女生的站位后，女生之间可以随意调换位置，排法有*m!*种，所以有利于事件发生的排列：<br>$$<br>M=n!\\binom{n+1}{m}m!<br>$$<br>事件发生的概率为：<br>$$<br>P(E)=\\frac{n!\\binom{n+1}{m}m!}{(m+n)!}<br>$$</p>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"2\">\n<li>2n只鞋子，随机分成n堆，每堆2只，分法为：<br>$$<br>\\binom{2n}{r_1}\\binom{2n-r_1}{r_2}…\\binom{2n-r_1-r_2-…r_{k-1}}{r_k}=\\frac{(2n)!}{2^n}<br>$$<br>有利于事件的分法：将每双成对的鞋子绑在一起看作一个物件，一共有n个，分成n堆每堆1个的分法：<br>$$<br>P_1^n=n!<br>$$<br>则P(E)为两个事件的概率相除：<br>$$<br>P(E)=\\frac{M}{N}=\\frac{n!}{\\frac{(2n)!}{2_n}}=\\frac{(n!)2^n}{(2n)!}<br>$$</li>\n</ol>"},{"title":"reflect","date":"2020-05-26T16:31:17.000Z","_content":"\njava反射，lang包下的relect包中存放了关于反射相关的实现，通过反射java可以在运行时完成一些动作（如获取值）。反射是框架的基础，平时用的原生注解、自定义注解、以及代理，都离不开反射。\n\n<!-- more -->\n\n# Reflection\n\n在程序执行期间可以通过Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。\n\nNormal: class -> new -> object\n\nReflect: object -> getClass() -> class\n\n## 动态语言\n\n在运行时代码可以根据某些条件改变自身结构。\n\ni.e. Object-C, C#, JavaScrit, PHP, Pthon and etc.\n\n### 静态语言\n\ni.e. Java, C, C++\n\n- Java也有一定的动态性，利用反射机制获得相关特性。\n\n## Class\n\nJava反射的源头，通过对象反射求出类的名字。\n\n在Object类中定义了一个方法，自然而然会被所有子类继承：\n\n> public final Class getClass()\n\n## META_ANNOTATION\n\n- **@Target** 用于描述注解的使用范围\n- **@Retention** 表示需要在什么级别保存该注解信息，描述注解的生命周期（Source<CLASS<**RUNTIME**)，一般默认RUNTIME。\n- @Document 说明注解将被包含在JAVADOC中\n- @Inherited 说明子类可以继承父类的该注解\n\n```java\n@Target({ElementTYpe.TYPE,ELementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface MyAnnotation(){\n    String name() default \"\";\n}\n```\n\n以上是自定义注解的基本格式，内部的参数如`name`则是在使用注解时填写的，`default`表明了他的默认值，同时也说明这个参数是选填的。例如使用时如下：\n\n```java\n@MyAnnotation(name = \"Gloria\")\npublic class TestAnnotation(){\n    \n    @MyAnnotation(name = \"Manny\")\n\tpublic void beLucky(){\n        // do something\n    }    \n}\n```\n\n此外，在框架中使用了注解，一般都是会去处理（当然，谁也不会定义一个毫无用处的注解），我们自定义注解也是一样，通常会与**切面**结合使用。为什么呢？因为注解的出现是为了方便开发，减少代码量（尤其是配置），所以我们会去集中处理标记了某个注解的方法，通过切面我们可以定义标注了某个注解的方法/类来处理他们。\n\n## 原理\n\n用途三三两两就讲完了，其实很多，可以参考源码。下面说说他的实现原理。\n\n我们都知道，反射离不开`Class`，那么他是怎么出现的呢？JVM！这得从类加载开始说起，当java代码编译完后成了字节码文件（xx.class）时jvm就可以加载它啦，通过类加载器，他就成为了Class对象，他的相关结构信息会被保存在方法区。被创建出来的对象存在于堆中，通过反射，可以从对象获取到他的结构信息，有点像通过儿子爸爸很像，通过儿子推理出爸爸的样子。具体什么结构信息呢？加载在方法上、类上的注解。当然更详细的等我看完JVM的书！","source":"_posts/annotation.md","raw":"---\ntitle: reflect\ndate: 2020-05-27 00:31:17\ncategories: Java\ntags: annatation, reflect\n---\n\njava反射，lang包下的relect包中存放了关于反射相关的实现，通过反射java可以在运行时完成一些动作（如获取值）。反射是框架的基础，平时用的原生注解、自定义注解、以及代理，都离不开反射。\n\n<!-- more -->\n\n# Reflection\n\n在程序执行期间可以通过Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。\n\nNormal: class -> new -> object\n\nReflect: object -> getClass() -> class\n\n## 动态语言\n\n在运行时代码可以根据某些条件改变自身结构。\n\ni.e. Object-C, C#, JavaScrit, PHP, Pthon and etc.\n\n### 静态语言\n\ni.e. Java, C, C++\n\n- Java也有一定的动态性，利用反射机制获得相关特性。\n\n## Class\n\nJava反射的源头，通过对象反射求出类的名字。\n\n在Object类中定义了一个方法，自然而然会被所有子类继承：\n\n> public final Class getClass()\n\n## META_ANNOTATION\n\n- **@Target** 用于描述注解的使用范围\n- **@Retention** 表示需要在什么级别保存该注解信息，描述注解的生命周期（Source<CLASS<**RUNTIME**)，一般默认RUNTIME。\n- @Document 说明注解将被包含在JAVADOC中\n- @Inherited 说明子类可以继承父类的该注解\n\n```java\n@Target({ElementTYpe.TYPE,ELementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface MyAnnotation(){\n    String name() default \"\";\n}\n```\n\n以上是自定义注解的基本格式，内部的参数如`name`则是在使用注解时填写的，`default`表明了他的默认值，同时也说明这个参数是选填的。例如使用时如下：\n\n```java\n@MyAnnotation(name = \"Gloria\")\npublic class TestAnnotation(){\n    \n    @MyAnnotation(name = \"Manny\")\n\tpublic void beLucky(){\n        // do something\n    }    \n}\n```\n\n此外，在框架中使用了注解，一般都是会去处理（当然，谁也不会定义一个毫无用处的注解），我们自定义注解也是一样，通常会与**切面**结合使用。为什么呢？因为注解的出现是为了方便开发，减少代码量（尤其是配置），所以我们会去集中处理标记了某个注解的方法，通过切面我们可以定义标注了某个注解的方法/类来处理他们。\n\n## 原理\n\n用途三三两两就讲完了，其实很多，可以参考源码。下面说说他的实现原理。\n\n我们都知道，反射离不开`Class`，那么他是怎么出现的呢？JVM！这得从类加载开始说起，当java代码编译完后成了字节码文件（xx.class）时jvm就可以加载它啦，通过类加载器，他就成为了Class对象，他的相关结构信息会被保存在方法区。被创建出来的对象存在于堆中，通过反射，可以从对象获取到他的结构信息，有点像通过儿子爸爸很像，通过儿子推理出爸爸的样子。具体什么结构信息呢？加载在方法上、类上的注解。当然更详细的等我看完JVM的书！","slug":"annotation","published":1,"updated":"2020-08-20T15:01:48.201Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgbk0009byih7o5a78ht","content":"<p>java反射，lang包下的relect包中存放了关于反射相关的实现，通过反射java可以在运行时完成一些动作（如获取值）。反射是框架的基础，平时用的原生注解、自定义注解、以及代理，都离不开反射。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"Reflection\"><a href=\"#Reflection\" class=\"headerlink\" title=\"Reflection\"></a>Reflection</h1><p>在程序执行期间可以通过Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p>\n<p>Normal: class -&gt; new -&gt; object</p>\n<p>Reflect: object -&gt; getClass() -&gt; class</p>\n<h2 id=\"动态语言\"><a href=\"#动态语言\" class=\"headerlink\" title=\"动态语言\"></a>动态语言</h2><p>在运行时代码可以根据某些条件改变自身结构。</p>\n<p>i.e. Object-C, C#, JavaScrit, PHP, Pthon and etc.</p>\n<h3 id=\"静态语言\"><a href=\"#静态语言\" class=\"headerlink\" title=\"静态语言\"></a>静态语言</h3><p>i.e. Java, C, C++</p>\n<ul>\n<li>Java也有一定的动态性，利用反射机制获得相关特性。</li>\n</ul>\n<h2 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h2><p>Java反射的源头，通过对象反射求出类的名字。</p>\n<p>在Object类中定义了一个方法，自然而然会被所有子类继承：</p>\n<blockquote>\n<p>public final Class getClass()</p>\n</blockquote>\n<h2 id=\"META-ANNOTATION\"><a href=\"#META-ANNOTATION\" class=\"headerlink\" title=\"META_ANNOTATION\"></a>META_ANNOTATION</h2><ul>\n<li><strong>@Target</strong> 用于描述注解的使用范围</li>\n<li><strong>@Retention</strong> 表示需要在什么级别保存该注解信息，描述注解的生命周期（Source&lt;CLASS&lt;<strong>RUNTIME</strong>)，一般默认RUNTIME。</li>\n<li>@Document 说明注解将被包含在JAVADOC中</li>\n<li>@Inherited 说明子类可以继承父类的该注解</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementTYpe.TYPE,ELementType.METHOD&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyAnnotation()&#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">name</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> &quot;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上是自定义注解的基本格式，内部的参数如<code>name</code>则是在使用注解时填写的，<code>default</code>表明了他的默认值，同时也说明这个参数是选填的。例如使用时如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MyAnnotation(name = &quot;Gloria&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> class <span class=\"title\">TestAnnotation</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@MyAnnotation(name = &quot;Manny&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beLucky</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something</span></span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此外，在框架中使用了注解，一般都是会去处理（当然，谁也不会定义一个毫无用处的注解），我们自定义注解也是一样，通常会与<strong>切面</strong>结合使用。为什么呢？因为注解的出现是为了方便开发，减少代码量（尤其是配置），所以我们会去集中处理标记了某个注解的方法，通过切面我们可以定义标注了某个注解的方法/类来处理他们。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>用途三三两两就讲完了，其实很多，可以参考源码。下面说说他的实现原理。</p>\n<p>我们都知道，反射离不开<code>Class</code>，那么他是怎么出现的呢？JVM！这得从类加载开始说起，当java代码编译完后成了字节码文件（xx.class）时jvm就可以加载它啦，通过类加载器，他就成为了Class对象，他的相关结构信息会被保存在方法区。被创建出来的对象存在于堆中，通过反射，可以从对象获取到他的结构信息，有点像通过儿子爸爸很像，通过儿子推理出爸爸的样子。具体什么结构信息呢？加载在方法上、类上的注解。当然更详细的等我看完JVM的书！</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>java反射，lang包下的relect包中存放了关于反射相关的实现，通过反射java可以在运行时完成一些动作（如获取值）。反射是框架的基础，平时用的原生注解、自定义注解、以及代理，都离不开反射。</p>","more":"<h1 id=\"Reflection\"><a href=\"#Reflection\" class=\"headerlink\" title=\"Reflection\"></a>Reflection</h1><p>在程序执行期间可以通过Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p>\n<p>Normal: class -&gt; new -&gt; object</p>\n<p>Reflect: object -&gt; getClass() -&gt; class</p>\n<h2 id=\"动态语言\"><a href=\"#动态语言\" class=\"headerlink\" title=\"动态语言\"></a>动态语言</h2><p>在运行时代码可以根据某些条件改变自身结构。</p>\n<p>i.e. Object-C, C#, JavaScrit, PHP, Pthon and etc.</p>\n<h3 id=\"静态语言\"><a href=\"#静态语言\" class=\"headerlink\" title=\"静态语言\"></a>静态语言</h3><p>i.e. Java, C, C++</p>\n<ul>\n<li>Java也有一定的动态性，利用反射机制获得相关特性。</li>\n</ul>\n<h2 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h2><p>Java反射的源头，通过对象反射求出类的名字。</p>\n<p>在Object类中定义了一个方法，自然而然会被所有子类继承：</p>\n<blockquote>\n<p>public final Class getClass()</p>\n</blockquote>\n<h2 id=\"META-ANNOTATION\"><a href=\"#META-ANNOTATION\" class=\"headerlink\" title=\"META_ANNOTATION\"></a>META_ANNOTATION</h2><ul>\n<li><strong>@Target</strong> 用于描述注解的使用范围</li>\n<li><strong>@Retention</strong> 表示需要在什么级别保存该注解信息，描述注解的生命周期（Source&lt;CLASS&lt;<strong>RUNTIME</strong>)，一般默认RUNTIME。</li>\n<li>@Document 说明注解将被包含在JAVADOC中</li>\n<li>@Inherited 说明子类可以继承父类的该注解</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementTYpe.TYPE,ELementType.METHOD&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyAnnotation()&#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">name</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> &quot;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上是自定义注解的基本格式，内部的参数如<code>name</code>则是在使用注解时填写的，<code>default</code>表明了他的默认值，同时也说明这个参数是选填的。例如使用时如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MyAnnotation(name = &quot;Gloria&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> class <span class=\"title\">TestAnnotation</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@MyAnnotation(name = &quot;Manny&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beLucky</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something</span></span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此外，在框架中使用了注解，一般都是会去处理（当然，谁也不会定义一个毫无用处的注解），我们自定义注解也是一样，通常会与<strong>切面</strong>结合使用。为什么呢？因为注解的出现是为了方便开发，减少代码量（尤其是配置），所以我们会去集中处理标记了某个注解的方法，通过切面我们可以定义标注了某个注解的方法/类来处理他们。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>用途三三两两就讲完了，其实很多，可以参考源码。下面说说他的实现原理。</p>\n<p>我们都知道，反射离不开<code>Class</code>，那么他是怎么出现的呢？JVM！这得从类加载开始说起，当java代码编译完后成了字节码文件（xx.class）时jvm就可以加载它啦，通过类加载器，他就成为了Class对象，他的相关结构信息会被保存在方法区。被创建出来的对象存在于堆中，通过反射，可以从对象获取到他的结构信息，有点像通过儿子爸爸很像，通过儿子推理出爸爸的样子。具体什么结构信息呢？加载在方法上、类上的注解。当然更详细的等我看完JVM的书！</p>"},{"title":"bat","date":"2019-10-31T04:17:08.000Z","_content":"\n# BATCH\n\n扩展名为**bat**或**cmd**。\n\n在用机是Windows系统，想写一个脚本来代替每次写完后重复输入的命令，大致是：\n\n```bash\nhexo clean\nhexo g\nhex d\ngit add . \ngit commit -m \"update\"\ngit push -f\n```\n\n\n\n## 符号\n\n@：  不显示它后边的命令语句，只显示命令执行的结果 \n\n & ： 命令连接符，将两个命令连续执行不用分行 \n\n && ： 当前一个命令成功时，才执行后一个命令，否则不执行 \n\n||：上一个命令执行失败才执行下一个命令\n\n|：管道符号。将上一个命令输出的内容作为下一个命令的输入内容。\n\n\\>：重定向符号。将命令的输出结果重定向到后面的设备文件中，原文件的内容被覆盖。\n\n## idea\n\n可以使用`&&`来完成连续执行命令的过程，并且上一个执行成功时才执行下一个命令。\n\ne.g.:\n\n```bash\nhexo clean && hexo g && hexo d && git add . && git commit -m \"update\" && git push -f\n```\n----\n# BASH\n今天（2019/12/3）打算在Ubuntu上写个同样功能的脚本。。\n\n","source":"_posts/bat.md","raw":"---\ntitle: bat\ndate: 2019-10-31 12:17:08\ncategories: Utils\ntags: Windows\n---\n\n# BATCH\n\n扩展名为**bat**或**cmd**。\n\n在用机是Windows系统，想写一个脚本来代替每次写完后重复输入的命令，大致是：\n\n```bash\nhexo clean\nhexo g\nhex d\ngit add . \ngit commit -m \"update\"\ngit push -f\n```\n\n\n\n## 符号\n\n@：  不显示它后边的命令语句，只显示命令执行的结果 \n\n & ： 命令连接符，将两个命令连续执行不用分行 \n\n && ： 当前一个命令成功时，才执行后一个命令，否则不执行 \n\n||：上一个命令执行失败才执行下一个命令\n\n|：管道符号。将上一个命令输出的内容作为下一个命令的输入内容。\n\n\\>：重定向符号。将命令的输出结果重定向到后面的设备文件中，原文件的内容被覆盖。\n\n## idea\n\n可以使用`&&`来完成连续执行命令的过程，并且上一个执行成功时才执行下一个命令。\n\ne.g.:\n\n```bash\nhexo clean && hexo g && hexo d && git add . && git commit -m \"update\" && git push -f\n```\n----\n# BASH\n今天（2019/12/3）打算在Ubuntu上写个同样功能的脚本。。\n\n","slug":"bat","published":1,"updated":"2020-07-19T17:29:13.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgbl000bbyihbdsp49ax","content":"<h1 id=\"BATCH\"><a href=\"#BATCH\" class=\"headerlink\" title=\"BATCH\"></a>BATCH</h1><p>扩展名为<strong>bat</strong>或<strong>cmd</strong>。</p>\n<p>在用机是Windows系统，想写一个脚本来代替每次写完后重复输入的命令，大致是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hex d</span><br><span class=\"line\">git add . </span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;update&quot;</span></span><br><span class=\"line\">git push -f</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"符号\"><a href=\"#符号\" class=\"headerlink\" title=\"符号\"></a>符号</h2><p>@：  不显示它后边的命令语句，只显示命令执行的结果 </p>\n<p> &amp; ： 命令连接符，将两个命令连续执行不用分行 </p>\n<p> &amp;&amp; ： 当前一个命令成功时，才执行后一个命令，否则不执行 </p>\n<p>||：上一个命令执行失败才执行下一个命令</p>\n<p>|：管道符号。将上一个命令输出的内容作为下一个命令的输入内容。</p>\n<p>&gt;：重定向符号。将命令的输出结果重定向到后面的设备文件中，原文件的内容被覆盖。</p>\n<h2 id=\"idea\"><a href=\"#idea\" class=\"headerlink\" title=\"idea\"></a>idea</h2><p>可以使用<code>&amp;&amp;</code>来完成连续执行命令的过程，并且上一个执行成功时才执行下一个命令。</p>\n<p>e.g.:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; git add . &amp;&amp; git commit -m <span class=\"string\">&quot;update&quot;</span> &amp;&amp; git push -f</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"BASH\"><a href=\"#BASH\" class=\"headerlink\" title=\"BASH\"></a>BASH</h1><p>今天（2019/12/3）打算在Ubuntu上写个同样功能的脚本。。</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"","more":"<h1 id=\"BATCH\"><a href=\"#BATCH\" class=\"headerlink\" title=\"BATCH\"></a>BATCH</h1><p>扩展名为<strong>bat</strong>或<strong>cmd</strong>。</p>\n<p>在用机是Windows系统，想写一个脚本来代替每次写完后重复输入的命令，大致是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hex d</span><br><span class=\"line\">git add . </span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;update&quot;</span></span><br><span class=\"line\">git push -f</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"符号\"><a href=\"#符号\" class=\"headerlink\" title=\"符号\"></a>符号</h2><p>@：  不显示它后边的命令语句，只显示命令执行的结果 </p>\n<p> &amp; ： 命令连接符，将两个命令连续执行不用分行 </p>\n<p> &amp;&amp; ： 当前一个命令成功时，才执行后一个命令，否则不执行 </p>\n<p>||：上一个命令执行失败才执行下一个命令</p>\n<p>|：管道符号。将上一个命令输出的内容作为下一个命令的输入内容。</p>\n<p>&gt;：重定向符号。将命令的输出结果重定向到后面的设备文件中，原文件的内容被覆盖。</p>\n<h2 id=\"idea\"><a href=\"#idea\" class=\"headerlink\" title=\"idea\"></a>idea</h2><p>可以使用<code>&amp;&amp;</code>来完成连续执行命令的过程，并且上一个执行成功时才执行下一个命令。</p>\n<p>e.g.:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; git add . &amp;&amp; git commit -m <span class=\"string\">&quot;update&quot;</span> &amp;&amp; git push -f</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"BASH\"><a href=\"#BASH\" class=\"headerlink\" title=\"BASH\"></a>BASH</h1><p>今天（2019/12/3）打算在Ubuntu上写个同样功能的脚本。。</p>\n"},{"title":"bitwise","date":"2020-06-01T13:11:25.000Z","_content":"\nIntroduction of Java bitwise and operation.\n\n<!-- more -->\n\n# 简介\n\n| 操作符 | 名称         | 描述              |\n| ------ | ------------ | ----------------- |\n| &      | 与           | 1 & 1 = 1 (only)  |\n| \\|     | 或           | 0 \\| 0 = 0 (only) |\n| ^      | 异或         | 1 ^ 0 = 1         |\n| ~      | 非           | ~ 1 = 0           |\n| <<     | 左移         | 右边空出来的补0   |\n| >>     | 带符号位右移 | 最高位补符号位    |\n| >>>    | 无符号位右移 | 左边空出来的补0   |\n\n位操作符仅适用于整数类型（byte, short, int, long）。位操作涉及的字符将转换为整数。所有的位操作符可以构成位赋值操作符，例如=，|=，<<=以及>>>=。\n\n位运算都是补码运算的，其中，负数做补码时，符号位不变，其余取反后加一；运算完成后，再做一遍之前的操作，得到源码。\n\n## 举例\n\n```java\nint a = -1;\n// 11111111111111111111111111111111111(32个1)\nSystem.out.println(Integer.toBinaryString(a));\n// -1\nSystem.out.printlnl(a>>1);\n// 1111111111111111111111111111111111(32个1)\nSystem.out.println(Integer.toBinaryString(a>>1));\n// 2147483647\nSystem.out.println(a>>>1);\n// 0111111111111111111111111111111111(31个1)\nSystem.out.prinlnt(Integer.toBinaryString(a>>>1));\n```\n\n### 分析：\n\n#### a>>1\n\n原码：10000000000000000000000000000001\n\n反码：1111111111111111111111111111111111110\n\n补码：1111111111111111111111111111111111111\n\n补码做运算：11111111111111111111111111111111111111（右移一位，左侧空位用符号位（1）来补）\n\n取反：10000000000000000000000000000000\n\n原码：10000000000000000000000000000001 即 -1.\n\n#### a>>>1\n\n同样是补码运算，只是在后续操作中，将符号位看作是数字，那么该补码就如同正数补码一样。\n\n补码做运算：011111111111111111111111111111111111（右移一位，左侧空位用（0）来补）\n\n正数原码即补码。\n\n# 应用\n\n## HashMap\n\n```java\nstatic final int hash(Object key) {\n        int h;\n        return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n    }\n```\n\n上例代码基于jdk1.8，hashmap获取hash值的示例代码。在该类中使用了大量的`^`, `|`, `<<`, `<<<`等位运算符。\n\n## 奇偶性\n\n```java\n2 & 1; // 0\n8 & 1; // 0\n7 & 1; // 1\n```\n\n1的原码：0001\n\n8的原码：1000\n\n7的原码：0111\n\n奇数的最低位永远是1,偶数的为0.\n\n## 求非重复数字\n\n```markdown\n2 ^ 2 ^ 1 = 1\n4 ^ 2 ^ 1 ^ 1 ^ 2 = 4\n```\n\n两个**相同的数字**做`^`运算时，值为`0`，再结合**交换律**，可以用来找出一组数字中“落单”的数字。\n\n## etc\n\n……\n\n","source":"_posts/bitwise.md","raw":"---\ntitle: bitwise\ndate: 2020-06-01 21:11:25\ncategories: Java\ntags: bitwise\n---\n\nIntroduction of Java bitwise and operation.\n\n<!-- more -->\n\n# 简介\n\n| 操作符 | 名称         | 描述              |\n| ------ | ------------ | ----------------- |\n| &      | 与           | 1 & 1 = 1 (only)  |\n| \\|     | 或           | 0 \\| 0 = 0 (only) |\n| ^      | 异或         | 1 ^ 0 = 1         |\n| ~      | 非           | ~ 1 = 0           |\n| <<     | 左移         | 右边空出来的补0   |\n| >>     | 带符号位右移 | 最高位补符号位    |\n| >>>    | 无符号位右移 | 左边空出来的补0   |\n\n位操作符仅适用于整数类型（byte, short, int, long）。位操作涉及的字符将转换为整数。所有的位操作符可以构成位赋值操作符，例如=，|=，<<=以及>>>=。\n\n位运算都是补码运算的，其中，负数做补码时，符号位不变，其余取反后加一；运算完成后，再做一遍之前的操作，得到源码。\n\n## 举例\n\n```java\nint a = -1;\n// 11111111111111111111111111111111111(32个1)\nSystem.out.println(Integer.toBinaryString(a));\n// -1\nSystem.out.printlnl(a>>1);\n// 1111111111111111111111111111111111(32个1)\nSystem.out.println(Integer.toBinaryString(a>>1));\n// 2147483647\nSystem.out.println(a>>>1);\n// 0111111111111111111111111111111111(31个1)\nSystem.out.prinlnt(Integer.toBinaryString(a>>>1));\n```\n\n### 分析：\n\n#### a>>1\n\n原码：10000000000000000000000000000001\n\n反码：1111111111111111111111111111111111110\n\n补码：1111111111111111111111111111111111111\n\n补码做运算：11111111111111111111111111111111111111（右移一位，左侧空位用符号位（1）来补）\n\n取反：10000000000000000000000000000000\n\n原码：10000000000000000000000000000001 即 -1.\n\n#### a>>>1\n\n同样是补码运算，只是在后续操作中，将符号位看作是数字，那么该补码就如同正数补码一样。\n\n补码做运算：011111111111111111111111111111111111（右移一位，左侧空位用（0）来补）\n\n正数原码即补码。\n\n# 应用\n\n## HashMap\n\n```java\nstatic final int hash(Object key) {\n        int h;\n        return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n    }\n```\n\n上例代码基于jdk1.8，hashmap获取hash值的示例代码。在该类中使用了大量的`^`, `|`, `<<`, `<<<`等位运算符。\n\n## 奇偶性\n\n```java\n2 & 1; // 0\n8 & 1; // 0\n7 & 1; // 1\n```\n\n1的原码：0001\n\n8的原码：1000\n\n7的原码：0111\n\n奇数的最低位永远是1,偶数的为0.\n\n## 求非重复数字\n\n```markdown\n2 ^ 2 ^ 1 = 1\n4 ^ 2 ^ 1 ^ 1 ^ 2 = 4\n```\n\n两个**相同的数字**做`^`运算时，值为`0`，再结合**交换律**，可以用来找出一组数字中“落单”的数字。\n\n## etc\n\n……\n\n","slug":"bitwise","published":1,"updated":"2020-08-08T15:57:25.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgbo000gbyih8tnu9ce3","content":"<p>Introduction of Java bitwise and operation.</p>\n<a id=\"more\"></a>\n\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&amp;</td>\n<td>与</td>\n<td>1 &amp; 1 = 1 (only)</td>\n</tr>\n<tr>\n<td>|</td>\n<td>或</td>\n<td>0 | 0 = 0 (only)</td>\n</tr>\n<tr>\n<td>^</td>\n<td>异或</td>\n<td>1 ^ 0 = 1</td>\n</tr>\n<tr>\n<td>~</td>\n<td>非</td>\n<td>~ 1 = 0</td>\n</tr>\n<tr>\n<td>&lt;&lt;</td>\n<td>左移</td>\n<td>右边空出来的补0</td>\n</tr>\n<tr>\n<td>&gt;&gt;</td>\n<td>带符号位右移</td>\n<td>最高位补符号位</td>\n</tr>\n<tr>\n<td>&gt;&gt;&gt;</td>\n<td>无符号位右移</td>\n<td>左边空出来的补0</td>\n</tr>\n</tbody></table>\n<p>位操作符仅适用于整数类型（byte, short, int, long）。位操作涉及的字符将转换为整数。所有的位操作符可以构成位赋值操作符，例如=，|=，&lt;&lt;=以及&gt;&gt;&gt;=。</p>\n<p>位运算都是补码运算的，其中，负数做补码时，符号位不变，其余取反后加一；运算完成后，再做一遍之前的操作，得到源码。</p>\n<h2 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = -<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 11111111111111111111111111111111111(32个1)</span></span><br><span class=\"line\">System.out.println(Integer.toBinaryString(a));</span><br><span class=\"line\"><span class=\"comment\">// -1</span></span><br><span class=\"line\">System.out.printlnl(a&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// 1111111111111111111111111111111111(32个1)</span></span><br><span class=\"line\">System.out.println(Integer.toBinaryString(a&gt;&gt;<span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"comment\">// 2147483647</span></span><br><span class=\"line\">System.out.println(a&gt;&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// 0111111111111111111111111111111111(31个1)</span></span><br><span class=\"line\">System.out.prinlnt(Integer.toBinaryString(a&gt;&gt;&gt;<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h3><h4 id=\"a-gt-gt-1\"><a href=\"#a-gt-gt-1\" class=\"headerlink\" title=\"a&gt;&gt;1\"></a>a&gt;&gt;1</h4><p>原码：10000000000000000000000000000001</p>\n<p>反码：1111111111111111111111111111111111110</p>\n<p>补码：1111111111111111111111111111111111111</p>\n<p>补码做运算：11111111111111111111111111111111111111（右移一位，左侧空位用符号位（1）来补）</p>\n<p>取反：10000000000000000000000000000000</p>\n<p>原码：10000000000000000000000000000001 即 -1.</p>\n<h4 id=\"a-gt-gt-gt-1\"><a href=\"#a-gt-gt-gt-1\" class=\"headerlink\" title=\"a&gt;&gt;&gt;1\"></a>a&gt;&gt;&gt;1</h4><p>同样是补码运算，只是在后续操作中，将符号位看作是数字，那么该补码就如同正数补码一样。</p>\n<p>补码做运算：011111111111111111111111111111111111（右移一位，左侧空位用（0）来补）</p>\n<p>正数原码即补码。</p>\n<h1 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h1><h2 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> h;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (key == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>上例代码基于jdk1.8，hashmap获取hash值的示例代码。在该类中使用了大量的<code>^</code>, <code>|</code>, <code>&lt;&lt;</code>, <code>&lt;&lt;&lt;</code>等位运算符。</p>\n<h2 id=\"奇偶性\"><a href=\"#奇偶性\" class=\"headerlink\" title=\"奇偶性\"></a>奇偶性</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span> &amp; <span class=\"number\">1</span>; <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"number\">8</span> &amp; <span class=\"number\">1</span>; <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"number\">7</span> &amp; <span class=\"number\">1</span>; <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<p>1的原码：0001</p>\n<p>8的原码：1000</p>\n<p>7的原码：0111</p>\n<p>奇数的最低位永远是1,偶数的为0.</p>\n<h2 id=\"求非重复数字\"><a href=\"#求非重复数字\" class=\"headerlink\" title=\"求非重复数字\"></a>求非重复数字</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 ^ 2 ^ 1 = 1</span><br><span class=\"line\">4 ^ 2 ^ 1 ^ 1 ^ 2 = 4</span><br></pre></td></tr></table></figure>\n\n<p>两个<strong>相同的数字</strong>做<code>^</code>运算时，值为<code>0</code>，再结合<strong>交换律</strong>，可以用来找出一组数字中“落单”的数字。</p>\n<h2 id=\"etc\"><a href=\"#etc\" class=\"headerlink\" title=\"etc\"></a>etc</h2><p>……</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>Introduction of Java bitwise and operation.</p>","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&amp;</td>\n<td>与</td>\n<td>1 &amp; 1 = 1 (only)</td>\n</tr>\n<tr>\n<td>|</td>\n<td>或</td>\n<td>0 | 0 = 0 (only)</td>\n</tr>\n<tr>\n<td>^</td>\n<td>异或</td>\n<td>1 ^ 0 = 1</td>\n</tr>\n<tr>\n<td>~</td>\n<td>非</td>\n<td>~ 1 = 0</td>\n</tr>\n<tr>\n<td>&lt;&lt;</td>\n<td>左移</td>\n<td>右边空出来的补0</td>\n</tr>\n<tr>\n<td>&gt;&gt;</td>\n<td>带符号位右移</td>\n<td>最高位补符号位</td>\n</tr>\n<tr>\n<td>&gt;&gt;&gt;</td>\n<td>无符号位右移</td>\n<td>左边空出来的补0</td>\n</tr>\n</tbody></table>\n<p>位操作符仅适用于整数类型（byte, short, int, long）。位操作涉及的字符将转换为整数。所有的位操作符可以构成位赋值操作符，例如=，|=，&lt;&lt;=以及&gt;&gt;&gt;=。</p>\n<p>位运算都是补码运算的，其中，负数做补码时，符号位不变，其余取反后加一；运算完成后，再做一遍之前的操作，得到源码。</p>\n<h2 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = -<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 11111111111111111111111111111111111(32个1)</span></span><br><span class=\"line\">System.out.println(Integer.toBinaryString(a));</span><br><span class=\"line\"><span class=\"comment\">// -1</span></span><br><span class=\"line\">System.out.printlnl(a&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// 1111111111111111111111111111111111(32个1)</span></span><br><span class=\"line\">System.out.println(Integer.toBinaryString(a&gt;&gt;<span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"comment\">// 2147483647</span></span><br><span class=\"line\">System.out.println(a&gt;&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// 0111111111111111111111111111111111(31个1)</span></span><br><span class=\"line\">System.out.prinlnt(Integer.toBinaryString(a&gt;&gt;&gt;<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h3><h4 id=\"a-gt-gt-1\"><a href=\"#a-gt-gt-1\" class=\"headerlink\" title=\"a&gt;&gt;1\"></a>a&gt;&gt;1</h4><p>原码：10000000000000000000000000000001</p>\n<p>反码：1111111111111111111111111111111111110</p>\n<p>补码：1111111111111111111111111111111111111</p>\n<p>补码做运算：11111111111111111111111111111111111111（右移一位，左侧空位用符号位（1）来补）</p>\n<p>取反：10000000000000000000000000000000</p>\n<p>原码：10000000000000000000000000000001 即 -1.</p>\n<h4 id=\"a-gt-gt-gt-1\"><a href=\"#a-gt-gt-gt-1\" class=\"headerlink\" title=\"a&gt;&gt;&gt;1\"></a>a&gt;&gt;&gt;1</h4><p>同样是补码运算，只是在后续操作中，将符号位看作是数字，那么该补码就如同正数补码一样。</p>\n<p>补码做运算：011111111111111111111111111111111111（右移一位，左侧空位用（0）来补）</p>\n<p>正数原码即补码。</p>\n<h1 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h1><h2 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> h;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (key == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>上例代码基于jdk1.8，hashmap获取hash值的示例代码。在该类中使用了大量的<code>^</code>, <code>|</code>, <code>&lt;&lt;</code>, <code>&lt;&lt;&lt;</code>等位运算符。</p>\n<h2 id=\"奇偶性\"><a href=\"#奇偶性\" class=\"headerlink\" title=\"奇偶性\"></a>奇偶性</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span> &amp; <span class=\"number\">1</span>; <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"number\">8</span> &amp; <span class=\"number\">1</span>; <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"number\">7</span> &amp; <span class=\"number\">1</span>; <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<p>1的原码：0001</p>\n<p>8的原码：1000</p>\n<p>7的原码：0111</p>\n<p>奇数的最低位永远是1,偶数的为0.</p>\n<h2 id=\"求非重复数字\"><a href=\"#求非重复数字\" class=\"headerlink\" title=\"求非重复数字\"></a>求非重复数字</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 ^ 2 ^ 1 = 1</span><br><span class=\"line\">4 ^ 2 ^ 1 ^ 1 ^ 2 = 4</span><br></pre></td></tr></table></figure>\n\n<p>两个<strong>相同的数字</strong>做<code>^</code>运算时，值为<code>0</code>，再结合<strong>交换律</strong>，可以用来找出一组数字中“落单”的数字。</p>\n<h2 id=\"etc\"><a href=\"#etc\" class=\"headerlink\" title=\"etc\"></a>etc</h2><p>……</p>"},{"title":"bt01","date":"2019-11-03T04:41:57.000Z","_content":"\n区块链、比特币、去中心化这些东西说熟不熟，说陌生吧也谈不上陌生，毕竟天天见。趁着周末，给自己冲了电，看了看收藏了好几天的视频，一个关于区块链的北大公开课。。哈哈飘了，竟然听了北大的课^_^\n\n<!--more-->\n\n# 简介\n\n涉及基本数据结构和算法\n\n- 数组\n- 链表\n- 二叉树\n- 哈希函数\n\n参考资料：\n\n- BitCoin and Cryptocurrency Technologies A Comprehensive Introduction\n- 以太坊白皮书、黄皮书、原代码\n- Solidity文档\n\n### 大纲\n\n#### 比特币\n\n- 密码学基础\n- 比特币的数据结构\n- 公式协议和系统实现\n- 挖矿算法和难度调整\n- 比特币脚本\n- 软分叉和硬分叉\n- 匿名和隐私保护\n\n#### 以太坊\n\n- 概述：基于账户的分布式账本\n- 数据结构：状态树、交易树、收据树\n- GHOST协议\n- 挖矿：memory-hard mining puzzle\n- 挖矿难度调整\n- 权益证明\n  - Casper the Friendly Finality Gadget(FFG)\n- 智能合约\n\n## 密码学原理\n\n比特币，虽然被成为加密货币（*crypto-currency*），但是交易信息都是公开的。\n比特币中用到的两个密码学中的两个功能：**哈希**， **签名**。\n\n### 哈希\n\n密码学中用的哈希函数被称为*Cryptographic hash function*, 有两个性质，一个是 *collision resistance*，另一个是 *hiding*。 除了以上两个性质，比特币中用到的哈希函数的性质还有一个：puzzle friendly。\n\n1. collision resistance\n\n   ```\n   var x, y;\n   x != y;\n   有哈希函数H\n   使得\n   H(x)=H(y)\n   ```\n\n   哈希碰撞是客观存在，但是没有高效的方法来人为的方式去造成哈希碰撞。前提是输入空间很大。因为输入空间是有限的，例如256位的哈希值，输出空间位2的256次方。\n\n   collision resistance的使用：\n\n   用来求message的digest，防止篡改。\n\n   理论上证明不出来任何一个哈希函数是collision resistance的，目前是实践经验来证明的。也有一些哈希函数以前被人认为是collision resistance的，后来被证明不具备那个性质，可以认为制造出来。\n\n   **note**：MD5。\n\n2. hiding\n\n   x -> H(x), H(x)不会透露出任何关于x的信息，即是不可逆的。\n\n   可以与第一个性质结合起来用作digital commitment(digital equivalent of a sealed envelope)。相当于第三方托管。前提同样是输入空间要足够大，如果不够大， 可以在做哈希前在后面加入随机数来组成一个数，一同做哈希运算。\n\n3. puzzle friendly\n\n   只看输入，很难猜到哈希函数的输出。如果想要某个区间内的哈希值，没有捷径，一个一个去试，这也是工作量证明。\n\n   挖矿是寻找一个nonce，最后要满足H(block header) <= target。挖空困难，但是验证很容易（difficult to solve, but easy to verify）\n\n\n\n比特币中用到哈希函数sha-256.（Security Hash Algorithm）\n\n### 签名\n\n与日常生活中开账户的方式不同，比特币用户要开账户只需创建一对key：public key, private key。不需要任何人的批准。\n\n#### asymmetric encryption algorithm\n\n最开始的是encryption algorithm, 对称加密。通信双方约定一个密钥，加密和解密都是同一个key。不足的地方是key的分发不安全。\n\n非对称，加密和解密使用的是同一个人的key，任何人都可以公开他自己的public key，这是用来加密的，解密用的是他自己的private key，保存在自己的本地即可。公钥相当于银行账户，要转给你钱，只需要知道你的公钥即可。\n\n这对key是可以用来签名的。例如，当你完成了一笔交易的时候，就可以用你的私钥去签名，别人去验证的时候可以用你的公钥去完成验证。\n\n**note**：创建账户时产生的相同的公私钥的概率可以忽略不计，微乎其微的可能性。但仍需要选取一个好的a good source randomness。\n\n\n\n### summary\n\n比特币中，一般是先对一个message取hash，然后再对hash签名。","source":"_posts/bt01.md","raw":"---\ntitle: bt01\ndate: 2019-11-03 12:41:57\ncategories: Bitcoin\ntags: 密码学\n---\n\n区块链、比特币、去中心化这些东西说熟不熟，说陌生吧也谈不上陌生，毕竟天天见。趁着周末，给自己冲了电，看了看收藏了好几天的视频，一个关于区块链的北大公开课。。哈哈飘了，竟然听了北大的课^_^\n\n<!--more-->\n\n# 简介\n\n涉及基本数据结构和算法\n\n- 数组\n- 链表\n- 二叉树\n- 哈希函数\n\n参考资料：\n\n- BitCoin and Cryptocurrency Technologies A Comprehensive Introduction\n- 以太坊白皮书、黄皮书、原代码\n- Solidity文档\n\n### 大纲\n\n#### 比特币\n\n- 密码学基础\n- 比特币的数据结构\n- 公式协议和系统实现\n- 挖矿算法和难度调整\n- 比特币脚本\n- 软分叉和硬分叉\n- 匿名和隐私保护\n\n#### 以太坊\n\n- 概述：基于账户的分布式账本\n- 数据结构：状态树、交易树、收据树\n- GHOST协议\n- 挖矿：memory-hard mining puzzle\n- 挖矿难度调整\n- 权益证明\n  - Casper the Friendly Finality Gadget(FFG)\n- 智能合约\n\n## 密码学原理\n\n比特币，虽然被成为加密货币（*crypto-currency*），但是交易信息都是公开的。\n比特币中用到的两个密码学中的两个功能：**哈希**， **签名**。\n\n### 哈希\n\n密码学中用的哈希函数被称为*Cryptographic hash function*, 有两个性质，一个是 *collision resistance*，另一个是 *hiding*。 除了以上两个性质，比特币中用到的哈希函数的性质还有一个：puzzle friendly。\n\n1. collision resistance\n\n   ```\n   var x, y;\n   x != y;\n   有哈希函数H\n   使得\n   H(x)=H(y)\n   ```\n\n   哈希碰撞是客观存在，但是没有高效的方法来人为的方式去造成哈希碰撞。前提是输入空间很大。因为输入空间是有限的，例如256位的哈希值，输出空间位2的256次方。\n\n   collision resistance的使用：\n\n   用来求message的digest，防止篡改。\n\n   理论上证明不出来任何一个哈希函数是collision resistance的，目前是实践经验来证明的。也有一些哈希函数以前被人认为是collision resistance的，后来被证明不具备那个性质，可以认为制造出来。\n\n   **note**：MD5。\n\n2. hiding\n\n   x -> H(x), H(x)不会透露出任何关于x的信息，即是不可逆的。\n\n   可以与第一个性质结合起来用作digital commitment(digital equivalent of a sealed envelope)。相当于第三方托管。前提同样是输入空间要足够大，如果不够大， 可以在做哈希前在后面加入随机数来组成一个数，一同做哈希运算。\n\n3. puzzle friendly\n\n   只看输入，很难猜到哈希函数的输出。如果想要某个区间内的哈希值，没有捷径，一个一个去试，这也是工作量证明。\n\n   挖矿是寻找一个nonce，最后要满足H(block header) <= target。挖空困难，但是验证很容易（difficult to solve, but easy to verify）\n\n\n\n比特币中用到哈希函数sha-256.（Security Hash Algorithm）\n\n### 签名\n\n与日常生活中开账户的方式不同，比特币用户要开账户只需创建一对key：public key, private key。不需要任何人的批准。\n\n#### asymmetric encryption algorithm\n\n最开始的是encryption algorithm, 对称加密。通信双方约定一个密钥，加密和解密都是同一个key。不足的地方是key的分发不安全。\n\n非对称，加密和解密使用的是同一个人的key，任何人都可以公开他自己的public key，这是用来加密的，解密用的是他自己的private key，保存在自己的本地即可。公钥相当于银行账户，要转给你钱，只需要知道你的公钥即可。\n\n这对key是可以用来签名的。例如，当你完成了一笔交易的时候，就可以用你的私钥去签名，别人去验证的时候可以用你的公钥去完成验证。\n\n**note**：创建账户时产生的相同的公私钥的概率可以忽略不计，微乎其微的可能性。但仍需要选取一个好的a good source randomness。\n\n\n\n### summary\n\n比特币中，一般是先对一个message取hash，然后再对hash签名。","slug":"bt01","published":1,"updated":"2020-07-19T17:29:13.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgbr000ibyihg2ovgplt","content":"<p>区块链、比特币、去中心化这些东西说熟不熟，说陌生吧也谈不上陌生，毕竟天天见。趁着周末，给自己冲了电，看了看收藏了好几天的视频，一个关于区块链的北大公开课。。哈哈飘了，竟然听了北大的课^_^</p>\n<a id=\"more\"></a>\n\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>涉及基本数据结构和算法</p>\n<ul>\n<li>数组</li>\n<li>链表</li>\n<li>二叉树</li>\n<li>哈希函数</li>\n</ul>\n<p>参考资料：</p>\n<ul>\n<li>BitCoin and Cryptocurrency Technologies A Comprehensive Introduction</li>\n<li>以太坊白皮书、黄皮书、原代码</li>\n<li>Solidity文档</li>\n</ul>\n<h3 id=\"大纲\"><a href=\"#大纲\" class=\"headerlink\" title=\"大纲\"></a>大纲</h3><h4 id=\"比特币\"><a href=\"#比特币\" class=\"headerlink\" title=\"比特币\"></a>比特币</h4><ul>\n<li>密码学基础</li>\n<li>比特币的数据结构</li>\n<li>公式协议和系统实现</li>\n<li>挖矿算法和难度调整</li>\n<li>比特币脚本</li>\n<li>软分叉和硬分叉</li>\n<li>匿名和隐私保护</li>\n</ul>\n<h4 id=\"以太坊\"><a href=\"#以太坊\" class=\"headerlink\" title=\"以太坊\"></a>以太坊</h4><ul>\n<li>概述：基于账户的分布式账本</li>\n<li>数据结构：状态树、交易树、收据树</li>\n<li>GHOST协议</li>\n<li>挖矿：memory-hard mining puzzle</li>\n<li>挖矿难度调整</li>\n<li>权益证明<ul>\n<li>Casper the Friendly Finality Gadget(FFG)</li>\n</ul>\n</li>\n<li>智能合约</li>\n</ul>\n<h2 id=\"密码学原理\"><a href=\"#密码学原理\" class=\"headerlink\" title=\"密码学原理\"></a>密码学原理</h2><p>比特币，虽然被成为加密货币（<em>crypto-currency</em>），但是交易信息都是公开的。<br>比特币中用到的两个密码学中的两个功能：<strong>哈希</strong>， <strong>签名</strong>。</p>\n<h3 id=\"哈希\"><a href=\"#哈希\" class=\"headerlink\" title=\"哈希\"></a>哈希</h3><p>密码学中用的哈希函数被称为<em>Cryptographic hash function</em>, 有两个性质，一个是 <em>collision resistance</em>，另一个是 <em>hiding</em>。 除了以上两个性质，比特币中用到的哈希函数的性质还有一个：puzzle friendly。</p>\n<ol>\n<li><p>collision resistance</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var x, y;</span><br><span class=\"line\">x !&#x3D; y;</span><br><span class=\"line\">有哈希函数H</span><br><span class=\"line\">使得</span><br><span class=\"line\">H(x)&#x3D;H(y)</span><br></pre></td></tr></table></figure>\n\n<p>哈希碰撞是客观存在，但是没有高效的方法来人为的方式去造成哈希碰撞。前提是输入空间很大。因为输入空间是有限的，例如256位的哈希值，输出空间位2的256次方。</p>\n<p>collision resistance的使用：</p>\n<p>用来求message的digest，防止篡改。</p>\n<p>理论上证明不出来任何一个哈希函数是collision resistance的，目前是实践经验来证明的。也有一些哈希函数以前被人认为是collision resistance的，后来被证明不具备那个性质，可以认为制造出来。</p>\n<p><strong>note</strong>：MD5。</p>\n</li>\n<li><p>hiding</p>\n<p>x -&gt; H(x), H(x)不会透露出任何关于x的信息，即是不可逆的。</p>\n<p>可以与第一个性质结合起来用作digital commitment(digital equivalent of a sealed envelope)。相当于第三方托管。前提同样是输入空间要足够大，如果不够大， 可以在做哈希前在后面加入随机数来组成一个数，一同做哈希运算。</p>\n</li>\n<li><p>puzzle friendly</p>\n<p>只看输入，很难猜到哈希函数的输出。如果想要某个区间内的哈希值，没有捷径，一个一个去试，这也是工作量证明。</p>\n<p>挖矿是寻找一个nonce，最后要满足H(block header) &lt;= target。挖空困难，但是验证很容易（difficult to solve, but easy to verify）</p>\n</li>\n</ol>\n<p>比特币中用到哈希函数sha-256.（Security Hash Algorithm）</p>\n<h3 id=\"签名\"><a href=\"#签名\" class=\"headerlink\" title=\"签名\"></a>签名</h3><p>与日常生活中开账户的方式不同，比特币用户要开账户只需创建一对key：public key, private key。不需要任何人的批准。</p>\n<h4 id=\"asymmetric-encryption-algorithm\"><a href=\"#asymmetric-encryption-algorithm\" class=\"headerlink\" title=\"asymmetric encryption algorithm\"></a>asymmetric encryption algorithm</h4><p>最开始的是encryption algorithm, 对称加密。通信双方约定一个密钥，加密和解密都是同一个key。不足的地方是key的分发不安全。</p>\n<p>非对称，加密和解密使用的是同一个人的key，任何人都可以公开他自己的public key，这是用来加密的，解密用的是他自己的private key，保存在自己的本地即可。公钥相当于银行账户，要转给你钱，只需要知道你的公钥即可。</p>\n<p>这对key是可以用来签名的。例如，当你完成了一笔交易的时候，就可以用你的私钥去签名，别人去验证的时候可以用你的公钥去完成验证。</p>\n<p><strong>note</strong>：创建账户时产生的相同的公私钥的概率可以忽略不计，微乎其微的可能性。但仍需要选取一个好的a good source randomness。</p>\n<h3 id=\"summary\"><a href=\"#summary\" class=\"headerlink\" title=\"summary\"></a>summary</h3><p>比特币中，一般是先对一个message取hash，然后再对hash签名。</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>区块链、比特币、去中心化这些东西说熟不熟，说陌生吧也谈不上陌生，毕竟天天见。趁着周末，给自己冲了电，看了看收藏了好几天的视频，一个关于区块链的北大公开课。。哈哈飘了，竟然听了北大的课^_^</p>","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>涉及基本数据结构和算法</p>\n<ul>\n<li>数组</li>\n<li>链表</li>\n<li>二叉树</li>\n<li>哈希函数</li>\n</ul>\n<p>参考资料：</p>\n<ul>\n<li>BitCoin and Cryptocurrency Technologies A Comprehensive Introduction</li>\n<li>以太坊白皮书、黄皮书、原代码</li>\n<li>Solidity文档</li>\n</ul>\n<h3 id=\"大纲\"><a href=\"#大纲\" class=\"headerlink\" title=\"大纲\"></a>大纲</h3><h4 id=\"比特币\"><a href=\"#比特币\" class=\"headerlink\" title=\"比特币\"></a>比特币</h4><ul>\n<li>密码学基础</li>\n<li>比特币的数据结构</li>\n<li>公式协议和系统实现</li>\n<li>挖矿算法和难度调整</li>\n<li>比特币脚本</li>\n<li>软分叉和硬分叉</li>\n<li>匿名和隐私保护</li>\n</ul>\n<h4 id=\"以太坊\"><a href=\"#以太坊\" class=\"headerlink\" title=\"以太坊\"></a>以太坊</h4><ul>\n<li>概述：基于账户的分布式账本</li>\n<li>数据结构：状态树、交易树、收据树</li>\n<li>GHOST协议</li>\n<li>挖矿：memory-hard mining puzzle</li>\n<li>挖矿难度调整</li>\n<li>权益证明<ul>\n<li>Casper the Friendly Finality Gadget(FFG)</li>\n</ul>\n</li>\n<li>智能合约</li>\n</ul>\n<h2 id=\"密码学原理\"><a href=\"#密码学原理\" class=\"headerlink\" title=\"密码学原理\"></a>密码学原理</h2><p>比特币，虽然被成为加密货币（<em>crypto-currency</em>），但是交易信息都是公开的。<br>比特币中用到的两个密码学中的两个功能：<strong>哈希</strong>， <strong>签名</strong>。</p>\n<h3 id=\"哈希\"><a href=\"#哈希\" class=\"headerlink\" title=\"哈希\"></a>哈希</h3><p>密码学中用的哈希函数被称为<em>Cryptographic hash function</em>, 有两个性质，一个是 <em>collision resistance</em>，另一个是 <em>hiding</em>。 除了以上两个性质，比特币中用到的哈希函数的性质还有一个：puzzle friendly。</p>\n<ol>\n<li><p>collision resistance</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var x, y;</span><br><span class=\"line\">x !&#x3D; y;</span><br><span class=\"line\">有哈希函数H</span><br><span class=\"line\">使得</span><br><span class=\"line\">H(x)&#x3D;H(y)</span><br></pre></td></tr></table></figure>\n\n<p>哈希碰撞是客观存在，但是没有高效的方法来人为的方式去造成哈希碰撞。前提是输入空间很大。因为输入空间是有限的，例如256位的哈希值，输出空间位2的256次方。</p>\n<p>collision resistance的使用：</p>\n<p>用来求message的digest，防止篡改。</p>\n<p>理论上证明不出来任何一个哈希函数是collision resistance的，目前是实践经验来证明的。也有一些哈希函数以前被人认为是collision resistance的，后来被证明不具备那个性质，可以认为制造出来。</p>\n<p><strong>note</strong>：MD5。</p>\n</li>\n<li><p>hiding</p>\n<p>x -&gt; H(x), H(x)不会透露出任何关于x的信息，即是不可逆的。</p>\n<p>可以与第一个性质结合起来用作digital commitment(digital equivalent of a sealed envelope)。相当于第三方托管。前提同样是输入空间要足够大，如果不够大， 可以在做哈希前在后面加入随机数来组成一个数，一同做哈希运算。</p>\n</li>\n<li><p>puzzle friendly</p>\n<p>只看输入，很难猜到哈希函数的输出。如果想要某个区间内的哈希值，没有捷径，一个一个去试，这也是工作量证明。</p>\n<p>挖矿是寻找一个nonce，最后要满足H(block header) &lt;= target。挖空困难，但是验证很容易（difficult to solve, but easy to verify）</p>\n</li>\n</ol>\n<p>比特币中用到哈希函数sha-256.（Security Hash Algorithm）</p>\n<h3 id=\"签名\"><a href=\"#签名\" class=\"headerlink\" title=\"签名\"></a>签名</h3><p>与日常生活中开账户的方式不同，比特币用户要开账户只需创建一对key：public key, private key。不需要任何人的批准。</p>\n<h4 id=\"asymmetric-encryption-algorithm\"><a href=\"#asymmetric-encryption-algorithm\" class=\"headerlink\" title=\"asymmetric encryption algorithm\"></a>asymmetric encryption algorithm</h4><p>最开始的是encryption algorithm, 对称加密。通信双方约定一个密钥，加密和解密都是同一个key。不足的地方是key的分发不安全。</p>\n<p>非对称，加密和解密使用的是同一个人的key，任何人都可以公开他自己的public key，这是用来加密的，解密用的是他自己的private key，保存在自己的本地即可。公钥相当于银行账户，要转给你钱，只需要知道你的公钥即可。</p>\n<p>这对key是可以用来签名的。例如，当你完成了一笔交易的时候，就可以用你的私钥去签名，别人去验证的时候可以用你的公钥去完成验证。</p>\n<p><strong>note</strong>：创建账户时产生的相同的公私钥的概率可以忽略不计，微乎其微的可能性。但仍需要选取一个好的a good source randomness。</p>\n<h3 id=\"summary\"><a href=\"#summary\" class=\"headerlink\" title=\"summary\"></a>summary</h3><p>比特币中，一般是先对一个message取hash，然后再对hash签名。</p>"},{"title":"bt02","date":"2019-11-17T07:17:04.000Z","_content":"\n比特币中最基础的数据结构：区块链\n\n<!--mro-->\n\n# hash指针\n\n普通的指针存储的是某个结构体在内存中的存放地址，而hash指针除了存放地址外还会存储hash值，能够检测结构体的内容是否被篡改。\n\n\n\n区块链和普通的链表的区别：用hash指针代替了普通的指针。Block chain is  a linked list using hash pointer.\n\n\n\n区块链中第一个区块叫genesis block(创世纪块)，最后一个叫most recent block。只需要保存最后一个区块的hash值，就能检测出之前所有区块是否被篡改。\n\n\n\n# merkle tree\n\n比特币汇中的另一个数据接结构。\n\nc.f. binary tree\n\n区别是merkle tree用hash指针代替了普通指针。\n\nmerkle tree中最下面一行是data blocks（每个数据块实际上是一个交易，transaction），上方均是hash pointers。只需记住根哈希值（最顶部的），就能发现任何节点的修改。这样效率更高，因为是二叉树的形式。\n\n\n\n每个数据块分为两部分，块头和块身。\n\nblock header 无交易内容，只有hash值, 而block body中有交易列表。他们可以提供merkle proof（从最底部的某个blcok往上一直到根节点就是一个merkle proof）。\n\n这种证明被称为：**proof of membership/inclusion**。时间复杂度为：\n$$\n\\theta(\\log n)\n$$\n也可以对底部排序，sorted merkle tree，但是比特币中没有使用，不需要对做存在性证明。\n\n\n\n## 哈希指针的其他用途：\n\n只要数据结构是无环的，都可以使用hash指针代替普通指针。\n\n\n\n\n\n\n\n","source":"_posts/bt02.md","raw":"---\ntitle: bt02\ndate: 2019-11-17 15:17:04\ncategories: Bitcoin\ntags: 数据结构\n---\n\n比特币中最基础的数据结构：区块链\n\n<!--mro-->\n\n# hash指针\n\n普通的指针存储的是某个结构体在内存中的存放地址，而hash指针除了存放地址外还会存储hash值，能够检测结构体的内容是否被篡改。\n\n\n\n区块链和普通的链表的区别：用hash指针代替了普通的指针。Block chain is  a linked list using hash pointer.\n\n\n\n区块链中第一个区块叫genesis block(创世纪块)，最后一个叫most recent block。只需要保存最后一个区块的hash值，就能检测出之前所有区块是否被篡改。\n\n\n\n# merkle tree\n\n比特币汇中的另一个数据接结构。\n\nc.f. binary tree\n\n区别是merkle tree用hash指针代替了普通指针。\n\nmerkle tree中最下面一行是data blocks（每个数据块实际上是一个交易，transaction），上方均是hash pointers。只需记住根哈希值（最顶部的），就能发现任何节点的修改。这样效率更高，因为是二叉树的形式。\n\n\n\n每个数据块分为两部分，块头和块身。\n\nblock header 无交易内容，只有hash值, 而block body中有交易列表。他们可以提供merkle proof（从最底部的某个blcok往上一直到根节点就是一个merkle proof）。\n\n这种证明被称为：**proof of membership/inclusion**。时间复杂度为：\n$$\n\\theta(\\log n)\n$$\n也可以对底部排序，sorted merkle tree，但是比特币中没有使用，不需要对做存在性证明。\n\n\n\n## 哈希指针的其他用途：\n\n只要数据结构是无环的，都可以使用hash指针代替普通指针。\n\n\n\n\n\n\n\n","slug":"bt02","published":1,"updated":"2020-07-19T17:29:13.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgbu000mbyih3ig9dojg","content":"<p>比特币中最基础的数据结构：区块链</p>\n<!--mro-->\n\n<h1 id=\"hash指针\"><a href=\"#hash指针\" class=\"headerlink\" title=\"hash指针\"></a>hash指针</h1><p>普通的指针存储的是某个结构体在内存中的存放地址，而hash指针除了存放地址外还会存储hash值，能够检测结构体的内容是否被篡改。</p>\n<p>区块链和普通的链表的区别：用hash指针代替了普通的指针。Block chain is  a linked list using hash pointer.</p>\n<p>区块链中第一个区块叫genesis block(创世纪块)，最后一个叫most recent block。只需要保存最后一个区块的hash值，就能检测出之前所有区块是否被篡改。</p>\n<h1 id=\"merkle-tree\"><a href=\"#merkle-tree\" class=\"headerlink\" title=\"merkle tree\"></a>merkle tree</h1><p>比特币汇中的另一个数据接结构。</p>\n<p>c.f. binary tree</p>\n<p>区别是merkle tree用hash指针代替了普通指针。</p>\n<p>merkle tree中最下面一行是data blocks（每个数据块实际上是一个交易，transaction），上方均是hash pointers。只需记住根哈希值（最顶部的），就能发现任何节点的修改。这样效率更高，因为是二叉树的形式。</p>\n<p>每个数据块分为两部分，块头和块身。</p>\n<p>block header 无交易内容，只有hash值, 而block body中有交易列表。他们可以提供merkle proof（从最底部的某个blcok往上一直到根节点就是一个merkle proof）。</p>\n<p>这种证明被称为：<strong>proof of membership/inclusion</strong>。时间复杂度为：<br>$$<br>\\theta(\\log n)<br>$$<br>也可以对底部排序，sorted merkle tree，但是比特币中没有使用，不需要对做存在性证明。</p>\n<h2 id=\"哈希指针的其他用途：\"><a href=\"#哈希指针的其他用途：\" class=\"headerlink\" title=\"哈希指针的其他用途：\"></a>哈希指针的其他用途：</h2><p>只要数据结构是无环的，都可以使用hash指针代替普通指针。</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"","more":"<p>比特币中最基础的数据结构：区块链</p>\n<!--mro-->\n\n<h1 id=\"hash指针\"><a href=\"#hash指针\" class=\"headerlink\" title=\"hash指针\"></a>hash指针</h1><p>普通的指针存储的是某个结构体在内存中的存放地址，而hash指针除了存放地址外还会存储hash值，能够检测结构体的内容是否被篡改。</p>\n<p>区块链和普通的链表的区别：用hash指针代替了普通的指针。Block chain is  a linked list using hash pointer.</p>\n<p>区块链中第一个区块叫genesis block(创世纪块)，最后一个叫most recent block。只需要保存最后一个区块的hash值，就能检测出之前所有区块是否被篡改。</p>\n<h1 id=\"merkle-tree\"><a href=\"#merkle-tree\" class=\"headerlink\" title=\"merkle tree\"></a>merkle tree</h1><p>比特币汇中的另一个数据接结构。</p>\n<p>c.f. binary tree</p>\n<p>区别是merkle tree用hash指针代替了普通指针。</p>\n<p>merkle tree中最下面一行是data blocks（每个数据块实际上是一个交易，transaction），上方均是hash pointers。只需记住根哈希值（最顶部的），就能发现任何节点的修改。这样效率更高，因为是二叉树的形式。</p>\n<p>每个数据块分为两部分，块头和块身。</p>\n<p>block header 无交易内容，只有hash值, 而block body中有交易列表。他们可以提供merkle proof（从最底部的某个blcok往上一直到根节点就是一个merkle proof）。</p>\n<p>这种证明被称为：<strong>proof of membership/inclusion</strong>。时间复杂度为：<br>$$<br>\\theta(\\log n)<br>$$<br>也可以对底部排序，sorted merkle tree，但是比特币中没有使用，不需要对做存在性证明。</p>\n<h2 id=\"哈希指针的其他用途：\"><a href=\"#哈希指针的其他用途：\" class=\"headerlink\" title=\"哈希指针的其他用途：\"></a>哈希指针的其他用途：</h2><p>只要数据结构是无环的，都可以使用hash指针代替普通指针。</p>\n"},{"title":"bt03","date":"2019-11-17T08:04:18.000Z","_content":"\n 比特币中的协议。与纸质货币不同的是，如何防范double spending attack，即双花攻击。\n\n<!--more-->\n\n# 去中心化\n\n传统行业中，如果纸币改为数字货币，每次支付都需要通过央行来判断是否消费过某个数字货币以防范double spending attack，这样还是中心化的。\n\n\n\n- 货币发行权\n- double spending attack\n\n\n\n## double spending attack\n\n与传统类似，也是需要维护一个数据结构来判断，只不过数据结构不是由央行来维护，而是由所有用户来维护。\n\nblock header\n\n- reversion\n- hash of previous block header\n- Merkle root hash\n- target\n- nonce\n\nblock body\n\n- transaction list\n  - full node(fully validating node)\n  - light node\n\n一般情况下，轻节点无法验证整条区块链的正确性，因为他的头部没有包含全部的hash值。\n\n","source":"_posts/bt03.md","raw":"---\ntitle: bt03\ndate: 2019-11-17 16:04:18\ncategories: Bitcoin\ntags: principle\n---\n\n 比特币中的协议。与纸质货币不同的是，如何防范double spending attack，即双花攻击。\n\n<!--more-->\n\n# 去中心化\n\n传统行业中，如果纸币改为数字货币，每次支付都需要通过央行来判断是否消费过某个数字货币以防范double spending attack，这样还是中心化的。\n\n\n\n- 货币发行权\n- double spending attack\n\n\n\n## double spending attack\n\n与传统类似，也是需要维护一个数据结构来判断，只不过数据结构不是由央行来维护，而是由所有用户来维护。\n\nblock header\n\n- reversion\n- hash of previous block header\n- Merkle root hash\n- target\n- nonce\n\nblock body\n\n- transaction list\n  - full node(fully validating node)\n  - light node\n\n一般情况下，轻节点无法验证整条区块链的正确性，因为他的头部没有包含全部的hash值。\n\n","slug":"bt03","published":1,"updated":"2020-07-19T17:29:13.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgbw000pbyihfl868qlo","content":"<p> 比特币中的协议。与纸质货币不同的是，如何防范double spending attack，即双花攻击。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"去中心化\"><a href=\"#去中心化\" class=\"headerlink\" title=\"去中心化\"></a>去中心化</h1><p>传统行业中，如果纸币改为数字货币，每次支付都需要通过央行来判断是否消费过某个数字货币以防范double spending attack，这样还是中心化的。</p>\n<ul>\n<li>货币发行权</li>\n<li>double spending attack</li>\n</ul>\n<h2 id=\"double-spending-attack\"><a href=\"#double-spending-attack\" class=\"headerlink\" title=\"double spending attack\"></a>double spending attack</h2><p>与传统类似，也是需要维护一个数据结构来判断，只不过数据结构不是由央行来维护，而是由所有用户来维护。</p>\n<p>block header</p>\n<ul>\n<li>reversion</li>\n<li>hash of previous block header</li>\n<li>Merkle root hash</li>\n<li>target</li>\n<li>nonce</li>\n</ul>\n<p>block body</p>\n<ul>\n<li>transaction list<ul>\n<li>full node(fully validating node)</li>\n<li>light node</li>\n</ul>\n</li>\n</ul>\n<p>一般情况下，轻节点无法验证整条区块链的正确性，因为他的头部没有包含全部的hash值。</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p> 比特币中的协议。与纸质货币不同的是，如何防范double spending attack，即双花攻击。</p>","more":"<h1 id=\"去中心化\"><a href=\"#去中心化\" class=\"headerlink\" title=\"去中心化\"></a>去中心化</h1><p>传统行业中，如果纸币改为数字货币，每次支付都需要通过央行来判断是否消费过某个数字货币以防范double spending attack，这样还是中心化的。</p>\n<ul>\n<li>货币发行权</li>\n<li>double spending attack</li>\n</ul>\n<h2 id=\"double-spending-attack\"><a href=\"#double-spending-attack\" class=\"headerlink\" title=\"double spending attack\"></a>double spending attack</h2><p>与传统类似，也是需要维护一个数据结构来判断，只不过数据结构不是由央行来维护，而是由所有用户来维护。</p>\n<p>block header</p>\n<ul>\n<li>reversion</li>\n<li>hash of previous block header</li>\n<li>Merkle root hash</li>\n<li>target</li>\n<li>nonce</li>\n</ul>\n<p>block body</p>\n<ul>\n<li>transaction list<ul>\n<li>full node(fully validating node)</li>\n<li>light node</li>\n</ul>\n</li>\n</ul>\n<p>一般情况下，轻节点无法验证整条区块链的正确性，因为他的头部没有包含全部的hash值。</p>"},{"title":"contest200","date":"2020-08-02T04:56:29.000Z","_content":"\nRecord Leetcode contest 200.\n\n<!--more-->\n\n# Q1\n\npassed.\n\n# Q2\n\nFind the winner of an Array Game.\n\nGiven an integer array `arr` of **distinct** integers and an integer `k`.\n\nA game will be played between the first two elements of the array (i.e. `arr[0]` and `arr[1]`). In each round of the game, we compare `arr[0]` with `arr[1]`, the larger integer wins and remains at position `0` and the smaller integer moves to the end of the array. The game ends when an integer wins `k` consecutive rounds.\n\nReturn *the integer which will win the game*.\n\nIt is **guaranteed** that there will be a winner of the game.\n\n**Example 1:**\n\n```markdown\nInput: arr = [2,1,3,5,4,6,7], k = 2\nOutput: 5\nExplanation: Let's see the rounds of the game:\nRound |       arr       | winner | win_count\n  1   | [2,1,3,5,4,6,7] | 2      | 1\n  2   | [2,3,5,4,6,7,1] | 3      | 1\n  3   | [3,5,4,6,7,1,2] | 5      | 1\n  4   | [5,4,6,7,1,2,3] | 5      | 2\nSo we can see that 4 rounds will be played and 5 is the winner because it wins 2 consecutive games.\n```\n\n**Example 2:**\n\n```markdown\nInput: arr = [3,2,1], k = 10\nOutput: 3\nExplanation: 3 will win the first 10 rounds consecutively.\n```\n\n**Example 3:**\n\n```markdown\nInput: arr = [1,9,8,2,3,7,6,4,5], k = 7\nOutput: 9\n```\n\n**Example 4:**\n\n```markdown\nInput: arr = [1,11,22,33,44,55,66,77,88,99], k = 1000000000\nOutput: 99\n```\n\n## My Solution\n\n看到这题，首先我认为这题清晰明了，用__迭代__去完成全部流程，用**k**去做结束的标志，是一道从头到尾很明确的题。但是:joy:\n\n贴上我稚嫩的代码：\n\n```java\npublic int getWinner(int[] arr, int k) {\n    int res = -1;\n    int zero = k-1;\n    int solution = 0;\n    while(k>0){\n        int currMax = Math.max(arr[0],arr[1]);\n        int currMin = Math.min(arr[0], arr[1]);\n        helper(currMax, currMin, arr);\n        if(res == -1){\n            // initial, no compare\n            res = currMax;\n        }else{\n            if(currMax == res){\n                k--;\n                solution = currMax;\n            }else{\n                k = zero;\n                res = currMax;\n            }\n        }\n    }\n    return solution;\n}\n\nprivate void helper(int max, int min, int[] arr){\n    arr[0] = max;\n    for (int i = 1; i < arr.length - 1; i++) {\n        arr[i] = arr[i + 1];\n    }\n    arr[arr.length-1] = min;\n}\n```\n\n没通过，因为`Time Limited`，跑得太慢了！\n\n## Niubility Solution\n\n```java\npublic int getWinner(int[] arr, int k) {\n    // 数组长度\n    int n = arr.length;\n    // 数组长度与k之间取最小的。\n    k = Math.min(k, n);\n    int A = arr[0];\n    // 标志位，记录相同次数\n    int rep = 0;\n    // 从第二个开始iterate，无终结条件\n    for(int i = 1;;i++){\n        // “i%n“ 取余数，逻辑变换数组。由于for循环无终结条件，所以i会无限增加超过n。\n        int B = arr[i%n];\n        if(A >= B){\n            rep++;\n        }else{\n            A = B;\n            rep = 1;\n        }\n        // 终结条件在这里，rep等于k时结束。\n        if(rep == k){\n            return A;\n        }\n    }\n}\n```\n\n**通过对比可以发现，我耗时的原因在于：** \n\n1. 我是真的挪了数组！物理上的挪动，实际上，逻辑移动数组即可！我的程序算例4要6秒，这个只需要0秒。\n2. `Math.min(k, n)`，如果题目给的k为`10000000`,数组长度为`8`,那么最后也是按`8` 来算，那么多循环无意义，一遍遍历即可获取最大（这样也行？）\n\n况且，逻辑i上也没有去变换位置，题目的本质还是挨个遍历！\n\ni.e. arr = [2,1,3,5,4,6,7], k = 2","source":"_posts/contest200.md","raw":"---\ntitle: contest200\ndate: 2020-08-02 12:56:29\ncategories: Leetcode\ntags: algorithm\n---\n\nRecord Leetcode contest 200.\n\n<!--more-->\n\n# Q1\n\npassed.\n\n# Q2\n\nFind the winner of an Array Game.\n\nGiven an integer array `arr` of **distinct** integers and an integer `k`.\n\nA game will be played between the first two elements of the array (i.e. `arr[0]` and `arr[1]`). In each round of the game, we compare `arr[0]` with `arr[1]`, the larger integer wins and remains at position `0` and the smaller integer moves to the end of the array. The game ends when an integer wins `k` consecutive rounds.\n\nReturn *the integer which will win the game*.\n\nIt is **guaranteed** that there will be a winner of the game.\n\n**Example 1:**\n\n```markdown\nInput: arr = [2,1,3,5,4,6,7], k = 2\nOutput: 5\nExplanation: Let's see the rounds of the game:\nRound |       arr       | winner | win_count\n  1   | [2,1,3,5,4,6,7] | 2      | 1\n  2   | [2,3,5,4,6,7,1] | 3      | 1\n  3   | [3,5,4,6,7,1,2] | 5      | 1\n  4   | [5,4,6,7,1,2,3] | 5      | 2\nSo we can see that 4 rounds will be played and 5 is the winner because it wins 2 consecutive games.\n```\n\n**Example 2:**\n\n```markdown\nInput: arr = [3,2,1], k = 10\nOutput: 3\nExplanation: 3 will win the first 10 rounds consecutively.\n```\n\n**Example 3:**\n\n```markdown\nInput: arr = [1,9,8,2,3,7,6,4,5], k = 7\nOutput: 9\n```\n\n**Example 4:**\n\n```markdown\nInput: arr = [1,11,22,33,44,55,66,77,88,99], k = 1000000000\nOutput: 99\n```\n\n## My Solution\n\n看到这题，首先我认为这题清晰明了，用__迭代__去完成全部流程，用**k**去做结束的标志，是一道从头到尾很明确的题。但是:joy:\n\n贴上我稚嫩的代码：\n\n```java\npublic int getWinner(int[] arr, int k) {\n    int res = -1;\n    int zero = k-1;\n    int solution = 0;\n    while(k>0){\n        int currMax = Math.max(arr[0],arr[1]);\n        int currMin = Math.min(arr[0], arr[1]);\n        helper(currMax, currMin, arr);\n        if(res == -1){\n            // initial, no compare\n            res = currMax;\n        }else{\n            if(currMax == res){\n                k--;\n                solution = currMax;\n            }else{\n                k = zero;\n                res = currMax;\n            }\n        }\n    }\n    return solution;\n}\n\nprivate void helper(int max, int min, int[] arr){\n    arr[0] = max;\n    for (int i = 1; i < arr.length - 1; i++) {\n        arr[i] = arr[i + 1];\n    }\n    arr[arr.length-1] = min;\n}\n```\n\n没通过，因为`Time Limited`，跑得太慢了！\n\n## Niubility Solution\n\n```java\npublic int getWinner(int[] arr, int k) {\n    // 数组长度\n    int n = arr.length;\n    // 数组长度与k之间取最小的。\n    k = Math.min(k, n);\n    int A = arr[0];\n    // 标志位，记录相同次数\n    int rep = 0;\n    // 从第二个开始iterate，无终结条件\n    for(int i = 1;;i++){\n        // “i%n“ 取余数，逻辑变换数组。由于for循环无终结条件，所以i会无限增加超过n。\n        int B = arr[i%n];\n        if(A >= B){\n            rep++;\n        }else{\n            A = B;\n            rep = 1;\n        }\n        // 终结条件在这里，rep等于k时结束。\n        if(rep == k){\n            return A;\n        }\n    }\n}\n```\n\n**通过对比可以发现，我耗时的原因在于：** \n\n1. 我是真的挪了数组！物理上的挪动，实际上，逻辑移动数组即可！我的程序算例4要6秒，这个只需要0秒。\n2. `Math.min(k, n)`，如果题目给的k为`10000000`,数组长度为`8`,那么最后也是按`8` 来算，那么多循环无意义，一遍遍历即可获取最大（这样也行？）\n\n况且，逻辑i上也没有去变换位置，题目的本质还是挨个遍历！\n\ni.e. arr = [2,1,3,5,4,6,7], k = 2","slug":"contest200","published":1,"updated":"2020-08-02T06:03:42.348Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgbx000tbyihd2bh5t4m","content":"<p>Record Leetcode contest 200.</p>\n<a id=\"more\"></a>\n\n<h1 id=\"Q1\"><a href=\"#Q1\" class=\"headerlink\" title=\"Q1\"></a>Q1</h1><p>passed.</p>\n<h1 id=\"Q2\"><a href=\"#Q2\" class=\"headerlink\" title=\"Q2\"></a>Q2</h1><p>Find the winner of an Array Game.</p>\n<p>Given an integer array <code>arr</code> of <strong>distinct</strong> integers and an integer <code>k</code>.</p>\n<p>A game will be played between the first two elements of the array (i.e. <code>arr[0]</code> and <code>arr[1]</code>). In each round of the game, we compare <code>arr[0]</code> with <code>arr[1]</code>, the larger integer wins and remains at position <code>0</code> and the smaller integer moves to the end of the array. The game ends when an integer wins <code>k</code> consecutive rounds.</p>\n<p>Return <em>the integer which will win the game</em>.</p>\n<p>It is <strong>guaranteed</strong> that there will be a winner of the game.</p>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: arr = [2,1,3,5,4,6,7], k = 2</span><br><span class=\"line\">Output: 5</span><br><span class=\"line\">Explanation: Let&#x27;s see the rounds of the game:</span><br><span class=\"line\">Round |       arr       | winner | win<span class=\"emphasis\">_count</span></span><br><span class=\"line\"><span class=\"emphasis\">  1   | [2,1,3,5,4,6,7] | 2      | 1</span></span><br><span class=\"line\"><span class=\"emphasis\">  2   | [2,3,5,4,6,7,1] | 3      | 1</span></span><br><span class=\"line\"><span class=\"emphasis\">  3   | [3,5,4,6,7,1,2] | 5      | 1</span></span><br><span class=\"line\"><span class=\"emphasis\">  4   | [5,4,6,7,1,2,3] | 5      | 2</span></span><br><span class=\"line\"><span class=\"emphasis\">So we can see that 4 rounds will be played and 5 is the winner because it wins 2 consecutive games.</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: arr = [3,2,1], k = 10</span><br><span class=\"line\">Output: 3</span><br><span class=\"line\">Explanation: 3 will win the first 10 rounds consecutively.</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 3:</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: arr = [1,9,8,2,3,7,6,4,5], k = 7</span><br><span class=\"line\">Output: 9</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 4:</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: arr = [1,11,22,33,44,55,66,77,88,99], k = 1000000000</span><br><span class=\"line\">Output: 99</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"My-Solution\"><a href=\"#My-Solution\" class=\"headerlink\" title=\"My Solution\"></a>My Solution</h2><p>看到这题，首先我认为这题清晰明了，用__迭代__去完成全部流程，用<strong>k</strong>去做结束的标志，是一道从头到尾很明确的题。但是:joy:</p>\n<p>贴上我稚嫩的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getWinner</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> zero = k-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> solution = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> currMax = Math.max(arr[<span class=\"number\">0</span>],arr[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> currMin = Math.min(arr[<span class=\"number\">0</span>], arr[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        helper(currMax, currMin, arr);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(res == -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// initial, no compare</span></span><br><span class=\"line\">            res = currMax;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(currMax == res)&#123;</span><br><span class=\"line\">                k--;</span><br><span class=\"line\">                solution = currMax;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                k = zero;</span><br><span class=\"line\">                res = currMax;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> solution;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(<span class=\"keyword\">int</span> max, <span class=\"keyword\">int</span> min, <span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">    arr[<span class=\"number\">0</span>] = max;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        arr[i] = arr[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr[arr.length-<span class=\"number\">1</span>] = min;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>没通过，因为<code>Time Limited</code>，跑得太慢了！</p>\n<h2 id=\"Niubility-Solution\"><a href=\"#Niubility-Solution\" class=\"headerlink\" title=\"Niubility Solution\"></a>Niubility Solution</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getWinner</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 数组长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = arr.length;</span><br><span class=\"line\">    <span class=\"comment\">// 数组长度与k之间取最小的。</span></span><br><span class=\"line\">    k = Math.min(k, n);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> A = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 标志位，记录相同次数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> rep = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 从第二个开始iterate，无终结条件</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;;i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// “i%n“ 取余数，逻辑变换数组。由于for循环无终结条件，所以i会无限增加超过n。</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> B = arr[i%n];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A &gt;= B)&#123;</span><br><span class=\"line\">            rep++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            A = B;</span><br><span class=\"line\">            rep = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 终结条件在这里，rep等于k时结束。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rep == k)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> A;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>通过对比可以发现，我耗时的原因在于：</strong> </p>\n<ol>\n<li>我是真的挪了数组！物理上的挪动，实际上，逻辑移动数组即可！我的程序算例4要6秒，这个只需要0秒。</li>\n<li><code>Math.min(k, n)</code>，如果题目给的k为<code>10000000</code>,数组长度为<code>8</code>,那么最后也是按<code>8</code> 来算，那么多循环无意义，一遍遍历即可获取最大（这样也行？）</li>\n</ol>\n<p>况且，逻辑i上也没有去变换位置，题目的本质还是挨个遍历！</p>\n<p>i.e. arr = [2,1,3,5,4,6,7], k = 2</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>Record Leetcode contest 200.</p>","more":"<h1 id=\"Q1\"><a href=\"#Q1\" class=\"headerlink\" title=\"Q1\"></a>Q1</h1><p>passed.</p>\n<h1 id=\"Q2\"><a href=\"#Q2\" class=\"headerlink\" title=\"Q2\"></a>Q2</h1><p>Find the winner of an Array Game.</p>\n<p>Given an integer array <code>arr</code> of <strong>distinct</strong> integers and an integer <code>k</code>.</p>\n<p>A game will be played between the first two elements of the array (i.e. <code>arr[0]</code> and <code>arr[1]</code>). In each round of the game, we compare <code>arr[0]</code> with <code>arr[1]</code>, the larger integer wins and remains at position <code>0</code> and the smaller integer moves to the end of the array. The game ends when an integer wins <code>k</code> consecutive rounds.</p>\n<p>Return <em>the integer which will win the game</em>.</p>\n<p>It is <strong>guaranteed</strong> that there will be a winner of the game.</p>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: arr = [2,1,3,5,4,6,7], k = 2</span><br><span class=\"line\">Output: 5</span><br><span class=\"line\">Explanation: Let&#x27;s see the rounds of the game:</span><br><span class=\"line\">Round |       arr       | winner | win<span class=\"emphasis\">_count</span></span><br><span class=\"line\"><span class=\"emphasis\">  1   | [2,1,3,5,4,6,7] | 2      | 1</span></span><br><span class=\"line\"><span class=\"emphasis\">  2   | [2,3,5,4,6,7,1] | 3      | 1</span></span><br><span class=\"line\"><span class=\"emphasis\">  3   | [3,5,4,6,7,1,2] | 5      | 1</span></span><br><span class=\"line\"><span class=\"emphasis\">  4   | [5,4,6,7,1,2,3] | 5      | 2</span></span><br><span class=\"line\"><span class=\"emphasis\">So we can see that 4 rounds will be played and 5 is the winner because it wins 2 consecutive games.</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: arr = [3,2,1], k = 10</span><br><span class=\"line\">Output: 3</span><br><span class=\"line\">Explanation: 3 will win the first 10 rounds consecutively.</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 3:</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: arr = [1,9,8,2,3,7,6,4,5], k = 7</span><br><span class=\"line\">Output: 9</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 4:</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: arr = [1,11,22,33,44,55,66,77,88,99], k = 1000000000</span><br><span class=\"line\">Output: 99</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"My-Solution\"><a href=\"#My-Solution\" class=\"headerlink\" title=\"My Solution\"></a>My Solution</h2><p>看到这题，首先我认为这题清晰明了，用__迭代__去完成全部流程，用<strong>k</strong>去做结束的标志，是一道从头到尾很明确的题。但是:joy:</p>\n<p>贴上我稚嫩的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getWinner</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> zero = k-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> solution = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> currMax = Math.max(arr[<span class=\"number\">0</span>],arr[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> currMin = Math.min(arr[<span class=\"number\">0</span>], arr[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        helper(currMax, currMin, arr);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(res == -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// initial, no compare</span></span><br><span class=\"line\">            res = currMax;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(currMax == res)&#123;</span><br><span class=\"line\">                k--;</span><br><span class=\"line\">                solution = currMax;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                k = zero;</span><br><span class=\"line\">                res = currMax;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> solution;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(<span class=\"keyword\">int</span> max, <span class=\"keyword\">int</span> min, <span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">    arr[<span class=\"number\">0</span>] = max;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        arr[i] = arr[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr[arr.length-<span class=\"number\">1</span>] = min;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>没通过，因为<code>Time Limited</code>，跑得太慢了！</p>\n<h2 id=\"Niubility-Solution\"><a href=\"#Niubility-Solution\" class=\"headerlink\" title=\"Niubility Solution\"></a>Niubility Solution</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getWinner</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 数组长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = arr.length;</span><br><span class=\"line\">    <span class=\"comment\">// 数组长度与k之间取最小的。</span></span><br><span class=\"line\">    k = Math.min(k, n);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> A = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 标志位，记录相同次数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> rep = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 从第二个开始iterate，无终结条件</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;;i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// “i%n“ 取余数，逻辑变换数组。由于for循环无终结条件，所以i会无限增加超过n。</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> B = arr[i%n];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A &gt;= B)&#123;</span><br><span class=\"line\">            rep++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            A = B;</span><br><span class=\"line\">            rep = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 终结条件在这里，rep等于k时结束。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rep == k)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> A;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>通过对比可以发现，我耗时的原因在于：</strong> </p>\n<ol>\n<li>我是真的挪了数组！物理上的挪动，实际上，逻辑移动数组即可！我的程序算例4要6秒，这个只需要0秒。</li>\n<li><code>Math.min(k, n)</code>，如果题目给的k为<code>10000000</code>,数组长度为<code>8</code>,那么最后也是按<code>8</code> 来算，那么多循环无意义，一遍遍历即可获取最大（这样也行？）</li>\n</ol>\n<p>况且，逻辑i上也没有去变换位置，题目的本质还是挨个遍历！</p>\n<p>i.e. arr = [2,1,3,5,4,6,7], k = 2</p>"},{"title":"contest201","date":"2020-08-09T04:22:53.000Z","_content":"\nLeetcode周赛201.\n\n<!--more-->\n\n# 1544 Make The String Great\n\nGiven a string `s` of lower and upper case English letters.\n\nA good string is a string which doesn't have **two adjacent characters** `s[i]` and `s[i + 1]` where:\n\n- `0 <= i <= s.length - 2`\n- `s[i]` is a lower-case letter and `s[i + 1]` is the same letter but in upper-case or **vice-versa**.\n\nTo make the string good, you can choose **two adjacent** characters that make the string bad and remove them. You can keep doing this until the string becomes good.\n\nReturn *the string* after making it good. The answer is guaranteed to be unique under the given constraints.\n\n**Notice** that an empty string is also good.\n\n**Example 1:**\n\n```\nInput: s = \"leEeetcode\"\nOutput: \"leetcode\"\nExplanation: In the first step, either you choose i = 1 or i = 2, both will result \"leEeetcode\" to be reduced to \"leetcode\".\n```\n\n**Example 2:**\n\n```\nInput: s = \"abBAcC\"\nOutput: \"\"\nExplanation: We have many possible scenarios, and all lead to the same answer. For example:\n\"abBAcC\" --> \"aAcC\" --> \"cC\" --> \"\"\n\"abBAcC\" --> \"abBA\" --> \"aA\" --> \"\"\n```\n\n**Example 3:**\n\n```\nInput: s = \"s\"\nOutput: \"s\"\n```\n\n## Solution\n\n- 首先要注意审题，明确界限的判断。尤其是`vice-versa`，反之亦然的意思，就是**相邻两个字母忽略大小写时相同，且一个大写一个小写**，需要将这两个字母剔除。\n- 通过`example 2`可以看出算法应有*循环*的动作，剔除后还应该重新审视。\n\n### mine\n\n```java\npublic String makeGood(String s) {\n    Stack<Character> stack = new Stack<>();\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (!stack.empty() && (\n                (Character.isUpperCase(c) && Character.isLowerCase(stack.peek()) && ((stack.peek() - 'a') == (c - 'A')))\n                        ||\n                        (Character.isLowerCase(c) && Character.isUpperCase(stack.peek()) && ((stack.peek() - 'A') == (c - 'a')))\n        )) {\n            stack.pop();\n        } else {\n            stack.push(c);\n        }\n    }\n    Iterator<Character> iterator = stack.iterator();\n    StringBuilder sb = new StringBuilder();\n    while (iterator.hasNext()) {\n        sb.append(iterator.next());\n    }\n\t// 因为是iterator，不用reverse()\n    return sb.toString();\n}\n```\n### better\n\n```java\nboolean ch = true;\nwhile (ch) {\n    ch = false;\n    String t = s;\n    for (int i = 0; i < s.length() - 1; ++i) {\n        if (s.charAt(i) + 32 == s.charAt(i + 1) || s.charAt(i + 1) + 32 == s.charAt(i)) {\n            t = s.substring(0, i) + s.substring(i + 2);\n            ch = true;\n            break;\n        }\n    }\n    s = t;\n}\nreturn s;\n```\n\n# 1545 Find Kth Bit in Nth Binary String\n\nGiven two positive integers `n` and `k`, the binary string `Sn` is formed as follows:\n\n- `S1 = \"0\"`\n- `Si = Si-1 + \"1\" + reverse(invert(Si-1))` for `i > 1`\n\nWhere `+` denotes the concatenation operation, `reverse(x)` returns the reversed string x, and `invert(x)` inverts all the bits in x (0 changes to 1 and 1 changes to 0).\n\nFor example, the first 4 strings in the above sequence are:\n\n- S1 = \"0\"\n- S2 = \"0**1**1\"\n- S3 = \"011**1**001\"\n- S4 = \"0111001**1**0110001\"\n\nReturn *the* `kth` *bit* *in* `Sn`. It is guaranteed that `k` is valid for the given `n`.\n\n \n\n**Example 1:**\n\n```\nInput: n = 3, k = 1\nOutput: \"0\"\nExplanation: S3 is \"0111001\". The first bit is \"0\".\n```\n\n**Example 2:**\n\n```\nInput: n = 4, k = 11\nOutput: \"1\"\nExplanation: S4 is \"011100110110001\". The 11th bit is \"1\".\n```\n\n**Example 3:**\n\n```\nInput: n = 1, k = 1\nOutput: \"0\"\n```\n\n**Example 4:**\n\n```\nInput: n = 2, k = 3\nOutput: \"1\"\n```\n\n## Solution\n\n题目中已经给了计算式，根据式子来计算结果。\n\n```java\npublic char findKthBit(int n, int k) {\n    StringBuilder sb = new StringBuilder(\"0\");\n    while (n > 1) {\n        int integer = Integer.parseInt(sb.toString());\n        StringBuilder stringBuilder = new StringBuilder(Integer.toBinaryString(integer));\n        // 0-1 inverse\n        for (int i = 0; i < stringBuilder.length(); i++) {\n            if (stringBuilder.charAt(i) == '0') {\n                stringBuilder.replace(i, i + 1, \"1\");\n            } else {\n                stringBuilder.replace(i, i + 1, \"0\");\n            }\n        }\n        stringBuilder.reverse();\n        sb.append(\"1\").append(stringBuilder);\n        n--;\n        System.out.println(sb.toString());\n    }\n\n    char[] chars = sb.toString().toCharArray();\n    return chars[k - 1];\n}\n```\n\n上面的解题过程是错的，我觉得最好的方式应该是用递归，但是不太会，用来迭代，在n=4时的结果就错了。\n\n### better\n\n做`0-1`转换时，当时想用位运算，怎奈不熟练、没想起来`异或`。\n\n- 异或 ^ ：相同为0，0异或任何数为任何数。在二进制的情况下，与`1`异或等同于`0-1`翻转。\n\n#### method 1\n\n一目了然，迭代\n\n```java\npublic char findKthBit(int n, int k) {\n    String s = \"0\";\n    while (n>1) {\n        --n;\n        s = s+\"1\"+sinv(s);\n    }\n    // 从0开始，k-1\n    return s.charAt(k-1);\n}\n\npublic String sinv(String s) {\n    StringBuilder a = new StringBuilder();\n    // 从后遍历，reverse()\n    for (int i = s.length()-1; i>=0; --i) {\n        char c = s.charAt(i);\n        // 0-1翻转\n        c^=1;\n        a.append(c);\n    }\n    return a.toString();\n}\n```\n\n#### method 2\n\n别具一格\n\n```java\npublic char findKthBit(int n, int k){\n    char findKthBit(int n, int k) \n    s[1]=\"0\";\n    t[1]=\"1\";\n    for(int i=2;i<=n;i++){\n        s[i]=s[i-1];\n        s[i]+='1';\n        s[i]+=t[i-1];\n        t[i]=s[i-1];\n        t[i]+='0';\n        t[i]+=t[i-1];\n    }\n    return s[n][k-1];\n}\n```\n\n#### method 3\n\n清清楚楚，深度优先\n\n```java\nchar dfs(int n, int k) {\n    if (n == 1) {\n        return '0';\n    } else {\n        int len = (1 << n) - 1;\n        int base = (1 << (n - 1)) - 1;\n        if (k == base + 1) {\n            return '1';\n        } else if (k <= base) {\n            return dfs(n - 1, k);\n        } else {\n            return dfs(n - 1, len - k + 1) ^ 1;\n        }\n    }\n}\n\nchar findKthBit(int n, int k) {\n    return dfs(n, k);\n}\n```\n\n","source":"_posts/contest201.md","raw":"---\ntitle: contest201\ndate: 2020-08-09 12:22:53\ncategories: Leetcode\ntags: algorithm\n---\n\nLeetcode周赛201.\n\n<!--more-->\n\n# 1544 Make The String Great\n\nGiven a string `s` of lower and upper case English letters.\n\nA good string is a string which doesn't have **two adjacent characters** `s[i]` and `s[i + 1]` where:\n\n- `0 <= i <= s.length - 2`\n- `s[i]` is a lower-case letter and `s[i + 1]` is the same letter but in upper-case or **vice-versa**.\n\nTo make the string good, you can choose **two adjacent** characters that make the string bad and remove them. You can keep doing this until the string becomes good.\n\nReturn *the string* after making it good. The answer is guaranteed to be unique under the given constraints.\n\n**Notice** that an empty string is also good.\n\n**Example 1:**\n\n```\nInput: s = \"leEeetcode\"\nOutput: \"leetcode\"\nExplanation: In the first step, either you choose i = 1 or i = 2, both will result \"leEeetcode\" to be reduced to \"leetcode\".\n```\n\n**Example 2:**\n\n```\nInput: s = \"abBAcC\"\nOutput: \"\"\nExplanation: We have many possible scenarios, and all lead to the same answer. For example:\n\"abBAcC\" --> \"aAcC\" --> \"cC\" --> \"\"\n\"abBAcC\" --> \"abBA\" --> \"aA\" --> \"\"\n```\n\n**Example 3:**\n\n```\nInput: s = \"s\"\nOutput: \"s\"\n```\n\n## Solution\n\n- 首先要注意审题，明确界限的判断。尤其是`vice-versa`，反之亦然的意思，就是**相邻两个字母忽略大小写时相同，且一个大写一个小写**，需要将这两个字母剔除。\n- 通过`example 2`可以看出算法应有*循环*的动作，剔除后还应该重新审视。\n\n### mine\n\n```java\npublic String makeGood(String s) {\n    Stack<Character> stack = new Stack<>();\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (!stack.empty() && (\n                (Character.isUpperCase(c) && Character.isLowerCase(stack.peek()) && ((stack.peek() - 'a') == (c - 'A')))\n                        ||\n                        (Character.isLowerCase(c) && Character.isUpperCase(stack.peek()) && ((stack.peek() - 'A') == (c - 'a')))\n        )) {\n            stack.pop();\n        } else {\n            stack.push(c);\n        }\n    }\n    Iterator<Character> iterator = stack.iterator();\n    StringBuilder sb = new StringBuilder();\n    while (iterator.hasNext()) {\n        sb.append(iterator.next());\n    }\n\t// 因为是iterator，不用reverse()\n    return sb.toString();\n}\n```\n### better\n\n```java\nboolean ch = true;\nwhile (ch) {\n    ch = false;\n    String t = s;\n    for (int i = 0; i < s.length() - 1; ++i) {\n        if (s.charAt(i) + 32 == s.charAt(i + 1) || s.charAt(i + 1) + 32 == s.charAt(i)) {\n            t = s.substring(0, i) + s.substring(i + 2);\n            ch = true;\n            break;\n        }\n    }\n    s = t;\n}\nreturn s;\n```\n\n# 1545 Find Kth Bit in Nth Binary String\n\nGiven two positive integers `n` and `k`, the binary string `Sn` is formed as follows:\n\n- `S1 = \"0\"`\n- `Si = Si-1 + \"1\" + reverse(invert(Si-1))` for `i > 1`\n\nWhere `+` denotes the concatenation operation, `reverse(x)` returns the reversed string x, and `invert(x)` inverts all the bits in x (0 changes to 1 and 1 changes to 0).\n\nFor example, the first 4 strings in the above sequence are:\n\n- S1 = \"0\"\n- S2 = \"0**1**1\"\n- S3 = \"011**1**001\"\n- S4 = \"0111001**1**0110001\"\n\nReturn *the* `kth` *bit* *in* `Sn`. It is guaranteed that `k` is valid for the given `n`.\n\n \n\n**Example 1:**\n\n```\nInput: n = 3, k = 1\nOutput: \"0\"\nExplanation: S3 is \"0111001\". The first bit is \"0\".\n```\n\n**Example 2:**\n\n```\nInput: n = 4, k = 11\nOutput: \"1\"\nExplanation: S4 is \"011100110110001\". The 11th bit is \"1\".\n```\n\n**Example 3:**\n\n```\nInput: n = 1, k = 1\nOutput: \"0\"\n```\n\n**Example 4:**\n\n```\nInput: n = 2, k = 3\nOutput: \"1\"\n```\n\n## Solution\n\n题目中已经给了计算式，根据式子来计算结果。\n\n```java\npublic char findKthBit(int n, int k) {\n    StringBuilder sb = new StringBuilder(\"0\");\n    while (n > 1) {\n        int integer = Integer.parseInt(sb.toString());\n        StringBuilder stringBuilder = new StringBuilder(Integer.toBinaryString(integer));\n        // 0-1 inverse\n        for (int i = 0; i < stringBuilder.length(); i++) {\n            if (stringBuilder.charAt(i) == '0') {\n                stringBuilder.replace(i, i + 1, \"1\");\n            } else {\n                stringBuilder.replace(i, i + 1, \"0\");\n            }\n        }\n        stringBuilder.reverse();\n        sb.append(\"1\").append(stringBuilder);\n        n--;\n        System.out.println(sb.toString());\n    }\n\n    char[] chars = sb.toString().toCharArray();\n    return chars[k - 1];\n}\n```\n\n上面的解题过程是错的，我觉得最好的方式应该是用递归，但是不太会，用来迭代，在n=4时的结果就错了。\n\n### better\n\n做`0-1`转换时，当时想用位运算，怎奈不熟练、没想起来`异或`。\n\n- 异或 ^ ：相同为0，0异或任何数为任何数。在二进制的情况下，与`1`异或等同于`0-1`翻转。\n\n#### method 1\n\n一目了然，迭代\n\n```java\npublic char findKthBit(int n, int k) {\n    String s = \"0\";\n    while (n>1) {\n        --n;\n        s = s+\"1\"+sinv(s);\n    }\n    // 从0开始，k-1\n    return s.charAt(k-1);\n}\n\npublic String sinv(String s) {\n    StringBuilder a = new StringBuilder();\n    // 从后遍历，reverse()\n    for (int i = s.length()-1; i>=0; --i) {\n        char c = s.charAt(i);\n        // 0-1翻转\n        c^=1;\n        a.append(c);\n    }\n    return a.toString();\n}\n```\n\n#### method 2\n\n别具一格\n\n```java\npublic char findKthBit(int n, int k){\n    char findKthBit(int n, int k) \n    s[1]=\"0\";\n    t[1]=\"1\";\n    for(int i=2;i<=n;i++){\n        s[i]=s[i-1];\n        s[i]+='1';\n        s[i]+=t[i-1];\n        t[i]=s[i-1];\n        t[i]+='0';\n        t[i]+=t[i-1];\n    }\n    return s[n][k-1];\n}\n```\n\n#### method 3\n\n清清楚楚，深度优先\n\n```java\nchar dfs(int n, int k) {\n    if (n == 1) {\n        return '0';\n    } else {\n        int len = (1 << n) - 1;\n        int base = (1 << (n - 1)) - 1;\n        if (k == base + 1) {\n            return '1';\n        } else if (k <= base) {\n            return dfs(n - 1, k);\n        } else {\n            return dfs(n - 1, len - k + 1) ^ 1;\n        }\n    }\n}\n\nchar findKthBit(int n, int k) {\n    return dfs(n, k);\n}\n```\n\n","slug":"contest201","published":1,"updated":"2020-08-09T05:50:41.788Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgc0000wbyih4f4herkx","content":"<p>Leetcode周赛201.</p>\n<a id=\"more\"></a>\n\n<h1 id=\"1544-Make-The-String-Great\"><a href=\"#1544-Make-The-String-Great\" class=\"headerlink\" title=\"1544 Make The String Great\"></a>1544 Make The String Great</h1><p>Given a string <code>s</code> of lower and upper case English letters.</p>\n<p>A good string is a string which doesn’t have <strong>two adjacent characters</strong> <code>s[i]</code> and <code>s[i + 1]</code> where:</p>\n<ul>\n<li><code>0 &lt;= i &lt;= s.length - 2</code></li>\n<li><code>s[i]</code> is a lower-case letter and <code>s[i + 1]</code> is the same letter but in upper-case or <strong>vice-versa</strong>.</li>\n</ul>\n<p>To make the string good, you can choose <strong>two adjacent</strong> characters that make the string bad and remove them. You can keep doing this until the string becomes good.</p>\n<p>Return <em>the string</em> after making it good. The answer is guaranteed to be unique under the given constraints.</p>\n<p><strong>Notice</strong> that an empty string is also good.</p>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: s &#x3D; &quot;leEeetcode&quot;</span><br><span class=\"line\">Output: &quot;leetcode&quot;</span><br><span class=\"line\">Explanation: In the first step, either you choose i &#x3D; 1 or i &#x3D; 2, both will result &quot;leEeetcode&quot; to be reduced to &quot;leetcode&quot;.</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: s &#x3D; &quot;abBAcC&quot;</span><br><span class=\"line\">Output: &quot;&quot;</span><br><span class=\"line\">Explanation: We have many possible scenarios, and all lead to the same answer. For example:</span><br><span class=\"line\">&quot;abBAcC&quot; --&gt; &quot;aAcC&quot; --&gt; &quot;cC&quot; --&gt; &quot;&quot;</span><br><span class=\"line\">&quot;abBAcC&quot; --&gt; &quot;abBA&quot; --&gt; &quot;aA&quot; --&gt; &quot;&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 3:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: s &#x3D; &quot;s&quot;</span><br><span class=\"line\">Output: &quot;s&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><ul>\n<li>首先要注意审题，明确界限的判断。尤其是<code>vice-versa</code>，反之亦然的意思，就是<strong>相邻两个字母忽略大小写时相同，且一个大写一个小写</strong>，需要将这两个字母剔除。</li>\n<li>通过<code>example 2</code>可以看出算法应有<em>循环</em>的动作，剔除后还应该重新审视。</li>\n</ul>\n<h3 id=\"mine\"><a href=\"#mine\" class=\"headerlink\" title=\"mine\"></a>mine</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">makeGood</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    Stack&lt;Character&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> c = s.charAt(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!stack.empty() &amp;&amp; (</span><br><span class=\"line\">                (Character.isUpperCase(c) &amp;&amp; Character.isLowerCase(stack.peek()) &amp;&amp; ((stack.peek() - <span class=\"string\">&#x27;a&#x27;</span>) == (c - <span class=\"string\">&#x27;A&#x27;</span>)))</span><br><span class=\"line\">                        ||</span><br><span class=\"line\">                        (Character.isLowerCase(c) &amp;&amp; Character.isUpperCase(stack.peek()) &amp;&amp; ((stack.peek() - <span class=\"string\">&#x27;A&#x27;</span>) == (c - <span class=\"string\">&#x27;a&#x27;</span>)))</span><br><span class=\"line\">        )) &#123;</span><br><span class=\"line\">            stack.pop();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            stack.push(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Iterator&lt;Character&gt; iterator = stack.iterator();</span><br><span class=\"line\">    StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">        sb.append(iterator.next());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 因为是iterator，不用reverse()</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"better\"><a href=\"#better\" class=\"headerlink\" title=\"better\"></a>better</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">boolean</span> ch = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (ch) &#123;</span><br><span class=\"line\">    ch = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    String t = s;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length() - <span class=\"number\">1</span>; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.charAt(i) + <span class=\"number\">32</span> == s.charAt(i + <span class=\"number\">1</span>) || s.charAt(i + <span class=\"number\">1</span>) + <span class=\"number\">32</span> == s.charAt(i)) &#123;</span><br><span class=\"line\">            t = s.substring(<span class=\"number\">0</span>, i) + s.substring(i + <span class=\"number\">2</span>);</span><br><span class=\"line\">            ch = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    s = t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> s;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"1545-Find-Kth-Bit-in-Nth-Binary-String\"><a href=\"#1545-Find-Kth-Bit-in-Nth-Binary-String\" class=\"headerlink\" title=\"1545 Find Kth Bit in Nth Binary String\"></a>1545 Find Kth Bit in Nth Binary String</h1><p>Given two positive integers <code>n</code> and <code>k</code>, the binary string <code>Sn</code> is formed as follows:</p>\n<ul>\n<li><code>S1 = &quot;0&quot;</code></li>\n<li><code>Si = Si-1 + &quot;1&quot; + reverse(invert(Si-1))</code> for <code>i &gt; 1</code></li>\n</ul>\n<p>Where <code>+</code> denotes the concatenation operation, <code>reverse(x)</code> returns the reversed string x, and <code>invert(x)</code> inverts all the bits in x (0 changes to 1 and 1 changes to 0).</p>\n<p>For example, the first 4 strings in the above sequence are:</p>\n<ul>\n<li>S1 = “0”</li>\n<li>S2 = “0<strong>1</strong>1”</li>\n<li>S3 = “011<strong>1</strong>001”</li>\n<li>S4 = “0111001<strong>1</strong>0110001”</li>\n</ul>\n<p>Return <em>the</em> <code>kth</code> <em>bit</em> <em>in</em> <code>Sn</code>. It is guaranteed that <code>k</code> is valid for the given <code>n</code>.</p>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: n &#x3D; 3, k &#x3D; 1</span><br><span class=\"line\">Output: &quot;0&quot;</span><br><span class=\"line\">Explanation: S3 is &quot;0111001&quot;. The first bit is &quot;0&quot;.</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: n &#x3D; 4, k &#x3D; 11</span><br><span class=\"line\">Output: &quot;1&quot;</span><br><span class=\"line\">Explanation: S4 is &quot;011100110110001&quot;. The 11th bit is &quot;1&quot;.</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 3:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: n &#x3D; 1, k &#x3D; 1</span><br><span class=\"line\">Output: &quot;0&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 4:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: n &#x3D; 2, k &#x3D; 3</span><br><span class=\"line\">Output: &quot;1&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Solution-1\"><a href=\"#Solution-1\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><p>题目中已经给了计算式，根据式子来计算结果。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">char</span> <span class=\"title\">findKthBit</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> integer = Integer.parseInt(sb.toString());</span><br><span class=\"line\">        StringBuilder stringBuilder = <span class=\"keyword\">new</span> StringBuilder(Integer.toBinaryString(integer));</span><br><span class=\"line\">        <span class=\"comment\">// 0-1 inverse</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; stringBuilder.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (stringBuilder.charAt(i) == <span class=\"string\">&#x27;0&#x27;</span>) &#123;</span><br><span class=\"line\">                stringBuilder.replace(i, i + <span class=\"number\">1</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                stringBuilder.replace(i, i + <span class=\"number\">1</span>, <span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stringBuilder.reverse();</span><br><span class=\"line\">        sb.append(<span class=\"string\">&quot;1&quot;</span>).append(stringBuilder);</span><br><span class=\"line\">        n--;</span><br><span class=\"line\">        System.out.println(sb.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] chars = sb.toString().toCharArray();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> chars[k - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的解题过程是错的，我觉得最好的方式应该是用递归，但是不太会，用来迭代，在n=4时的结果就错了。</p>\n<h3 id=\"better-1\"><a href=\"#better-1\" class=\"headerlink\" title=\"better\"></a>better</h3><p>做<code>0-1</code>转换时，当时想用位运算，怎奈不熟练、没想起来<code>异或</code>。</p>\n<ul>\n<li>异或 ^ ：相同为0，0异或任何数为任何数。在二进制的情况下，与<code>1</code>异或等同于<code>0-1</code>翻转。</li>\n</ul>\n<h4 id=\"method-1\"><a href=\"#method-1\" class=\"headerlink\" title=\"method 1\"></a>method 1</h4><p>一目了然，迭代</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">char</span> <span class=\"title\">findKthBit</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    String s = <span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n&gt;<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        --n;</span><br><span class=\"line\">        s = s+<span class=\"string\">&quot;1&quot;</span>+sinv(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 从0开始，k-1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.charAt(k-<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sinv</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    StringBuilder a = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">    <span class=\"comment\">// 从后遍历，reverse()</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = s.length()-<span class=\"number\">1</span>; i&gt;=<span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> c = s.charAt(i);</span><br><span class=\"line\">        <span class=\"comment\">// 0-1翻转</span></span><br><span class=\"line\">        c^=<span class=\"number\">1</span>;</span><br><span class=\"line\">        a.append(c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"method-2\"><a href=\"#method-2\" class=\"headerlink\" title=\"method 2\"></a>method 2</h4><p>别具一格</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">char</span> <span class=\"title\">findKthBit</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">findKthBit</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k)</span> </span></span><br><span class=\"line\"><span class=\"function\">    s[1]</span>=<span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">    t[<span class=\"number\">1</span>]=<span class=\"string\">&quot;1&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        s[i]=s[i-<span class=\"number\">1</span>];</span><br><span class=\"line\">        s[i]+=<span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">        s[i]+=t[i-<span class=\"number\">1</span>];</span><br><span class=\"line\">        t[i]=s[i-<span class=\"number\">1</span>];</span><br><span class=\"line\">        t[i]+=<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        t[i]+=t[i-<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s[n][k-<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"method-3\"><a href=\"#method-3\" class=\"headerlink\" title=\"method 3\"></a>method 3</h4><p>清清楚楚，深度优先</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = (<span class=\"number\">1</span> &lt;&lt; n) - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> base = (<span class=\"number\">1</span> &lt;&lt; (n - <span class=\"number\">1</span>)) - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k == base + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (k &lt;= base) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> dfs(n - <span class=\"number\">1</span>, k);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> dfs(n - <span class=\"number\">1</span>, len - k + <span class=\"number\">1</span>) ^ <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">findKthBit</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dfs(n, k);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>Leetcode周赛201.</p>","more":"<h1 id=\"1544-Make-The-String-Great\"><a href=\"#1544-Make-The-String-Great\" class=\"headerlink\" title=\"1544 Make The String Great\"></a>1544 Make The String Great</h1><p>Given a string <code>s</code> of lower and upper case English letters.</p>\n<p>A good string is a string which doesn’t have <strong>two adjacent characters</strong> <code>s[i]</code> and <code>s[i + 1]</code> where:</p>\n<ul>\n<li><code>0 &lt;= i &lt;= s.length - 2</code></li>\n<li><code>s[i]</code> is a lower-case letter and <code>s[i + 1]</code> is the same letter but in upper-case or <strong>vice-versa</strong>.</li>\n</ul>\n<p>To make the string good, you can choose <strong>two adjacent</strong> characters that make the string bad and remove them. You can keep doing this until the string becomes good.</p>\n<p>Return <em>the string</em> after making it good. The answer is guaranteed to be unique under the given constraints.</p>\n<p><strong>Notice</strong> that an empty string is also good.</p>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: s &#x3D; &quot;leEeetcode&quot;</span><br><span class=\"line\">Output: &quot;leetcode&quot;</span><br><span class=\"line\">Explanation: In the first step, either you choose i &#x3D; 1 or i &#x3D; 2, both will result &quot;leEeetcode&quot; to be reduced to &quot;leetcode&quot;.</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: s &#x3D; &quot;abBAcC&quot;</span><br><span class=\"line\">Output: &quot;&quot;</span><br><span class=\"line\">Explanation: We have many possible scenarios, and all lead to the same answer. For example:</span><br><span class=\"line\">&quot;abBAcC&quot; --&gt; &quot;aAcC&quot; --&gt; &quot;cC&quot; --&gt; &quot;&quot;</span><br><span class=\"line\">&quot;abBAcC&quot; --&gt; &quot;abBA&quot; --&gt; &quot;aA&quot; --&gt; &quot;&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 3:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: s &#x3D; &quot;s&quot;</span><br><span class=\"line\">Output: &quot;s&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><ul>\n<li>首先要注意审题，明确界限的判断。尤其是<code>vice-versa</code>，反之亦然的意思，就是<strong>相邻两个字母忽略大小写时相同，且一个大写一个小写</strong>，需要将这两个字母剔除。</li>\n<li>通过<code>example 2</code>可以看出算法应有<em>循环</em>的动作，剔除后还应该重新审视。</li>\n</ul>\n<h3 id=\"mine\"><a href=\"#mine\" class=\"headerlink\" title=\"mine\"></a>mine</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">makeGood</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    Stack&lt;Character&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> c = s.charAt(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!stack.empty() &amp;&amp; (</span><br><span class=\"line\">                (Character.isUpperCase(c) &amp;&amp; Character.isLowerCase(stack.peek()) &amp;&amp; ((stack.peek() - <span class=\"string\">&#x27;a&#x27;</span>) == (c - <span class=\"string\">&#x27;A&#x27;</span>)))</span><br><span class=\"line\">                        ||</span><br><span class=\"line\">                        (Character.isLowerCase(c) &amp;&amp; Character.isUpperCase(stack.peek()) &amp;&amp; ((stack.peek() - <span class=\"string\">&#x27;A&#x27;</span>) == (c - <span class=\"string\">&#x27;a&#x27;</span>)))</span><br><span class=\"line\">        )) &#123;</span><br><span class=\"line\">            stack.pop();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            stack.push(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Iterator&lt;Character&gt; iterator = stack.iterator();</span><br><span class=\"line\">    StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">        sb.append(iterator.next());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 因为是iterator，不用reverse()</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"better\"><a href=\"#better\" class=\"headerlink\" title=\"better\"></a>better</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">boolean</span> ch = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (ch) &#123;</span><br><span class=\"line\">    ch = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    String t = s;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length() - <span class=\"number\">1</span>; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.charAt(i) + <span class=\"number\">32</span> == s.charAt(i + <span class=\"number\">1</span>) || s.charAt(i + <span class=\"number\">1</span>) + <span class=\"number\">32</span> == s.charAt(i)) &#123;</span><br><span class=\"line\">            t = s.substring(<span class=\"number\">0</span>, i) + s.substring(i + <span class=\"number\">2</span>);</span><br><span class=\"line\">            ch = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    s = t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> s;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"1545-Find-Kth-Bit-in-Nth-Binary-String\"><a href=\"#1545-Find-Kth-Bit-in-Nth-Binary-String\" class=\"headerlink\" title=\"1545 Find Kth Bit in Nth Binary String\"></a>1545 Find Kth Bit in Nth Binary String</h1><p>Given two positive integers <code>n</code> and <code>k</code>, the binary string <code>Sn</code> is formed as follows:</p>\n<ul>\n<li><code>S1 = &quot;0&quot;</code></li>\n<li><code>Si = Si-1 + &quot;1&quot; + reverse(invert(Si-1))</code> for <code>i &gt; 1</code></li>\n</ul>\n<p>Where <code>+</code> denotes the concatenation operation, <code>reverse(x)</code> returns the reversed string x, and <code>invert(x)</code> inverts all the bits in x (0 changes to 1 and 1 changes to 0).</p>\n<p>For example, the first 4 strings in the above sequence are:</p>\n<ul>\n<li>S1 = “0”</li>\n<li>S2 = “0<strong>1</strong>1”</li>\n<li>S3 = “011<strong>1</strong>001”</li>\n<li>S4 = “0111001<strong>1</strong>0110001”</li>\n</ul>\n<p>Return <em>the</em> <code>kth</code> <em>bit</em> <em>in</em> <code>Sn</code>. It is guaranteed that <code>k</code> is valid for the given <code>n</code>.</p>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: n &#x3D; 3, k &#x3D; 1</span><br><span class=\"line\">Output: &quot;0&quot;</span><br><span class=\"line\">Explanation: S3 is &quot;0111001&quot;. The first bit is &quot;0&quot;.</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: n &#x3D; 4, k &#x3D; 11</span><br><span class=\"line\">Output: &quot;1&quot;</span><br><span class=\"line\">Explanation: S4 is &quot;011100110110001&quot;. The 11th bit is &quot;1&quot;.</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 3:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: n &#x3D; 1, k &#x3D; 1</span><br><span class=\"line\">Output: &quot;0&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 4:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: n &#x3D; 2, k &#x3D; 3</span><br><span class=\"line\">Output: &quot;1&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Solution-1\"><a href=\"#Solution-1\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><p>题目中已经给了计算式，根据式子来计算结果。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">char</span> <span class=\"title\">findKthBit</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> integer = Integer.parseInt(sb.toString());</span><br><span class=\"line\">        StringBuilder stringBuilder = <span class=\"keyword\">new</span> StringBuilder(Integer.toBinaryString(integer));</span><br><span class=\"line\">        <span class=\"comment\">// 0-1 inverse</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; stringBuilder.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (stringBuilder.charAt(i) == <span class=\"string\">&#x27;0&#x27;</span>) &#123;</span><br><span class=\"line\">                stringBuilder.replace(i, i + <span class=\"number\">1</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                stringBuilder.replace(i, i + <span class=\"number\">1</span>, <span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stringBuilder.reverse();</span><br><span class=\"line\">        sb.append(<span class=\"string\">&quot;1&quot;</span>).append(stringBuilder);</span><br><span class=\"line\">        n--;</span><br><span class=\"line\">        System.out.println(sb.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] chars = sb.toString().toCharArray();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> chars[k - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的解题过程是错的，我觉得最好的方式应该是用递归，但是不太会，用来迭代，在n=4时的结果就错了。</p>\n<h3 id=\"better-1\"><a href=\"#better-1\" class=\"headerlink\" title=\"better\"></a>better</h3><p>做<code>0-1</code>转换时，当时想用位运算，怎奈不熟练、没想起来<code>异或</code>。</p>\n<ul>\n<li>异或 ^ ：相同为0，0异或任何数为任何数。在二进制的情况下，与<code>1</code>异或等同于<code>0-1</code>翻转。</li>\n</ul>\n<h4 id=\"method-1\"><a href=\"#method-1\" class=\"headerlink\" title=\"method 1\"></a>method 1</h4><p>一目了然，迭代</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">char</span> <span class=\"title\">findKthBit</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    String s = <span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n&gt;<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        --n;</span><br><span class=\"line\">        s = s+<span class=\"string\">&quot;1&quot;</span>+sinv(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 从0开始，k-1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.charAt(k-<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sinv</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    StringBuilder a = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">    <span class=\"comment\">// 从后遍历，reverse()</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = s.length()-<span class=\"number\">1</span>; i&gt;=<span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> c = s.charAt(i);</span><br><span class=\"line\">        <span class=\"comment\">// 0-1翻转</span></span><br><span class=\"line\">        c^=<span class=\"number\">1</span>;</span><br><span class=\"line\">        a.append(c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"method-2\"><a href=\"#method-2\" class=\"headerlink\" title=\"method 2\"></a>method 2</h4><p>别具一格</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">char</span> <span class=\"title\">findKthBit</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">findKthBit</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k)</span> </span></span><br><span class=\"line\"><span class=\"function\">    s[1]</span>=<span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">    t[<span class=\"number\">1</span>]=<span class=\"string\">&quot;1&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        s[i]=s[i-<span class=\"number\">1</span>];</span><br><span class=\"line\">        s[i]+=<span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">        s[i]+=t[i-<span class=\"number\">1</span>];</span><br><span class=\"line\">        t[i]=s[i-<span class=\"number\">1</span>];</span><br><span class=\"line\">        t[i]+=<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        t[i]+=t[i-<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s[n][k-<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"method-3\"><a href=\"#method-3\" class=\"headerlink\" title=\"method 3\"></a>method 3</h4><p>清清楚楚，深度优先</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = (<span class=\"number\">1</span> &lt;&lt; n) - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> base = (<span class=\"number\">1</span> &lt;&lt; (n - <span class=\"number\">1</span>)) - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k == base + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (k &lt;= base) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> dfs(n - <span class=\"number\">1</span>, k);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> dfs(n - <span class=\"number\">1</span>, len - k + <span class=\"number\">1</span>) ^ <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">findKthBit</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dfs(n, k);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"contest202","date":"2020-08-16T06:36:31.000Z","_content":"\nLeetocode周赛202\n\n<!--more-->\n\n# 1550. Three Consecutive Odds\n\nGiven an integer array `arr`, return `true` if there are three consecutive odd numbers in the array. Otherwise, return `false`.\n\n**Example 1:**\n\n```\nInput: arr = [2,6,4,1]\nOutput: false\nExplanation: There are no three consecutive odds.\n```\n\n**Example 2:**\n\n```\nInput: arr = [1,2,34,3,4,5,7,23,12]\nOutput: true\nExplanation: [5,7,23] are three consecutive odds.\n```\n\n## solution\n\n题目难度不高，因此重点关注代码技巧上。“连续三个基数”则返回true，否则false，一般情况下都会想到遍历数组的同时维护一个变量，变量达到三时返回。直到我看到了神级代码：\n\n```java\npublic boolean threeConsecutiveOdds(int[] a) {\n    for(int i = 0;i+2 < a.length;i++){\n        if(a[i]%2 + a[i+1] % 2 + a[i+2] % 2 == 3){\n            return true;\n        }\n    }\n    return false;\n}\n```\n\nrank榜单的前几名整齐化一地这样写。我们来看看这样写的原理：\n\n同样是for循环，它的 判断条件是`i+2<a.length`，为何要`+2`,原因在for循环中，它每次在第i处下标都会同时获取到i的后两位，把和三个数与2相除取余，如果是奇数余数为1,那么这三个数相加即为3,好处是不用额外维护一个变量，代码也简单易懂。\n\n**note:** 循环时同时做三个数的运算；取余判断奇偶\n\n\n\n# 1551. Minimum Operations to Make Array Equal\n\nYou have an array `arr` of length `n` where `arr[i] = (2 * i) + 1` for all valid values of `i` (i.e. `0 <= i < n`).\n\nIn one operation, you can select two indices `x` and `y` where `0 <= x, y < n` and subtract `1` from `arr[x]` and add `1` to `arr[y]` (i.e. perform `arr[x] -=1 `and `arr[y] += 1`). The goal is to make all the elements of the array **equal**. It is **guaranteed** that all the elements of the array can be made equal using some operations.\n\nGiven an integer `n`, the length of the array. Return *the minimum number of operations* needed to make all the elements of arr equal.\n\n**Example 1:**\n\n```\nInput: n = 3\nOutput: 2\nExplanation: arr = [1, 3, 5]\nFirst operation choose x = 2 and y = 0, this leads arr to be [2, 3, 4]\nIn the second operation choose x = 2 and y = 0 again, thus arr = [3, 3, 3].\n```\n\n**Example 2:**\n\n```\nInput: n = 6\nOutput: 9\n```\n\n## solution\n\n这道题看着挺复杂，行数多，其实像是在`找规律`（我就是没找出来，n=6时output=9？），是一道数学题。\n\n```java\npublic int minOperations(int n) {\n    // Take care of overflow if n is too large.\n    if(n%2==1){\n        n/=2;\n        return (n*(n+1));\n    }        \n    n/=2;\n    return n*n;\n}\n```\n\n上面的解法是将其分两种情况--奇数与偶数。考得不是算法， 是脑子吧。。。","source":"_posts/contest202.md","raw":"---\ntitle: contest202\ndate: 2020-08-16 14:36:31\ncategories: Leetcode\ntags: algorithm\n---\n\nLeetocode周赛202\n\n<!--more-->\n\n# 1550. Three Consecutive Odds\n\nGiven an integer array `arr`, return `true` if there are three consecutive odd numbers in the array. Otherwise, return `false`.\n\n**Example 1:**\n\n```\nInput: arr = [2,6,4,1]\nOutput: false\nExplanation: There are no three consecutive odds.\n```\n\n**Example 2:**\n\n```\nInput: arr = [1,2,34,3,4,5,7,23,12]\nOutput: true\nExplanation: [5,7,23] are three consecutive odds.\n```\n\n## solution\n\n题目难度不高，因此重点关注代码技巧上。“连续三个基数”则返回true，否则false，一般情况下都会想到遍历数组的同时维护一个变量，变量达到三时返回。直到我看到了神级代码：\n\n```java\npublic boolean threeConsecutiveOdds(int[] a) {\n    for(int i = 0;i+2 < a.length;i++){\n        if(a[i]%2 + a[i+1] % 2 + a[i+2] % 2 == 3){\n            return true;\n        }\n    }\n    return false;\n}\n```\n\nrank榜单的前几名整齐化一地这样写。我们来看看这样写的原理：\n\n同样是for循环，它的 判断条件是`i+2<a.length`，为何要`+2`,原因在for循环中，它每次在第i处下标都会同时获取到i的后两位，把和三个数与2相除取余，如果是奇数余数为1,那么这三个数相加即为3,好处是不用额外维护一个变量，代码也简单易懂。\n\n**note:** 循环时同时做三个数的运算；取余判断奇偶\n\n\n\n# 1551. Minimum Operations to Make Array Equal\n\nYou have an array `arr` of length `n` where `arr[i] = (2 * i) + 1` for all valid values of `i` (i.e. `0 <= i < n`).\n\nIn one operation, you can select two indices `x` and `y` where `0 <= x, y < n` and subtract `1` from `arr[x]` and add `1` to `arr[y]` (i.e. perform `arr[x] -=1 `and `arr[y] += 1`). The goal is to make all the elements of the array **equal**. It is **guaranteed** that all the elements of the array can be made equal using some operations.\n\nGiven an integer `n`, the length of the array. Return *the minimum number of operations* needed to make all the elements of arr equal.\n\n**Example 1:**\n\n```\nInput: n = 3\nOutput: 2\nExplanation: arr = [1, 3, 5]\nFirst operation choose x = 2 and y = 0, this leads arr to be [2, 3, 4]\nIn the second operation choose x = 2 and y = 0 again, thus arr = [3, 3, 3].\n```\n\n**Example 2:**\n\n```\nInput: n = 6\nOutput: 9\n```\n\n## solution\n\n这道题看着挺复杂，行数多，其实像是在`找规律`（我就是没找出来，n=6时output=9？），是一道数学题。\n\n```java\npublic int minOperations(int n) {\n    // Take care of overflow if n is too large.\n    if(n%2==1){\n        n/=2;\n        return (n*(n+1));\n    }        \n    n/=2;\n    return n*n;\n}\n```\n\n上面的解法是将其分两种情况--奇数与偶数。考得不是算法， 是脑子吧。。。","slug":"contest202","published":1,"updated":"2020-08-16T07:14:32.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgc20010byih9lp20dur","content":"<p>Leetocode周赛202</p>\n<a id=\"more\"></a>\n\n<h1 id=\"1550-Three-Consecutive-Odds\"><a href=\"#1550-Three-Consecutive-Odds\" class=\"headerlink\" title=\"1550. Three Consecutive Odds\"></a>1550. Three Consecutive Odds</h1><p>Given an integer array <code>arr</code>, return <code>true</code> if there are three consecutive odd numbers in the array. Otherwise, return <code>false</code>.</p>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: arr &#x3D; [2,6,4,1]</span><br><span class=\"line\">Output: false</span><br><span class=\"line\">Explanation: There are no three consecutive odds.</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: arr &#x3D; [1,2,34,3,4,5,7,23,12]</span><br><span class=\"line\">Output: true</span><br><span class=\"line\">Explanation: [5,7,23] are three consecutive odds.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"solution\"><a href=\"#solution\" class=\"headerlink\" title=\"solution\"></a>solution</h2><p>题目难度不高，因此重点关注代码技巧上。“连续三个基数”则返回true，否则false，一般情况下都会想到遍历数组的同时维护一个变量，变量达到三时返回。直到我看到了神级代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">threeConsecutiveOdds</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i+<span class=\"number\">2</span> &lt; a.length;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i]%<span class=\"number\">2</span> + a[i+<span class=\"number\">1</span>] % <span class=\"number\">2</span> + a[i+<span class=\"number\">2</span>] % <span class=\"number\">2</span> == <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>rank榜单的前几名整齐化一地这样写。我们来看看这样写的原理：</p>\n<p>同样是for循环，它的 判断条件是<code>i+2&lt;a.length</code>，为何要<code>+2</code>,原因在for循环中，它每次在第i处下标都会同时获取到i的后两位，把和三个数与2相除取余，如果是奇数余数为1,那么这三个数相加即为3,好处是不用额外维护一个变量，代码也简单易懂。</p>\n<p><strong>note:</strong> 循环时同时做三个数的运算；取余判断奇偶</p>\n<h1 id=\"1551-Minimum-Operations-to-Make-Array-Equal\"><a href=\"#1551-Minimum-Operations-to-Make-Array-Equal\" class=\"headerlink\" title=\"1551. Minimum Operations to Make Array Equal\"></a>1551. Minimum Operations to Make Array Equal</h1><p>You have an array <code>arr</code> of length <code>n</code> where <code>arr[i] = (2 * i) + 1</code> for all valid values of <code>i</code> (i.e. <code>0 &lt;= i &lt; n</code>).</p>\n<p>In one operation, you can select two indices <code>x</code> and <code>y</code> where <code>0 &lt;= x, y &lt; n</code> and subtract <code>1</code> from <code>arr[x]</code> and add <code>1</code> to <code>arr[y]</code> (i.e. perform <code>arr[x] -=1 </code>and <code>arr[y] += 1</code>). The goal is to make all the elements of the array <strong>equal</strong>. It is <strong>guaranteed</strong> that all the elements of the array can be made equal using some operations.</p>\n<p>Given an integer <code>n</code>, the length of the array. Return <em>the minimum number of operations</em> needed to make all the elements of arr equal.</p>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: n &#x3D; 3</span><br><span class=\"line\">Output: 2</span><br><span class=\"line\">Explanation: arr &#x3D; [1, 3, 5]</span><br><span class=\"line\">First operation choose x &#x3D; 2 and y &#x3D; 0, this leads arr to be [2, 3, 4]</span><br><span class=\"line\">In the second operation choose x &#x3D; 2 and y &#x3D; 0 again, thus arr &#x3D; [3, 3, 3].</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: n &#x3D; 6</span><br><span class=\"line\">Output: 9</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"solution-1\"><a href=\"#solution-1\" class=\"headerlink\" title=\"solution\"></a>solution</h2><p>这道题看着挺复杂，行数多，其实像是在<code>找规律</code>（我就是没找出来，n=6时output=9？），是一道数学题。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minOperations</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Take care of overflow if n is too large.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n%<span class=\"number\">2</span>==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        n/=<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (n*(n+<span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;        </span><br><span class=\"line\">    n/=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n*n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的解法是将其分两种情况–奇数与偶数。考得不是算法， 是脑子吧。。。</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>Leetocode周赛202</p>","more":"<h1 id=\"1550-Three-Consecutive-Odds\"><a href=\"#1550-Three-Consecutive-Odds\" class=\"headerlink\" title=\"1550. Three Consecutive Odds\"></a>1550. Three Consecutive Odds</h1><p>Given an integer array <code>arr</code>, return <code>true</code> if there are three consecutive odd numbers in the array. Otherwise, return <code>false</code>.</p>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: arr &#x3D; [2,6,4,1]</span><br><span class=\"line\">Output: false</span><br><span class=\"line\">Explanation: There are no three consecutive odds.</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: arr &#x3D; [1,2,34,3,4,5,7,23,12]</span><br><span class=\"line\">Output: true</span><br><span class=\"line\">Explanation: [5,7,23] are three consecutive odds.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"solution\"><a href=\"#solution\" class=\"headerlink\" title=\"solution\"></a>solution</h2><p>题目难度不高，因此重点关注代码技巧上。“连续三个基数”则返回true，否则false，一般情况下都会想到遍历数组的同时维护一个变量，变量达到三时返回。直到我看到了神级代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">threeConsecutiveOdds</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i+<span class=\"number\">2</span> &lt; a.length;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i]%<span class=\"number\">2</span> + a[i+<span class=\"number\">1</span>] % <span class=\"number\">2</span> + a[i+<span class=\"number\">2</span>] % <span class=\"number\">2</span> == <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>rank榜单的前几名整齐化一地这样写。我们来看看这样写的原理：</p>\n<p>同样是for循环，它的 判断条件是<code>i+2&lt;a.length</code>，为何要<code>+2</code>,原因在for循环中，它每次在第i处下标都会同时获取到i的后两位，把和三个数与2相除取余，如果是奇数余数为1,那么这三个数相加即为3,好处是不用额外维护一个变量，代码也简单易懂。</p>\n<p><strong>note:</strong> 循环时同时做三个数的运算；取余判断奇偶</p>\n<h1 id=\"1551-Minimum-Operations-to-Make-Array-Equal\"><a href=\"#1551-Minimum-Operations-to-Make-Array-Equal\" class=\"headerlink\" title=\"1551. Minimum Operations to Make Array Equal\"></a>1551. Minimum Operations to Make Array Equal</h1><p>You have an array <code>arr</code> of length <code>n</code> where <code>arr[i] = (2 * i) + 1</code> for all valid values of <code>i</code> (i.e. <code>0 &lt;= i &lt; n</code>).</p>\n<p>In one operation, you can select two indices <code>x</code> and <code>y</code> where <code>0 &lt;= x, y &lt; n</code> and subtract <code>1</code> from <code>arr[x]</code> and add <code>1</code> to <code>arr[y]</code> (i.e. perform <code>arr[x] -=1 </code>and <code>arr[y] += 1</code>). The goal is to make all the elements of the array <strong>equal</strong>. It is <strong>guaranteed</strong> that all the elements of the array can be made equal using some operations.</p>\n<p>Given an integer <code>n</code>, the length of the array. Return <em>the minimum number of operations</em> needed to make all the elements of arr equal.</p>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: n &#x3D; 3</span><br><span class=\"line\">Output: 2</span><br><span class=\"line\">Explanation: arr &#x3D; [1, 3, 5]</span><br><span class=\"line\">First operation choose x &#x3D; 2 and y &#x3D; 0, this leads arr to be [2, 3, 4]</span><br><span class=\"line\">In the second operation choose x &#x3D; 2 and y &#x3D; 0 again, thus arr &#x3D; [3, 3, 3].</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: n &#x3D; 6</span><br><span class=\"line\">Output: 9</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"solution-1\"><a href=\"#solution-1\" class=\"headerlink\" title=\"solution\"></a>solution</h2><p>这道题看着挺复杂，行数多，其实像是在<code>找规律</code>（我就是没找出来，n=6时output=9？），是一道数学题。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minOperations</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Take care of overflow if n is too large.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n%<span class=\"number\">2</span>==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        n/=<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (n*(n+<span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;        </span><br><span class=\"line\">    n/=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n*n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的解法是将其分两种情况–奇数与偶数。考得不是算法， 是脑子吧。。。</p>"},{"title":"contest203","date":"2020-08-23T04:22:22.000Z","_content":"\nLeetcode周赛203\n\n<!--more-->\n\n# 1560. Most Visited Sector in a Circular Track\n\nGiven an integer `n` and an integer array `rounds`. We have a circular track which consists of `n` sectors labeled from `1` to `n`. A marathon will be held on this track, the marathon consists of `m` rounds. The `ith` round starts at sector `rounds[i - 1]` and ends at sector `rounds[i]`. For example, round 1 starts at sector `rounds[0]` and ends at sector `rounds[1]`\n\nReturn *an array of the most visited sectors* sorted in **ascending** order.\n\nNotice that you circulate the track in ascending order of sector numbers in the counter-clockwise direction (See the first example).\n\n**Example 1:**\n\n![img](https://assets.leetcode.com/uploads/2020/08/14/tmp.jpg)\n\n```\nInput: n = 4, rounds = [1,3,1,2]\nOutput: [1,2]\nExplanation: The marathon starts at sector 1. The order of the visited sectors is as follows:\n1 --> 2 --> 3 (end of round 1) --> 4 --> 1 (end of round 2) --> 2 (end of round 3 and the marathon)\nWe can see that both sectors 1 and 2 are visited twice and they are the most visited sectors. Sectors 3 and 4 are visited only once.\n```\n\n**Example 2:**\n\n```\nInput: n = 2, rounds = [2,1,2,1,2,1,2,1,2]\nOutput: [2]\n```\n\n**Example 3:**\n\n```\nInput: n = 7, rounds = [1,3,5,7]\nOutput: [1,2,3,4,5,6,7]\n```\n\n## solution\n\n这道题虽然看起来长，但是难度是`easy`的，所以一定不会复杂，仔细看来只是求重复次数最多的sectors，我觉得难点是在头一个数比后一个数大的情况下（相当与跑步比赛中的套圈），如何去从头开始循环。\n\n```java\npublic List<Integer> mostVisited(int n, int[] rounds) {\n    // 取数组第一个和最后一个数字\n    int f = rounds[0], t = rounds[rounds.length-1];\n    List<Integer> ret = new ArrayList<>();\n    for(int i = f;;){\n        ret.add(i);\n        if(i == t)break;\n        i++;\n        if(i == n+1)i = 1;\n    }\n    Collections.sort(ret);\n    return ret;\n}\n```\n\nemmmm上面这个有些取巧，不明白的先看看下面这个：\n\n```java\npublic List<Integer> mostVisited(int n, int[] A) {\n    List<Integer> res = new ArrayList<>();\n    for (int i = A[0]; i <= A[A.length - 1]; ++i)\n        res.add(i);\n    if (res.size() > 0) return res;\n    // 下面计算的是start>end的情况，[1, end] + [start, n]\n    for (int i = 1; i <= A[A.length - 1]; ++i)\n        res.add(i);\n    for (int i = A[0]; i <= n; ++i)\n        res.add(i);\n    return res;\n}\n```\n\n实际上，我们只需要关注首节点和末节点就行了，因为要求的是重复次数最多的sector，那么，必然会涉及到首尾，完全不必考虑中间节点。\n\n- 如果start<=end，返回\\[start, end\\]\n- 如果start>end，返回\\[start, n\\]+\\[1, end\\]\n\n另外一个版本，更好理解：\n\n```java\npublic List<Integer> mostVisited(int n, int[] rounds) {\n    int len = rounds.length, fr = rounds[0], to = rounds[len - 1];\n    List<Integer> res = new ArrayList<>();\n    if (to >= fr) {     // no circle, such as [1,3,1,2]\n        for (int i = fr; i <= to; i++) res.add(i);\n    } else {            // cross a circle, such as [2,3,2,1]\n        // 这里遍历每个sector\n        for (int i = 1; i <= n; i++) {\n            // 如果到最后一个sector的下一个，就从数组中第一个开始，相当于从“后端”开始了，省去了中间部分。\n            if (i == to + 1) i = fr;\n            res.add(i);\n        }\n    }\n    return res;\n}\n```\n\n涉及`环`的问题，要找到问题本质。这里说的首尾，一是指给定n个sector中的首尾，二是指给定round中的首尾。\n\n\n\n# 1561. Maximum Number of Coins You Can Get\n\nThere are 3n piles of coins of varying size, you and your friends will take piles of coins as follows:\n\n- In each step, you will choose **any** 3 piles of coins (not necessarily consecutive).\n- Of your choice, Alice will pick the pile with the maximum number of coins.\n- You will pick the next pile with maximum number of coins.\n- Your friend Bob will pick the last pile.\n- Repeat until there are no more piles of coins.\n\nGiven an array of integers `piles` where `piles[i]` is the number of coins in the `ith` pile.\n\nReturn the maximum number of coins which you can have.\n\n \n\n**Example 1:**\n\n```\nInput: piles = [2,4,1,2,7,8]\nOutput: 9\nExplanation: Choose the triplet (2, 7, 8), Alice Pick the pile with 8 coins, you the pile with 7 coins and Bob the last one.\nChoose the triplet (1, 2, 4), Alice Pick the pile with 4 coins, you the pile with 2 coins and Bob the last one.\nThe maximum number of coins which you can have are: 7 + 2 = 9.\nOn the other hand if we choose this arrangement (1, 2, 8), (2, 4, 7) you only get 2 + 4 = 6 coins which is not optimal.\n```\n\n**Example 2:**\n\n```\nInput: piles = [2,4,5]\nOutput: 4\n```\n\n**Example 3:**\n\n```\nInput: piles = [9,8,7,6,5,1,2,3,4]\nOutput: 18\n```\n\n\n\n## solution\n\n我觉得这道题本质是个排序的题，但是要按一定的规则排序，最初设想的是每三个数排序，取中间那个。\n\n然而好的算法都是讲究技巧的，不是靠蛮力。完全可以放心地对数组进行排序，可以理解为逆向思维，例如example1中的数组排好序后：*[1,2,2,4,7,8]*，无论我们怎么分，最优解必然是Bob拿到前两个数，剩下的四个是我们与Alice分，由于是我拿第二大的，所以先分我，在分给Alice，依照这样的一个思路，问题就解决了。\n\n```java\npublic int maxCoins(int[] A) {\n    Arrays.sort(A);\n    int res = 0, n = A.length;\n    for (int i = n / 3; i < n; i += 2)\n        res += A[i];\n    return res;\n}\n```\n\n","source":"_posts/contest203.md","raw":"---\ntitle: contest203\ndate: 2020-08-23 12:22:22\ntags: LeetCode\n---\n\nLeetcode周赛203\n\n<!--more-->\n\n# 1560. Most Visited Sector in a Circular Track\n\nGiven an integer `n` and an integer array `rounds`. We have a circular track which consists of `n` sectors labeled from `1` to `n`. A marathon will be held on this track, the marathon consists of `m` rounds. The `ith` round starts at sector `rounds[i - 1]` and ends at sector `rounds[i]`. For example, round 1 starts at sector `rounds[0]` and ends at sector `rounds[1]`\n\nReturn *an array of the most visited sectors* sorted in **ascending** order.\n\nNotice that you circulate the track in ascending order of sector numbers in the counter-clockwise direction (See the first example).\n\n**Example 1:**\n\n![img](https://assets.leetcode.com/uploads/2020/08/14/tmp.jpg)\n\n```\nInput: n = 4, rounds = [1,3,1,2]\nOutput: [1,2]\nExplanation: The marathon starts at sector 1. The order of the visited sectors is as follows:\n1 --> 2 --> 3 (end of round 1) --> 4 --> 1 (end of round 2) --> 2 (end of round 3 and the marathon)\nWe can see that both sectors 1 and 2 are visited twice and they are the most visited sectors. Sectors 3 and 4 are visited only once.\n```\n\n**Example 2:**\n\n```\nInput: n = 2, rounds = [2,1,2,1,2,1,2,1,2]\nOutput: [2]\n```\n\n**Example 3:**\n\n```\nInput: n = 7, rounds = [1,3,5,7]\nOutput: [1,2,3,4,5,6,7]\n```\n\n## solution\n\n这道题虽然看起来长，但是难度是`easy`的，所以一定不会复杂，仔细看来只是求重复次数最多的sectors，我觉得难点是在头一个数比后一个数大的情况下（相当与跑步比赛中的套圈），如何去从头开始循环。\n\n```java\npublic List<Integer> mostVisited(int n, int[] rounds) {\n    // 取数组第一个和最后一个数字\n    int f = rounds[0], t = rounds[rounds.length-1];\n    List<Integer> ret = new ArrayList<>();\n    for(int i = f;;){\n        ret.add(i);\n        if(i == t)break;\n        i++;\n        if(i == n+1)i = 1;\n    }\n    Collections.sort(ret);\n    return ret;\n}\n```\n\nemmmm上面这个有些取巧，不明白的先看看下面这个：\n\n```java\npublic List<Integer> mostVisited(int n, int[] A) {\n    List<Integer> res = new ArrayList<>();\n    for (int i = A[0]; i <= A[A.length - 1]; ++i)\n        res.add(i);\n    if (res.size() > 0) return res;\n    // 下面计算的是start>end的情况，[1, end] + [start, n]\n    for (int i = 1; i <= A[A.length - 1]; ++i)\n        res.add(i);\n    for (int i = A[0]; i <= n; ++i)\n        res.add(i);\n    return res;\n}\n```\n\n实际上，我们只需要关注首节点和末节点就行了，因为要求的是重复次数最多的sector，那么，必然会涉及到首尾，完全不必考虑中间节点。\n\n- 如果start<=end，返回\\[start, end\\]\n- 如果start>end，返回\\[start, n\\]+\\[1, end\\]\n\n另外一个版本，更好理解：\n\n```java\npublic List<Integer> mostVisited(int n, int[] rounds) {\n    int len = rounds.length, fr = rounds[0], to = rounds[len - 1];\n    List<Integer> res = new ArrayList<>();\n    if (to >= fr) {     // no circle, such as [1,3,1,2]\n        for (int i = fr; i <= to; i++) res.add(i);\n    } else {            // cross a circle, such as [2,3,2,1]\n        // 这里遍历每个sector\n        for (int i = 1; i <= n; i++) {\n            // 如果到最后一个sector的下一个，就从数组中第一个开始，相当于从“后端”开始了，省去了中间部分。\n            if (i == to + 1) i = fr;\n            res.add(i);\n        }\n    }\n    return res;\n}\n```\n\n涉及`环`的问题，要找到问题本质。这里说的首尾，一是指给定n个sector中的首尾，二是指给定round中的首尾。\n\n\n\n# 1561. Maximum Number of Coins You Can Get\n\nThere are 3n piles of coins of varying size, you and your friends will take piles of coins as follows:\n\n- In each step, you will choose **any** 3 piles of coins (not necessarily consecutive).\n- Of your choice, Alice will pick the pile with the maximum number of coins.\n- You will pick the next pile with maximum number of coins.\n- Your friend Bob will pick the last pile.\n- Repeat until there are no more piles of coins.\n\nGiven an array of integers `piles` where `piles[i]` is the number of coins in the `ith` pile.\n\nReturn the maximum number of coins which you can have.\n\n \n\n**Example 1:**\n\n```\nInput: piles = [2,4,1,2,7,8]\nOutput: 9\nExplanation: Choose the triplet (2, 7, 8), Alice Pick the pile with 8 coins, you the pile with 7 coins and Bob the last one.\nChoose the triplet (1, 2, 4), Alice Pick the pile with 4 coins, you the pile with 2 coins and Bob the last one.\nThe maximum number of coins which you can have are: 7 + 2 = 9.\nOn the other hand if we choose this arrangement (1, 2, 8), (2, 4, 7) you only get 2 + 4 = 6 coins which is not optimal.\n```\n\n**Example 2:**\n\n```\nInput: piles = [2,4,5]\nOutput: 4\n```\n\n**Example 3:**\n\n```\nInput: piles = [9,8,7,6,5,1,2,3,4]\nOutput: 18\n```\n\n\n\n## solution\n\n我觉得这道题本质是个排序的题，但是要按一定的规则排序，最初设想的是每三个数排序，取中间那个。\n\n然而好的算法都是讲究技巧的，不是靠蛮力。完全可以放心地对数组进行排序，可以理解为逆向思维，例如example1中的数组排好序后：*[1,2,2,4,7,8]*，无论我们怎么分，最优解必然是Bob拿到前两个数，剩下的四个是我们与Alice分，由于是我拿第二大的，所以先分我，在分给Alice，依照这样的一个思路，问题就解决了。\n\n```java\npublic int maxCoins(int[] A) {\n    Arrays.sort(A);\n    int res = 0, n = A.length;\n    for (int i = n / 3; i < n; i += 2)\n        res += A[i];\n    return res;\n}\n```\n\n","slug":"contest203","published":1,"updated":"2020-08-23T06:50:59.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgc30012byihgfxk75qi","content":"<p>Leetcode周赛203</p>\n<a id=\"more\"></a>\n\n<h1 id=\"1560-Most-Visited-Sector-in-a-Circular-Track\"><a href=\"#1560-Most-Visited-Sector-in-a-Circular-Track\" class=\"headerlink\" title=\"1560. Most Visited Sector in a Circular Track\"></a>1560. Most Visited Sector in a Circular Track</h1><p>Given an integer <code>n</code> and an integer array <code>rounds</code>. We have a circular track which consists of <code>n</code> sectors labeled from <code>1</code> to <code>n</code>. A marathon will be held on this track, the marathon consists of <code>m</code> rounds. The <code>ith</code> round starts at sector <code>rounds[i - 1]</code> and ends at sector <code>rounds[i]</code>. For example, round 1 starts at sector <code>rounds[0]</code> and ends at sector <code>rounds[1]</code></p>\n<p>Return <em>an array of the most visited sectors</em> sorted in <strong>ascending</strong> order.</p>\n<p>Notice that you circulate the track in ascending order of sector numbers in the counter-clockwise direction (See the first example).</p>\n<p><strong>Example 1:</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2020/08/14/tmp.jpg\" alt=\"img\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: n &#x3D; 4, rounds &#x3D; [1,3,1,2]</span><br><span class=\"line\">Output: [1,2]</span><br><span class=\"line\">Explanation: The marathon starts at sector 1. The order of the visited sectors is as follows:</span><br><span class=\"line\">1 --&gt; 2 --&gt; 3 (end of round 1) --&gt; 4 --&gt; 1 (end of round 2) --&gt; 2 (end of round 3 and the marathon)</span><br><span class=\"line\">We can see that both sectors 1 and 2 are visited twice and they are the most visited sectors. Sectors 3 and 4 are visited only once.</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: n &#x3D; 2, rounds &#x3D; [2,1,2,1,2,1,2,1,2]</span><br><span class=\"line\">Output: [2]</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 3:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: n &#x3D; 7, rounds &#x3D; [1,3,5,7]</span><br><span class=\"line\">Output: [1,2,3,4,5,6,7]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"solution\"><a href=\"#solution\" class=\"headerlink\" title=\"solution\"></a>solution</h2><p>这道题虽然看起来长，但是难度是<code>easy</code>的，所以一定不会复杂，仔细看来只是求重复次数最多的sectors，我觉得难点是在头一个数比后一个数大的情况下（相当与跑步比赛中的套圈），如何去从头开始循环。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">mostVisited</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span>[] rounds)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 取数组第一个和最后一个数字</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> f = rounds[<span class=\"number\">0</span>], t = rounds[rounds.length-<span class=\"number\">1</span>];</span><br><span class=\"line\">    List&lt;Integer&gt; ret = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = f;;)&#123;</span><br><span class=\"line\">        ret.add(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == t)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == n+<span class=\"number\">1</span>)i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Collections.sort(ret);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>emmmm上面这个有些取巧，不明白的先看看下面这个：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">mostVisited</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span>[] A)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = A[<span class=\"number\">0</span>]; i &lt;= A[A.length - <span class=\"number\">1</span>]; ++i)</span><br><span class=\"line\">        res.add(i);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res.size() &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    <span class=\"comment\">// 下面计算的是start&gt;end的情况，[1, end] + [start, n]</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= A[A.length - <span class=\"number\">1</span>]; ++i)</span><br><span class=\"line\">        res.add(i);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = A[<span class=\"number\">0</span>]; i &lt;= n; ++i)</span><br><span class=\"line\">        res.add(i);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际上，我们只需要关注首节点和末节点就行了，因为要求的是重复次数最多的sector，那么，必然会涉及到首尾，完全不必考虑中间节点。</p>\n<ul>\n<li>如果start&lt;=end，返回[start, end]</li>\n<li>如果start&gt;end，返回[start, n]+[1, end]</li>\n</ul>\n<p>另外一个版本，更好理解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">mostVisited</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span>[] rounds)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = rounds.length, fr = rounds[<span class=\"number\">0</span>], to = rounds[len - <span class=\"number\">1</span>];</span><br><span class=\"line\">    List&lt;Integer&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (to &gt;= fr) &#123;     <span class=\"comment\">// no circle, such as [1,3,1,2]</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = fr; i &lt;= to; i++) res.add(i);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;            <span class=\"comment\">// cross a circle, such as [2,3,2,1]</span></span><br><span class=\"line\">        <span class=\"comment\">// 这里遍历每个sector</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果到最后一个sector的下一个，就从数组中第一个开始，相当于从“后端”开始了，省去了中间部分。</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == to + <span class=\"number\">1</span>) i = fr;</span><br><span class=\"line\">            res.add(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>涉及<code>环</code>的问题，要找到问题本质。这里说的首尾，一是指给定n个sector中的首尾，二是指给定round中的首尾。</p>\n<h1 id=\"1561-Maximum-Number-of-Coins-You-Can-Get\"><a href=\"#1561-Maximum-Number-of-Coins-You-Can-Get\" class=\"headerlink\" title=\"1561. Maximum Number of Coins You Can Get\"></a>1561. Maximum Number of Coins You Can Get</h1><p>There are 3n piles of coins of varying size, you and your friends will take piles of coins as follows:</p>\n<ul>\n<li>In each step, you will choose <strong>any</strong> 3 piles of coins (not necessarily consecutive).</li>\n<li>Of your choice, Alice will pick the pile with the maximum number of coins.</li>\n<li>You will pick the next pile with maximum number of coins.</li>\n<li>Your friend Bob will pick the last pile.</li>\n<li>Repeat until there are no more piles of coins.</li>\n</ul>\n<p>Given an array of integers <code>piles</code> where <code>piles[i]</code> is the number of coins in the <code>ith</code> pile.</p>\n<p>Return the maximum number of coins which you can have.</p>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: piles &#x3D; [2,4,1,2,7,8]</span><br><span class=\"line\">Output: 9</span><br><span class=\"line\">Explanation: Choose the triplet (2, 7, 8), Alice Pick the pile with 8 coins, you the pile with 7 coins and Bob the last one.</span><br><span class=\"line\">Choose the triplet (1, 2, 4), Alice Pick the pile with 4 coins, you the pile with 2 coins and Bob the last one.</span><br><span class=\"line\">The maximum number of coins which you can have are: 7 + 2 &#x3D; 9.</span><br><span class=\"line\">On the other hand if we choose this arrangement (1, 2, 8), (2, 4, 7) you only get 2 + 4 &#x3D; 6 coins which is not optimal.</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: piles &#x3D; [2,4,5]</span><br><span class=\"line\">Output: 4</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 3:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: piles &#x3D; [9,8,7,6,5,1,2,3,4]</span><br><span class=\"line\">Output: 18</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"solution-1\"><a href=\"#solution-1\" class=\"headerlink\" title=\"solution\"></a>solution</h2><p>我觉得这道题本质是个排序的题，但是要按一定的规则排序，最初设想的是每三个数排序，取中间那个。</p>\n<p>然而好的算法都是讲究技巧的，不是靠蛮力。完全可以放心地对数组进行排序，可以理解为逆向思维，例如example1中的数组排好序后：*[1,2,2,4,7,8]*，无论我们怎么分，最优解必然是Bob拿到前两个数，剩下的四个是我们与Alice分，由于是我拿第二大的，所以先分我，在分给Alice，依照这样的一个思路，问题就解决了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxCoins</span><span class=\"params\">(<span class=\"keyword\">int</span>[] A)</span> </span>&#123;</span><br><span class=\"line\">    Arrays.sort(A);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>, n = A.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n / <span class=\"number\">3</span>; i &lt; n; i += <span class=\"number\">2</span>)</span><br><span class=\"line\">        res += A[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>Leetcode周赛203</p>","more":"<h1 id=\"1560-Most-Visited-Sector-in-a-Circular-Track\"><a href=\"#1560-Most-Visited-Sector-in-a-Circular-Track\" class=\"headerlink\" title=\"1560. Most Visited Sector in a Circular Track\"></a>1560. Most Visited Sector in a Circular Track</h1><p>Given an integer <code>n</code> and an integer array <code>rounds</code>. We have a circular track which consists of <code>n</code> sectors labeled from <code>1</code> to <code>n</code>. A marathon will be held on this track, the marathon consists of <code>m</code> rounds. The <code>ith</code> round starts at sector <code>rounds[i - 1]</code> and ends at sector <code>rounds[i]</code>. For example, round 1 starts at sector <code>rounds[0]</code> and ends at sector <code>rounds[1]</code></p>\n<p>Return <em>an array of the most visited sectors</em> sorted in <strong>ascending</strong> order.</p>\n<p>Notice that you circulate the track in ascending order of sector numbers in the counter-clockwise direction (See the first example).</p>\n<p><strong>Example 1:</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2020/08/14/tmp.jpg\" alt=\"img\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: n &#x3D; 4, rounds &#x3D; [1,3,1,2]</span><br><span class=\"line\">Output: [1,2]</span><br><span class=\"line\">Explanation: The marathon starts at sector 1. The order of the visited sectors is as follows:</span><br><span class=\"line\">1 --&gt; 2 --&gt; 3 (end of round 1) --&gt; 4 --&gt; 1 (end of round 2) --&gt; 2 (end of round 3 and the marathon)</span><br><span class=\"line\">We can see that both sectors 1 and 2 are visited twice and they are the most visited sectors. Sectors 3 and 4 are visited only once.</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: n &#x3D; 2, rounds &#x3D; [2,1,2,1,2,1,2,1,2]</span><br><span class=\"line\">Output: [2]</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 3:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: n &#x3D; 7, rounds &#x3D; [1,3,5,7]</span><br><span class=\"line\">Output: [1,2,3,4,5,6,7]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"solution\"><a href=\"#solution\" class=\"headerlink\" title=\"solution\"></a>solution</h2><p>这道题虽然看起来长，但是难度是<code>easy</code>的，所以一定不会复杂，仔细看来只是求重复次数最多的sectors，我觉得难点是在头一个数比后一个数大的情况下（相当与跑步比赛中的套圈），如何去从头开始循环。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">mostVisited</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span>[] rounds)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 取数组第一个和最后一个数字</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> f = rounds[<span class=\"number\">0</span>], t = rounds[rounds.length-<span class=\"number\">1</span>];</span><br><span class=\"line\">    List&lt;Integer&gt; ret = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = f;;)&#123;</span><br><span class=\"line\">        ret.add(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == t)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == n+<span class=\"number\">1</span>)i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Collections.sort(ret);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>emmmm上面这个有些取巧，不明白的先看看下面这个：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">mostVisited</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span>[] A)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = A[<span class=\"number\">0</span>]; i &lt;= A[A.length - <span class=\"number\">1</span>]; ++i)</span><br><span class=\"line\">        res.add(i);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res.size() &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    <span class=\"comment\">// 下面计算的是start&gt;end的情况，[1, end] + [start, n]</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= A[A.length - <span class=\"number\">1</span>]; ++i)</span><br><span class=\"line\">        res.add(i);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = A[<span class=\"number\">0</span>]; i &lt;= n; ++i)</span><br><span class=\"line\">        res.add(i);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际上，我们只需要关注首节点和末节点就行了，因为要求的是重复次数最多的sector，那么，必然会涉及到首尾，完全不必考虑中间节点。</p>\n<ul>\n<li>如果start&lt;=end，返回[start, end]</li>\n<li>如果start&gt;end，返回[start, n]+[1, end]</li>\n</ul>\n<p>另外一个版本，更好理解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">mostVisited</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span>[] rounds)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = rounds.length, fr = rounds[<span class=\"number\">0</span>], to = rounds[len - <span class=\"number\">1</span>];</span><br><span class=\"line\">    List&lt;Integer&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (to &gt;= fr) &#123;     <span class=\"comment\">// no circle, such as [1,3,1,2]</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = fr; i &lt;= to; i++) res.add(i);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;            <span class=\"comment\">// cross a circle, such as [2,3,2,1]</span></span><br><span class=\"line\">        <span class=\"comment\">// 这里遍历每个sector</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果到最后一个sector的下一个，就从数组中第一个开始，相当于从“后端”开始了，省去了中间部分。</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == to + <span class=\"number\">1</span>) i = fr;</span><br><span class=\"line\">            res.add(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>涉及<code>环</code>的问题，要找到问题本质。这里说的首尾，一是指给定n个sector中的首尾，二是指给定round中的首尾。</p>\n<h1 id=\"1561-Maximum-Number-of-Coins-You-Can-Get\"><a href=\"#1561-Maximum-Number-of-Coins-You-Can-Get\" class=\"headerlink\" title=\"1561. Maximum Number of Coins You Can Get\"></a>1561. Maximum Number of Coins You Can Get</h1><p>There are 3n piles of coins of varying size, you and your friends will take piles of coins as follows:</p>\n<ul>\n<li>In each step, you will choose <strong>any</strong> 3 piles of coins (not necessarily consecutive).</li>\n<li>Of your choice, Alice will pick the pile with the maximum number of coins.</li>\n<li>You will pick the next pile with maximum number of coins.</li>\n<li>Your friend Bob will pick the last pile.</li>\n<li>Repeat until there are no more piles of coins.</li>\n</ul>\n<p>Given an array of integers <code>piles</code> where <code>piles[i]</code> is the number of coins in the <code>ith</code> pile.</p>\n<p>Return the maximum number of coins which you can have.</p>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: piles &#x3D; [2,4,1,2,7,8]</span><br><span class=\"line\">Output: 9</span><br><span class=\"line\">Explanation: Choose the triplet (2, 7, 8), Alice Pick the pile with 8 coins, you the pile with 7 coins and Bob the last one.</span><br><span class=\"line\">Choose the triplet (1, 2, 4), Alice Pick the pile with 4 coins, you the pile with 2 coins and Bob the last one.</span><br><span class=\"line\">The maximum number of coins which you can have are: 7 + 2 &#x3D; 9.</span><br><span class=\"line\">On the other hand if we choose this arrangement (1, 2, 8), (2, 4, 7) you only get 2 + 4 &#x3D; 6 coins which is not optimal.</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: piles &#x3D; [2,4,5]</span><br><span class=\"line\">Output: 4</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 3:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: piles &#x3D; [9,8,7,6,5,1,2,3,4]</span><br><span class=\"line\">Output: 18</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"solution-1\"><a href=\"#solution-1\" class=\"headerlink\" title=\"solution\"></a>solution</h2><p>我觉得这道题本质是个排序的题，但是要按一定的规则排序，最初设想的是每三个数排序，取中间那个。</p>\n<p>然而好的算法都是讲究技巧的，不是靠蛮力。完全可以放心地对数组进行排序，可以理解为逆向思维，例如example1中的数组排好序后：*[1,2,2,4,7,8]*，无论我们怎么分，最优解必然是Bob拿到前两个数，剩下的四个是我们与Alice分，由于是我拿第二大的，所以先分我，在分给Alice，依照这样的一个思路，问题就解决了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxCoins</span><span class=\"params\">(<span class=\"keyword\">int</span>[] A)</span> </span>&#123;</span><br><span class=\"line\">    Arrays.sort(A);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>, n = A.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n / <span class=\"number\">3</span>; i &lt; n; i += <span class=\"number\">2</span>)</span><br><span class=\"line\">        res += A[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"decorating","date":"2020-06-12T10:30:28.000Z","_content":"\n继承滥用：一个父类下有成百上千个子类，还无法高效解决问题，怎么优化？装饰者模式。\n\n<!-- more -->\n\n# 场景\n\n一家咖啡厅售卖咖啡，在这里讨论的当然是网上售卖。父类是`Beverage`抽象类，包含一个抽象方法_cost()_，根据不同口味实现不同的价格，诸如HouseBlend, DarkRoast Decaf, Espresso... 购买咖啡时，也可以加入各种调料，如豆浆、摩卡等等，这些也是要收费的，最终下单时会将这些所有整合。\n\n如何高效设计呢？如果某个调料价格上涨该从何处修改？新增原料怎么办？\n\n> 类应该堆扩展开放，对修改关闭。\n\n\n\n# 装饰者模式\n\n以上个场景为例，以父类为主体，在运行时以调味料来“装饰”父类，最终得到顾客想要的口味。\n\n1. DarkRoast对象\n2. 用摩卡装饰\n3. 用奶泡装饰\n4. 调用cost方法，依赖delegate添加价钱\n\n\n\n# 实现\n\n![Screenshot from 2020-06-12 20-50-33.png](https://i.loli.net/2020/06/12/jQwAkbz7V6n8dGK.png)\n\n\n\n其中`Condiment`是调料类，重写了`Beverage`的`getDescription`方法。以Whip为例：\n\n```java\npublic class Whip extends Condiment {\n    Beverage beverage;\n\n    public Whip(Beverage beverage) {\n        this.beverage = beverage;\n    }\n\n    @Override\n    public String getDescription() {\n        return beverage.getDescription() + \", Whip\";\n    }\n\n    @Override\n    public double cost() {\n        return .30 + beverage.cost();\n    }\n}\n```\n\n它的_cost_方法入获取description的方法如出一辙，这样的好处在于：\n\n```java\nBeverage beverage1 = new DarRoast();\nbeverage1 = new Mocha(beverage1);\nbeverage1 = new Mocha(beverage1);\nbeverage1 = new Whip(beverage1);\nSystem.out.println(beverage1.getDescription() + \" $\" + beverage1.cost());\n```\n\n```console\nBrazil Dark Roast Coffee, Mocha, Mocha, Whip $2.75\n```\n\n制作一杯咖啡时，添加不同的调料只需要创建调料的实例，里面装上饮料父类，最后打印出描述和价格的时候，会自动加上父类的。这样的方式不妨称之为**委托**.\n\n# 应用\n\n## Java I/O\n\n大量的`Decorator Pattern`在java的io包中运用。输入输出在计算机中的底层实现都是0101……来实现的，所以，例如，最底层的实现类是_FileInputStream_（好比是_Beverage_），往上”装饰“一层可以是字节_BufferedInputStream_（好比是_Espresso_），接着往上是_LineNumberInutStream_（好比是加调料_Mocha_）。\n\n```flow\npara1=>parallel: FileInputStream\npara2=>parallel: BufferedInputStream\npara3=>parallel: LineNumberInputStream\nop1=>operation: Beferage\nop2=>operation: Espresso\nop3=>operation: Mocha\npara1(path1, bottom)->para2\npara2(path1,bottom)->para3\npara1(path2, right)->op1\npara2(path2, right)->op2\npara3(path2, right)->op3\n```\n\n","source":"_posts/decorating.md","raw":"---\ntitle: decorating\ndate: 2020-06-12 18:30:28\ncategories: Java\ntags: design_patterns\n---\n\n继承滥用：一个父类下有成百上千个子类，还无法高效解决问题，怎么优化？装饰者模式。\n\n<!-- more -->\n\n# 场景\n\n一家咖啡厅售卖咖啡，在这里讨论的当然是网上售卖。父类是`Beverage`抽象类，包含一个抽象方法_cost()_，根据不同口味实现不同的价格，诸如HouseBlend, DarkRoast Decaf, Espresso... 购买咖啡时，也可以加入各种调料，如豆浆、摩卡等等，这些也是要收费的，最终下单时会将这些所有整合。\n\n如何高效设计呢？如果某个调料价格上涨该从何处修改？新增原料怎么办？\n\n> 类应该堆扩展开放，对修改关闭。\n\n\n\n# 装饰者模式\n\n以上个场景为例，以父类为主体，在运行时以调味料来“装饰”父类，最终得到顾客想要的口味。\n\n1. DarkRoast对象\n2. 用摩卡装饰\n3. 用奶泡装饰\n4. 调用cost方法，依赖delegate添加价钱\n\n\n\n# 实现\n\n![Screenshot from 2020-06-12 20-50-33.png](https://i.loli.net/2020/06/12/jQwAkbz7V6n8dGK.png)\n\n\n\n其中`Condiment`是调料类，重写了`Beverage`的`getDescription`方法。以Whip为例：\n\n```java\npublic class Whip extends Condiment {\n    Beverage beverage;\n\n    public Whip(Beverage beverage) {\n        this.beverage = beverage;\n    }\n\n    @Override\n    public String getDescription() {\n        return beverage.getDescription() + \", Whip\";\n    }\n\n    @Override\n    public double cost() {\n        return .30 + beverage.cost();\n    }\n}\n```\n\n它的_cost_方法入获取description的方法如出一辙，这样的好处在于：\n\n```java\nBeverage beverage1 = new DarRoast();\nbeverage1 = new Mocha(beverage1);\nbeverage1 = new Mocha(beverage1);\nbeverage1 = new Whip(beverage1);\nSystem.out.println(beverage1.getDescription() + \" $\" + beverage1.cost());\n```\n\n```console\nBrazil Dark Roast Coffee, Mocha, Mocha, Whip $2.75\n```\n\n制作一杯咖啡时，添加不同的调料只需要创建调料的实例，里面装上饮料父类，最后打印出描述和价格的时候，会自动加上父类的。这样的方式不妨称之为**委托**.\n\n# 应用\n\n## Java I/O\n\n大量的`Decorator Pattern`在java的io包中运用。输入输出在计算机中的底层实现都是0101……来实现的，所以，例如，最底层的实现类是_FileInputStream_（好比是_Beverage_），往上”装饰“一层可以是字节_BufferedInputStream_（好比是_Espresso_），接着往上是_LineNumberInutStream_（好比是加调料_Mocha_）。\n\n```flow\npara1=>parallel: FileInputStream\npara2=>parallel: BufferedInputStream\npara3=>parallel: LineNumberInputStream\nop1=>operation: Beferage\nop2=>operation: Espresso\nop3=>operation: Mocha\npara1(path1, bottom)->para2\npara2(path1,bottom)->para3\npara1(path2, right)->op1\npara2(path2, right)->op2\npara3(path2, right)->op3\n```\n\n","slug":"decorating","published":1,"updated":"2020-07-19T17:29:13.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgc50015byihe6bee5io","content":"<p>继承滥用：一个父类下有成百上千个子类，还无法高效解决问题，怎么优化？装饰者模式。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h1><p>一家咖啡厅售卖咖啡，在这里讨论的当然是网上售卖。父类是<code>Beverage</code>抽象类，包含一个抽象方法_cost()_，根据不同口味实现不同的价格，诸如HouseBlend, DarkRoast Decaf, Espresso… 购买咖啡时，也可以加入各种调料，如豆浆、摩卡等等，这些也是要收费的，最终下单时会将这些所有整合。</p>\n<p>如何高效设计呢？如果某个调料价格上涨该从何处修改？新增原料怎么办？</p>\n<blockquote>\n<p>类应该堆扩展开放，对修改关闭。</p>\n</blockquote>\n<h1 id=\"装饰者模式\"><a href=\"#装饰者模式\" class=\"headerlink\" title=\"装饰者模式\"></a>装饰者模式</h1><p>以上个场景为例，以父类为主体，在运行时以调味料来“装饰”父类，最终得到顾客想要的口味。</p>\n<ol>\n<li>DarkRoast对象</li>\n<li>用摩卡装饰</li>\n<li>用奶泡装饰</li>\n<li>调用cost方法，依赖delegate添加价钱</li>\n</ol>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><p><img src=\"https://i.loli.net/2020/06/12/jQwAkbz7V6n8dGK.png\" alt=\"Screenshot from 2020-06-12 20-50-33.png\"></p>\n<p>其中<code>Condiment</code>是调料类，重写了<code>Beverage</code>的<code>getDescription</code>方法。以Whip为例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Whip</span> <span class=\"keyword\">extends</span> <span class=\"title\">Condiment</span> </span>&#123;</span><br><span class=\"line\">    Beverage beverage;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Whip</span><span class=\"params\">(Beverage beverage)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.beverage = beverage;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDescription</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> beverage.getDescription() + <span class=\"string\">&quot;, Whip&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">cost</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> .<span class=\"number\">30</span> + beverage.cost();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它的_cost_方法入获取description的方法如出一辙，这样的好处在于：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Beverage beverage1 = <span class=\"keyword\">new</span> DarRoast();</span><br><span class=\"line\">beverage1 = <span class=\"keyword\">new</span> Mocha(beverage1);</span><br><span class=\"line\">beverage1 = <span class=\"keyword\">new</span> Mocha(beverage1);</span><br><span class=\"line\">beverage1 = <span class=\"keyword\">new</span> Whip(beverage1);</span><br><span class=\"line\">System.out.println(beverage1.getDescription() + <span class=\"string\">&quot; $&quot;</span> + beverage1.cost());</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Brazil Dark Roast Coffee, Mocha, Mocha, Whip $2.75</span><br></pre></td></tr></table></figure>\n\n<p>制作一杯咖啡时，添加不同的调料只需要创建调料的实例，里面装上饮料父类，最后打印出描述和价格的时候，会自动加上父类的。这样的方式不妨称之为<strong>委托</strong>.</p>\n<h1 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h1><h2 id=\"Java-I-O\"><a href=\"#Java-I-O\" class=\"headerlink\" title=\"Java I/O\"></a>Java I/O</h2><p>大量的<code>Decorator Pattern</code>在java的io包中运用。输入输出在计算机中的底层实现都是0101……来实现的，所以，例如，最底层的实现类是_FileInputStream_（好比是_Beverage_），往上”装饰“一层可以是字节_BufferedInputStream_（好比是_Espresso_），接着往上是_LineNumberInutStream_（好比是加调料_Mocha_）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">para1&#x3D;&gt;parallel: FileInputStream</span><br><span class=\"line\">para2&#x3D;&gt;parallel: BufferedInputStream</span><br><span class=\"line\">para3&#x3D;&gt;parallel: LineNumberInputStream</span><br><span class=\"line\">op1&#x3D;&gt;operation: Beferage</span><br><span class=\"line\">op2&#x3D;&gt;operation: Espresso</span><br><span class=\"line\">op3&#x3D;&gt;operation: Mocha</span><br><span class=\"line\">para1(path1, bottom)-&gt;para2</span><br><span class=\"line\">para2(path1,bottom)-&gt;para3</span><br><span class=\"line\">para1(path2, right)-&gt;op1</span><br><span class=\"line\">para2(path2, right)-&gt;op2</span><br><span class=\"line\">para3(path2, right)-&gt;op3</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>继承滥用：一个父类下有成百上千个子类，还无法高效解决问题，怎么优化？装饰者模式。</p>","more":"<h1 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h1><p>一家咖啡厅售卖咖啡，在这里讨论的当然是网上售卖。父类是<code>Beverage</code>抽象类，包含一个抽象方法_cost()_，根据不同口味实现不同的价格，诸如HouseBlend, DarkRoast Decaf, Espresso… 购买咖啡时，也可以加入各种调料，如豆浆、摩卡等等，这些也是要收费的，最终下单时会将这些所有整合。</p>\n<p>如何高效设计呢？如果某个调料价格上涨该从何处修改？新增原料怎么办？</p>\n<blockquote>\n<p>类应该堆扩展开放，对修改关闭。</p>\n</blockquote>\n<h1 id=\"装饰者模式\"><a href=\"#装饰者模式\" class=\"headerlink\" title=\"装饰者模式\"></a>装饰者模式</h1><p>以上个场景为例，以父类为主体，在运行时以调味料来“装饰”父类，最终得到顾客想要的口味。</p>\n<ol>\n<li>DarkRoast对象</li>\n<li>用摩卡装饰</li>\n<li>用奶泡装饰</li>\n<li>调用cost方法，依赖delegate添加价钱</li>\n</ol>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><p><img src=\"https://i.loli.net/2020/06/12/jQwAkbz7V6n8dGK.png\" alt=\"Screenshot from 2020-06-12 20-50-33.png\"></p>\n<p>其中<code>Condiment</code>是调料类，重写了<code>Beverage</code>的<code>getDescription</code>方法。以Whip为例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Whip</span> <span class=\"keyword\">extends</span> <span class=\"title\">Condiment</span> </span>&#123;</span><br><span class=\"line\">    Beverage beverage;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Whip</span><span class=\"params\">(Beverage beverage)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.beverage = beverage;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDescription</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> beverage.getDescription() + <span class=\"string\">&quot;, Whip&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">cost</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> .<span class=\"number\">30</span> + beverage.cost();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它的_cost_方法入获取description的方法如出一辙，这样的好处在于：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Beverage beverage1 = <span class=\"keyword\">new</span> DarRoast();</span><br><span class=\"line\">beverage1 = <span class=\"keyword\">new</span> Mocha(beverage1);</span><br><span class=\"line\">beverage1 = <span class=\"keyword\">new</span> Mocha(beverage1);</span><br><span class=\"line\">beverage1 = <span class=\"keyword\">new</span> Whip(beverage1);</span><br><span class=\"line\">System.out.println(beverage1.getDescription() + <span class=\"string\">&quot; $&quot;</span> + beverage1.cost());</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Brazil Dark Roast Coffee, Mocha, Mocha, Whip $2.75</span><br></pre></td></tr></table></figure>\n\n<p>制作一杯咖啡时，添加不同的调料只需要创建调料的实例，里面装上饮料父类，最后打印出描述和价格的时候，会自动加上父类的。这样的方式不妨称之为<strong>委托</strong>.</p>\n<h1 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h1><h2 id=\"Java-I-O\"><a href=\"#Java-I-O\" class=\"headerlink\" title=\"Java I/O\"></a>Java I/O</h2><p>大量的<code>Decorator Pattern</code>在java的io包中运用。输入输出在计算机中的底层实现都是0101……来实现的，所以，例如，最底层的实现类是_FileInputStream_（好比是_Beverage_），往上”装饰“一层可以是字节_BufferedInputStream_（好比是_Espresso_），接着往上是_LineNumberInutStream_（好比是加调料_Mocha_）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">para1&#x3D;&gt;parallel: FileInputStream</span><br><span class=\"line\">para2&#x3D;&gt;parallel: BufferedInputStream</span><br><span class=\"line\">para3&#x3D;&gt;parallel: LineNumberInputStream</span><br><span class=\"line\">op1&#x3D;&gt;operation: Beferage</span><br><span class=\"line\">op2&#x3D;&gt;operation: Espresso</span><br><span class=\"line\">op3&#x3D;&gt;operation: Mocha</span><br><span class=\"line\">para1(path1, bottom)-&gt;para2</span><br><span class=\"line\">para2(path1,bottom)-&gt;para3</span><br><span class=\"line\">para1(path2, right)-&gt;op1</span><br><span class=\"line\">para2(path2, right)-&gt;op2</span><br><span class=\"line\">para3(path2, right)-&gt;op3</span><br></pre></td></tr></table></figure>"},{"title":"elasticSearch","date":"2020-05-30T12:42:30.000Z","_content":"","source":"_posts/elasticSearch.md","raw":"---\ntitle: elasticSearch\ndate: 2020-05-30 20:42:30\ncategories:\ntags:\n---\n","slug":"elasticSearch","published":1,"updated":"2020-07-19T17:29:13.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgc70018byihcxukdf7o","content":"","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"","more":""},{"title":"gcd","date":"2020-03-22T12:23:35.000Z","_content":"\nGreatest common divisor, 最大公约数。聊聊辗转相除法以及它的应用。\n\n<!-- more -->\n\n# GCD\n\n最大公约数，目前最好的算法是公元前300年欧几里得发明的辗转相除法。\n\n## 辗转相除法\n\n例如：24 / 12 =  2 ..... 0\n\n上面的式子中 24 是被除数，12是除数，2是商，0是余数。这四个概念构成了一个除法的等式。\n\n- 被除数\n- 除数\n- 商\n- 余数\n\n当商是整数时，可以称24是12的倍数，12为24的约数。\n\n- 倍数\n- 约数\n\n理清上面的基本概念后，以下就是辗转相除法的操作了：**在被除数除以除数得出商后，余数不为0时，用除数除以余数，直到余数为0**。\n\n## 为什么呢？\n\n再举个栗子：求104与40的最大公约数\n\n|  被  |  除  |  商  |  余  |\n| :--: | :--: | :--: | :--: |\n| 104  |  40  |  2   |  24  |\n|  40  |  24  |  1   |  16  |\n|  24  |  16  |  1   |  8   |\n|  16  |  8   |  2   |  0   |\n\n\n\n最后除数为8时余数为0，所以最大公约数为8.\n\n**证明**:\n\n有a=bk+r\n\n1. 设d是a和b的公因数，可以写为`d|a且d|b`，a=dx, b=dy；带入上式，有dx=dyk+r，r=d(x-yk)，所以`d|r`\n2. 设d是b和r的公因数，可以写为`d|r且d|b`，r=dx, b=dy；带入上式，有a=dyk+dx，a=d(yk+x)，所以`d|a`\n\n综上，d是a、b的公因数的情况，可以推出d是r的公因数；d是b、r的公因数，可以推出d是a、b的公因数，所以a、b的所有公因数和b、r的所有公因数是相同的，那么d是a、b的最大公因数，自然也是b、r的最大公因数。\n\n公因数集相等，自然，集合里的最大值也是相等的。\n\n# 大数的质因数分解\n\n## RSA算法","source":"_posts/gcd.md","raw":"---\ntitle: gcd\ndate: 2020-03-22 20:23:35\ncategories: Leecode\ntags: gcd\n---\n\nGreatest common divisor, 最大公约数。聊聊辗转相除法以及它的应用。\n\n<!-- more -->\n\n# GCD\n\n最大公约数，目前最好的算法是公元前300年欧几里得发明的辗转相除法。\n\n## 辗转相除法\n\n例如：24 / 12 =  2 ..... 0\n\n上面的式子中 24 是被除数，12是除数，2是商，0是余数。这四个概念构成了一个除法的等式。\n\n- 被除数\n- 除数\n- 商\n- 余数\n\n当商是整数时，可以称24是12的倍数，12为24的约数。\n\n- 倍数\n- 约数\n\n理清上面的基本概念后，以下就是辗转相除法的操作了：**在被除数除以除数得出商后，余数不为0时，用除数除以余数，直到余数为0**。\n\n## 为什么呢？\n\n再举个栗子：求104与40的最大公约数\n\n|  被  |  除  |  商  |  余  |\n| :--: | :--: | :--: | :--: |\n| 104  |  40  |  2   |  24  |\n|  40  |  24  |  1   |  16  |\n|  24  |  16  |  1   |  8   |\n|  16  |  8   |  2   |  0   |\n\n\n\n最后除数为8时余数为0，所以最大公约数为8.\n\n**证明**:\n\n有a=bk+r\n\n1. 设d是a和b的公因数，可以写为`d|a且d|b`，a=dx, b=dy；带入上式，有dx=dyk+r，r=d(x-yk)，所以`d|r`\n2. 设d是b和r的公因数，可以写为`d|r且d|b`，r=dx, b=dy；带入上式，有a=dyk+dx，a=d(yk+x)，所以`d|a`\n\n综上，d是a、b的公因数的情况，可以推出d是r的公因数；d是b、r的公因数，可以推出d是a、b的公因数，所以a、b的所有公因数和b、r的所有公因数是相同的，那么d是a、b的最大公因数，自然也是b、r的最大公因数。\n\n公因数集相等，自然，集合里的最大值也是相等的。\n\n# 大数的质因数分解\n\n## RSA算法","slug":"gcd","published":1,"updated":"2020-08-15T11:24:02.895Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgc8001bbyih1nchec5k","content":"<p>Greatest common divisor, 最大公约数。聊聊辗转相除法以及它的应用。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"GCD\"><a href=\"#GCD\" class=\"headerlink\" title=\"GCD\"></a>GCD</h1><p>最大公约数，目前最好的算法是公元前300年欧几里得发明的辗转相除法。</p>\n<h2 id=\"辗转相除法\"><a href=\"#辗转相除法\" class=\"headerlink\" title=\"辗转相除法\"></a>辗转相除法</h2><p>例如：24 / 12 =  2 ….. 0</p>\n<p>上面的式子中 24 是被除数，12是除数，2是商，0是余数。这四个概念构成了一个除法的等式。</p>\n<ul>\n<li>被除数</li>\n<li>除数</li>\n<li>商</li>\n<li>余数</li>\n</ul>\n<p>当商是整数时，可以称24是12的倍数，12为24的约数。</p>\n<ul>\n<li>倍数</li>\n<li>约数</li>\n</ul>\n<p>理清上面的基本概念后，以下就是辗转相除法的操作了：<strong>在被除数除以除数得出商后，余数不为0时，用除数除以余数，直到余数为0</strong>。</p>\n<h2 id=\"为什么呢？\"><a href=\"#为什么呢？\" class=\"headerlink\" title=\"为什么呢？\"></a>为什么呢？</h2><p>再举个栗子：求104与40的最大公约数</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">被</th>\n<th align=\"center\">除</th>\n<th align=\"center\">商</th>\n<th align=\"center\">余</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">104</td>\n<td align=\"center\">40</td>\n<td align=\"center\">2</td>\n<td align=\"center\">24</td>\n</tr>\n<tr>\n<td align=\"center\">40</td>\n<td align=\"center\">24</td>\n<td align=\"center\">1</td>\n<td align=\"center\">16</td>\n</tr>\n<tr>\n<td align=\"center\">24</td>\n<td align=\"center\">16</td>\n<td align=\"center\">1</td>\n<td align=\"center\">8</td>\n</tr>\n<tr>\n<td align=\"center\">16</td>\n<td align=\"center\">8</td>\n<td align=\"center\">2</td>\n<td align=\"center\">0</td>\n</tr>\n</tbody></table>\n<p>最后除数为8时余数为0，所以最大公约数为8.</p>\n<p><strong>证明</strong>:</p>\n<p>有a=bk+r</p>\n<ol>\n<li>设d是a和b的公因数，可以写为<code>d|a且d|b</code>，a=dx, b=dy；带入上式，有dx=dyk+r，r=d(x-yk)，所以<code>d|r</code></li>\n<li>设d是b和r的公因数，可以写为<code>d|r且d|b</code>，r=dx, b=dy；带入上式，有a=dyk+dx，a=d(yk+x)，所以<code>d|a</code></li>\n</ol>\n<p>综上，d是a、b的公因数的情况，可以推出d是r的公因数；d是b、r的公因数，可以推出d是a、b的公因数，所以a、b的所有公因数和b、r的所有公因数是相同的，那么d是a、b的最大公因数，自然也是b、r的最大公因数。</p>\n<p>公因数集相等，自然，集合里的最大值也是相等的。</p>\n<h1 id=\"大数的质因数分解\"><a href=\"#大数的质因数分解\" class=\"headerlink\" title=\"大数的质因数分解\"></a>大数的质因数分解</h1><h2 id=\"RSA算法\"><a href=\"#RSA算法\" class=\"headerlink\" title=\"RSA算法\"></a>RSA算法</h2>","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>Greatest common divisor, 最大公约数。聊聊辗转相除法以及它的应用。</p>","more":"<h1 id=\"GCD\"><a href=\"#GCD\" class=\"headerlink\" title=\"GCD\"></a>GCD</h1><p>最大公约数，目前最好的算法是公元前300年欧几里得发明的辗转相除法。</p>\n<h2 id=\"辗转相除法\"><a href=\"#辗转相除法\" class=\"headerlink\" title=\"辗转相除法\"></a>辗转相除法</h2><p>例如：24 / 12 =  2 ….. 0</p>\n<p>上面的式子中 24 是被除数，12是除数，2是商，0是余数。这四个概念构成了一个除法的等式。</p>\n<ul>\n<li>被除数</li>\n<li>除数</li>\n<li>商</li>\n<li>余数</li>\n</ul>\n<p>当商是整数时，可以称24是12的倍数，12为24的约数。</p>\n<ul>\n<li>倍数</li>\n<li>约数</li>\n</ul>\n<p>理清上面的基本概念后，以下就是辗转相除法的操作了：<strong>在被除数除以除数得出商后，余数不为0时，用除数除以余数，直到余数为0</strong>。</p>\n<h2 id=\"为什么呢？\"><a href=\"#为什么呢？\" class=\"headerlink\" title=\"为什么呢？\"></a>为什么呢？</h2><p>再举个栗子：求104与40的最大公约数</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">被</th>\n<th align=\"center\">除</th>\n<th align=\"center\">商</th>\n<th align=\"center\">余</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">104</td>\n<td align=\"center\">40</td>\n<td align=\"center\">2</td>\n<td align=\"center\">24</td>\n</tr>\n<tr>\n<td align=\"center\">40</td>\n<td align=\"center\">24</td>\n<td align=\"center\">1</td>\n<td align=\"center\">16</td>\n</tr>\n<tr>\n<td align=\"center\">24</td>\n<td align=\"center\">16</td>\n<td align=\"center\">1</td>\n<td align=\"center\">8</td>\n</tr>\n<tr>\n<td align=\"center\">16</td>\n<td align=\"center\">8</td>\n<td align=\"center\">2</td>\n<td align=\"center\">0</td>\n</tr>\n</tbody></table>\n<p>最后除数为8时余数为0，所以最大公约数为8.</p>\n<p><strong>证明</strong>:</p>\n<p>有a=bk+r</p>\n<ol>\n<li>设d是a和b的公因数，可以写为<code>d|a且d|b</code>，a=dx, b=dy；带入上式，有dx=dyk+r，r=d(x-yk)，所以<code>d|r</code></li>\n<li>设d是b和r的公因数，可以写为<code>d|r且d|b</code>，r=dx, b=dy；带入上式，有a=dyk+dx，a=d(yk+x)，所以<code>d|a</code></li>\n</ol>\n<p>综上，d是a、b的公因数的情况，可以推出d是r的公因数；d是b、r的公因数，可以推出d是a、b的公因数，所以a、b的所有公因数和b、r的所有公因数是相同的，那么d是a、b的最大公因数，自然也是b、r的最大公因数。</p>\n<p>公因数集相等，自然，集合里的最大值也是相等的。</p>\n<h1 id=\"大数的质因数分解\"><a href=\"#大数的质因数分解\" class=\"headerlink\" title=\"大数的质因数分解\"></a>大数的质因数分解</h1><h2 id=\"RSA算法\"><a href=\"#RSA算法\" class=\"headerlink\" title=\"RSA算法\"></a>RSA算法</h2>"},{"title":"goodleTest","date":"2020-06-22T06:38:50.000Z","_content":"\ngoogletest，顾名思义，google公司研发的测试框架，适用于C++，协助完成包括单元测试在内的各种类型测试。\n\n<!--more-->\n\n谷歌测试团队的理念：\n\n1. 测试应该是独立且可重复的。\n2. 测试应该是被组织良好的，并且能反映出测试代码的架构。\n3. 测试应该是可拔插、可重用的。\n4. 当测试失败，应该有足够多的问题信息。\n5. 测试框架应该帮助开发人员专注于测试内容，琐碎的事情由框架完成。\n6. 测试的速度应该足够快。\n\ngoogletest基于`xUnit架构`，用过JUnit或者PyUnit的再使用它应该不会陌生。\n\n# 命名\n\n注意区分Test, Test Case, Test Suite\n\n| Meaning                    | googletest Term | ISTQB Term |\n| -------------------------- | --------------- | ---------- |\n| 涉及特定输入输出的测试代码 | TEST()          | Test Case  |\n\n# 基本概念\n\n- tests 使用**断言**来验证测试代码\n- test suit 可以裂解为“测试套装”，包含一个或多个tests，多个tests来反映测试代码的结构，一个test suit中多个tests应该是有共享的对象。\n- test program 包含多个“测试套装”。\n\n# 断言\n\n有`ASSERT_*`和`EXPECT_*`。前者会在遇到异常时抛弃当前的方法，后者在遇到非致命的故障时不会抛弃。通常，后者用的比较多，因为输出的异常信息会更多。\n\n还可以自定义异常消息，使用**stream**特性，可以借助`<<`来实现，例如：\n\n```c++\nASSERT_EQ(x.size(), y.size()) << \"Vectors x and y are of unequal length\";\n\nfor(int i=0; i<x.size(); ++i){\n    EXPECT_EQ(x[i], y[i]) << \"Vectors x and y differ at index \" << i;\n}\n```\n\n在断言后加上可能出现的异常，好比java中的`try-catch`块中，不打印异常信息而输出自定义的信息。\n\n## true/false断言\n\n| fatal assertion          | nonfatal assertion       | verifies           |\n| ------------------------ | ------------------------ | ------------------ |\n| ASSERT_TRUE(condition);  | EXPECT_TRUE(condition);  | condition is true  |\n| ASSERT_FALSE(condition); | EXPECT_FALSE(condition); | condition is false |\n\n出现异常时，`ASSERT_*`会在出现异常的部分返回，不继续进行（类比java中的throw，抛出异常），而`EXPECT_*`会继续执行后续的代码（类比java中的try-catch块捕捉异常）。但是无论哪种，断言失败都意味着测试失败。\n\n## 数值比较\n\n需要熟悉简写，如EQ、NE、LT……\n\n| Fatal assertion        | Nonfatal assertion     | Verifies      |\n| ---------------------- | ---------------------- | ------------- |\n| ASSERT_EQ(val1, val2); | EXPECT_EQ(val1, val2); | val1 == val2  |\n| ASSERT_NE(val1, val2); | EXPECT_EQ(val1, val2); | val1 !=  val2 |\n| ASSERT_LT(val1, val2); | EXPECT_LT(val1, val2); | val1 < val2   |\n| ASSERT_LE(val1, val2); | EXPECT_LE(val1, val2); | val1 <= val2  |\n| ASSERT_GT(val1, val2); | EXPECT_GT(val1, val2); | val1 > val2   |\n| ASSERT_GE(val1, val2); | EXPECT_GE(val1, val2); | val1 >= val2  |\n\n## 字符串比较\n\n注意区分C-strings和string对象的区别。比较两个string对象使用`EXPECT_EQ`，`EXPECT_NE`这些方式，参见上方。\n\n| Fatal assertion               | Nonfatal assertion            | Verifies                                   |\n| ----------------------------- | ----------------------------- | ------------------------------------------ |\n| ASSERT_STREQ(str1, str2);     | EXPECT_STREQ(str1, str2);     | same content                               |\n| ASSERT_STRNE(str1, str2);     | EXPECT_STRNE(str1, str2);     | different contents                         |\n| ASSERT_STRCASEEQ(str1, str2); | EXPECT_STRCASEEQ(str1, str2); | same content, ignoring case(lower/capital) |\n| ASSERT_STRCASENE(str1, str2); | EXPECT_STRCASENE(str1, str2); | different content, ignoring case           |\n\n# 创建测试\n\n```c++\nTEST(TestSuiteName, TestName){\n    ... test body ...\n}\n```\n\n要注意两个入参都要满足c++的命名规范，且不能有下划线。\n\n例如，有一个函数：\n\n```c++\nint Factorial(int n); // Return the factorial of n\n```\n\n那么它的测试函数可以这样写：\n\n```c++\n// Tests factorial of 0.\nTEST(FactorialTest, HandlesZeroInput) {\n  EXPECT_EQ(Factorial(0), 1);\n}\n\n// Tests factorial of positive numbers.\nTEST(FactorialTest, HandlesPositiveInput) {\n  EXPECT_EQ(Factorial(1), 1);\n  EXPECT_EQ(Factorial(2), 2);\n  EXPECT_EQ(Factorial(3), 6);\n  EXPECT_EQ(Factorial(8), 40320);\n}\n```\n\ngoogletest通过test suits把测试分组，上买能的函数中，虽然有两个（`HandlesZeroInput`, `handlesPositiveInput`），但是都属于`FacotrialTest`，跟Java的命名规范有区别。\n\n","source":"_posts/goodleTest.md","raw":"---\ntitle: goodleTest\ndate: 2020-06-22 14:38:50\ncategories: C++\ntags: test\n---\n\ngoogletest，顾名思义，google公司研发的测试框架，适用于C++，协助完成包括单元测试在内的各种类型测试。\n\n<!--more-->\n\n谷歌测试团队的理念：\n\n1. 测试应该是独立且可重复的。\n2. 测试应该是被组织良好的，并且能反映出测试代码的架构。\n3. 测试应该是可拔插、可重用的。\n4. 当测试失败，应该有足够多的问题信息。\n5. 测试框架应该帮助开发人员专注于测试内容，琐碎的事情由框架完成。\n6. 测试的速度应该足够快。\n\ngoogletest基于`xUnit架构`，用过JUnit或者PyUnit的再使用它应该不会陌生。\n\n# 命名\n\n注意区分Test, Test Case, Test Suite\n\n| Meaning                    | googletest Term | ISTQB Term |\n| -------------------------- | --------------- | ---------- |\n| 涉及特定输入输出的测试代码 | TEST()          | Test Case  |\n\n# 基本概念\n\n- tests 使用**断言**来验证测试代码\n- test suit 可以裂解为“测试套装”，包含一个或多个tests，多个tests来反映测试代码的结构，一个test suit中多个tests应该是有共享的对象。\n- test program 包含多个“测试套装”。\n\n# 断言\n\n有`ASSERT_*`和`EXPECT_*`。前者会在遇到异常时抛弃当前的方法，后者在遇到非致命的故障时不会抛弃。通常，后者用的比较多，因为输出的异常信息会更多。\n\n还可以自定义异常消息，使用**stream**特性，可以借助`<<`来实现，例如：\n\n```c++\nASSERT_EQ(x.size(), y.size()) << \"Vectors x and y are of unequal length\";\n\nfor(int i=0; i<x.size(); ++i){\n    EXPECT_EQ(x[i], y[i]) << \"Vectors x and y differ at index \" << i;\n}\n```\n\n在断言后加上可能出现的异常，好比java中的`try-catch`块中，不打印异常信息而输出自定义的信息。\n\n## true/false断言\n\n| fatal assertion          | nonfatal assertion       | verifies           |\n| ------------------------ | ------------------------ | ------------------ |\n| ASSERT_TRUE(condition);  | EXPECT_TRUE(condition);  | condition is true  |\n| ASSERT_FALSE(condition); | EXPECT_FALSE(condition); | condition is false |\n\n出现异常时，`ASSERT_*`会在出现异常的部分返回，不继续进行（类比java中的throw，抛出异常），而`EXPECT_*`会继续执行后续的代码（类比java中的try-catch块捕捉异常）。但是无论哪种，断言失败都意味着测试失败。\n\n## 数值比较\n\n需要熟悉简写，如EQ、NE、LT……\n\n| Fatal assertion        | Nonfatal assertion     | Verifies      |\n| ---------------------- | ---------------------- | ------------- |\n| ASSERT_EQ(val1, val2); | EXPECT_EQ(val1, val2); | val1 == val2  |\n| ASSERT_NE(val1, val2); | EXPECT_EQ(val1, val2); | val1 !=  val2 |\n| ASSERT_LT(val1, val2); | EXPECT_LT(val1, val2); | val1 < val2   |\n| ASSERT_LE(val1, val2); | EXPECT_LE(val1, val2); | val1 <= val2  |\n| ASSERT_GT(val1, val2); | EXPECT_GT(val1, val2); | val1 > val2   |\n| ASSERT_GE(val1, val2); | EXPECT_GE(val1, val2); | val1 >= val2  |\n\n## 字符串比较\n\n注意区分C-strings和string对象的区别。比较两个string对象使用`EXPECT_EQ`，`EXPECT_NE`这些方式，参见上方。\n\n| Fatal assertion               | Nonfatal assertion            | Verifies                                   |\n| ----------------------------- | ----------------------------- | ------------------------------------------ |\n| ASSERT_STREQ(str1, str2);     | EXPECT_STREQ(str1, str2);     | same content                               |\n| ASSERT_STRNE(str1, str2);     | EXPECT_STRNE(str1, str2);     | different contents                         |\n| ASSERT_STRCASEEQ(str1, str2); | EXPECT_STRCASEEQ(str1, str2); | same content, ignoring case(lower/capital) |\n| ASSERT_STRCASENE(str1, str2); | EXPECT_STRCASENE(str1, str2); | different content, ignoring case           |\n\n# 创建测试\n\n```c++\nTEST(TestSuiteName, TestName){\n    ... test body ...\n}\n```\n\n要注意两个入参都要满足c++的命名规范，且不能有下划线。\n\n例如，有一个函数：\n\n```c++\nint Factorial(int n); // Return the factorial of n\n```\n\n那么它的测试函数可以这样写：\n\n```c++\n// Tests factorial of 0.\nTEST(FactorialTest, HandlesZeroInput) {\n  EXPECT_EQ(Factorial(0), 1);\n}\n\n// Tests factorial of positive numbers.\nTEST(FactorialTest, HandlesPositiveInput) {\n  EXPECT_EQ(Factorial(1), 1);\n  EXPECT_EQ(Factorial(2), 2);\n  EXPECT_EQ(Factorial(3), 6);\n  EXPECT_EQ(Factorial(8), 40320);\n}\n```\n\ngoogletest通过test suits把测试分组，上买能的函数中，虽然有两个（`HandlesZeroInput`, `handlesPositiveInput`），但是都属于`FacotrialTest`，跟Java的命名规范有区别。\n\n","slug":"goodleTest","published":1,"updated":"2020-07-19T17:29:13.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgcc001dbyih4tokfaya","content":"<p>googletest，顾名思义，google公司研发的测试框架，适用于C++，协助完成包括单元测试在内的各种类型测试。</p>\n<a id=\"more\"></a>\n\n<p>谷歌测试团队的理念：</p>\n<ol>\n<li>测试应该是独立且可重复的。</li>\n<li>测试应该是被组织良好的，并且能反映出测试代码的架构。</li>\n<li>测试应该是可拔插、可重用的。</li>\n<li>当测试失败，应该有足够多的问题信息。</li>\n<li>测试框架应该帮助开发人员专注于测试内容，琐碎的事情由框架完成。</li>\n<li>测试的速度应该足够快。</li>\n</ol>\n<p>googletest基于<code>xUnit架构</code>，用过JUnit或者PyUnit的再使用它应该不会陌生。</p>\n<h1 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h1><p>注意区分Test, Test Case, Test Suite</p>\n<table>\n<thead>\n<tr>\n<th>Meaning</th>\n<th>googletest Term</th>\n<th>ISTQB Term</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>涉及特定输入输出的测试代码</td>\n<td>TEST()</td>\n<td>Test Case</td>\n</tr>\n</tbody></table>\n<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><ul>\n<li>tests 使用<strong>断言</strong>来验证测试代码</li>\n<li>test suit 可以裂解为“测试套装”，包含一个或多个tests，多个tests来反映测试代码的结构，一个test suit中多个tests应该是有共享的对象。</li>\n<li>test program 包含多个“测试套装”。</li>\n</ul>\n<h1 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h1><p>有<code>ASSERT_*</code>和<code>EXPECT_*</code>。前者会在遇到异常时抛弃当前的方法，后者在遇到非致命的故障时不会抛弃。通常，后者用的比较多，因为输出的异常信息会更多。</p>\n<p>还可以自定义异常消息，使用<strong>stream</strong>特性，可以借助<code>&lt;&lt;</code>来实现，例如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ASSERT_EQ(x.<span class=\"built_in\">size</span>(), y.<span class=\"built_in\">size</span>()) &lt;&lt; <span class=\"string\">&quot;Vectors x and y are of unequal length&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;x.<span class=\"built_in\">size</span>(); ++i)&#123;</span><br><span class=\"line\">    EXPECT_EQ(x[i], y[i]) &lt;&lt; <span class=\"string\">&quot;Vectors x and y differ at index &quot;</span> &lt;&lt; i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在断言后加上可能出现的异常，好比java中的<code>try-catch</code>块中，不打印异常信息而输出自定义的信息。</p>\n<h2 id=\"true-false断言\"><a href=\"#true-false断言\" class=\"headerlink\" title=\"true/false断言\"></a>true/false断言</h2><table>\n<thead>\n<tr>\n<th>fatal assertion</th>\n<th>nonfatal assertion</th>\n<th>verifies</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ASSERT_TRUE(condition);</td>\n<td>EXPECT_TRUE(condition);</td>\n<td>condition is true</td>\n</tr>\n<tr>\n<td>ASSERT_FALSE(condition);</td>\n<td>EXPECT_FALSE(condition);</td>\n<td>condition is false</td>\n</tr>\n</tbody></table>\n<p>出现异常时，<code>ASSERT_*</code>会在出现异常的部分返回，不继续进行（类比java中的throw，抛出异常），而<code>EXPECT_*</code>会继续执行后续的代码（类比java中的try-catch块捕捉异常）。但是无论哪种，断言失败都意味着测试失败。</p>\n<h2 id=\"数值比较\"><a href=\"#数值比较\" class=\"headerlink\" title=\"数值比较\"></a>数值比较</h2><p>需要熟悉简写，如EQ、NE、LT……</p>\n<table>\n<thead>\n<tr>\n<th>Fatal assertion</th>\n<th>Nonfatal assertion</th>\n<th>Verifies</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ASSERT_EQ(val1, val2);</td>\n<td>EXPECT_EQ(val1, val2);</td>\n<td>val1 == val2</td>\n</tr>\n<tr>\n<td>ASSERT_NE(val1, val2);</td>\n<td>EXPECT_EQ(val1, val2);</td>\n<td>val1 !=  val2</td>\n</tr>\n<tr>\n<td>ASSERT_LT(val1, val2);</td>\n<td>EXPECT_LT(val1, val2);</td>\n<td>val1 &lt; val2</td>\n</tr>\n<tr>\n<td>ASSERT_LE(val1, val2);</td>\n<td>EXPECT_LE(val1, val2);</td>\n<td>val1 &lt;= val2</td>\n</tr>\n<tr>\n<td>ASSERT_GT(val1, val2);</td>\n<td>EXPECT_GT(val1, val2);</td>\n<td>val1 &gt; val2</td>\n</tr>\n<tr>\n<td>ASSERT_GE(val1, val2);</td>\n<td>EXPECT_GE(val1, val2);</td>\n<td>val1 &gt;= val2</td>\n</tr>\n</tbody></table>\n<h2 id=\"字符串比较\"><a href=\"#字符串比较\" class=\"headerlink\" title=\"字符串比较\"></a>字符串比较</h2><p>注意区分C-strings和string对象的区别。比较两个string对象使用<code>EXPECT_EQ</code>，<code>EXPECT_NE</code>这些方式，参见上方。</p>\n<table>\n<thead>\n<tr>\n<th>Fatal assertion</th>\n<th>Nonfatal assertion</th>\n<th>Verifies</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ASSERT_STREQ(str1, str2);</td>\n<td>EXPECT_STREQ(str1, str2);</td>\n<td>same content</td>\n</tr>\n<tr>\n<td>ASSERT_STRNE(str1, str2);</td>\n<td>EXPECT_STRNE(str1, str2);</td>\n<td>different contents</td>\n</tr>\n<tr>\n<td>ASSERT_STRCASEEQ(str1, str2);</td>\n<td>EXPECT_STRCASEEQ(str1, str2);</td>\n<td>same content, ignoring case(lower/capital)</td>\n</tr>\n<tr>\n<td>ASSERT_STRCASENE(str1, str2);</td>\n<td>EXPECT_STRCASENE(str1, str2);</td>\n<td>different content, ignoring case</td>\n</tr>\n</tbody></table>\n<h1 id=\"创建测试\"><a href=\"#创建测试\" class=\"headerlink\" title=\"创建测试\"></a>创建测试</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TEST(TestSuiteName, TestName)&#123;</span><br><span class=\"line\">    ... test body ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>要注意两个入参都要满足c++的命名规范，且不能有下划线。</p>\n<p>例如，有一个函数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Factorial</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>; <span class=\"comment\">// Return the factorial of n</span></span><br></pre></td></tr></table></figure>\n\n<p>那么它的测试函数可以这样写：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Tests factorial of 0.</span></span><br><span class=\"line\">TEST(FactorialTest, HandlesZeroInput) &#123;</span><br><span class=\"line\">  EXPECT_EQ(Factorial(<span class=\"number\">0</span>), <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Tests factorial of positive numbers.</span></span><br><span class=\"line\">TEST(FactorialTest, HandlesPositiveInput) &#123;</span><br><span class=\"line\">  EXPECT_EQ(Factorial(<span class=\"number\">1</span>), <span class=\"number\">1</span>);</span><br><span class=\"line\">  EXPECT_EQ(Factorial(<span class=\"number\">2</span>), <span class=\"number\">2</span>);</span><br><span class=\"line\">  EXPECT_EQ(Factorial(<span class=\"number\">3</span>), <span class=\"number\">6</span>);</span><br><span class=\"line\">  EXPECT_EQ(Factorial(<span class=\"number\">8</span>), <span class=\"number\">40320</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>googletest通过test suits把测试分组，上买能的函数中，虽然有两个（<code>HandlesZeroInput</code>, <code>handlesPositiveInput</code>），但是都属于<code>FacotrialTest</code>，跟Java的命名规范有区别。</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>googletest，顾名思义，google公司研发的测试框架，适用于C++，协助完成包括单元测试在内的各种类型测试。</p>","more":"<p>谷歌测试团队的理念：</p>\n<ol>\n<li>测试应该是独立且可重复的。</li>\n<li>测试应该是被组织良好的，并且能反映出测试代码的架构。</li>\n<li>测试应该是可拔插、可重用的。</li>\n<li>当测试失败，应该有足够多的问题信息。</li>\n<li>测试框架应该帮助开发人员专注于测试内容，琐碎的事情由框架完成。</li>\n<li>测试的速度应该足够快。</li>\n</ol>\n<p>googletest基于<code>xUnit架构</code>，用过JUnit或者PyUnit的再使用它应该不会陌生。</p>\n<h1 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h1><p>注意区分Test, Test Case, Test Suite</p>\n<table>\n<thead>\n<tr>\n<th>Meaning</th>\n<th>googletest Term</th>\n<th>ISTQB Term</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>涉及特定输入输出的测试代码</td>\n<td>TEST()</td>\n<td>Test Case</td>\n</tr>\n</tbody></table>\n<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><ul>\n<li>tests 使用<strong>断言</strong>来验证测试代码</li>\n<li>test suit 可以裂解为“测试套装”，包含一个或多个tests，多个tests来反映测试代码的结构，一个test suit中多个tests应该是有共享的对象。</li>\n<li>test program 包含多个“测试套装”。</li>\n</ul>\n<h1 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h1><p>有<code>ASSERT_*</code>和<code>EXPECT_*</code>。前者会在遇到异常时抛弃当前的方法，后者在遇到非致命的故障时不会抛弃。通常，后者用的比较多，因为输出的异常信息会更多。</p>\n<p>还可以自定义异常消息，使用<strong>stream</strong>特性，可以借助<code>&lt;&lt;</code>来实现，例如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ASSERT_EQ(x.<span class=\"built_in\">size</span>(), y.<span class=\"built_in\">size</span>()) &lt;&lt; <span class=\"string\">&quot;Vectors x and y are of unequal length&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;x.<span class=\"built_in\">size</span>(); ++i)&#123;</span><br><span class=\"line\">    EXPECT_EQ(x[i], y[i]) &lt;&lt; <span class=\"string\">&quot;Vectors x and y differ at index &quot;</span> &lt;&lt; i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在断言后加上可能出现的异常，好比java中的<code>try-catch</code>块中，不打印异常信息而输出自定义的信息。</p>\n<h2 id=\"true-false断言\"><a href=\"#true-false断言\" class=\"headerlink\" title=\"true/false断言\"></a>true/false断言</h2><table>\n<thead>\n<tr>\n<th>fatal assertion</th>\n<th>nonfatal assertion</th>\n<th>verifies</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ASSERT_TRUE(condition);</td>\n<td>EXPECT_TRUE(condition);</td>\n<td>condition is true</td>\n</tr>\n<tr>\n<td>ASSERT_FALSE(condition);</td>\n<td>EXPECT_FALSE(condition);</td>\n<td>condition is false</td>\n</tr>\n</tbody></table>\n<p>出现异常时，<code>ASSERT_*</code>会在出现异常的部分返回，不继续进行（类比java中的throw，抛出异常），而<code>EXPECT_*</code>会继续执行后续的代码（类比java中的try-catch块捕捉异常）。但是无论哪种，断言失败都意味着测试失败。</p>\n<h2 id=\"数值比较\"><a href=\"#数值比较\" class=\"headerlink\" title=\"数值比较\"></a>数值比较</h2><p>需要熟悉简写，如EQ、NE、LT……</p>\n<table>\n<thead>\n<tr>\n<th>Fatal assertion</th>\n<th>Nonfatal assertion</th>\n<th>Verifies</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ASSERT_EQ(val1, val2);</td>\n<td>EXPECT_EQ(val1, val2);</td>\n<td>val1 == val2</td>\n</tr>\n<tr>\n<td>ASSERT_NE(val1, val2);</td>\n<td>EXPECT_EQ(val1, val2);</td>\n<td>val1 !=  val2</td>\n</tr>\n<tr>\n<td>ASSERT_LT(val1, val2);</td>\n<td>EXPECT_LT(val1, val2);</td>\n<td>val1 &lt; val2</td>\n</tr>\n<tr>\n<td>ASSERT_LE(val1, val2);</td>\n<td>EXPECT_LE(val1, val2);</td>\n<td>val1 &lt;= val2</td>\n</tr>\n<tr>\n<td>ASSERT_GT(val1, val2);</td>\n<td>EXPECT_GT(val1, val2);</td>\n<td>val1 &gt; val2</td>\n</tr>\n<tr>\n<td>ASSERT_GE(val1, val2);</td>\n<td>EXPECT_GE(val1, val2);</td>\n<td>val1 &gt;= val2</td>\n</tr>\n</tbody></table>\n<h2 id=\"字符串比较\"><a href=\"#字符串比较\" class=\"headerlink\" title=\"字符串比较\"></a>字符串比较</h2><p>注意区分C-strings和string对象的区别。比较两个string对象使用<code>EXPECT_EQ</code>，<code>EXPECT_NE</code>这些方式，参见上方。</p>\n<table>\n<thead>\n<tr>\n<th>Fatal assertion</th>\n<th>Nonfatal assertion</th>\n<th>Verifies</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ASSERT_STREQ(str1, str2);</td>\n<td>EXPECT_STREQ(str1, str2);</td>\n<td>same content</td>\n</tr>\n<tr>\n<td>ASSERT_STRNE(str1, str2);</td>\n<td>EXPECT_STRNE(str1, str2);</td>\n<td>different contents</td>\n</tr>\n<tr>\n<td>ASSERT_STRCASEEQ(str1, str2);</td>\n<td>EXPECT_STRCASEEQ(str1, str2);</td>\n<td>same content, ignoring case(lower/capital)</td>\n</tr>\n<tr>\n<td>ASSERT_STRCASENE(str1, str2);</td>\n<td>EXPECT_STRCASENE(str1, str2);</td>\n<td>different content, ignoring case</td>\n</tr>\n</tbody></table>\n<h1 id=\"创建测试\"><a href=\"#创建测试\" class=\"headerlink\" title=\"创建测试\"></a>创建测试</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TEST(TestSuiteName, TestName)&#123;</span><br><span class=\"line\">    ... test body ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>要注意两个入参都要满足c++的命名规范，且不能有下划线。</p>\n<p>例如，有一个函数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Factorial</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>; <span class=\"comment\">// Return the factorial of n</span></span><br></pre></td></tr></table></figure>\n\n<p>那么它的测试函数可以这样写：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Tests factorial of 0.</span></span><br><span class=\"line\">TEST(FactorialTest, HandlesZeroInput) &#123;</span><br><span class=\"line\">  EXPECT_EQ(Factorial(<span class=\"number\">0</span>), <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Tests factorial of positive numbers.</span></span><br><span class=\"line\">TEST(FactorialTest, HandlesPositiveInput) &#123;</span><br><span class=\"line\">  EXPECT_EQ(Factorial(<span class=\"number\">1</span>), <span class=\"number\">1</span>);</span><br><span class=\"line\">  EXPECT_EQ(Factorial(<span class=\"number\">2</span>), <span class=\"number\">2</span>);</span><br><span class=\"line\">  EXPECT_EQ(Factorial(<span class=\"number\">3</span>), <span class=\"number\">6</span>);</span><br><span class=\"line\">  EXPECT_EQ(Factorial(<span class=\"number\">8</span>), <span class=\"number\">40320</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>googletest通过test suits把测试分组，上买能的函数中，虽然有两个（<code>HandlesZeroInput</code>, <code>handlesPositiveInput</code>），但是都属于<code>FacotrialTest</code>，跟Java的命名规范有区别。</p>"},{"title":"hashmap","date":"2020-08-20T15:04:30.000Z","_content":"\nJava Hashmap. 探究他的实现原理和数据结构。基于jdk8. 虽然被讲烂了，但是再烂也得自己整明白了记下来，不然总归不是自己的。\n\n<!--more-->\n\n# Example\n\n```java\nMap<String, Object> map = new HashMap<>();\nmap.put(\"name\", \"Gloria\");\nmap.put(\"age\", 3);\nmap.put(\"wage\", 539.8);\nSystem.out.println(map);\n```\n\n通过一个简单的`put`操作，来看看究竟发生了什么。\n\n## 构造\n\n初始化时，构造一个HashMap对象，这里有有参和无参（当然，阿里开发规约建议知道容量的情况下要指定大小）的构造方法，有参中你可以指定装载因子、容量、甚至是把map放进去：\n\n```java\nMap<String, Object> map1 = new HashMap<>(map); // map为上方那个\n```\n\n来看看初始化容量时的装载因子：\n\n```java\n    /**\n     * The load factor for the hash table.\n     *\n     * @serial\n     */\n    final float loadFactor;\n```\n\nHashMap的容量是我们存入的数值乘以`0.75`,例如：\n\n```java\nMap<String, Object> map = new HashMap<>(16);\n```\n\n那么，这个map的**实际容量**就是12，超过这个数量的话就会进行扩容操作。一般我们都使用默认的`0.75`,自定义**初始容量**。\n\n## put初识\n\n```java\n/**\n * Implements Map.put and related methods.\n *\n * @param hash hash for key\n * @param key the key\n * @param value the value to put\n * @param onlyIfAbsent if true, don't change existing value\n * @param evict if false, the table is in creation mode.\n * @return previous value, or null if none\n */\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n               boolean evict) {\n    return putVal(hash(key), key, value, false, true);\n}key\n```\n\nput有几个参数，其中之一是hash值，所以我们先来看看他的hash，上面是他的入参，可以看到，只对传入的key进行hash处理了。那么hash是如何做的呢？\n\n```java\nstatic final int hash(Object key) {\n    int h;\n    return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n}\n```\n\n惊不惊喜，意不意外？（好吧，很easy了）首先，他是一个三目元算，判断key是否为null，如果是返回0（说明hashmap允许存入key为null）,否则“一顿操作”。再来细看key不为null的情况，用到了两个**位运算**:\n\n- ^ 异或(两个相同的数做异或运算结果为0)\n- \\>\\>\\> 无符号右移，左边空出来的补0\n\n首先是给h赋值为key的hashCode，key的hashcode是通过Object的`native方法`，所以跟不下去了！所以重点放在位运算上，将h进行右移16位再与之自身进行异或。\n\n关于异或先放在这里，我们来看看后续是如何存储的，往下一跟便能发现一个变量`table`，他的类型是`Noe<K,V> []`，即Node类型数组，接下来我们来看看他的结构，包括存储时防止冲突的解决方法。\n\n\n\n# Node\n\n它是HahsMap的静态内部类，存储的核心，构造也不复杂，可以看看。\n\n```java\n /**\n  * Basic hash bin node, used for most entries.  (See below for\n  * TreeNode subclass, and in LinkedHashMap for its Entry subclass.)\n  */\nstatic class Node<K,V> implements Map.Entry<K,V> {\n    final int hash; // 用来定位数组索引位置\n    final K key;\n    V value;\n    Node<K,V> next; // 链接下一个Node\n\n    Node(int hash, K key, V value, Node<K,V> next) {\n        this.hash = hash;\n        this.key = key;\n        this.value = value;\n        this.next = next;\n    }\n    \n    // get, set equals ...\n}\n```\n\n- 脱脱的链表有么有！！！ `Node<K, V> next`！！！\n- 上面提到的`table`就是一个链表类型的数组，里面用来装Node链表。所以他的基本储存就明了了：数组+链表。\n- 实现了`Map.Entry<K, V>`接口，所以，他的本质（或者说表现）就是一个k-v键值对。\n- 与算法题通常定义的简易链表不同，除了`next`外这里存储了三个值：`hash`, `key`, `value`\n\n\n\n# 冲突解决\n\n首先想想：什么是哈希表。\n\n哈希表=数组+链表。通过`Node<K, V>`以及`Node<K, V> []`我们知道hashmap是使用哈希表存储的。通过课本我们也了解到对需哈希冲突，解决的方式通常有两种：开放寻址、链地址。毫无疑问，既然用了链表，那就连地址呗，实现方式同样是`数组+链表`。\n\n哈希冲突是有条件的，或者说是限制。在hashmap中，冲突取决于**桶**（即之前提到的`table`数组）和**哈希算法**，前者代表了空间成本，后者则是时间成本，空间与时间的权衡是要自己考虑的了（一般默认）。它默认的做法是初始化一个大小，容不下时会进行扩容，如此一来，数组占的空间又小还能使得发生碰撞的概率减小。我们来看看初始化涉及到的一些参数：\n\n```java\n/**\n  * The number of key-value mappings contained in this map.\n  */\ntransient int size;\n\n/**\n  * The number of times this HashMap has been structurally modified\n  * Structural modifications are those that change the number of mappings in\n  * the HashMap or otherwise modify its internal structure (e.g.,\n  * rehash).  This field is used to make iterators on Collection-views of\n  * the HashMap fail-fast.  (See ConcurrentModificationException).\n  */\ntransient int modCount;\n\n/**\n  * The next size value at which to resize (capacity * load factor).\n  *\n  * @serial\n  */\n// (The javadoc description is true upon serialization.\n// Additionally, if the table array has not been allocated, this\n// field holds the initial array capacity, or zero signifying\n// DEFAULT_INITIAL_CAPACITY.)\nint threshold;\n\n/**\n  * The load factor for the hash table.\n  *\n  * @serial\n  */\nfinal float loadFactor;\n```\n\n`threshold`临界值，所能容纳k-v的极限。如果不指定任何值，初始化时Node<K,V>[] table的length是16, loadFactor是0.75,，那么\n\n> threshold = loadFactor * length\n\n也就是说，table数组中所能容纳的Node个数由`threshold`指定，初始为12.往里面装的Node个数超过12，会进行扩容， 扩容为之前的两倍。这里的负载因子可以看作是对空间的限制，毕竟长度16,由于负载因子变成了12,所以如果内存紧张，对时间要求也不高，可以加大因子，允许超过1.\n\nsize就是表示目前存储的Node的数量。\n\n在HashMap中，哈希桶数组的table长度必须为2的n次方，这是一种**非常规**设计，为什么呢？一个冷知识：\n\n- 2的n次方的数为`合数`，实际上`质数`导致哈希冲突的概率要小于合数。\n\n参考HashTable的初始化，`initialCapacity`就是11. 进行这种非常规的设计必然是有道理的，这道理猜都能猜的到吧，当然是为了减少冲突，直接哈希是肯定不可能，不如素数来得快，所以必然是做了一些操作。什么操作呢？后续且看代码。另外，即时哈希算法和桶做得再合理也免不了出现链表过长的情况（数组中一个坑里好长的链表）。链表过长会影响性能，数组形同虚设，所以，在jdk8中引入了**红黑树**，当链表长度过长（默认为8）时会将链表转换为红黑数，利用它快速增删改查的特点提高hashmap的性能。\n\n\n\n# 确定索引\n\n我们知道，数组的查询效率很高而链表很慢，hahsmap的查询效率与数组无异，我们存储的个k-v都以Node链表的形式放入table数组中，并且尽可能地使每个它分布均匀，每个位置上的元素只有一个，对于平时操作的增删改查都是以key的hash来进行查找，可以理解为table的index 了，当找到后最好是不用再遍历链表（最好是这样），所以非常的u迅速，那么，如何确定索引？根据上方的hash代码，总结起来三步：\n\n> 取值（key的hashCode），高位运算，取模运算\n\n我们知道，对于存入的任意key，只要它返回的hashCode相同，那么生成的hash码也一定相同。想让Node在数组中能均匀分布，我们首先想到的应该是对数组取模，这样一来一定是均匀分散在数组中 了，但是对于底层运算来说，取模的操作消耗还是比较大的，我们来看看hashmap是如何找到高效的替代方法的：\n\n```java\nif ((p = tab[i = (n - 1) & hash]) == null)\n            tab[i] = newNode(hash, key, value, null);\n```\n\n在代码中有这么一行，n为数组长度，hash为key的哈希码，由于n总是2的n次方，所以`(n-1)&hash`等价于对length取模，比使用`%`具有更高的效率。\n\n \n\n# put详解\n\n```java\n/**\n * Implements Map.put and related methods.\n *\n * @param hash hash for key\n * @param key the key\n * @param value the value to put\n * @param onlyIfAbsent if true, don't change existing value\n * @param evict if false, the table is in creation mode.\n * @return previous value, or null if none\n */\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n               boolean evict) {\n    Node<K,V>[] tab; Node<K,V> p; int n, i;\n    // 判断table的是否为空，是则执行扩容操作\n    if ((tab = table) == null || (n = tab.length) == 0)\n        n = (tab = resize()).length;\n    // 计算插入数组的索引，如果为null，新建节点\n    if ((p = tab[i = (n - 1) & hash]) == null)\n        tab[i] = newNode(hash, key, value, null);\n    else {\n        Node<K,V> e; K k;\n        // 判断key是否存在，如ugo存在直接覆盖掉value\n        if (p.hash == hash &&\n            ((k = p.key) == key || (key != null && key.equals(k))))\n            e = p;\n        // 判断是否是红黑树，如果是的话就在树中操作，\n        else if (p instanceof TreeNode)\n            e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n        else {\n            // 遍历table\n            for (int binCount = 0; ; ++binCount) {\n                if ((e = p.next) == null) {\n                    // 链表的插入操作\n                    p.next = newNode(hash, key, value, null);\n                    // 长度大于8时转红黑树\n                    if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                        treeifyBin(tab, hash);\n                    break;\n                }\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    break;\n                p = e;\n            }\n        }\n        if (e != null) { // existing mapping for key\n            V oldValue = e.value;\n            if (!onlyIfAbsent || oldValue == null)\n                e.value = value;\n            afterNodeAccess(e);\n            return oldValue;\n        }\n    }\n    ++modCount;\n    // 超过最大容量就扩容\n    if (++size > threshold)\n        resize();\n    afterNodeInsertion(evict);\n    return null;\n}\n```\n\n\n\n# 扩容\n\n我们知道HashMap的存储基础是桶，也就是数组，一般涉及数组的扩容，都是重新定一个大的数组，然后将小的数组拷贝过去（参考ArrayList），那么这里的HashMap是如何做的呢？怎么处理内部的Node以及红黑数呢？\n\n> note: 要注意上方提到的一些实例变量，都是与HashMap相关的属性。\n\n```java\n/**\n * Initializes or doubles table size.  If null, allocates in\n * accord with initial capacity target held in field threshold.\n * Otherwise, because we are using power-of-two expansion, the\n * elements from each bin must either stay at same index, or move\n * with a power of two offset in the new table.\n *\n * @return the table\n */\nfinal Node<K,V>[] resize() {\n    Node<K,V>[] oldTab = table;\n    int oldCap = (oldTab == null) ? 0 : oldTab.length;\n    int oldThr = threshold;\n    int newCap, newThr = 0;\n    if (oldCap > 0) {\n        // 太大就不管了，let it go\n        if (oldCap >= MAXIMUM_CAPACITY) {\n            threshold = Integer.MAX_VALUE;\n            return oldTab;\n        }\n        // 没超过最大值，左移一位（X2）\n        else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                 oldCap >= DEFAULT_INITIAL_CAPACITY)\n            newThr = oldThr << 1; // double threshold\n    }\n    else if (oldThr > 0) // initial capacity was placed in threshold\n        newCap = oldThr;\n    else {               // zero initial threshold signifies using defaults\n        newCap = DEFAULT_INITIAL_CAPACITY;\n        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n    }\n    // 计算resize的上限\n    if (newThr == 0) {\n        float ft = (float)newCap * loadFactor;\n        newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n                  (int)ft : Integer.MAX_VALUE);\n    }\n    threshold = newThr;\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n    Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n    table = newTab;\n    if (oldTab != null) {\n        // 遍历数组，把每个桶都移动到新的中去\n        for (int j = 0; j < oldCap; ++j) {\n            Node<K,V> e;\n            if ((e = oldTab[j]) != null) {\n                oldTab[j] = null;\n                if (e.next == null)\n                    newTab[e.hash & (newCap - 1)] = e;\n                else if (e instanceof TreeNode)\n                    ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n                else { // preserve order\n                    Node<K,V> loHead = null, loTail = null;\n                    Node<K,V> hiHead = null, hiTail = null;\n                    Node<K,V> next;\n                    do {\n                        next = e.next;\n                        if ((e.hash & oldCap) == 0) {\n                            if (loTail == null)\n                                loHead = e;\n                            else\n                                loTail.next = e;\n                            loTail = e;\n                        }\n                        else {\n                            if (hiTail == null)\n                                hiHead = e;\n                            else\n                                hiTail.next = e;\n                            hiTail = e;\n                        }\n                    } while ((e = next) != null);\n                    if (loTail != null) {\n                        loTail.next = null;\n                        newTab[j] = loHead;\n                    }\n                    if (hiTail != null) {\n                        hiTail.next = null;\n                        newTab[j + oldCap] = hiHead;\n                    }\n                }\n            }\n        }\n    }\n    return newTab;\n}\n```\n\n","source":"_posts/hashmap.md","raw":"---\ntitle: hashmap\ndate: 2020-08-20 23:04:30\ntags: hashmap, data structure\n---\n\nJava Hashmap. 探究他的实现原理和数据结构。基于jdk8. 虽然被讲烂了，但是再烂也得自己整明白了记下来，不然总归不是自己的。\n\n<!--more-->\n\n# Example\n\n```java\nMap<String, Object> map = new HashMap<>();\nmap.put(\"name\", \"Gloria\");\nmap.put(\"age\", 3);\nmap.put(\"wage\", 539.8);\nSystem.out.println(map);\n```\n\n通过一个简单的`put`操作，来看看究竟发生了什么。\n\n## 构造\n\n初始化时，构造一个HashMap对象，这里有有参和无参（当然，阿里开发规约建议知道容量的情况下要指定大小）的构造方法，有参中你可以指定装载因子、容量、甚至是把map放进去：\n\n```java\nMap<String, Object> map1 = new HashMap<>(map); // map为上方那个\n```\n\n来看看初始化容量时的装载因子：\n\n```java\n    /**\n     * The load factor for the hash table.\n     *\n     * @serial\n     */\n    final float loadFactor;\n```\n\nHashMap的容量是我们存入的数值乘以`0.75`,例如：\n\n```java\nMap<String, Object> map = new HashMap<>(16);\n```\n\n那么，这个map的**实际容量**就是12，超过这个数量的话就会进行扩容操作。一般我们都使用默认的`0.75`,自定义**初始容量**。\n\n## put初识\n\n```java\n/**\n * Implements Map.put and related methods.\n *\n * @param hash hash for key\n * @param key the key\n * @param value the value to put\n * @param onlyIfAbsent if true, don't change existing value\n * @param evict if false, the table is in creation mode.\n * @return previous value, or null if none\n */\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n               boolean evict) {\n    return putVal(hash(key), key, value, false, true);\n}key\n```\n\nput有几个参数，其中之一是hash值，所以我们先来看看他的hash，上面是他的入参，可以看到，只对传入的key进行hash处理了。那么hash是如何做的呢？\n\n```java\nstatic final int hash(Object key) {\n    int h;\n    return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n}\n```\n\n惊不惊喜，意不意外？（好吧，很easy了）首先，他是一个三目元算，判断key是否为null，如果是返回0（说明hashmap允许存入key为null）,否则“一顿操作”。再来细看key不为null的情况，用到了两个**位运算**:\n\n- ^ 异或(两个相同的数做异或运算结果为0)\n- \\>\\>\\> 无符号右移，左边空出来的补0\n\n首先是给h赋值为key的hashCode，key的hashcode是通过Object的`native方法`，所以跟不下去了！所以重点放在位运算上，将h进行右移16位再与之自身进行异或。\n\n关于异或先放在这里，我们来看看后续是如何存储的，往下一跟便能发现一个变量`table`，他的类型是`Noe<K,V> []`，即Node类型数组，接下来我们来看看他的结构，包括存储时防止冲突的解决方法。\n\n\n\n# Node\n\n它是HahsMap的静态内部类，存储的核心，构造也不复杂，可以看看。\n\n```java\n /**\n  * Basic hash bin node, used for most entries.  (See below for\n  * TreeNode subclass, and in LinkedHashMap for its Entry subclass.)\n  */\nstatic class Node<K,V> implements Map.Entry<K,V> {\n    final int hash; // 用来定位数组索引位置\n    final K key;\n    V value;\n    Node<K,V> next; // 链接下一个Node\n\n    Node(int hash, K key, V value, Node<K,V> next) {\n        this.hash = hash;\n        this.key = key;\n        this.value = value;\n        this.next = next;\n    }\n    \n    // get, set equals ...\n}\n```\n\n- 脱脱的链表有么有！！！ `Node<K, V> next`！！！\n- 上面提到的`table`就是一个链表类型的数组，里面用来装Node链表。所以他的基本储存就明了了：数组+链表。\n- 实现了`Map.Entry<K, V>`接口，所以，他的本质（或者说表现）就是一个k-v键值对。\n- 与算法题通常定义的简易链表不同，除了`next`外这里存储了三个值：`hash`, `key`, `value`\n\n\n\n# 冲突解决\n\n首先想想：什么是哈希表。\n\n哈希表=数组+链表。通过`Node<K, V>`以及`Node<K, V> []`我们知道hashmap是使用哈希表存储的。通过课本我们也了解到对需哈希冲突，解决的方式通常有两种：开放寻址、链地址。毫无疑问，既然用了链表，那就连地址呗，实现方式同样是`数组+链表`。\n\n哈希冲突是有条件的，或者说是限制。在hashmap中，冲突取决于**桶**（即之前提到的`table`数组）和**哈希算法**，前者代表了空间成本，后者则是时间成本，空间与时间的权衡是要自己考虑的了（一般默认）。它默认的做法是初始化一个大小，容不下时会进行扩容，如此一来，数组占的空间又小还能使得发生碰撞的概率减小。我们来看看初始化涉及到的一些参数：\n\n```java\n/**\n  * The number of key-value mappings contained in this map.\n  */\ntransient int size;\n\n/**\n  * The number of times this HashMap has been structurally modified\n  * Structural modifications are those that change the number of mappings in\n  * the HashMap or otherwise modify its internal structure (e.g.,\n  * rehash).  This field is used to make iterators on Collection-views of\n  * the HashMap fail-fast.  (See ConcurrentModificationException).\n  */\ntransient int modCount;\n\n/**\n  * The next size value at which to resize (capacity * load factor).\n  *\n  * @serial\n  */\n// (The javadoc description is true upon serialization.\n// Additionally, if the table array has not been allocated, this\n// field holds the initial array capacity, or zero signifying\n// DEFAULT_INITIAL_CAPACITY.)\nint threshold;\n\n/**\n  * The load factor for the hash table.\n  *\n  * @serial\n  */\nfinal float loadFactor;\n```\n\n`threshold`临界值，所能容纳k-v的极限。如果不指定任何值，初始化时Node<K,V>[] table的length是16, loadFactor是0.75,，那么\n\n> threshold = loadFactor * length\n\n也就是说，table数组中所能容纳的Node个数由`threshold`指定，初始为12.往里面装的Node个数超过12，会进行扩容， 扩容为之前的两倍。这里的负载因子可以看作是对空间的限制，毕竟长度16,由于负载因子变成了12,所以如果内存紧张，对时间要求也不高，可以加大因子，允许超过1.\n\nsize就是表示目前存储的Node的数量。\n\n在HashMap中，哈希桶数组的table长度必须为2的n次方，这是一种**非常规**设计，为什么呢？一个冷知识：\n\n- 2的n次方的数为`合数`，实际上`质数`导致哈希冲突的概率要小于合数。\n\n参考HashTable的初始化，`initialCapacity`就是11. 进行这种非常规的设计必然是有道理的，这道理猜都能猜的到吧，当然是为了减少冲突，直接哈希是肯定不可能，不如素数来得快，所以必然是做了一些操作。什么操作呢？后续且看代码。另外，即时哈希算法和桶做得再合理也免不了出现链表过长的情况（数组中一个坑里好长的链表）。链表过长会影响性能，数组形同虚设，所以，在jdk8中引入了**红黑树**，当链表长度过长（默认为8）时会将链表转换为红黑数，利用它快速增删改查的特点提高hashmap的性能。\n\n\n\n# 确定索引\n\n我们知道，数组的查询效率很高而链表很慢，hahsmap的查询效率与数组无异，我们存储的个k-v都以Node链表的形式放入table数组中，并且尽可能地使每个它分布均匀，每个位置上的元素只有一个，对于平时操作的增删改查都是以key的hash来进行查找，可以理解为table的index 了，当找到后最好是不用再遍历链表（最好是这样），所以非常的u迅速，那么，如何确定索引？根据上方的hash代码，总结起来三步：\n\n> 取值（key的hashCode），高位运算，取模运算\n\n我们知道，对于存入的任意key，只要它返回的hashCode相同，那么生成的hash码也一定相同。想让Node在数组中能均匀分布，我们首先想到的应该是对数组取模，这样一来一定是均匀分散在数组中 了，但是对于底层运算来说，取模的操作消耗还是比较大的，我们来看看hashmap是如何找到高效的替代方法的：\n\n```java\nif ((p = tab[i = (n - 1) & hash]) == null)\n            tab[i] = newNode(hash, key, value, null);\n```\n\n在代码中有这么一行，n为数组长度，hash为key的哈希码，由于n总是2的n次方，所以`(n-1)&hash`等价于对length取模，比使用`%`具有更高的效率。\n\n \n\n# put详解\n\n```java\n/**\n * Implements Map.put and related methods.\n *\n * @param hash hash for key\n * @param key the key\n * @param value the value to put\n * @param onlyIfAbsent if true, don't change existing value\n * @param evict if false, the table is in creation mode.\n * @return previous value, or null if none\n */\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n               boolean evict) {\n    Node<K,V>[] tab; Node<K,V> p; int n, i;\n    // 判断table的是否为空，是则执行扩容操作\n    if ((tab = table) == null || (n = tab.length) == 0)\n        n = (tab = resize()).length;\n    // 计算插入数组的索引，如果为null，新建节点\n    if ((p = tab[i = (n - 1) & hash]) == null)\n        tab[i] = newNode(hash, key, value, null);\n    else {\n        Node<K,V> e; K k;\n        // 判断key是否存在，如ugo存在直接覆盖掉value\n        if (p.hash == hash &&\n            ((k = p.key) == key || (key != null && key.equals(k))))\n            e = p;\n        // 判断是否是红黑树，如果是的话就在树中操作，\n        else if (p instanceof TreeNode)\n            e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n        else {\n            // 遍历table\n            for (int binCount = 0; ; ++binCount) {\n                if ((e = p.next) == null) {\n                    // 链表的插入操作\n                    p.next = newNode(hash, key, value, null);\n                    // 长度大于8时转红黑树\n                    if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                        treeifyBin(tab, hash);\n                    break;\n                }\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    break;\n                p = e;\n            }\n        }\n        if (e != null) { // existing mapping for key\n            V oldValue = e.value;\n            if (!onlyIfAbsent || oldValue == null)\n                e.value = value;\n            afterNodeAccess(e);\n            return oldValue;\n        }\n    }\n    ++modCount;\n    // 超过最大容量就扩容\n    if (++size > threshold)\n        resize();\n    afterNodeInsertion(evict);\n    return null;\n}\n```\n\n\n\n# 扩容\n\n我们知道HashMap的存储基础是桶，也就是数组，一般涉及数组的扩容，都是重新定一个大的数组，然后将小的数组拷贝过去（参考ArrayList），那么这里的HashMap是如何做的呢？怎么处理内部的Node以及红黑数呢？\n\n> note: 要注意上方提到的一些实例变量，都是与HashMap相关的属性。\n\n```java\n/**\n * Initializes or doubles table size.  If null, allocates in\n * accord with initial capacity target held in field threshold.\n * Otherwise, because we are using power-of-two expansion, the\n * elements from each bin must either stay at same index, or move\n * with a power of two offset in the new table.\n *\n * @return the table\n */\nfinal Node<K,V>[] resize() {\n    Node<K,V>[] oldTab = table;\n    int oldCap = (oldTab == null) ? 0 : oldTab.length;\n    int oldThr = threshold;\n    int newCap, newThr = 0;\n    if (oldCap > 0) {\n        // 太大就不管了，let it go\n        if (oldCap >= MAXIMUM_CAPACITY) {\n            threshold = Integer.MAX_VALUE;\n            return oldTab;\n        }\n        // 没超过最大值，左移一位（X2）\n        else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                 oldCap >= DEFAULT_INITIAL_CAPACITY)\n            newThr = oldThr << 1; // double threshold\n    }\n    else if (oldThr > 0) // initial capacity was placed in threshold\n        newCap = oldThr;\n    else {               // zero initial threshold signifies using defaults\n        newCap = DEFAULT_INITIAL_CAPACITY;\n        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n    }\n    // 计算resize的上限\n    if (newThr == 0) {\n        float ft = (float)newCap * loadFactor;\n        newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n                  (int)ft : Integer.MAX_VALUE);\n    }\n    threshold = newThr;\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n    Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n    table = newTab;\n    if (oldTab != null) {\n        // 遍历数组，把每个桶都移动到新的中去\n        for (int j = 0; j < oldCap; ++j) {\n            Node<K,V> e;\n            if ((e = oldTab[j]) != null) {\n                oldTab[j] = null;\n                if (e.next == null)\n                    newTab[e.hash & (newCap - 1)] = e;\n                else if (e instanceof TreeNode)\n                    ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n                else { // preserve order\n                    Node<K,V> loHead = null, loTail = null;\n                    Node<K,V> hiHead = null, hiTail = null;\n                    Node<K,V> next;\n                    do {\n                        next = e.next;\n                        if ((e.hash & oldCap) == 0) {\n                            if (loTail == null)\n                                loHead = e;\n                            else\n                                loTail.next = e;\n                            loTail = e;\n                        }\n                        else {\n                            if (hiTail == null)\n                                hiHead = e;\n                            else\n                                hiTail.next = e;\n                            hiTail = e;\n                        }\n                    } while ((e = next) != null);\n                    if (loTail != null) {\n                        loTail.next = null;\n                        newTab[j] = loHead;\n                    }\n                    if (hiTail != null) {\n                        hiTail.next = null;\n                        newTab[j + oldCap] = hiHead;\n                    }\n                }\n            }\n        }\n    }\n    return newTab;\n}\n```\n\n","slug":"hashmap","published":1,"updated":"2020-08-22T09:20:05.379Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgcf001hbyih2i9gblf0","content":"<p>Java Hashmap. 探究他的实现原理和数据结构。基于jdk8. 虽然被讲烂了，但是再烂也得自己整明白了记下来，不然总归不是自己的。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">map.put(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;Gloria&quot;</span>);</span><br><span class=\"line\">map.put(<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">map.put(<span class=\"string\">&quot;wage&quot;</span>, <span class=\"number\">539.8</span>);</span><br><span class=\"line\">System.out.println(map);</span><br></pre></td></tr></table></figure>\n\n<p>通过一个简单的<code>put</code>操作，来看看究竟发生了什么。</p>\n<h2 id=\"构造\"><a href=\"#构造\" class=\"headerlink\" title=\"构造\"></a>构造</h2><p>初始化时，构造一个HashMap对象，这里有有参和无参（当然，阿里开发规约建议知道容量的情况下要指定大小）的构造方法，有参中你可以指定装载因子、容量、甚至是把map放进去：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Object&gt; map1 = <span class=\"keyword\">new</span> HashMap&lt;&gt;(map); <span class=\"comment\">// map为上方那个</span></span><br></pre></td></tr></table></figure>\n\n<p>来看看初始化容量时的装载因子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The load factor for the hash table.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@serial</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">float</span> loadFactor;</span><br></pre></td></tr></table></figure>\n\n<p>HashMap的容量是我们存入的数值乘以<code>0.75</code>,例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br></pre></td></tr></table></figure>\n\n<p>那么，这个map的<strong>实际容量</strong>就是12，超过这个数量的话就会进行扩容操作。一般我们都使用默认的<code>0.75</code>,自定义<strong>初始容量</strong>。</p>\n<h2 id=\"put初识\"><a href=\"#put初识\" class=\"headerlink\" title=\"put初识\"></a>put初识</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Implements Map.put and related methods.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> hash hash for key</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> key the key</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> value the value to put</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> onlyIfAbsent if true, don&#x27;t change existing value</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> evict if false, the table is in creation mode.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> previous value, or null if none</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> V <span class=\"title\">putVal</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, K key, V value, <span class=\"keyword\">boolean</span> onlyIfAbsent,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">               <span class=\"keyword\">boolean</span> evict)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> putVal(hash(key), key, value, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">&#125;key</span><br></pre></td></tr></table></figure>\n\n<p>put有几个参数，其中之一是hash值，所以我们先来看看他的hash，上面是他的入参，可以看到，只对传入的key进行hash处理了。那么hash是如何做的呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (key == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>惊不惊喜，意不意外？（好吧，很easy了）首先，他是一个三目元算，判断key是否为null，如果是返回0（说明hashmap允许存入key为null）,否则“一顿操作”。再来细看key不为null的情况，用到了两个<strong>位运算</strong>:</p>\n<ul>\n<li>^ 异或(两个相同的数做异或运算结果为0)</li>\n<li>&gt;&gt;&gt; 无符号右移，左边空出来的补0</li>\n</ul>\n<p>首先是给h赋值为key的hashCode，key的hashcode是通过Object的<code>native方法</code>，所以跟不下去了！所以重点放在位运算上，将h进行右移16位再与之自身进行异或。</p>\n<p>关于异或先放在这里，我们来看看后续是如何存储的，往下一跟便能发现一个变量<code>table</code>，他的类型是<code>Noe&lt;K,V&gt; []</code>，即Node类型数组，接下来我们来看看他的结构，包括存储时防止冲突的解决方法。</p>\n<h1 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h1><p>它是HahsMap的静态内部类，存储的核心，构造也不复杂，可以看看。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Basic hash bin node, used for most entries.  (See below for</span></span><br><span class=\"line\"><span class=\"comment\">  * TreeNode subclass, and in LinkedHashMap for its Entry subclass.)</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> hash; <span class=\"comment\">// 用来定位数组索引位置</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> K key;</span><br><span class=\"line\">    V value;</span><br><span class=\"line\">    Node&lt;K,V&gt; next; <span class=\"comment\">// 链接下一个Node</span></span><br><span class=\"line\"></span><br><span class=\"line\">    Node(<span class=\"keyword\">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hash = hash;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// get, set equals ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>脱脱的链表有么有！！！ <code>Node&lt;K, V&gt; next</code>！！！</li>\n<li>上面提到的<code>table</code>就是一个链表类型的数组，里面用来装Node链表。所以他的基本储存就明了了：数组+链表。</li>\n<li>实现了<code>Map.Entry&lt;K, V&gt;</code>接口，所以，他的本质（或者说表现）就是一个k-v键值对。</li>\n<li>与算法题通常定义的简易链表不同，除了<code>next</code>外这里存储了三个值：<code>hash</code>, <code>key</code>, <code>value</code></li>\n</ul>\n<h1 id=\"冲突解决\"><a href=\"#冲突解决\" class=\"headerlink\" title=\"冲突解决\"></a>冲突解决</h1><p>首先想想：什么是哈希表。</p>\n<p>哈希表=数组+链表。通过<code>Node&lt;K, V&gt;</code>以及<code>Node&lt;K, V&gt; []</code>我们知道hashmap是使用哈希表存储的。通过课本我们也了解到对需哈希冲突，解决的方式通常有两种：开放寻址、链地址。毫无疑问，既然用了链表，那就连地址呗，实现方式同样是<code>数组+链表</code>。</p>\n<p>哈希冲突是有条件的，或者说是限制。在hashmap中，冲突取决于<strong>桶</strong>（即之前提到的<code>table</code>数组）和<strong>哈希算法</strong>，前者代表了空间成本，后者则是时间成本，空间与时间的权衡是要自己考虑的了（一般默认）。它默认的做法是初始化一个大小，容不下时会进行扩容，如此一来，数组占的空间又小还能使得发生碰撞的概率减小。我们来看看初始化涉及到的一些参数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * The number of key-value mappings contained in this map.</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * The number of times this HashMap has been structurally modified</span></span><br><span class=\"line\"><span class=\"comment\">  * Structural modifications are those that change the number of mappings in</span></span><br><span class=\"line\"><span class=\"comment\">  * the HashMap or otherwise modify its internal structure (e.g.,</span></span><br><span class=\"line\"><span class=\"comment\">  * rehash).  This field is used to make iterators on Collection-views of</span></span><br><span class=\"line\"><span class=\"comment\">  * the HashMap fail-fast.  (See ConcurrentModificationException).</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> modCount;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * The next size value at which to resize (capacity * load factor).</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@serial</span></span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"comment\">// (The javadoc description is true upon serialization.</span></span><br><span class=\"line\"><span class=\"comment\">// Additionally, if the table array has not been allocated, this</span></span><br><span class=\"line\"><span class=\"comment\">// field holds the initial array capacity, or zero signifying</span></span><br><span class=\"line\"><span class=\"comment\">// DEFAULT_INITIAL_CAPACITY.)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> threshold;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * The load factor for the hash table.</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@serial</span></span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">float</span> loadFactor;</span><br></pre></td></tr></table></figure>\n\n<p><code>threshold</code>临界值，所能容纳k-v的极限。如果不指定任何值，初始化时Node&lt;K,V&gt;[] table的length是16, loadFactor是0.75,，那么</p>\n<blockquote>\n<p>threshold = loadFactor * length</p>\n</blockquote>\n<p>也就是说，table数组中所能容纳的Node个数由<code>threshold</code>指定，初始为12.往里面装的Node个数超过12，会进行扩容， 扩容为之前的两倍。这里的负载因子可以看作是对空间的限制，毕竟长度16,由于负载因子变成了12,所以如果内存紧张，对时间要求也不高，可以加大因子，允许超过1.</p>\n<p>size就是表示目前存储的Node的数量。</p>\n<p>在HashMap中，哈希桶数组的table长度必须为2的n次方，这是一种<strong>非常规</strong>设计，为什么呢？一个冷知识：</p>\n<ul>\n<li>2的n次方的数为<code>合数</code>，实际上<code>质数</code>导致哈希冲突的概率要小于合数。</li>\n</ul>\n<p>参考HashTable的初始化，<code>initialCapacity</code>就是11. 进行这种非常规的设计必然是有道理的，这道理猜都能猜的到吧，当然是为了减少冲突，直接哈希是肯定不可能，不如素数来得快，所以必然是做了一些操作。什么操作呢？后续且看代码。另外，即时哈希算法和桶做得再合理也免不了出现链表过长的情况（数组中一个坑里好长的链表）。链表过长会影响性能，数组形同虚设，所以，在jdk8中引入了<strong>红黑树</strong>，当链表长度过长（默认为8）时会将链表转换为红黑数，利用它快速增删改查的特点提高hashmap的性能。</p>\n<h1 id=\"确定索引\"><a href=\"#确定索引\" class=\"headerlink\" title=\"确定索引\"></a>确定索引</h1><p>我们知道，数组的查询效率很高而链表很慢，hahsmap的查询效率与数组无异，我们存储的个k-v都以Node链表的形式放入table数组中，并且尽可能地使每个它分布均匀，每个位置上的元素只有一个，对于平时操作的增删改查都是以key的hash来进行查找，可以理解为table的index 了，当找到后最好是不用再遍历链表（最好是这样），所以非常的u迅速，那么，如何确定索引？根据上方的hash代码，总结起来三步：</p>\n<blockquote>\n<p>取值（key的hashCode），高位运算，取模运算</p>\n</blockquote>\n<p>我们知道，对于存入的任意key，只要它返回的hashCode相同，那么生成的hash码也一定相同。想让Node在数组中能均匀分布，我们首先想到的应该是对数组取模，这样一来一定是均匀分散在数组中 了，但是对于底层运算来说，取模的操作消耗还是比较大的，我们来看看hashmap是如何找到高效的替代方法的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ((p = tab[i = (n - <span class=\"number\">1</span>) &amp; hash]) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            tab[i] = newNode(hash, key, value, <span class=\"keyword\">null</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在代码中有这么一行，n为数组长度，hash为key的哈希码，由于n总是2的n次方，所以<code>(n-1)&amp;hash</code>等价于对length取模，比使用<code>%</code>具有更高的效率。</p>\n<h1 id=\"put详解\"><a href=\"#put详解\" class=\"headerlink\" title=\"put详解\"></a>put详解</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Implements Map.put and related methods.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> hash hash for key</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> key the key</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> value the value to put</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> onlyIfAbsent if true, don&#x27;t change existing value</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> evict if false, the table is in creation mode.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> previous value, or null if none</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> V <span class=\"title\">putVal</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, K key, V value, <span class=\"keyword\">boolean</span> onlyIfAbsent,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">               <span class=\"keyword\">boolean</span> evict)</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class=\"keyword\">int</span> n, i;</span><br><span class=\"line\">    <span class=\"comment\">// 判断table的是否为空，是则执行扩容操作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) == <span class=\"keyword\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        n = (tab = resize()).length;</span><br><span class=\"line\">    <span class=\"comment\">// 计算插入数组的索引，如果为null，新建节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((p = tab[i = (n - <span class=\"number\">1</span>) &amp; hash]) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        tab[i] = newNode(hash, key, value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt; e; K k;</span><br><span class=\"line\">        <span class=\"comment\">// 判断key是否存在，如ugo存在直接覆盖掉value</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.hash == hash &amp;&amp;</span><br><span class=\"line\">            ((k = p.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">            e = p;</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否是红黑树，如果是的话就在树中操作，</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class=\"keyword\">this</span>, tab, hash, key, value);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 遍历table</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> binCount = <span class=\"number\">0</span>; ; ++binCount) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((e = p.next) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 链表的插入操作</span></span><br><span class=\"line\">                    p.next = newNode(hash, key, value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// 长度大于8时转红黑树</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\"number\">1</span>) <span class=\"comment\">// -1 for 1st</span></span><br><span class=\"line\">                        treeifyBin(tab, hash);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                    ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                p = e;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// existing mapping for key</span></span><br><span class=\"line\">            V oldValue = e.value;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!onlyIfAbsent || oldValue == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                e.value = value;</span><br><span class=\"line\">            afterNodeAccess(e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ++modCount;</span><br><span class=\"line\">    <span class=\"comment\">// 超过最大容量就扩容</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (++size &gt; threshold)</span><br><span class=\"line\">        resize();</span><br><span class=\"line\">    afterNodeInsertion(evict);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"扩容\"><a href=\"#扩容\" class=\"headerlink\" title=\"扩容\"></a>扩容</h1><p>我们知道HashMap的存储基础是桶，也就是数组，一般涉及数组的扩容，都是重新定一个大的数组，然后将小的数组拷贝过去（参考ArrayList），那么这里的HashMap是如何做的呢？怎么处理内部的Node以及红黑数呢？</p>\n<blockquote>\n<p>note: 要注意上方提到的一些实例变量，都是与HashMap相关的属性。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Initializes or doubles table size.  If null, allocates in</span></span><br><span class=\"line\"><span class=\"comment\"> * accord with initial capacity target held in field threshold.</span></span><br><span class=\"line\"><span class=\"comment\"> * Otherwise, because we are using power-of-two expansion, the</span></span><br><span class=\"line\"><span class=\"comment\"> * elements from each bin must either stay at same index, or move</span></span><br><span class=\"line\"><span class=\"comment\"> * with a power of two offset in the new table.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> the table</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldCap = (oldTab == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : oldTab.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldThr = threshold;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> newCap, newThr = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldCap &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 太大就不管了，let it go</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">            threshold = Integer.MAX_VALUE;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldTab;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 没超过最大值，左移一位（X2）</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((newCap = oldCap &lt;&lt; <span class=\"number\">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class=\"line\">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class=\"line\">            newThr = oldThr &lt;&lt; <span class=\"number\">1</span>; <span class=\"comment\">// double threshold</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldThr &gt; <span class=\"number\">0</span>) <span class=\"comment\">// initial capacity was placed in threshold</span></span><br><span class=\"line\">        newCap = oldThr;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;               <span class=\"comment\">// zero initial threshold signifies using defaults</span></span><br><span class=\"line\">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class=\"line\">        newThr = (<span class=\"keyword\">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 计算resize的上限</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newThr == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> ft = (<span class=\"keyword\">float</span>)newCap * loadFactor;</span><br><span class=\"line\">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class=\"keyword\">float</span>)MAXIMUM_CAPACITY ?</span><br><span class=\"line\">                  (<span class=\"keyword\">int</span>)ft : Integer.MAX_VALUE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    threshold = newThr;</span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class=\"line\">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> Node[newCap];</span><br><span class=\"line\">    table = newTab;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldTab != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历数组，把每个桶都移动到新的中去</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class=\"line\">            Node&lt;K,V&gt; e;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((e = oldTab[j]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                oldTab[j] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    newTab[e.hash &amp; (newCap - <span class=\"number\">1</span>)] = e;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                    ((TreeNode&lt;K,V&gt;)e).split(<span class=\"keyword\">this</span>, newTab, j, oldCap);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// preserve order</span></span><br><span class=\"line\">                    Node&lt;K,V&gt; loHead = <span class=\"keyword\">null</span>, loTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    Node&lt;K,V&gt; hiHead = <span class=\"keyword\">null</span>, hiTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    Node&lt;K,V&gt; next;</span><br><span class=\"line\">                    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                        next = e.next;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((e.hash &amp; oldCap) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (loTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                                loHead = e;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                loTail.next = e;</span><br><span class=\"line\">                            loTail = e;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (hiTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                                hiHead = e;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                hiTail.next = e;</span><br><span class=\"line\">                            hiTail = e;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">while</span> ((e = next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (loTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        loTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        newTab[j] = loHead;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (hiTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        hiTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        newTab[j + oldCap] = hiHead;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newTab;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>Java Hashmap. 探究他的实现原理和数据结构。基于jdk8. 虽然被讲烂了，但是再烂也得自己整明白了记下来，不然总归不是自己的。</p>","more":"<h1 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">map.put(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;Gloria&quot;</span>);</span><br><span class=\"line\">map.put(<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">map.put(<span class=\"string\">&quot;wage&quot;</span>, <span class=\"number\">539.8</span>);</span><br><span class=\"line\">System.out.println(map);</span><br></pre></td></tr></table></figure>\n\n<p>通过一个简单的<code>put</code>操作，来看看究竟发生了什么。</p>\n<h2 id=\"构造\"><a href=\"#构造\" class=\"headerlink\" title=\"构造\"></a>构造</h2><p>初始化时，构造一个HashMap对象，这里有有参和无参（当然，阿里开发规约建议知道容量的情况下要指定大小）的构造方法，有参中你可以指定装载因子、容量、甚至是把map放进去：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Object&gt; map1 = <span class=\"keyword\">new</span> HashMap&lt;&gt;(map); <span class=\"comment\">// map为上方那个</span></span><br></pre></td></tr></table></figure>\n\n<p>来看看初始化容量时的装载因子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The load factor for the hash table.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@serial</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">float</span> loadFactor;</span><br></pre></td></tr></table></figure>\n\n<p>HashMap的容量是我们存入的数值乘以<code>0.75</code>,例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br></pre></td></tr></table></figure>\n\n<p>那么，这个map的<strong>实际容量</strong>就是12，超过这个数量的话就会进行扩容操作。一般我们都使用默认的<code>0.75</code>,自定义<strong>初始容量</strong>。</p>\n<h2 id=\"put初识\"><a href=\"#put初识\" class=\"headerlink\" title=\"put初识\"></a>put初识</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Implements Map.put and related methods.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> hash hash for key</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> key the key</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> value the value to put</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> onlyIfAbsent if true, don&#x27;t change existing value</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> evict if false, the table is in creation mode.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> previous value, or null if none</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> V <span class=\"title\">putVal</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, K key, V value, <span class=\"keyword\">boolean</span> onlyIfAbsent,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">               <span class=\"keyword\">boolean</span> evict)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> putVal(hash(key), key, value, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">&#125;key</span><br></pre></td></tr></table></figure>\n\n<p>put有几个参数，其中之一是hash值，所以我们先来看看他的hash，上面是他的入参，可以看到，只对传入的key进行hash处理了。那么hash是如何做的呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (key == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>惊不惊喜，意不意外？（好吧，很easy了）首先，他是一个三目元算，判断key是否为null，如果是返回0（说明hashmap允许存入key为null）,否则“一顿操作”。再来细看key不为null的情况，用到了两个<strong>位运算</strong>:</p>\n<ul>\n<li>^ 异或(两个相同的数做异或运算结果为0)</li>\n<li>&gt;&gt;&gt; 无符号右移，左边空出来的补0</li>\n</ul>\n<p>首先是给h赋值为key的hashCode，key的hashcode是通过Object的<code>native方法</code>，所以跟不下去了！所以重点放在位运算上，将h进行右移16位再与之自身进行异或。</p>\n<p>关于异或先放在这里，我们来看看后续是如何存储的，往下一跟便能发现一个变量<code>table</code>，他的类型是<code>Noe&lt;K,V&gt; []</code>，即Node类型数组，接下来我们来看看他的结构，包括存储时防止冲突的解决方法。</p>\n<h1 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h1><p>它是HahsMap的静态内部类，存储的核心，构造也不复杂，可以看看。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Basic hash bin node, used for most entries.  (See below for</span></span><br><span class=\"line\"><span class=\"comment\">  * TreeNode subclass, and in LinkedHashMap for its Entry subclass.)</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> hash; <span class=\"comment\">// 用来定位数组索引位置</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> K key;</span><br><span class=\"line\">    V value;</span><br><span class=\"line\">    Node&lt;K,V&gt; next; <span class=\"comment\">// 链接下一个Node</span></span><br><span class=\"line\"></span><br><span class=\"line\">    Node(<span class=\"keyword\">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hash = hash;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// get, set equals ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>脱脱的链表有么有！！！ <code>Node&lt;K, V&gt; next</code>！！！</li>\n<li>上面提到的<code>table</code>就是一个链表类型的数组，里面用来装Node链表。所以他的基本储存就明了了：数组+链表。</li>\n<li>实现了<code>Map.Entry&lt;K, V&gt;</code>接口，所以，他的本质（或者说表现）就是一个k-v键值对。</li>\n<li>与算法题通常定义的简易链表不同，除了<code>next</code>外这里存储了三个值：<code>hash</code>, <code>key</code>, <code>value</code></li>\n</ul>\n<h1 id=\"冲突解决\"><a href=\"#冲突解决\" class=\"headerlink\" title=\"冲突解决\"></a>冲突解决</h1><p>首先想想：什么是哈希表。</p>\n<p>哈希表=数组+链表。通过<code>Node&lt;K, V&gt;</code>以及<code>Node&lt;K, V&gt; []</code>我们知道hashmap是使用哈希表存储的。通过课本我们也了解到对需哈希冲突，解决的方式通常有两种：开放寻址、链地址。毫无疑问，既然用了链表，那就连地址呗，实现方式同样是<code>数组+链表</code>。</p>\n<p>哈希冲突是有条件的，或者说是限制。在hashmap中，冲突取决于<strong>桶</strong>（即之前提到的<code>table</code>数组）和<strong>哈希算法</strong>，前者代表了空间成本，后者则是时间成本，空间与时间的权衡是要自己考虑的了（一般默认）。它默认的做法是初始化一个大小，容不下时会进行扩容，如此一来，数组占的空间又小还能使得发生碰撞的概率减小。我们来看看初始化涉及到的一些参数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * The number of key-value mappings contained in this map.</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * The number of times this HashMap has been structurally modified</span></span><br><span class=\"line\"><span class=\"comment\">  * Structural modifications are those that change the number of mappings in</span></span><br><span class=\"line\"><span class=\"comment\">  * the HashMap or otherwise modify its internal structure (e.g.,</span></span><br><span class=\"line\"><span class=\"comment\">  * rehash).  This field is used to make iterators on Collection-views of</span></span><br><span class=\"line\"><span class=\"comment\">  * the HashMap fail-fast.  (See ConcurrentModificationException).</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> modCount;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * The next size value at which to resize (capacity * load factor).</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@serial</span></span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"comment\">// (The javadoc description is true upon serialization.</span></span><br><span class=\"line\"><span class=\"comment\">// Additionally, if the table array has not been allocated, this</span></span><br><span class=\"line\"><span class=\"comment\">// field holds the initial array capacity, or zero signifying</span></span><br><span class=\"line\"><span class=\"comment\">// DEFAULT_INITIAL_CAPACITY.)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> threshold;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * The load factor for the hash table.</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@serial</span></span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">float</span> loadFactor;</span><br></pre></td></tr></table></figure>\n\n<p><code>threshold</code>临界值，所能容纳k-v的极限。如果不指定任何值，初始化时Node&lt;K,V&gt;[] table的length是16, loadFactor是0.75,，那么</p>\n<blockquote>\n<p>threshold = loadFactor * length</p>\n</blockquote>\n<p>也就是说，table数组中所能容纳的Node个数由<code>threshold</code>指定，初始为12.往里面装的Node个数超过12，会进行扩容， 扩容为之前的两倍。这里的负载因子可以看作是对空间的限制，毕竟长度16,由于负载因子变成了12,所以如果内存紧张，对时间要求也不高，可以加大因子，允许超过1.</p>\n<p>size就是表示目前存储的Node的数量。</p>\n<p>在HashMap中，哈希桶数组的table长度必须为2的n次方，这是一种<strong>非常规</strong>设计，为什么呢？一个冷知识：</p>\n<ul>\n<li>2的n次方的数为<code>合数</code>，实际上<code>质数</code>导致哈希冲突的概率要小于合数。</li>\n</ul>\n<p>参考HashTable的初始化，<code>initialCapacity</code>就是11. 进行这种非常规的设计必然是有道理的，这道理猜都能猜的到吧，当然是为了减少冲突，直接哈希是肯定不可能，不如素数来得快，所以必然是做了一些操作。什么操作呢？后续且看代码。另外，即时哈希算法和桶做得再合理也免不了出现链表过长的情况（数组中一个坑里好长的链表）。链表过长会影响性能，数组形同虚设，所以，在jdk8中引入了<strong>红黑树</strong>，当链表长度过长（默认为8）时会将链表转换为红黑数，利用它快速增删改查的特点提高hashmap的性能。</p>\n<h1 id=\"确定索引\"><a href=\"#确定索引\" class=\"headerlink\" title=\"确定索引\"></a>确定索引</h1><p>我们知道，数组的查询效率很高而链表很慢，hahsmap的查询效率与数组无异，我们存储的个k-v都以Node链表的形式放入table数组中，并且尽可能地使每个它分布均匀，每个位置上的元素只有一个，对于平时操作的增删改查都是以key的hash来进行查找，可以理解为table的index 了，当找到后最好是不用再遍历链表（最好是这样），所以非常的u迅速，那么，如何确定索引？根据上方的hash代码，总结起来三步：</p>\n<blockquote>\n<p>取值（key的hashCode），高位运算，取模运算</p>\n</blockquote>\n<p>我们知道，对于存入的任意key，只要它返回的hashCode相同，那么生成的hash码也一定相同。想让Node在数组中能均匀分布，我们首先想到的应该是对数组取模，这样一来一定是均匀分散在数组中 了，但是对于底层运算来说，取模的操作消耗还是比较大的，我们来看看hashmap是如何找到高效的替代方法的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ((p = tab[i = (n - <span class=\"number\">1</span>) &amp; hash]) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            tab[i] = newNode(hash, key, value, <span class=\"keyword\">null</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在代码中有这么一行，n为数组长度，hash为key的哈希码，由于n总是2的n次方，所以<code>(n-1)&amp;hash</code>等价于对length取模，比使用<code>%</code>具有更高的效率。</p>\n<h1 id=\"put详解\"><a href=\"#put详解\" class=\"headerlink\" title=\"put详解\"></a>put详解</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Implements Map.put and related methods.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> hash hash for key</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> key the key</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> value the value to put</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> onlyIfAbsent if true, don&#x27;t change existing value</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> evict if false, the table is in creation mode.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> previous value, or null if none</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> V <span class=\"title\">putVal</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, K key, V value, <span class=\"keyword\">boolean</span> onlyIfAbsent,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">               <span class=\"keyword\">boolean</span> evict)</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class=\"keyword\">int</span> n, i;</span><br><span class=\"line\">    <span class=\"comment\">// 判断table的是否为空，是则执行扩容操作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) == <span class=\"keyword\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        n = (tab = resize()).length;</span><br><span class=\"line\">    <span class=\"comment\">// 计算插入数组的索引，如果为null，新建节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((p = tab[i = (n - <span class=\"number\">1</span>) &amp; hash]) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        tab[i] = newNode(hash, key, value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt; e; K k;</span><br><span class=\"line\">        <span class=\"comment\">// 判断key是否存在，如ugo存在直接覆盖掉value</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.hash == hash &amp;&amp;</span><br><span class=\"line\">            ((k = p.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">            e = p;</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否是红黑树，如果是的话就在树中操作，</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class=\"keyword\">this</span>, tab, hash, key, value);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 遍历table</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> binCount = <span class=\"number\">0</span>; ; ++binCount) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((e = p.next) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 链表的插入操作</span></span><br><span class=\"line\">                    p.next = newNode(hash, key, value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// 长度大于8时转红黑树</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\"number\">1</span>) <span class=\"comment\">// -1 for 1st</span></span><br><span class=\"line\">                        treeifyBin(tab, hash);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                    ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                p = e;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// existing mapping for key</span></span><br><span class=\"line\">            V oldValue = e.value;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!onlyIfAbsent || oldValue == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                e.value = value;</span><br><span class=\"line\">            afterNodeAccess(e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ++modCount;</span><br><span class=\"line\">    <span class=\"comment\">// 超过最大容量就扩容</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (++size &gt; threshold)</span><br><span class=\"line\">        resize();</span><br><span class=\"line\">    afterNodeInsertion(evict);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"扩容\"><a href=\"#扩容\" class=\"headerlink\" title=\"扩容\"></a>扩容</h1><p>我们知道HashMap的存储基础是桶，也就是数组，一般涉及数组的扩容，都是重新定一个大的数组，然后将小的数组拷贝过去（参考ArrayList），那么这里的HashMap是如何做的呢？怎么处理内部的Node以及红黑数呢？</p>\n<blockquote>\n<p>note: 要注意上方提到的一些实例变量，都是与HashMap相关的属性。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Initializes or doubles table size.  If null, allocates in</span></span><br><span class=\"line\"><span class=\"comment\"> * accord with initial capacity target held in field threshold.</span></span><br><span class=\"line\"><span class=\"comment\"> * Otherwise, because we are using power-of-two expansion, the</span></span><br><span class=\"line\"><span class=\"comment\"> * elements from each bin must either stay at same index, or move</span></span><br><span class=\"line\"><span class=\"comment\"> * with a power of two offset in the new table.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> the table</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldCap = (oldTab == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : oldTab.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldThr = threshold;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> newCap, newThr = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldCap &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 太大就不管了，let it go</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">            threshold = Integer.MAX_VALUE;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldTab;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 没超过最大值，左移一位（X2）</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((newCap = oldCap &lt;&lt; <span class=\"number\">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class=\"line\">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class=\"line\">            newThr = oldThr &lt;&lt; <span class=\"number\">1</span>; <span class=\"comment\">// double threshold</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldThr &gt; <span class=\"number\">0</span>) <span class=\"comment\">// initial capacity was placed in threshold</span></span><br><span class=\"line\">        newCap = oldThr;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;               <span class=\"comment\">// zero initial threshold signifies using defaults</span></span><br><span class=\"line\">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class=\"line\">        newThr = (<span class=\"keyword\">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 计算resize的上限</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newThr == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> ft = (<span class=\"keyword\">float</span>)newCap * loadFactor;</span><br><span class=\"line\">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class=\"keyword\">float</span>)MAXIMUM_CAPACITY ?</span><br><span class=\"line\">                  (<span class=\"keyword\">int</span>)ft : Integer.MAX_VALUE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    threshold = newThr;</span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class=\"line\">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> Node[newCap];</span><br><span class=\"line\">    table = newTab;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldTab != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历数组，把每个桶都移动到新的中去</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class=\"line\">            Node&lt;K,V&gt; e;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((e = oldTab[j]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                oldTab[j] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    newTab[e.hash &amp; (newCap - <span class=\"number\">1</span>)] = e;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                    ((TreeNode&lt;K,V&gt;)e).split(<span class=\"keyword\">this</span>, newTab, j, oldCap);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// preserve order</span></span><br><span class=\"line\">                    Node&lt;K,V&gt; loHead = <span class=\"keyword\">null</span>, loTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    Node&lt;K,V&gt; hiHead = <span class=\"keyword\">null</span>, hiTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    Node&lt;K,V&gt; next;</span><br><span class=\"line\">                    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                        next = e.next;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((e.hash &amp; oldCap) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (loTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                                loHead = e;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                loTail.next = e;</span><br><span class=\"line\">                            loTail = e;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (hiTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                                hiHead = e;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                hiTail.next = e;</span><br><span class=\"line\">                            hiTail = e;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">while</span> ((e = next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (loTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        loTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        newTab[j] = loHead;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (hiTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        hiTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        newTab[j + oldCap] = hiHead;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newTab;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"heap","date":"2020-06-06T14:54:27.000Z","_content":"\n这里的堆是数据结构中的堆，不是JVM中的堆。\n\n关键词：堆，二叉树，优先级队列，排序，topN\n\n<!-- more -->\n\n# 结构\n\n堆的结构是完全二叉树，而且是有序的，分大顶堆和小顶堆。\t\n\n## 完全二叉树\n\n- 路径长度是指路径上的边数\n- 结点深度是指从根结点到该结点的路径的长度\n- 每一层都是满的或者最后一层不满但最后一层的叶子都是靠左放置\n\n## 二叉堆\n\n- 完全二叉树\n- 每个结点大于或等于它的任意一个孩子\n\n# 存储\n\n可以将二叉堆用数组来存储。\n\n例如如下一个二叉堆：\n\n![Screenshot from 2020-06-06 15-24-34.png](https://i.loli.net/2020/06/06/JbDlczXVh35sEF1.png)\n\n在数组中保存：{62,42,59,32,39,44,13,22,29,14,33,30,17,9}\n\n可以看到相当是以广度优先遍历了这个二叉树，并将遍历的结点按顺序存入数组。可以从中发现一些存储的规律，对于任意一个位置_i_，他的左子结点在_2i+1_处，右子结点在_2i+2_处，父结点在_(i-1)/2_处。例如：39在数组中的下标是4，那么他的左子结点就在（2×4+1）=9处。\n\n# 应用\n\n## 优先级队列\n\n优先级队列的底层就是用堆来实现的。同时一道比较经典的算法题用优先级队列可以轻松实现：top n 问题\n\n## TOP N\n\n给一组数据，求其中最大/小的几个数。\n\n```java\n// 求最小的n个数\npublic static int[] topN(int[] array, int n) {\n    if (n == 0) {\n        return new int[0];\n    }\n    // default big heap, lambda make it small heap\n    Queue<Integer> heap = new PriorityQueue<>(n, ((o1, o2) -> Integer.compare(o2, o1)));\n\n    for (int e : array) {\n        // put the integer in when it smaller than the top of integer\n        if (heap.isEmpty() || heap.size() < n || e < heap.peek()) {\n            heap.offer(e);\n        }\n        if (heap.size() > n) {\n            // delete the top of heap integer\n            heap.poll();\n        }\n    }\n\n    int[] res = new int[heap.size()];\n    int j = 0;\n    for (int e : heap) {\n        res[j++] = e;\n    }\n    return res;\n}\n```\n\n上面用到了小顶堆，for循环中的两个判断，符合条件的放进堆中，第二个判断中，当堆中的元素个数大于要求的个数时，删除堆中的顶部元素（优先级队列的本质还是队列，进出满读FIFO）。\n\n稍作修改，可以让上面的代码输出最大的n个数，显而易见的是，我们只需修改入队列的条件以及优先级队列的堆排序方式：\n\n```java\n// 默认大顶堆\nQueue<Integer> heap = new PriorityQueue<>(n);\nfor(int e: array){\n    // 大于堆顶的放入优先级队列\n    if(heap.isEmpty() || heap.size() < n || e > heap.peak()){\n        heap.offer(e);\n    }\n    // 超过要求的个数，清除堆顶元素\n    if(heap.size() > n){\n        heap.pool();\n    }\n}\n```\n\n\n\n\n\n","source":"_posts/heap.md","raw":"---\ntitle: heap\ndate: 2020-06-06 22:54:27\ncategories: Java\ntags: datastructure\n---\n\n这里的堆是数据结构中的堆，不是JVM中的堆。\n\n关键词：堆，二叉树，优先级队列，排序，topN\n\n<!-- more -->\n\n# 结构\n\n堆的结构是完全二叉树，而且是有序的，分大顶堆和小顶堆。\t\n\n## 完全二叉树\n\n- 路径长度是指路径上的边数\n- 结点深度是指从根结点到该结点的路径的长度\n- 每一层都是满的或者最后一层不满但最后一层的叶子都是靠左放置\n\n## 二叉堆\n\n- 完全二叉树\n- 每个结点大于或等于它的任意一个孩子\n\n# 存储\n\n可以将二叉堆用数组来存储。\n\n例如如下一个二叉堆：\n\n![Screenshot from 2020-06-06 15-24-34.png](https://i.loli.net/2020/06/06/JbDlczXVh35sEF1.png)\n\n在数组中保存：{62,42,59,32,39,44,13,22,29,14,33,30,17,9}\n\n可以看到相当是以广度优先遍历了这个二叉树，并将遍历的结点按顺序存入数组。可以从中发现一些存储的规律，对于任意一个位置_i_，他的左子结点在_2i+1_处，右子结点在_2i+2_处，父结点在_(i-1)/2_处。例如：39在数组中的下标是4，那么他的左子结点就在（2×4+1）=9处。\n\n# 应用\n\n## 优先级队列\n\n优先级队列的底层就是用堆来实现的。同时一道比较经典的算法题用优先级队列可以轻松实现：top n 问题\n\n## TOP N\n\n给一组数据，求其中最大/小的几个数。\n\n```java\n// 求最小的n个数\npublic static int[] topN(int[] array, int n) {\n    if (n == 0) {\n        return new int[0];\n    }\n    // default big heap, lambda make it small heap\n    Queue<Integer> heap = new PriorityQueue<>(n, ((o1, o2) -> Integer.compare(o2, o1)));\n\n    for (int e : array) {\n        // put the integer in when it smaller than the top of integer\n        if (heap.isEmpty() || heap.size() < n || e < heap.peek()) {\n            heap.offer(e);\n        }\n        if (heap.size() > n) {\n            // delete the top of heap integer\n            heap.poll();\n        }\n    }\n\n    int[] res = new int[heap.size()];\n    int j = 0;\n    for (int e : heap) {\n        res[j++] = e;\n    }\n    return res;\n}\n```\n\n上面用到了小顶堆，for循环中的两个判断，符合条件的放进堆中，第二个判断中，当堆中的元素个数大于要求的个数时，删除堆中的顶部元素（优先级队列的本质还是队列，进出满读FIFO）。\n\n稍作修改，可以让上面的代码输出最大的n个数，显而易见的是，我们只需修改入队列的条件以及优先级队列的堆排序方式：\n\n```java\n// 默认大顶堆\nQueue<Integer> heap = new PriorityQueue<>(n);\nfor(int e: array){\n    // 大于堆顶的放入优先级队列\n    if(heap.isEmpty() || heap.size() < n || e > heap.peak()){\n        heap.offer(e);\n    }\n    // 超过要求的个数，清除堆顶元素\n    if(heap.size() > n){\n        heap.pool();\n    }\n}\n```\n\n\n\n\n\n","slug":"heap","published":1,"updated":"2020-07-19T17:29:13.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgch001kbyih35p1ecqj","content":"<p>这里的堆是数据结构中的堆，不是JVM中的堆。</p>\n<p>关键词：堆，二叉树，优先级队列，排序，topN</p>\n<a id=\"more\"></a>\n\n<h1 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h1><p>堆的结构是完全二叉树，而且是有序的，分大顶堆和小顶堆。    </p>\n<h2 id=\"完全二叉树\"><a href=\"#完全二叉树\" class=\"headerlink\" title=\"完全二叉树\"></a>完全二叉树</h2><ul>\n<li>路径长度是指路径上的边数</li>\n<li>结点深度是指从根结点到该结点的路径的长度</li>\n<li>每一层都是满的或者最后一层不满但最后一层的叶子都是靠左放置</li>\n</ul>\n<h2 id=\"二叉堆\"><a href=\"#二叉堆\" class=\"headerlink\" title=\"二叉堆\"></a>二叉堆</h2><ul>\n<li>完全二叉树</li>\n<li>每个结点大于或等于它的任意一个孩子</li>\n</ul>\n<h1 id=\"存储\"><a href=\"#存储\" class=\"headerlink\" title=\"存储\"></a>存储</h1><p>可以将二叉堆用数组来存储。</p>\n<p>例如如下一个二叉堆：</p>\n<p><img src=\"https://i.loli.net/2020/06/06/JbDlczXVh35sEF1.png\" alt=\"Screenshot from 2020-06-06 15-24-34.png\"></p>\n<p>在数组中保存：{62,42,59,32,39,44,13,22,29,14,33,30,17,9}</p>\n<p>可以看到相当是以广度优先遍历了这个二叉树，并将遍历的结点按顺序存入数组。可以从中发现一些存储的规律，对于任意一个位置_i_，他的左子结点在_2i+1_处，右子结点在_2i+2_处，父结点在_(i-1)/2_处。例如：39在数组中的下标是4，那么他的左子结点就在（2×4+1）=9处。</p>\n<h1 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h1><h2 id=\"优先级队列\"><a href=\"#优先级队列\" class=\"headerlink\" title=\"优先级队列\"></a>优先级队列</h2><p>优先级队列的底层就是用堆来实现的。同时一道比较经典的算法题用优先级队列可以轻松实现：top n 问题</p>\n<h2 id=\"TOP-N\"><a href=\"#TOP-N\" class=\"headerlink\" title=\"TOP N\"></a>TOP N</h2><p>给一组数据，求其中最大/小的几个数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 求最小的n个数</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] topN(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> n) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// default big heap, lambda make it small heap</span></span><br><span class=\"line\">    Queue&lt;Integer&gt; heap = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;(n, ((o1, o2) -&gt; Integer.compare(o2, o1)));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> e : array) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// put the integer in when it smaller than the top of integer</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (heap.isEmpty() || heap.size() &lt; n || e &lt; heap.peek()) &#123;</span><br><span class=\"line\">            heap.offer(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (heap.size() &gt; n) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// delete the top of heap integer</span></span><br><span class=\"line\">            heap.poll();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[heap.size()];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> e : heap) &#123;</span><br><span class=\"line\">        res[j++] = e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面用到了小顶堆，for循环中的两个判断，符合条件的放进堆中，第二个判断中，当堆中的元素个数大于要求的个数时，删除堆中的顶部元素（优先级队列的本质还是队列，进出满读FIFO）。</p>\n<p>稍作修改，可以让上面的代码输出最大的n个数，显而易见的是，我们只需修改入队列的条件以及优先级队列的堆排序方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 默认大顶堆</span></span><br><span class=\"line\">Queue&lt;Integer&gt; heap = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;(n);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> e: array)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 大于堆顶的放入优先级队列</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(heap.isEmpty() || heap.size() &lt; n || e &gt; heap.peak())&#123;</span><br><span class=\"line\">        heap.offer(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 超过要求的个数，清除堆顶元素</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(heap.size() &gt; n)&#123;</span><br><span class=\"line\">        heap.pool();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>这里的堆是数据结构中的堆，不是JVM中的堆。</p>\n<p>关键词：堆，二叉树，优先级队列，排序，topN</p>","more":"<h1 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h1><p>堆的结构是完全二叉树，而且是有序的，分大顶堆和小顶堆。    </p>\n<h2 id=\"完全二叉树\"><a href=\"#完全二叉树\" class=\"headerlink\" title=\"完全二叉树\"></a>完全二叉树</h2><ul>\n<li>路径长度是指路径上的边数</li>\n<li>结点深度是指从根结点到该结点的路径的长度</li>\n<li>每一层都是满的或者最后一层不满但最后一层的叶子都是靠左放置</li>\n</ul>\n<h2 id=\"二叉堆\"><a href=\"#二叉堆\" class=\"headerlink\" title=\"二叉堆\"></a>二叉堆</h2><ul>\n<li>完全二叉树</li>\n<li>每个结点大于或等于它的任意一个孩子</li>\n</ul>\n<h1 id=\"存储\"><a href=\"#存储\" class=\"headerlink\" title=\"存储\"></a>存储</h1><p>可以将二叉堆用数组来存储。</p>\n<p>例如如下一个二叉堆：</p>\n<p><img src=\"https://i.loli.net/2020/06/06/JbDlczXVh35sEF1.png\" alt=\"Screenshot from 2020-06-06 15-24-34.png\"></p>\n<p>在数组中保存：{62,42,59,32,39,44,13,22,29,14,33,30,17,9}</p>\n<p>可以看到相当是以广度优先遍历了这个二叉树，并将遍历的结点按顺序存入数组。可以从中发现一些存储的规律，对于任意一个位置_i_，他的左子结点在_2i+1_处，右子结点在_2i+2_处，父结点在_(i-1)/2_处。例如：39在数组中的下标是4，那么他的左子结点就在（2×4+1）=9处。</p>\n<h1 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h1><h2 id=\"优先级队列\"><a href=\"#优先级队列\" class=\"headerlink\" title=\"优先级队列\"></a>优先级队列</h2><p>优先级队列的底层就是用堆来实现的。同时一道比较经典的算法题用优先级队列可以轻松实现：top n 问题</p>\n<h2 id=\"TOP-N\"><a href=\"#TOP-N\" class=\"headerlink\" title=\"TOP N\"></a>TOP N</h2><p>给一组数据，求其中最大/小的几个数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 求最小的n个数</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] topN(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> n) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// default big heap, lambda make it small heap</span></span><br><span class=\"line\">    Queue&lt;Integer&gt; heap = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;(n, ((o1, o2) -&gt; Integer.compare(o2, o1)));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> e : array) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// put the integer in when it smaller than the top of integer</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (heap.isEmpty() || heap.size() &lt; n || e &lt; heap.peek()) &#123;</span><br><span class=\"line\">            heap.offer(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (heap.size() &gt; n) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// delete the top of heap integer</span></span><br><span class=\"line\">            heap.poll();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[heap.size()];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> e : heap) &#123;</span><br><span class=\"line\">        res[j++] = e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面用到了小顶堆，for循环中的两个判断，符合条件的放进堆中，第二个判断中，当堆中的元素个数大于要求的个数时，删除堆中的顶部元素（优先级队列的本质还是队列，进出满读FIFO）。</p>\n<p>稍作修改，可以让上面的代码输出最大的n个数，显而易见的是，我们只需修改入队列的条件以及优先级队列的堆排序方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 默认大顶堆</span></span><br><span class=\"line\">Queue&lt;Integer&gt; heap = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;(n);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> e: array)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 大于堆顶的放入优先级队列</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(heap.isEmpty() || heap.size() &lt; n || e &gt; heap.peak())&#123;</span><br><span class=\"line\">        heap.offer(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 超过要求的个数，清除堆顶元素</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(heap.size() &gt; n)&#123;</span><br><span class=\"line\">        heap.pool();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"https","date":"2020-03-14T02:43:29.000Z","_content":"\n**Hypertext Transfer Protocol Secure**, an extension of the Hypertext Transfer Protocol. \n\nHow to encrypt communication? Through referred to as **HTTP over TLS**, or **HTTP over SSL**\n\n- Transport Layer Security\n- Secure Sockets Layer\n\n<!-- more -->\n\n# HTTP与HTTPS\n\n\n\n## Difference\n\nHTTPS的URL地址开头是`https://`，默认使用的的端口是`443`，在http与TCP之间加入了SSL或者TSL，它的设计就是为了防止信息被窃取，会对包括header在内的整个信息加密。\n\n---\n\nHTTP的URL地址开头是`http://`，默认使用的端口是`80`，他没有使用加密，直接通过TCP来进行传输，因此传输过程中的敏感信息有被窃听、攻击的风险。\n\n\n\n## Limitation\n\nSSL/TSL没有禁止网络搜索器（website crawler）搜索它的索引，所以在这种情况下，请求和响应的报文的大小是会被知晓的（内容仍然加密无法破解）。\n\n\n\n# URI、URL与URN\n\nurl是uri的子集。\n\n## URI\n\n统一资源标识符。*A string of characters that unambiguously identifies a particular resource*.  它规定了一些特定的语法规则，并且在规则下还可以自有扩展，例如`http://`。\n\n## URN\n\n统一资源名称。*A Uniform Resource Name(URN) is a URI that identifies a resource by name in a particular namespace.* 它能标识一个唯一的名称，但不清楚它的位置。\n\n## URL\n\n统一资源定位符。*A Uniform Resource Locator(URL) is a URI that specifies the means of acting upon or obtaining the representation of a resource.* 就是我们常见的http请求地址。\n\n[reference](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier)","source":"_posts/https.md","raw":"---\ntitle: https\ndate: 2020-03-14 10:43:29\ncategories: Network\ntags: ['http','https']\n---\n\n**Hypertext Transfer Protocol Secure**, an extension of the Hypertext Transfer Protocol. \n\nHow to encrypt communication? Through referred to as **HTTP over TLS**, or **HTTP over SSL**\n\n- Transport Layer Security\n- Secure Sockets Layer\n\n<!-- more -->\n\n# HTTP与HTTPS\n\n\n\n## Difference\n\nHTTPS的URL地址开头是`https://`，默认使用的的端口是`443`，在http与TCP之间加入了SSL或者TSL，它的设计就是为了防止信息被窃取，会对包括header在内的整个信息加密。\n\n---\n\nHTTP的URL地址开头是`http://`，默认使用的端口是`80`，他没有使用加密，直接通过TCP来进行传输，因此传输过程中的敏感信息有被窃听、攻击的风险。\n\n\n\n## Limitation\n\nSSL/TSL没有禁止网络搜索器（website crawler）搜索它的索引，所以在这种情况下，请求和响应的报文的大小是会被知晓的（内容仍然加密无法破解）。\n\n\n\n# URI、URL与URN\n\nurl是uri的子集。\n\n## URI\n\n统一资源标识符。*A string of characters that unambiguously identifies a particular resource*.  它规定了一些特定的语法规则，并且在规则下还可以自有扩展，例如`http://`。\n\n## URN\n\n统一资源名称。*A Uniform Resource Name(URN) is a URI that identifies a resource by name in a particular namespace.* 它能标识一个唯一的名称，但不清楚它的位置。\n\n## URL\n\n统一资源定位符。*A Uniform Resource Locator(URL) is a URI that specifies the means of acting upon or obtaining the representation of a resource.* 就是我们常见的http请求地址。\n\n[reference](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier)","slug":"https","published":1,"updated":"2020-07-19T17:29:13.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgcj001nbyih471x0gt3","content":"<p><strong>Hypertext Transfer Protocol Secure</strong>, an extension of the Hypertext Transfer Protocol. </p>\n<p>How to encrypt communication? Through referred to as <strong>HTTP over TLS</strong>, or <strong>HTTP over SSL</strong></p>\n<ul>\n<li>Transport Layer Security</li>\n<li>Secure Sockets Layer</li>\n</ul>\n<a id=\"more\"></a>\n\n<h1 id=\"HTTP与HTTPS\"><a href=\"#HTTP与HTTPS\" class=\"headerlink\" title=\"HTTP与HTTPS\"></a>HTTP与HTTPS</h1><h2 id=\"Difference\"><a href=\"#Difference\" class=\"headerlink\" title=\"Difference\"></a>Difference</h2><p>HTTPS的URL地址开头是<code>https://</code>，默认使用的的端口是<code>443</code>，在http与TCP之间加入了SSL或者TSL，它的设计就是为了防止信息被窃取，会对包括header在内的整个信息加密。</p>\n<hr>\n<p>HTTP的URL地址开头是<code>http://</code>，默认使用的端口是<code>80</code>，他没有使用加密，直接通过TCP来进行传输，因此传输过程中的敏感信息有被窃听、攻击的风险。</p>\n<h2 id=\"Limitation\"><a href=\"#Limitation\" class=\"headerlink\" title=\"Limitation\"></a>Limitation</h2><p>SSL/TSL没有禁止网络搜索器（website crawler）搜索它的索引，所以在这种情况下，请求和响应的报文的大小是会被知晓的（内容仍然加密无法破解）。</p>\n<h1 id=\"URI、URL与URN\"><a href=\"#URI、URL与URN\" class=\"headerlink\" title=\"URI、URL与URN\"></a>URI、URL与URN</h1><p>url是uri的子集。</p>\n<h2 id=\"URI\"><a href=\"#URI\" class=\"headerlink\" title=\"URI\"></a>URI</h2><p>统一资源标识符。<em>A string of characters that unambiguously identifies a particular resource</em>.  它规定了一些特定的语法规则，并且在规则下还可以自有扩展，例如<code>http://</code>。</p>\n<h2 id=\"URN\"><a href=\"#URN\" class=\"headerlink\" title=\"URN\"></a>URN</h2><p>统一资源名称。<em>A Uniform Resource Name(URN) is a URI that identifies a resource by name in a particular namespace.</em> 它能标识一个唯一的名称，但不清楚它的位置。</p>\n<h2 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h2><p>统一资源定位符。<em>A Uniform Resource Locator(URL) is a URI that specifies the means of acting upon or obtaining the representation of a resource.</em> 就是我们常见的http请求地址。</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Uniform_Resource_Identifier\">reference</a></p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p><strong>Hypertext Transfer Protocol Secure</strong>, an extension of the Hypertext Transfer Protocol. </p>\n<p>How to encrypt communication? Through referred to as <strong>HTTP over TLS</strong>, or <strong>HTTP over SSL</strong></p>\n<ul>\n<li>Transport Layer Security</li>\n<li>Secure Sockets Layer</li>\n</ul>","more":"<h1 id=\"HTTP与HTTPS\"><a href=\"#HTTP与HTTPS\" class=\"headerlink\" title=\"HTTP与HTTPS\"></a>HTTP与HTTPS</h1><h2 id=\"Difference\"><a href=\"#Difference\" class=\"headerlink\" title=\"Difference\"></a>Difference</h2><p>HTTPS的URL地址开头是<code>https://</code>，默认使用的的端口是<code>443</code>，在http与TCP之间加入了SSL或者TSL，它的设计就是为了防止信息被窃取，会对包括header在内的整个信息加密。</p>\n<hr>\n<p>HTTP的URL地址开头是<code>http://</code>，默认使用的端口是<code>80</code>，他没有使用加密，直接通过TCP来进行传输，因此传输过程中的敏感信息有被窃听、攻击的风险。</p>\n<h2 id=\"Limitation\"><a href=\"#Limitation\" class=\"headerlink\" title=\"Limitation\"></a>Limitation</h2><p>SSL/TSL没有禁止网络搜索器（website crawler）搜索它的索引，所以在这种情况下，请求和响应的报文的大小是会被知晓的（内容仍然加密无法破解）。</p>\n<h1 id=\"URI、URL与URN\"><a href=\"#URI、URL与URN\" class=\"headerlink\" title=\"URI、URL与URN\"></a>URI、URL与URN</h1><p>url是uri的子集。</p>\n<h2 id=\"URI\"><a href=\"#URI\" class=\"headerlink\" title=\"URI\"></a>URI</h2><p>统一资源标识符。<em>A string of characters that unambiguously identifies a particular resource</em>.  它规定了一些特定的语法规则，并且在规则下还可以自有扩展，例如<code>http://</code>。</p>\n<h2 id=\"URN\"><a href=\"#URN\" class=\"headerlink\" title=\"URN\"></a>URN</h2><p>统一资源名称。<em>A Uniform Resource Name(URN) is a URI that identifies a resource by name in a particular namespace.</em> 它能标识一个唯一的名称，但不清楚它的位置。</p>\n<h2 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h2><p>统一资源定位符。<em>A Uniform Resource Locator(URL) is a URI that specifies the means of acting upon or obtaining the representation of a resource.</em> 就是我们常见的http请求地址。</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Uniform_Resource_Identifier\">reference</a></p>"},{"title":"javaFX","date":"2019-11-18T14:22:16.000Z","_content":"\nJavaFX，据说生不逢时，，但是我觉得它很厉害啊。。写个工具自己用也不错。。好像很多工程类的应用在用它。在油管上发现了关于他的宝贝。。。之前在b站上看到过一个印度尼西亚的小哥的视频，后来就找不到了，今天又发现了它。地址文章末尾给出。 p.s. 好像是JetBrains出品的，，必属精品。\n\n<!-- more -->\n\n# 引\n\n使用的IDE是IntelliJ，创建后，他的目录结构是这样的：\n\n```markdown\n- Controller\n- Main\n- sample.fxml\n```\n\n除此之外，会使用插件`Scene Builder`和它的扩展`JFOENIX`.\n\nJavaFX的jar包在java8的时候是融合的。之后就独立出来了。比如Java11, Java12。\n\nemmmmmm, 先定个小目标，用他写个计算器。（之前写过一个记事本，，找不到了。。so sad ==）\n\n\n\n\n\n\n\n","source":"_posts/javaFX.md","raw":"---\ntitle: javaFX\ndate: 2019-11-18 22:22:16\ncategories: Java\ntags:\n- JavaFX\n---\n\nJavaFX，据说生不逢时，，但是我觉得它很厉害啊。。写个工具自己用也不错。。好像很多工程类的应用在用它。在油管上发现了关于他的宝贝。。。之前在b站上看到过一个印度尼西亚的小哥的视频，后来就找不到了，今天又发现了它。地址文章末尾给出。 p.s. 好像是JetBrains出品的，，必属精品。\n\n<!-- more -->\n\n# 引\n\n使用的IDE是IntelliJ，创建后，他的目录结构是这样的：\n\n```markdown\n- Controller\n- Main\n- sample.fxml\n```\n\n除此之外，会使用插件`Scene Builder`和它的扩展`JFOENIX`.\n\nJavaFX的jar包在java8的时候是融合的。之后就独立出来了。比如Java11, Java12。\n\nemmmmmm, 先定个小目标，用他写个计算器。（之前写过一个记事本，，找不到了。。so sad ==）\n\n\n\n\n\n\n\n","slug":"javaFX","published":1,"updated":"2020-07-19T17:29:13.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgcm001qbyih18fb1yir","content":"<p>JavaFX，据说生不逢时，，但是我觉得它很厉害啊。。写个工具自己用也不错。。好像很多工程类的应用在用它。在油管上发现了关于他的宝贝。。。之前在b站上看到过一个印度尼西亚的小哥的视频，后来就找不到了，今天又发现了它。地址文章末尾给出。 p.s. 好像是JetBrains出品的，，必属精品。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"引\"><a href=\"#引\" class=\"headerlink\" title=\"引\"></a>引</h1><p>使用的IDE是IntelliJ，创建后，他的目录结构是这样的：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> Controller</span><br><span class=\"line\"><span class=\"bullet\">-</span> Main</span><br><span class=\"line\"><span class=\"bullet\">-</span> sample.fxml</span><br></pre></td></tr></table></figure>\n\n<p>除此之外，会使用插件<code>Scene Builder</code>和它的扩展<code>JFOENIX</code>.</p>\n<p>JavaFX的jar包在java8的时候是融合的。之后就独立出来了。比如Java11, Java12。</p>\n<p>emmmmmm, 先定个小目标，用他写个计算器。（之前写过一个记事本，，找不到了。。so sad ==）</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>JavaFX，据说生不逢时，，但是我觉得它很厉害啊。。写个工具自己用也不错。。好像很多工程类的应用在用它。在油管上发现了关于他的宝贝。。。之前在b站上看到过一个印度尼西亚的小哥的视频，后来就找不到了，今天又发现了它。地址文章末尾给出。 p.s. 好像是JetBrains出品的，，必属精品。</p>","more":"<h1 id=\"引\"><a href=\"#引\" class=\"headerlink\" title=\"引\"></a>引</h1><p>使用的IDE是IntelliJ，创建后，他的目录结构是这样的：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> Controller</span><br><span class=\"line\"><span class=\"bullet\">-</span> Main</span><br><span class=\"line\"><span class=\"bullet\">-</span> sample.fxml</span><br></pre></td></tr></table></figure>\n\n<p>除此之外，会使用插件<code>Scene Builder</code>和它的扩展<code>JFOENIX</code>.</p>\n<p>JavaFX的jar包在java8的时候是融合的。之后就独立出来了。比如Java11, Java12。</p>\n<p>emmmmmm, 先定个小目标，用他写个计算器。（之前写过一个记事本，，找不到了。。so sad ==）</p>"},{"title":"jvm","date":"2020-05-24T09:39:25.000Z","_content":"\nassociate with juc\n\n<!--more-->\n\n# 系统图\n\n![Screenshot from 2020-06-04 20-11-48.png](https://i.loli.net/2020/06/04/UQfq2lrGu9mLc4C.png)\n\n- 灰色代表线程私有，占用的内存非常少，几乎不存在垃圾回收\n- 亮色代表存在垃圾回收\n\n# 类加载器\n\n经过javac编译后，形成的xxx.class文件存在电脑硬盘上，通过类加载器装进JVM并初始化为xxx.Class文件（装载进虚拟机）。只负责加载class文件，将之装载后成为Class文件，放进方法区。\n\n> Car.class -> Class Loader -> Car Class -> car1/car2/car3\n\nCar Class是后面car1、car2、car3的模板，后面的三个car也是实例化的产物。\n\n![Screenshot from 2020-06-04 20-33-54.png](https://i.loli.net/2020/06/04/EYRbMN1fgIOuHBk.png)\n\n## 种类\n\n### 启动类加载器（Bootstrap）\n\n由C++编写，默认加载一些编写程序比用的东西，比如Object, ArrayList, String等。\n\n### 扩展类加载器（Extension）\n\nJava编写，除了启动类加载器加载核心的东西外，还需要Extension加载入javax等java扩展类。\n\n### 应用程序类加载器（AppClassLoader）\n\n我们编写程序时定义的类所用的加载器\n\n### 用户自定义加载器\n\n定制化开发，不走默认的类加载顺序时，可以继承ClassLoader（抽象）。\n\n## 双亲委派\n\n比如如果需要使用A.java类，需要先去顶部Bootstrap寻找，找不到的话去Extension找，还没有的话去Application中找，还没有的话抛异常。\n\n**Bootstrap** --> **Extension** --> **Application**\n\n```java\npublic class String{\n    public static void main(String[] args){\n        System.out.println(\"hello world!\");\n    }\n}\n```\n\n> 在类java.lang.String中找不到main方法。因为先从Bootstrap中寻找。\n\n## 沙箱安全机制\n\n**note**: 保证个人编写的代码不污染出厂的jdk代码，并且不同类中使用的Object都是相同的。\n\n## 本地方法接口（Native Interface）\n\n融合不同的编程语言为Java所用（即C/C++），在内存中专门开辟了一块区域处理标记为native的代码。目前该方法使用的越来越少了，除非是与硬件相关的应用，如通过java驱动打印机，企业级应用少见。\n\n异构领域间通信发达，Socket通信或webService。\n\n### Native\n\n只是一个关键字。只有声明，没有实现，标记需要调用底层C语言函数库或系统。\n\n### 本地方法栈\n\n装native方法的栈。在内存中专门开辟了一块区域处理标记为native的代码，登记native方法，在Execution Engine执行时加载本地方法库。\n\n# PC寄存器\n\n实际是一个指针，线程私有，记录了方法之间的调用和执行情况，类似排班值日表。用来存储指向下一条指令的地址，即将要执行的指令代码。\n\n是当前线程所执行的字节码的行号指示器。\n\n# 栈\n\n- 不存在垃圾回收问题\n- ==线程私有==（想想加锁，不就在方法上/中加的么）\n\n也叫栈内存，**主管Java程序的运行**，在线程创建时创建，线程结束时结束（释放栈内存）。基本类型的变量、对象的引用变量、实例方法都在栈空间中。\n\n## 存储\n\n在java中的方法装载在虚拟机的栈中叫栈帧。\n\n- Local Variables: 输入参数、输出参数以及方法内的变量\n\n  ```java\n  // 入参为 x, y， 输出为result，方法内变量为result，均在栈中。\n  public int add(int x, int y){\n      int result = 0;\n      result = x + y;\n      return result;\n  }\n  ```\n\n- Operand Stack: 记录出栈、入栈的操作\n\n- Frame Data: 包括类文件、方法等等\n\n## 运行\n\n栈中的数据都是以栈帧（Stack Frame）的格式存在，栈帧是一个内存区块，是一个数据集，一个有关方法（Method）和运行期数据的数据集，当一个方法A被调用时就产生了一个栈帧，并被压入到栈中，执行完毕后弹出。\n\n```java\n// 方法深度调用，把栈撑爆了。 Exception: StackOverflowError 属于错误\npublic static void m1(){\n    m1();\n}\n```\n\n\n\n每个方法执行的同时都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等信息，每一个方法从调度直至执行完毕的过程，就对应着一个栈帧在虚拟机入栈到出栈的过程。栈的大小和具体JVM的实现有关，通常在256K～756K之间。\n\n栈管运行，堆管存储。\n\n# 方法区\n\nclass文件被ClassLoader装载进JVM称为Class文件，其实是装进了方法区。方法区是规范，在不同的虚拟机里的实现不一样，最典型的是`永久代(PermGen space)`和`元空间(Metaspace)`。\n\n- 所有==线程共享==\n- 存在垃圾回收\n\n存储每个类的**结构信息**（模板）\n\n```java\npublic class Car{\n    int price = 1233435;\n    public park(){\n        System.out.println(\"stop ...\");\n    }\n}\n```\n\n例如运行时常量池、字段和方法数据、构造函数和普通方法的字节码内容。\n\n元空间与永久代最大的区别在于：永久代使用的是jvm的堆内存，但是java8以后的元空间并不在虚拟机中而是**本机物理内存**。因此，元空间的大小仅受本地内存限制，类的元数据放入native memory，字符串池和类的静态变量放入java堆中，这样可以加载多少类的元数据就不再由MaxPermSize控制，而由系统的实际可用空间来控制。\n\n实例变量存在堆内存中，与方法区无关。i.e.\n\n```java\npublic class Demo{\n    public void hello(){}\n    public static void main(String[] args){\n        Demo demo = new Demo();\n        demo.hello();\n    }\n}\n```\n\n每次new之后都会产生一个hello方法以及变量demo，此时这个实例变量就存在堆（当然）。\n\n# 方法区、栈、堆\n\n```java\nPerson person1 = new Person();\nPerson person2 = new Person();\n```\n\n左边的引用变量放在栈中，右边new出来的实例存放在堆中。堆中的实例指向方法区（保证两个不同的实例对象有同样的行为）。\n\n要保证person1与person2来自同一个类实例化且保持各自的行为，依靠方法区的“模板”。\n\nhotsopt是使用指针的方式访问对象：java堆中会存放类元数据的地址，类元数据即Class（类的结构信息）。栈中存放的则是对象的地址。即 栈-->堆-->方法区\n\n# 堆\n\n（Java7之前）\t一个Jvm实例只存在一个堆内存，堆内存的大小可以调节。类加载器读取了类文件后需要把类、方法、常变量放到堆内存中，保存所有引用类型的真实信息，以便执行器执行。\n\n(Java8)\t永久区换成了元空间。\n\n物理上为新生区+养老区。\n\n## 堆内存\n\n逻辑上分为三部分：新生+养老+永久\n\n新生区： Youg Generation Space (Eden Sapce + Survivor 0 space + Survivor 1 space)\n\n养老区：Tenure Generation Space\n\n永久存储区：Permanent Space\n\n- Eden: 0space: 1space  = 8 : 1 : 1\n- Young : Old = 1 : 2\n\n## 静态\n\n实例化对象的整个生命周期都在新生区进行，最开始是在Eden Sapce,当满了之后会进行GC（垃圾回收），这时会清除大部分的垃圾，剩余的对象放入Survivior 0 space，当Eden Space和Survivor 0 space也满时，进行GC，幸存者放入Survivor 1 space，重复上一步，幸存者存入Tenure Genreration Space，重复上一步，也满时进行Full GC，重复上一步，再次满时，无处存储实例对象，会产生OutOfMemoryError(OOM)。\n\n## 动态\n\nSurvivor 0 space: from区\n\nSurrivor 1 space: to区\n\n他们的位置不固定，每次GC之后位置会交换，空的为to区。\n\n1. Eden, SurvivorFrom copy to SurviviorTo\n2. clean up Eden, SurvivorFrom\n3. Swap SurvivorTo and SurvivorFrom\n\n## 永久代\n\n是一个常驻内存区域，用于存放jdk自身所携带的Class、Interface的元数据，也就是说他存储的是运行环境必须的类信息，被装载进此区域的数据是不会被垃圾回收器回收的，关闭JVM才会释放此区域所占的内存。\n\n## 调优\n\n```java\npublic static void main(String[] args){\n    // Returns the maximum amount of memory that the Java virtual machine will attempt to use.\n    long l = Runtime.getRuntime().maxMemory();\n\n    // Returns the total amount of memory in the Java virtual machine.\n    long l1 = Runtime.getRuntime().totalMemory();\n\n    // 1/4\n    System.out.println(\"(-xmx) MAX_MEMORY: \" + l + \"bytes, \" + (l / (double) 1024 / 1024 + \"MB\"));\n    \n    // 1/64\n    System.out.println(\"(-xms) TOTAL_MEMORY: \" + l1 + \"bytes, \" + (l1 / (double) 1024 / 1024 + \"MB\"));\n}\n```\n\n**note:** 生产中会将最高值与最低值设置的一样大，避免应用程序争抢内存，产生峰谷。\n\n> -XX:MaxTenuringThreshold 设置对象在新生代中存活的次数（java8默认且最高15）\n\n# GC\n\n- minor GC\n- major/full GC\n\nmajor GC的速度比minor GC慢得多（考虑下young区和old区的大小比）。\n\n## 垃圾回收算法\n\n分代收集，根据各个代来使用\n\n### 引用计数法\n\n每次引用对象时会维护计数器，每次引用的时候会加1,如果是0的话会被回收，但是大量的计数器也会有消耗。最大的弊端还是循环引用。JVM一般不会用这种。\n\n### 复制算法（Copying）\n\nMinor GC使用的就是Copying。不会产生内存碎片，但是会耗费空间。\n\n因为存活率都很低，复制也没啥。\n\n### 标记清除法（Mark-Sweep）\n\nMajor GC使用的是Mark-Sweep，或者与下面的Mark-Compact混合实现。分为标记和清除两个阶段，先标记要回收的，然或再统一回收这些对象。对比上面的，没有复制-粘贴-清除，而是标记后清除，但是造成了内存碎片话（内存不连续），也没有Copying速度快（找出标记的需要进行扫描）。JVM为了空闲的内存还需要维持一个内存的空闲列表，又是一种开销。\n\n### 标记压缩（Mark-Compact）\n\nMark-Sweep-Compact，标记清除压缩算法，比上面的多了一步整理的过程（不会产生内存碎片），显然时间上消耗更多了（慢工出细活），多了移动对象的时间。\n\n也可以派生出另一种：多次GC后才进行压缩，减少移动对象的时间。\n\n# JMM\n\nJava的内存模型（Java Memory  Model)，本身是一种抽象的概念，并不真实存在，他描述的是一组规范，通过这组规范定义了程序中各个变量（**包括实例字段、静态字段以及构成数组对象的元素**）的访问方式。\n\n在操作系统中我们有学习过，线程是资源调度的最小单位，进程是资源最小的分配单位，但是线程还是拥有部分必要的资源，其中，`工作内存`是每个线程的私有数据区域。java内存模型中规定所有变量都存储在主内存，它是共享的内存区域，所有线程都可以访问，但是线程对变量的操作（如读、取、赋值等）必须在工作内存中进行，首先要将变量从主内存拷贝到线程自己的工作内存空间，然后对变量进行操作，操作完成后再将变量写回主内存，换句话说，不能直接操作主内存中的变量，各个线程中的工作\n\n内存存储着主内存中的变量副本拷贝。因此，不同的线程间无法访问对方的工作内存，线程间的通信（传值）必须通过主内存来完成。\n\n## violatile\n\njava虚拟机提供的轻量级的同步机制，乞丐版syncronized。\n\n- 保证可见性\n- 不保证原子性\n- 禁止指令重排\n\n# Q&A:\n\n## 请谈谈你对JVM的理解？java8虚拟机有哪些更新？\n\n## 什么是OOM？是么是StackOverFlowError？有哪些方法分析？\n\n## JVM的常用参数调优你知道哪些？\n\n## 谈谈JVM中，对类加载器你的认识？\n\n","source":"_posts/jvm.md","raw":"---\ntitle: jvm\ndate: 2020-05-24 17:39:25\ncategories: JVM\ntags: jvm\n---\n\nassociate with juc\n\n<!--more-->\n\n# 系统图\n\n![Screenshot from 2020-06-04 20-11-48.png](https://i.loli.net/2020/06/04/UQfq2lrGu9mLc4C.png)\n\n- 灰色代表线程私有，占用的内存非常少，几乎不存在垃圾回收\n- 亮色代表存在垃圾回收\n\n# 类加载器\n\n经过javac编译后，形成的xxx.class文件存在电脑硬盘上，通过类加载器装进JVM并初始化为xxx.Class文件（装载进虚拟机）。只负责加载class文件，将之装载后成为Class文件，放进方法区。\n\n> Car.class -> Class Loader -> Car Class -> car1/car2/car3\n\nCar Class是后面car1、car2、car3的模板，后面的三个car也是实例化的产物。\n\n![Screenshot from 2020-06-04 20-33-54.png](https://i.loli.net/2020/06/04/EYRbMN1fgIOuHBk.png)\n\n## 种类\n\n### 启动类加载器（Bootstrap）\n\n由C++编写，默认加载一些编写程序比用的东西，比如Object, ArrayList, String等。\n\n### 扩展类加载器（Extension）\n\nJava编写，除了启动类加载器加载核心的东西外，还需要Extension加载入javax等java扩展类。\n\n### 应用程序类加载器（AppClassLoader）\n\n我们编写程序时定义的类所用的加载器\n\n### 用户自定义加载器\n\n定制化开发，不走默认的类加载顺序时，可以继承ClassLoader（抽象）。\n\n## 双亲委派\n\n比如如果需要使用A.java类，需要先去顶部Bootstrap寻找，找不到的话去Extension找，还没有的话去Application中找，还没有的话抛异常。\n\n**Bootstrap** --> **Extension** --> **Application**\n\n```java\npublic class String{\n    public static void main(String[] args){\n        System.out.println(\"hello world!\");\n    }\n}\n```\n\n> 在类java.lang.String中找不到main方法。因为先从Bootstrap中寻找。\n\n## 沙箱安全机制\n\n**note**: 保证个人编写的代码不污染出厂的jdk代码，并且不同类中使用的Object都是相同的。\n\n## 本地方法接口（Native Interface）\n\n融合不同的编程语言为Java所用（即C/C++），在内存中专门开辟了一块区域处理标记为native的代码。目前该方法使用的越来越少了，除非是与硬件相关的应用，如通过java驱动打印机，企业级应用少见。\n\n异构领域间通信发达，Socket通信或webService。\n\n### Native\n\n只是一个关键字。只有声明，没有实现，标记需要调用底层C语言函数库或系统。\n\n### 本地方法栈\n\n装native方法的栈。在内存中专门开辟了一块区域处理标记为native的代码，登记native方法，在Execution Engine执行时加载本地方法库。\n\n# PC寄存器\n\n实际是一个指针，线程私有，记录了方法之间的调用和执行情况，类似排班值日表。用来存储指向下一条指令的地址，即将要执行的指令代码。\n\n是当前线程所执行的字节码的行号指示器。\n\n# 栈\n\n- 不存在垃圾回收问题\n- ==线程私有==（想想加锁，不就在方法上/中加的么）\n\n也叫栈内存，**主管Java程序的运行**，在线程创建时创建，线程结束时结束（释放栈内存）。基本类型的变量、对象的引用变量、实例方法都在栈空间中。\n\n## 存储\n\n在java中的方法装载在虚拟机的栈中叫栈帧。\n\n- Local Variables: 输入参数、输出参数以及方法内的变量\n\n  ```java\n  // 入参为 x, y， 输出为result，方法内变量为result，均在栈中。\n  public int add(int x, int y){\n      int result = 0;\n      result = x + y;\n      return result;\n  }\n  ```\n\n- Operand Stack: 记录出栈、入栈的操作\n\n- Frame Data: 包括类文件、方法等等\n\n## 运行\n\n栈中的数据都是以栈帧（Stack Frame）的格式存在，栈帧是一个内存区块，是一个数据集，一个有关方法（Method）和运行期数据的数据集，当一个方法A被调用时就产生了一个栈帧，并被压入到栈中，执行完毕后弹出。\n\n```java\n// 方法深度调用，把栈撑爆了。 Exception: StackOverflowError 属于错误\npublic static void m1(){\n    m1();\n}\n```\n\n\n\n每个方法执行的同时都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等信息，每一个方法从调度直至执行完毕的过程，就对应着一个栈帧在虚拟机入栈到出栈的过程。栈的大小和具体JVM的实现有关，通常在256K～756K之间。\n\n栈管运行，堆管存储。\n\n# 方法区\n\nclass文件被ClassLoader装载进JVM称为Class文件，其实是装进了方法区。方法区是规范，在不同的虚拟机里的实现不一样，最典型的是`永久代(PermGen space)`和`元空间(Metaspace)`。\n\n- 所有==线程共享==\n- 存在垃圾回收\n\n存储每个类的**结构信息**（模板）\n\n```java\npublic class Car{\n    int price = 1233435;\n    public park(){\n        System.out.println(\"stop ...\");\n    }\n}\n```\n\n例如运行时常量池、字段和方法数据、构造函数和普通方法的字节码内容。\n\n元空间与永久代最大的区别在于：永久代使用的是jvm的堆内存，但是java8以后的元空间并不在虚拟机中而是**本机物理内存**。因此，元空间的大小仅受本地内存限制，类的元数据放入native memory，字符串池和类的静态变量放入java堆中，这样可以加载多少类的元数据就不再由MaxPermSize控制，而由系统的实际可用空间来控制。\n\n实例变量存在堆内存中，与方法区无关。i.e.\n\n```java\npublic class Demo{\n    public void hello(){}\n    public static void main(String[] args){\n        Demo demo = new Demo();\n        demo.hello();\n    }\n}\n```\n\n每次new之后都会产生一个hello方法以及变量demo，此时这个实例变量就存在堆（当然）。\n\n# 方法区、栈、堆\n\n```java\nPerson person1 = new Person();\nPerson person2 = new Person();\n```\n\n左边的引用变量放在栈中，右边new出来的实例存放在堆中。堆中的实例指向方法区（保证两个不同的实例对象有同样的行为）。\n\n要保证person1与person2来自同一个类实例化且保持各自的行为，依靠方法区的“模板”。\n\nhotsopt是使用指针的方式访问对象：java堆中会存放类元数据的地址，类元数据即Class（类的结构信息）。栈中存放的则是对象的地址。即 栈-->堆-->方法区\n\n# 堆\n\n（Java7之前）\t一个Jvm实例只存在一个堆内存，堆内存的大小可以调节。类加载器读取了类文件后需要把类、方法、常变量放到堆内存中，保存所有引用类型的真实信息，以便执行器执行。\n\n(Java8)\t永久区换成了元空间。\n\n物理上为新生区+养老区。\n\n## 堆内存\n\n逻辑上分为三部分：新生+养老+永久\n\n新生区： Youg Generation Space (Eden Sapce + Survivor 0 space + Survivor 1 space)\n\n养老区：Tenure Generation Space\n\n永久存储区：Permanent Space\n\n- Eden: 0space: 1space  = 8 : 1 : 1\n- Young : Old = 1 : 2\n\n## 静态\n\n实例化对象的整个生命周期都在新生区进行，最开始是在Eden Sapce,当满了之后会进行GC（垃圾回收），这时会清除大部分的垃圾，剩余的对象放入Survivior 0 space，当Eden Space和Survivor 0 space也满时，进行GC，幸存者放入Survivor 1 space，重复上一步，幸存者存入Tenure Genreration Space，重复上一步，也满时进行Full GC，重复上一步，再次满时，无处存储实例对象，会产生OutOfMemoryError(OOM)。\n\n## 动态\n\nSurvivor 0 space: from区\n\nSurrivor 1 space: to区\n\n他们的位置不固定，每次GC之后位置会交换，空的为to区。\n\n1. Eden, SurvivorFrom copy to SurviviorTo\n2. clean up Eden, SurvivorFrom\n3. Swap SurvivorTo and SurvivorFrom\n\n## 永久代\n\n是一个常驻内存区域，用于存放jdk自身所携带的Class、Interface的元数据，也就是说他存储的是运行环境必须的类信息，被装载进此区域的数据是不会被垃圾回收器回收的，关闭JVM才会释放此区域所占的内存。\n\n## 调优\n\n```java\npublic static void main(String[] args){\n    // Returns the maximum amount of memory that the Java virtual machine will attempt to use.\n    long l = Runtime.getRuntime().maxMemory();\n\n    // Returns the total amount of memory in the Java virtual machine.\n    long l1 = Runtime.getRuntime().totalMemory();\n\n    // 1/4\n    System.out.println(\"(-xmx) MAX_MEMORY: \" + l + \"bytes, \" + (l / (double) 1024 / 1024 + \"MB\"));\n    \n    // 1/64\n    System.out.println(\"(-xms) TOTAL_MEMORY: \" + l1 + \"bytes, \" + (l1 / (double) 1024 / 1024 + \"MB\"));\n}\n```\n\n**note:** 生产中会将最高值与最低值设置的一样大，避免应用程序争抢内存，产生峰谷。\n\n> -XX:MaxTenuringThreshold 设置对象在新生代中存活的次数（java8默认且最高15）\n\n# GC\n\n- minor GC\n- major/full GC\n\nmajor GC的速度比minor GC慢得多（考虑下young区和old区的大小比）。\n\n## 垃圾回收算法\n\n分代收集，根据各个代来使用\n\n### 引用计数法\n\n每次引用对象时会维护计数器，每次引用的时候会加1,如果是0的话会被回收，但是大量的计数器也会有消耗。最大的弊端还是循环引用。JVM一般不会用这种。\n\n### 复制算法（Copying）\n\nMinor GC使用的就是Copying。不会产生内存碎片，但是会耗费空间。\n\n因为存活率都很低，复制也没啥。\n\n### 标记清除法（Mark-Sweep）\n\nMajor GC使用的是Mark-Sweep，或者与下面的Mark-Compact混合实现。分为标记和清除两个阶段，先标记要回收的，然或再统一回收这些对象。对比上面的，没有复制-粘贴-清除，而是标记后清除，但是造成了内存碎片话（内存不连续），也没有Copying速度快（找出标记的需要进行扫描）。JVM为了空闲的内存还需要维持一个内存的空闲列表，又是一种开销。\n\n### 标记压缩（Mark-Compact）\n\nMark-Sweep-Compact，标记清除压缩算法，比上面的多了一步整理的过程（不会产生内存碎片），显然时间上消耗更多了（慢工出细活），多了移动对象的时间。\n\n也可以派生出另一种：多次GC后才进行压缩，减少移动对象的时间。\n\n# JMM\n\nJava的内存模型（Java Memory  Model)，本身是一种抽象的概念，并不真实存在，他描述的是一组规范，通过这组规范定义了程序中各个变量（**包括实例字段、静态字段以及构成数组对象的元素**）的访问方式。\n\n在操作系统中我们有学习过，线程是资源调度的最小单位，进程是资源最小的分配单位，但是线程还是拥有部分必要的资源，其中，`工作内存`是每个线程的私有数据区域。java内存模型中规定所有变量都存储在主内存，它是共享的内存区域，所有线程都可以访问，但是线程对变量的操作（如读、取、赋值等）必须在工作内存中进行，首先要将变量从主内存拷贝到线程自己的工作内存空间，然后对变量进行操作，操作完成后再将变量写回主内存，换句话说，不能直接操作主内存中的变量，各个线程中的工作\n\n内存存储着主内存中的变量副本拷贝。因此，不同的线程间无法访问对方的工作内存，线程间的通信（传值）必须通过主内存来完成。\n\n## violatile\n\njava虚拟机提供的轻量级的同步机制，乞丐版syncronized。\n\n- 保证可见性\n- 不保证原子性\n- 禁止指令重排\n\n# Q&A:\n\n## 请谈谈你对JVM的理解？java8虚拟机有哪些更新？\n\n## 什么是OOM？是么是StackOverFlowError？有哪些方法分析？\n\n## JVM的常用参数调优你知道哪些？\n\n## 谈谈JVM中，对类加载器你的认识？\n\n","slug":"jvm","published":1,"updated":"2020-08-06T11:35:52.358Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgco001sbyih66h9ehsh","content":"<p>associate with juc</p>\n<a id=\"more\"></a>\n\n<h1 id=\"系统图\"><a href=\"#系统图\" class=\"headerlink\" title=\"系统图\"></a>系统图</h1><p><img src=\"https://i.loli.net/2020/06/04/UQfq2lrGu9mLc4C.png\" alt=\"Screenshot from 2020-06-04 20-11-48.png\"></p>\n<ul>\n<li>灰色代表线程私有，占用的内存非常少，几乎不存在垃圾回收</li>\n<li>亮色代表存在垃圾回收</li>\n</ul>\n<h1 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h1><p>经过javac编译后，形成的xxx.class文件存在电脑硬盘上，通过类加载器装进JVM并初始化为xxx.Class文件（装载进虚拟机）。只负责加载class文件，将之装载后成为Class文件，放进方法区。</p>\n<blockquote>\n<p>Car.class -&gt; Class Loader -&gt; Car Class -&gt; car1/car2/car3</p>\n</blockquote>\n<p>Car Class是后面car1、car2、car3的模板，后面的三个car也是实例化的产物。</p>\n<p><img src=\"https://i.loli.net/2020/06/04/EYRbMN1fgIOuHBk.png\" alt=\"Screenshot from 2020-06-04 20-33-54.png\"></p>\n<h2 id=\"种类\"><a href=\"#种类\" class=\"headerlink\" title=\"种类\"></a>种类</h2><h3 id=\"启动类加载器（Bootstrap）\"><a href=\"#启动类加载器（Bootstrap）\" class=\"headerlink\" title=\"启动类加载器（Bootstrap）\"></a>启动类加载器（Bootstrap）</h3><p>由C++编写，默认加载一些编写程序比用的东西，比如Object, ArrayList, String等。</p>\n<h3 id=\"扩展类加载器（Extension）\"><a href=\"#扩展类加载器（Extension）\" class=\"headerlink\" title=\"扩展类加载器（Extension）\"></a>扩展类加载器（Extension）</h3><p>Java编写，除了启动类加载器加载核心的东西外，还需要Extension加载入javax等java扩展类。</p>\n<h3 id=\"应用程序类加载器（AppClassLoader）\"><a href=\"#应用程序类加载器（AppClassLoader）\" class=\"headerlink\" title=\"应用程序类加载器（AppClassLoader）\"></a>应用程序类加载器（AppClassLoader）</h3><p>我们编写程序时定义的类所用的加载器</p>\n<h3 id=\"用户自定义加载器\"><a href=\"#用户自定义加载器\" class=\"headerlink\" title=\"用户自定义加载器\"></a>用户自定义加载器</h3><p>定制化开发，不走默认的类加载顺序时，可以继承ClassLoader（抽象）。</p>\n<h2 id=\"双亲委派\"><a href=\"#双亲委派\" class=\"headerlink\" title=\"双亲委派\"></a>双亲委派</h2><p>比如如果需要使用A.java类，需要先去顶部Bootstrap寻找，找不到的话去Extension找，还没有的话去Application中找，还没有的话抛异常。</p>\n<p><strong>Bootstrap</strong> –&gt; <strong>Extension</strong> –&gt; <strong>Application</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">String</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在类java.lang.String中找不到main方法。因为先从Bootstrap中寻找。</p>\n</blockquote>\n<h2 id=\"沙箱安全机制\"><a href=\"#沙箱安全机制\" class=\"headerlink\" title=\"沙箱安全机制\"></a>沙箱安全机制</h2><p><strong>note</strong>: 保证个人编写的代码不污染出厂的jdk代码，并且不同类中使用的Object都是相同的。</p>\n<h2 id=\"本地方法接口（Native-Interface）\"><a href=\"#本地方法接口（Native-Interface）\" class=\"headerlink\" title=\"本地方法接口（Native Interface）\"></a>本地方法接口（Native Interface）</h2><p>融合不同的编程语言为Java所用（即C/C++），在内存中专门开辟了一块区域处理标记为native的代码。目前该方法使用的越来越少了，除非是与硬件相关的应用，如通过java驱动打印机，企业级应用少见。</p>\n<p>异构领域间通信发达，Socket通信或webService。</p>\n<h3 id=\"Native\"><a href=\"#Native\" class=\"headerlink\" title=\"Native\"></a>Native</h3><p>只是一个关键字。只有声明，没有实现，标记需要调用底层C语言函数库或系统。</p>\n<h3 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h3><p>装native方法的栈。在内存中专门开辟了一块区域处理标记为native的代码，登记native方法，在Execution Engine执行时加载本地方法库。</p>\n<h1 id=\"PC寄存器\"><a href=\"#PC寄存器\" class=\"headerlink\" title=\"PC寄存器\"></a>PC寄存器</h1><p>实际是一个指针，线程私有，记录了方法之间的调用和执行情况，类似排班值日表。用来存储指向下一条指令的地址，即将要执行的指令代码。</p>\n<p>是当前线程所执行的字节码的行号指示器。</p>\n<h1 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h1><ul>\n<li>不存在垃圾回收问题</li>\n<li>==线程私有==（想想加锁，不就在方法上/中加的么）</li>\n</ul>\n<p>也叫栈内存，<strong>主管Java程序的运行</strong>，在线程创建时创建，线程结束时结束（释放栈内存）。基本类型的变量、对象的引用变量、实例方法都在栈空间中。</p>\n<h2 id=\"存储\"><a href=\"#存储\" class=\"headerlink\" title=\"存储\"></a>存储</h2><p>在java中的方法装载在虚拟机的栈中叫栈帧。</p>\n<ul>\n<li><p>Local Variables: 输入参数、输出参数以及方法内的变量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 入参为 x, y， 输出为result，方法内变量为result，均在栈中。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    result = x + y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Operand Stack: 记录出栈、入栈的操作</p>\n</li>\n<li><p>Frame Data: 包括类文件、方法等等</p>\n</li>\n</ul>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>栈中的数据都是以栈帧（Stack Frame）的格式存在，栈帧是一个内存区块，是一个数据集，一个有关方法（Method）和运行期数据的数据集，当一个方法A被调用时就产生了一个栈帧，并被压入到栈中，执行完毕后弹出。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法深度调用，把栈撑爆了。 Exception: StackOverflowError 属于错误</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    m1();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>每个方法执行的同时都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等信息，每一个方法从调度直至执行完毕的过程，就对应着一个栈帧在虚拟机入栈到出栈的过程。栈的大小和具体JVM的实现有关，通常在256K～756K之间。</p>\n<p>栈管运行，堆管存储。</p>\n<h1 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h1><p>class文件被ClassLoader装载进JVM称为Class文件，其实是装进了方法区。方法区是规范，在不同的虚拟机里的实现不一样，最典型的是<code>永久代(PermGen space)</code>和<code>元空间(Metaspace)</code>。</p>\n<ul>\n<li>所有==线程共享==</li>\n<li>存在垃圾回收</li>\n</ul>\n<p>存储每个类的<strong>结构信息</strong>（模板）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> price = <span class=\"number\">1233435</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">park</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;stop ...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例如运行时常量池、字段和方法数据、构造函数和普通方法的字节码内容。</p>\n<p>元空间与永久代最大的区别在于：永久代使用的是jvm的堆内存，但是java8以后的元空间并不在虚拟机中而是<strong>本机物理内存</strong>。因此，元空间的大小仅受本地内存限制，类的元数据放入native memory，字符串池和类的静态变量放入java堆中，这样可以加载多少类的元数据就不再由MaxPermSize控制，而由系统的实际可用空间来控制。</p>\n<p>实例变量存在堆内存中，与方法区无关。i.e.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Demo demo = <span class=\"keyword\">new</span> Demo();</span><br><span class=\"line\">        demo.hello();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每次new之后都会产生一个hello方法以及变量demo，此时这个实例变量就存在堆（当然）。</p>\n<h1 id=\"方法区、栈、堆\"><a href=\"#方法区、栈、堆\" class=\"headerlink\" title=\"方法区、栈、堆\"></a>方法区、栈、堆</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person person1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">Person person2 = <span class=\"keyword\">new</span> Person();</span><br></pre></td></tr></table></figure>\n\n<p>左边的引用变量放在栈中，右边new出来的实例存放在堆中。堆中的实例指向方法区（保证两个不同的实例对象有同样的行为）。</p>\n<p>要保证person1与person2来自同一个类实例化且保持各自的行为，依靠方法区的“模板”。</p>\n<p>hotsopt是使用指针的方式访问对象：java堆中会存放类元数据的地址，类元数据即Class（类的结构信息）。栈中存放的则是对象的地址。即 栈–&gt;堆–&gt;方法区</p>\n<h1 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h1><p>（Java7之前）    一个Jvm实例只存在一个堆内存，堆内存的大小可以调节。类加载器读取了类文件后需要把类、方法、常变量放到堆内存中，保存所有引用类型的真实信息，以便执行器执行。</p>\n<p>(Java8)    永久区换成了元空间。</p>\n<p>物理上为新生区+养老区。</p>\n<h2 id=\"堆内存\"><a href=\"#堆内存\" class=\"headerlink\" title=\"堆内存\"></a>堆内存</h2><p>逻辑上分为三部分：新生+养老+永久</p>\n<p>新生区： Youg Generation Space (Eden Sapce + Survivor 0 space + Survivor 1 space)</p>\n<p>养老区：Tenure Generation Space</p>\n<p>永久存储区：Permanent Space</p>\n<ul>\n<li>Eden: 0space: 1space  = 8 : 1 : 1</li>\n<li>Young : Old = 1 : 2</li>\n</ul>\n<h2 id=\"静态\"><a href=\"#静态\" class=\"headerlink\" title=\"静态\"></a>静态</h2><p>实例化对象的整个生命周期都在新生区进行，最开始是在Eden Sapce,当满了之后会进行GC（垃圾回收），这时会清除大部分的垃圾，剩余的对象放入Survivior 0 space，当Eden Space和Survivor 0 space也满时，进行GC，幸存者放入Survivor 1 space，重复上一步，幸存者存入Tenure Genreration Space，重复上一步，也满时进行Full GC，重复上一步，再次满时，无处存储实例对象，会产生OutOfMemoryError(OOM)。</p>\n<h2 id=\"动态\"><a href=\"#动态\" class=\"headerlink\" title=\"动态\"></a>动态</h2><p>Survivor 0 space: from区</p>\n<p>Surrivor 1 space: to区</p>\n<p>他们的位置不固定，每次GC之后位置会交换，空的为to区。</p>\n<ol>\n<li>Eden, SurvivorFrom copy to SurviviorTo</li>\n<li>clean up Eden, SurvivorFrom</li>\n<li>Swap SurvivorTo and SurvivorFrom</li>\n</ol>\n<h2 id=\"永久代\"><a href=\"#永久代\" class=\"headerlink\" title=\"永久代\"></a>永久代</h2><p>是一个常驻内存区域，用于存放jdk自身所携带的Class、Interface的元数据，也就是说他存储的是运行环境必须的类信息，被装载进此区域的数据是不会被垃圾回收器回收的，关闭JVM才会释放此区域所占的内存。</p>\n<h2 id=\"调优\"><a href=\"#调优\" class=\"headerlink\" title=\"调优\"></a>调优</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Returns the maximum amount of memory that the Java virtual machine will attempt to use.</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> l = Runtime.getRuntime().maxMemory();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Returns the total amount of memory in the Java virtual machine.</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> l1 = Runtime.getRuntime().totalMemory();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 1/4</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;(-xmx) MAX_MEMORY: &quot;</span> + l + <span class=\"string\">&quot;bytes, &quot;</span> + (l / (<span class=\"keyword\">double</span>) <span class=\"number\">1024</span> / <span class=\"number\">1024</span> + <span class=\"string\">&quot;MB&quot;</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 1/64</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;(-xms) TOTAL_MEMORY: &quot;</span> + l1 + <span class=\"string\">&quot;bytes, &quot;</span> + (l1 / (<span class=\"keyword\">double</span>) <span class=\"number\">1024</span> / <span class=\"number\">1024</span> + <span class=\"string\">&quot;MB&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>note:</strong> 生产中会将最高值与最低值设置的一样大，避免应用程序争抢内存，产生峰谷。</p>\n<blockquote>\n<p>-XX:MaxTenuringThreshold 设置对象在新生代中存活的次数（java8默认且最高15）</p>\n</blockquote>\n<h1 id=\"GC\"><a href=\"#GC\" class=\"headerlink\" title=\"GC\"></a>GC</h1><ul>\n<li>minor GC</li>\n<li>major/full GC</li>\n</ul>\n<p>major GC的速度比minor GC慢得多（考虑下young区和old区的大小比）。</p>\n<h2 id=\"垃圾回收算法\"><a href=\"#垃圾回收算法\" class=\"headerlink\" title=\"垃圾回收算法\"></a>垃圾回收算法</h2><p>分代收集，根据各个代来使用</p>\n<h3 id=\"引用计数法\"><a href=\"#引用计数法\" class=\"headerlink\" title=\"引用计数法\"></a>引用计数法</h3><p>每次引用对象时会维护计数器，每次引用的时候会加1,如果是0的话会被回收，但是大量的计数器也会有消耗。最大的弊端还是循环引用。JVM一般不会用这种。</p>\n<h3 id=\"复制算法（Copying）\"><a href=\"#复制算法（Copying）\" class=\"headerlink\" title=\"复制算法（Copying）\"></a>复制算法（Copying）</h3><p>Minor GC使用的就是Copying。不会产生内存碎片，但是会耗费空间。</p>\n<p>因为存活率都很低，复制也没啥。</p>\n<h3 id=\"标记清除法（Mark-Sweep）\"><a href=\"#标记清除法（Mark-Sweep）\" class=\"headerlink\" title=\"标记清除法（Mark-Sweep）\"></a>标记清除法（Mark-Sweep）</h3><p>Major GC使用的是Mark-Sweep，或者与下面的Mark-Compact混合实现。分为标记和清除两个阶段，先标记要回收的，然或再统一回收这些对象。对比上面的，没有复制-粘贴-清除，而是标记后清除，但是造成了内存碎片话（内存不连续），也没有Copying速度快（找出标记的需要进行扫描）。JVM为了空闲的内存还需要维持一个内存的空闲列表，又是一种开销。</p>\n<h3 id=\"标记压缩（Mark-Compact）\"><a href=\"#标记压缩（Mark-Compact）\" class=\"headerlink\" title=\"标记压缩（Mark-Compact）\"></a>标记压缩（Mark-Compact）</h3><p>Mark-Sweep-Compact，标记清除压缩算法，比上面的多了一步整理的过程（不会产生内存碎片），显然时间上消耗更多了（慢工出细活），多了移动对象的时间。</p>\n<p>也可以派生出另一种：多次GC后才进行压缩，减少移动对象的时间。</p>\n<h1 id=\"JMM\"><a href=\"#JMM\" class=\"headerlink\" title=\"JMM\"></a>JMM</h1><p>Java的内存模型（Java Memory  Model)，本身是一种抽象的概念，并不真实存在，他描述的是一组规范，通过这组规范定义了程序中各个变量（<strong>包括实例字段、静态字段以及构成数组对象的元素</strong>）的访问方式。</p>\n<p>在操作系统中我们有学习过，线程是资源调度的最小单位，进程是资源最小的分配单位，但是线程还是拥有部分必要的资源，其中，<code>工作内存</code>是每个线程的私有数据区域。java内存模型中规定所有变量都存储在主内存，它是共享的内存区域，所有线程都可以访问，但是线程对变量的操作（如读、取、赋值等）必须在工作内存中进行，首先要将变量从主内存拷贝到线程自己的工作内存空间，然后对变量进行操作，操作完成后再将变量写回主内存，换句话说，不能直接操作主内存中的变量，各个线程中的工作</p>\n<p>内存存储着主内存中的变量副本拷贝。因此，不同的线程间无法访问对方的工作内存，线程间的通信（传值）必须通过主内存来完成。</p>\n<h2 id=\"violatile\"><a href=\"#violatile\" class=\"headerlink\" title=\"violatile\"></a>violatile</h2><p>java虚拟机提供的轻量级的同步机制，乞丐版syncronized。</p>\n<ul>\n<li>保证可见性</li>\n<li>不保证原子性</li>\n<li>禁止指令重排</li>\n</ul>\n<h1 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A:\"></a>Q&amp;A:</h1><h2 id=\"请谈谈你对JVM的理解？java8虚拟机有哪些更新？\"><a href=\"#请谈谈你对JVM的理解？java8虚拟机有哪些更新？\" class=\"headerlink\" title=\"请谈谈你对JVM的理解？java8虚拟机有哪些更新？\"></a>请谈谈你对JVM的理解？java8虚拟机有哪些更新？</h2><h2 id=\"什么是OOM？是么是StackOverFlowError？有哪些方法分析？\"><a href=\"#什么是OOM？是么是StackOverFlowError？有哪些方法分析？\" class=\"headerlink\" title=\"什么是OOM？是么是StackOverFlowError？有哪些方法分析？\"></a>什么是OOM？是么是StackOverFlowError？有哪些方法分析？</h2><h2 id=\"JVM的常用参数调优你知道哪些？\"><a href=\"#JVM的常用参数调优你知道哪些？\" class=\"headerlink\" title=\"JVM的常用参数调优你知道哪些？\"></a>JVM的常用参数调优你知道哪些？</h2><h2 id=\"谈谈JVM中，对类加载器你的认识？\"><a href=\"#谈谈JVM中，对类加载器你的认识？\" class=\"headerlink\" title=\"谈谈JVM中，对类加载器你的认识？\"></a>谈谈JVM中，对类加载器你的认识？</h2>","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>associate with juc</p>","more":"<h1 id=\"系统图\"><a href=\"#系统图\" class=\"headerlink\" title=\"系统图\"></a>系统图</h1><p><img src=\"https://i.loli.net/2020/06/04/UQfq2lrGu9mLc4C.png\" alt=\"Screenshot from 2020-06-04 20-11-48.png\"></p>\n<ul>\n<li>灰色代表线程私有，占用的内存非常少，几乎不存在垃圾回收</li>\n<li>亮色代表存在垃圾回收</li>\n</ul>\n<h1 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h1><p>经过javac编译后，形成的xxx.class文件存在电脑硬盘上，通过类加载器装进JVM并初始化为xxx.Class文件（装载进虚拟机）。只负责加载class文件，将之装载后成为Class文件，放进方法区。</p>\n<blockquote>\n<p>Car.class -&gt; Class Loader -&gt; Car Class -&gt; car1/car2/car3</p>\n</blockquote>\n<p>Car Class是后面car1、car2、car3的模板，后面的三个car也是实例化的产物。</p>\n<p><img src=\"https://i.loli.net/2020/06/04/EYRbMN1fgIOuHBk.png\" alt=\"Screenshot from 2020-06-04 20-33-54.png\"></p>\n<h2 id=\"种类\"><a href=\"#种类\" class=\"headerlink\" title=\"种类\"></a>种类</h2><h3 id=\"启动类加载器（Bootstrap）\"><a href=\"#启动类加载器（Bootstrap）\" class=\"headerlink\" title=\"启动类加载器（Bootstrap）\"></a>启动类加载器（Bootstrap）</h3><p>由C++编写，默认加载一些编写程序比用的东西，比如Object, ArrayList, String等。</p>\n<h3 id=\"扩展类加载器（Extension）\"><a href=\"#扩展类加载器（Extension）\" class=\"headerlink\" title=\"扩展类加载器（Extension）\"></a>扩展类加载器（Extension）</h3><p>Java编写，除了启动类加载器加载核心的东西外，还需要Extension加载入javax等java扩展类。</p>\n<h3 id=\"应用程序类加载器（AppClassLoader）\"><a href=\"#应用程序类加载器（AppClassLoader）\" class=\"headerlink\" title=\"应用程序类加载器（AppClassLoader）\"></a>应用程序类加载器（AppClassLoader）</h3><p>我们编写程序时定义的类所用的加载器</p>\n<h3 id=\"用户自定义加载器\"><a href=\"#用户自定义加载器\" class=\"headerlink\" title=\"用户自定义加载器\"></a>用户自定义加载器</h3><p>定制化开发，不走默认的类加载顺序时，可以继承ClassLoader（抽象）。</p>\n<h2 id=\"双亲委派\"><a href=\"#双亲委派\" class=\"headerlink\" title=\"双亲委派\"></a>双亲委派</h2><p>比如如果需要使用A.java类，需要先去顶部Bootstrap寻找，找不到的话去Extension找，还没有的话去Application中找，还没有的话抛异常。</p>\n<p><strong>Bootstrap</strong> –&gt; <strong>Extension</strong> –&gt; <strong>Application</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">String</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在类java.lang.String中找不到main方法。因为先从Bootstrap中寻找。</p>\n</blockquote>\n<h2 id=\"沙箱安全机制\"><a href=\"#沙箱安全机制\" class=\"headerlink\" title=\"沙箱安全机制\"></a>沙箱安全机制</h2><p><strong>note</strong>: 保证个人编写的代码不污染出厂的jdk代码，并且不同类中使用的Object都是相同的。</p>\n<h2 id=\"本地方法接口（Native-Interface）\"><a href=\"#本地方法接口（Native-Interface）\" class=\"headerlink\" title=\"本地方法接口（Native Interface）\"></a>本地方法接口（Native Interface）</h2><p>融合不同的编程语言为Java所用（即C/C++），在内存中专门开辟了一块区域处理标记为native的代码。目前该方法使用的越来越少了，除非是与硬件相关的应用，如通过java驱动打印机，企业级应用少见。</p>\n<p>异构领域间通信发达，Socket通信或webService。</p>\n<h3 id=\"Native\"><a href=\"#Native\" class=\"headerlink\" title=\"Native\"></a>Native</h3><p>只是一个关键字。只有声明，没有实现，标记需要调用底层C语言函数库或系统。</p>\n<h3 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h3><p>装native方法的栈。在内存中专门开辟了一块区域处理标记为native的代码，登记native方法，在Execution Engine执行时加载本地方法库。</p>\n<h1 id=\"PC寄存器\"><a href=\"#PC寄存器\" class=\"headerlink\" title=\"PC寄存器\"></a>PC寄存器</h1><p>实际是一个指针，线程私有，记录了方法之间的调用和执行情况，类似排班值日表。用来存储指向下一条指令的地址，即将要执行的指令代码。</p>\n<p>是当前线程所执行的字节码的行号指示器。</p>\n<h1 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h1><ul>\n<li>不存在垃圾回收问题</li>\n<li>==线程私有==（想想加锁，不就在方法上/中加的么）</li>\n</ul>\n<p>也叫栈内存，<strong>主管Java程序的运行</strong>，在线程创建时创建，线程结束时结束（释放栈内存）。基本类型的变量、对象的引用变量、实例方法都在栈空间中。</p>\n<h2 id=\"存储\"><a href=\"#存储\" class=\"headerlink\" title=\"存储\"></a>存储</h2><p>在java中的方法装载在虚拟机的栈中叫栈帧。</p>\n<ul>\n<li><p>Local Variables: 输入参数、输出参数以及方法内的变量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 入参为 x, y， 输出为result，方法内变量为result，均在栈中。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    result = x + y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Operand Stack: 记录出栈、入栈的操作</p>\n</li>\n<li><p>Frame Data: 包括类文件、方法等等</p>\n</li>\n</ul>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>栈中的数据都是以栈帧（Stack Frame）的格式存在，栈帧是一个内存区块，是一个数据集，一个有关方法（Method）和运行期数据的数据集，当一个方法A被调用时就产生了一个栈帧，并被压入到栈中，执行完毕后弹出。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法深度调用，把栈撑爆了。 Exception: StackOverflowError 属于错误</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    m1();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>每个方法执行的同时都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等信息，每一个方法从调度直至执行完毕的过程，就对应着一个栈帧在虚拟机入栈到出栈的过程。栈的大小和具体JVM的实现有关，通常在256K～756K之间。</p>\n<p>栈管运行，堆管存储。</p>\n<h1 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h1><p>class文件被ClassLoader装载进JVM称为Class文件，其实是装进了方法区。方法区是规范，在不同的虚拟机里的实现不一样，最典型的是<code>永久代(PermGen space)</code>和<code>元空间(Metaspace)</code>。</p>\n<ul>\n<li>所有==线程共享==</li>\n<li>存在垃圾回收</li>\n</ul>\n<p>存储每个类的<strong>结构信息</strong>（模板）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> price = <span class=\"number\">1233435</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">park</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;stop ...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例如运行时常量池、字段和方法数据、构造函数和普通方法的字节码内容。</p>\n<p>元空间与永久代最大的区别在于：永久代使用的是jvm的堆内存，但是java8以后的元空间并不在虚拟机中而是<strong>本机物理内存</strong>。因此，元空间的大小仅受本地内存限制，类的元数据放入native memory，字符串池和类的静态变量放入java堆中，这样可以加载多少类的元数据就不再由MaxPermSize控制，而由系统的实际可用空间来控制。</p>\n<p>实例变量存在堆内存中，与方法区无关。i.e.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Demo demo = <span class=\"keyword\">new</span> Demo();</span><br><span class=\"line\">        demo.hello();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每次new之后都会产生一个hello方法以及变量demo，此时这个实例变量就存在堆（当然）。</p>\n<h1 id=\"方法区、栈、堆\"><a href=\"#方法区、栈、堆\" class=\"headerlink\" title=\"方法区、栈、堆\"></a>方法区、栈、堆</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person person1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">Person person2 = <span class=\"keyword\">new</span> Person();</span><br></pre></td></tr></table></figure>\n\n<p>左边的引用变量放在栈中，右边new出来的实例存放在堆中。堆中的实例指向方法区（保证两个不同的实例对象有同样的行为）。</p>\n<p>要保证person1与person2来自同一个类实例化且保持各自的行为，依靠方法区的“模板”。</p>\n<p>hotsopt是使用指针的方式访问对象：java堆中会存放类元数据的地址，类元数据即Class（类的结构信息）。栈中存放的则是对象的地址。即 栈–&gt;堆–&gt;方法区</p>\n<h1 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h1><p>（Java7之前）    一个Jvm实例只存在一个堆内存，堆内存的大小可以调节。类加载器读取了类文件后需要把类、方法、常变量放到堆内存中，保存所有引用类型的真实信息，以便执行器执行。</p>\n<p>(Java8)    永久区换成了元空间。</p>\n<p>物理上为新生区+养老区。</p>\n<h2 id=\"堆内存\"><a href=\"#堆内存\" class=\"headerlink\" title=\"堆内存\"></a>堆内存</h2><p>逻辑上分为三部分：新生+养老+永久</p>\n<p>新生区： Youg Generation Space (Eden Sapce + Survivor 0 space + Survivor 1 space)</p>\n<p>养老区：Tenure Generation Space</p>\n<p>永久存储区：Permanent Space</p>\n<ul>\n<li>Eden: 0space: 1space  = 8 : 1 : 1</li>\n<li>Young : Old = 1 : 2</li>\n</ul>\n<h2 id=\"静态\"><a href=\"#静态\" class=\"headerlink\" title=\"静态\"></a>静态</h2><p>实例化对象的整个生命周期都在新生区进行，最开始是在Eden Sapce,当满了之后会进行GC（垃圾回收），这时会清除大部分的垃圾，剩余的对象放入Survivior 0 space，当Eden Space和Survivor 0 space也满时，进行GC，幸存者放入Survivor 1 space，重复上一步，幸存者存入Tenure Genreration Space，重复上一步，也满时进行Full GC，重复上一步，再次满时，无处存储实例对象，会产生OutOfMemoryError(OOM)。</p>\n<h2 id=\"动态\"><a href=\"#动态\" class=\"headerlink\" title=\"动态\"></a>动态</h2><p>Survivor 0 space: from区</p>\n<p>Surrivor 1 space: to区</p>\n<p>他们的位置不固定，每次GC之后位置会交换，空的为to区。</p>\n<ol>\n<li>Eden, SurvivorFrom copy to SurviviorTo</li>\n<li>clean up Eden, SurvivorFrom</li>\n<li>Swap SurvivorTo and SurvivorFrom</li>\n</ol>\n<h2 id=\"永久代\"><a href=\"#永久代\" class=\"headerlink\" title=\"永久代\"></a>永久代</h2><p>是一个常驻内存区域，用于存放jdk自身所携带的Class、Interface的元数据，也就是说他存储的是运行环境必须的类信息，被装载进此区域的数据是不会被垃圾回收器回收的，关闭JVM才会释放此区域所占的内存。</p>\n<h2 id=\"调优\"><a href=\"#调优\" class=\"headerlink\" title=\"调优\"></a>调优</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Returns the maximum amount of memory that the Java virtual machine will attempt to use.</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> l = Runtime.getRuntime().maxMemory();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Returns the total amount of memory in the Java virtual machine.</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> l1 = Runtime.getRuntime().totalMemory();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 1/4</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;(-xmx) MAX_MEMORY: &quot;</span> + l + <span class=\"string\">&quot;bytes, &quot;</span> + (l / (<span class=\"keyword\">double</span>) <span class=\"number\">1024</span> / <span class=\"number\">1024</span> + <span class=\"string\">&quot;MB&quot;</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 1/64</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;(-xms) TOTAL_MEMORY: &quot;</span> + l1 + <span class=\"string\">&quot;bytes, &quot;</span> + (l1 / (<span class=\"keyword\">double</span>) <span class=\"number\">1024</span> / <span class=\"number\">1024</span> + <span class=\"string\">&quot;MB&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>note:</strong> 生产中会将最高值与最低值设置的一样大，避免应用程序争抢内存，产生峰谷。</p>\n<blockquote>\n<p>-XX:MaxTenuringThreshold 设置对象在新生代中存活的次数（java8默认且最高15）</p>\n</blockquote>\n<h1 id=\"GC\"><a href=\"#GC\" class=\"headerlink\" title=\"GC\"></a>GC</h1><ul>\n<li>minor GC</li>\n<li>major/full GC</li>\n</ul>\n<p>major GC的速度比minor GC慢得多（考虑下young区和old区的大小比）。</p>\n<h2 id=\"垃圾回收算法\"><a href=\"#垃圾回收算法\" class=\"headerlink\" title=\"垃圾回收算法\"></a>垃圾回收算法</h2><p>分代收集，根据各个代来使用</p>\n<h3 id=\"引用计数法\"><a href=\"#引用计数法\" class=\"headerlink\" title=\"引用计数法\"></a>引用计数法</h3><p>每次引用对象时会维护计数器，每次引用的时候会加1,如果是0的话会被回收，但是大量的计数器也会有消耗。最大的弊端还是循环引用。JVM一般不会用这种。</p>\n<h3 id=\"复制算法（Copying）\"><a href=\"#复制算法（Copying）\" class=\"headerlink\" title=\"复制算法（Copying）\"></a>复制算法（Copying）</h3><p>Minor GC使用的就是Copying。不会产生内存碎片，但是会耗费空间。</p>\n<p>因为存活率都很低，复制也没啥。</p>\n<h3 id=\"标记清除法（Mark-Sweep）\"><a href=\"#标记清除法（Mark-Sweep）\" class=\"headerlink\" title=\"标记清除法（Mark-Sweep）\"></a>标记清除法（Mark-Sweep）</h3><p>Major GC使用的是Mark-Sweep，或者与下面的Mark-Compact混合实现。分为标记和清除两个阶段，先标记要回收的，然或再统一回收这些对象。对比上面的，没有复制-粘贴-清除，而是标记后清除，但是造成了内存碎片话（内存不连续），也没有Copying速度快（找出标记的需要进行扫描）。JVM为了空闲的内存还需要维持一个内存的空闲列表，又是一种开销。</p>\n<h3 id=\"标记压缩（Mark-Compact）\"><a href=\"#标记压缩（Mark-Compact）\" class=\"headerlink\" title=\"标记压缩（Mark-Compact）\"></a>标记压缩（Mark-Compact）</h3><p>Mark-Sweep-Compact，标记清除压缩算法，比上面的多了一步整理的过程（不会产生内存碎片），显然时间上消耗更多了（慢工出细活），多了移动对象的时间。</p>\n<p>也可以派生出另一种：多次GC后才进行压缩，减少移动对象的时间。</p>\n<h1 id=\"JMM\"><a href=\"#JMM\" class=\"headerlink\" title=\"JMM\"></a>JMM</h1><p>Java的内存模型（Java Memory  Model)，本身是一种抽象的概念，并不真实存在，他描述的是一组规范，通过这组规范定义了程序中各个变量（<strong>包括实例字段、静态字段以及构成数组对象的元素</strong>）的访问方式。</p>\n<p>在操作系统中我们有学习过，线程是资源调度的最小单位，进程是资源最小的分配单位，但是线程还是拥有部分必要的资源，其中，<code>工作内存</code>是每个线程的私有数据区域。java内存模型中规定所有变量都存储在主内存，它是共享的内存区域，所有线程都可以访问，但是线程对变量的操作（如读、取、赋值等）必须在工作内存中进行，首先要将变量从主内存拷贝到线程自己的工作内存空间，然后对变量进行操作，操作完成后再将变量写回主内存，换句话说，不能直接操作主内存中的变量，各个线程中的工作</p>\n<p>内存存储着主内存中的变量副本拷贝。因此，不同的线程间无法访问对方的工作内存，线程间的通信（传值）必须通过主内存来完成。</p>\n<h2 id=\"violatile\"><a href=\"#violatile\" class=\"headerlink\" title=\"violatile\"></a>violatile</h2><p>java虚拟机提供的轻量级的同步机制，乞丐版syncronized。</p>\n<ul>\n<li>保证可见性</li>\n<li>不保证原子性</li>\n<li>禁止指令重排</li>\n</ul>\n<h1 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A:\"></a>Q&amp;A:</h1><h2 id=\"请谈谈你对JVM的理解？java8虚拟机有哪些更新？\"><a href=\"#请谈谈你对JVM的理解？java8虚拟机有哪些更新？\" class=\"headerlink\" title=\"请谈谈你对JVM的理解？java8虚拟机有哪些更新？\"></a>请谈谈你对JVM的理解？java8虚拟机有哪些更新？</h2><h2 id=\"什么是OOM？是么是StackOverFlowError？有哪些方法分析？\"><a href=\"#什么是OOM？是么是StackOverFlowError？有哪些方法分析？\" class=\"headerlink\" title=\"什么是OOM？是么是StackOverFlowError？有哪些方法分析？\"></a>什么是OOM？是么是StackOverFlowError？有哪些方法分析？</h2><h2 id=\"JVM的常用参数调优你知道哪些？\"><a href=\"#JVM的常用参数调优你知道哪些？\" class=\"headerlink\" title=\"JVM的常用参数调优你知道哪些？\"></a>JVM的常用参数调优你知道哪些？</h2><h2 id=\"谈谈JVM中，对类加载器你的认识？\"><a href=\"#谈谈JVM中，对类加载器你的认识？\" class=\"headerlink\" title=\"谈谈JVM中，对类加载器你的认识？\"></a>谈谈JVM中，对类加载器你的认识？</h2>"},{"title":"kafka","date":"2019-12-03T14:34:16.000Z","_content":"\n卡夫卡，消息中间件，注意同类型的异同。\n\n<!-- mroe -->\n\n# 序\n`分布式`的基于`发布、订阅`的`消息队列`（Message Queue)，主要应用于大数据实时处理领域。\n\n## 消息队列\n一个场景，用户注册某网站时填写个人信息，需要短信验证码，这时页面响应，有两种模式：\n1. 同步：用户填写信息，提交（信息入库），触发短信发送接口，发送短信，页面反馈给用户\n2. 异步：用户填写信息，提交（信息入库），页面反馈给用户，同时触发接口，发送短信\n\n消息队列的主要特点：解耦、削峰\n\n### 消息队列的两种模式\n\n1. 点对点模式: 消费者主动拉取数据，消息收到后信息清除。消息生产者生产消息发送到Queue中，然后消息消费者从Queue中取出并且消费消息，消息被消费后Queue中不再有存储。。。。。Queue支持存在多个消费者，但是对一个消息而言，只会有一个消费者可以消费。\n    消息不能复用，比如A生产消息，B消费消息，此时如果C也想消费A的消息，那么只能让A再开一个队列让C接受。`只是消息队列，不是消息的存储系统`（一对一）\n\n2. 发布订阅模式：消费者消费数据后不会清除消息。相当于消息生产者将消息发布到topic中，同时有多个消息消费者（订阅）消费该消息。发布到topic的消息会被所有订阅者消费。（一对多）\n   \n    1. 队列主动推送\n    2. 消费者主动拉取\n    \n    - 不想要的消息？？\n    - 推送速度如何确定？\n    \n    而卡夫卡属于消费者拉取。所以卡夫卡内有个`长轮询`来不断地问topic内有没有消息。\n\n## 基础架构\n\n生产者、消费者、kafka集群。(集群就是消息暂停的地方)\n\n1. 集群中，分布式，多台服务器。服务器中的broker就是卡夫卡的进程。broker中还有组件：主题。主题将消息分类。partition提高卡夫卡的负载能力和并发度。有leader和follower，后者做数据冗余，提升安全性，且前后者不会出现在同一台服务器。生产者只会寻找leader。主题：分区+主副本。\n2. 消费者，有消费者组，将多个消费者用一个组名。`一个分区只能被一个消费者组内的某一个消费者消费`。消费者组可以提高消费能力。并发度最好的时候就是消费者个数与分支数相等。\n3. zookeeper，集群要正常工作就要依赖zookeeper，要想多台装有卡夫卡的机器组成集群，只要他们所用的zookeeper是同一套集群就ok了。除了帮卡夫卡存贮信息外还存储消费到何处的位置信息。（0.9版本之前存才zk，之后存在kafka（存在磁盘，默认7天）。目的都一样：记住消费到的位置）\n\n## 安装部署\n\n","source":"_posts/kafka.md","raw":"---\ntitle: kafka\ndate: 2019-12-03 22:34:16\ncategories: MiddleWare\ntags: kafka\n---\n\n卡夫卡，消息中间件，注意同类型的异同。\n\n<!-- mroe -->\n\n# 序\n`分布式`的基于`发布、订阅`的`消息队列`（Message Queue)，主要应用于大数据实时处理领域。\n\n## 消息队列\n一个场景，用户注册某网站时填写个人信息，需要短信验证码，这时页面响应，有两种模式：\n1. 同步：用户填写信息，提交（信息入库），触发短信发送接口，发送短信，页面反馈给用户\n2. 异步：用户填写信息，提交（信息入库），页面反馈给用户，同时触发接口，发送短信\n\n消息队列的主要特点：解耦、削峰\n\n### 消息队列的两种模式\n\n1. 点对点模式: 消费者主动拉取数据，消息收到后信息清除。消息生产者生产消息发送到Queue中，然后消息消费者从Queue中取出并且消费消息，消息被消费后Queue中不再有存储。。。。。Queue支持存在多个消费者，但是对一个消息而言，只会有一个消费者可以消费。\n    消息不能复用，比如A生产消息，B消费消息，此时如果C也想消费A的消息，那么只能让A再开一个队列让C接受。`只是消息队列，不是消息的存储系统`（一对一）\n\n2. 发布订阅模式：消费者消费数据后不会清除消息。相当于消息生产者将消息发布到topic中，同时有多个消息消费者（订阅）消费该消息。发布到topic的消息会被所有订阅者消费。（一对多）\n   \n    1. 队列主动推送\n    2. 消费者主动拉取\n    \n    - 不想要的消息？？\n    - 推送速度如何确定？\n    \n    而卡夫卡属于消费者拉取。所以卡夫卡内有个`长轮询`来不断地问topic内有没有消息。\n\n## 基础架构\n\n生产者、消费者、kafka集群。(集群就是消息暂停的地方)\n\n1. 集群中，分布式，多台服务器。服务器中的broker就是卡夫卡的进程。broker中还有组件：主题。主题将消息分类。partition提高卡夫卡的负载能力和并发度。有leader和follower，后者做数据冗余，提升安全性，且前后者不会出现在同一台服务器。生产者只会寻找leader。主题：分区+主副本。\n2. 消费者，有消费者组，将多个消费者用一个组名。`一个分区只能被一个消费者组内的某一个消费者消费`。消费者组可以提高消费能力。并发度最好的时候就是消费者个数与分支数相等。\n3. zookeeper，集群要正常工作就要依赖zookeeper，要想多台装有卡夫卡的机器组成集群，只要他们所用的zookeeper是同一套集群就ok了。除了帮卡夫卡存贮信息外还存储消费到何处的位置信息。（0.9版本之前存才zk，之后存在kafka（存在磁盘，默认7天）。目的都一样：记住消费到的位置）\n\n## 安装部署\n\n","slug":"kafka","published":1,"updated":"2020-07-20T13:30:20.863Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgcq001vbyihdkbp219t","content":"<p>卡夫卡，消息中间件，注意同类型的异同。</p>\n<!-- mroe -->\n\n<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><p><code>分布式</code>的基于<code>发布、订阅</code>的<code>消息队列</code>（Message Queue)，主要应用于大数据实时处理领域。</p>\n<h2 id=\"消息队列\"><a href=\"#消息队列\" class=\"headerlink\" title=\"消息队列\"></a>消息队列</h2><p>一个场景，用户注册某网站时填写个人信息，需要短信验证码，这时页面响应，有两种模式：</p>\n<ol>\n<li>同步：用户填写信息，提交（信息入库），触发短信发送接口，发送短信，页面反馈给用户</li>\n<li>异步：用户填写信息，提交（信息入库），页面反馈给用户，同时触发接口，发送短信</li>\n</ol>\n<p>消息队列的主要特点：解耦、削峰</p>\n<h3 id=\"消息队列的两种模式\"><a href=\"#消息队列的两种模式\" class=\"headerlink\" title=\"消息队列的两种模式\"></a>消息队列的两种模式</h3><ol>\n<li><p>点对点模式: 消费者主动拉取数据，消息收到后信息清除。消息生产者生产消息发送到Queue中，然后消息消费者从Queue中取出并且消费消息，消息被消费后Queue中不再有存储。。。。。Queue支持存在多个消费者，但是对一个消息而言，只会有一个消费者可以消费。<br> 消息不能复用，比如A生产消息，B消费消息，此时如果C也想消费A的消息，那么只能让A再开一个队列让C接受。<code>只是消息队列，不是消息的存储系统</code>（一对一）</p>\n</li>\n<li><p>发布订阅模式：消费者消费数据后不会清除消息。相当于消息生产者将消息发布到topic中，同时有多个消息消费者（订阅）消费该消息。发布到topic的消息会被所有订阅者消费。（一对多）</p>\n<ol>\n<li>队列主动推送</li>\n<li>消费者主动拉取</li>\n</ol>\n<ul>\n<li><p>不想要的消息？？</p>\n</li>\n<li><p>推送速度如何确定？</p>\n<p>而卡夫卡属于消费者拉取。所以卡夫卡内有个<code>长轮询</code>来不断地问topic内有没有消息。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"基础架构\"><a href=\"#基础架构\" class=\"headerlink\" title=\"基础架构\"></a>基础架构</h2><p>生产者、消费者、kafka集群。(集群就是消息暂停的地方)</p>\n<ol>\n<li>集群中，分布式，多台服务器。服务器中的broker就是卡夫卡的进程。broker中还有组件：主题。主题将消息分类。partition提高卡夫卡的负载能力和并发度。有leader和follower，后者做数据冗余，提升安全性，且前后者不会出现在同一台服务器。生产者只会寻找leader。主题：分区+主副本。</li>\n<li>消费者，有消费者组，将多个消费者用一个组名。<code>一个分区只能被一个消费者组内的某一个消费者消费</code>。消费者组可以提高消费能力。并发度最好的时候就是消费者个数与分支数相等。</li>\n<li>zookeeper，集群要正常工作就要依赖zookeeper，要想多台装有卡夫卡的机器组成集群，只要他们所用的zookeeper是同一套集群就ok了。除了帮卡夫卡存贮信息外还存储消费到何处的位置信息。（0.9版本之前存才zk，之后存在kafka（存在磁盘，默认7天）。目的都一样：记住消费到的位置）</li>\n</ol>\n<h2 id=\"安装部署\"><a href=\"#安装部署\" class=\"headerlink\" title=\"安装部署\"></a>安装部署</h2>","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"","more":"<p>卡夫卡，消息中间件，注意同类型的异同。</p>\n<!-- mroe -->\n\n<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><p><code>分布式</code>的基于<code>发布、订阅</code>的<code>消息队列</code>（Message Queue)，主要应用于大数据实时处理领域。</p>\n<h2 id=\"消息队列\"><a href=\"#消息队列\" class=\"headerlink\" title=\"消息队列\"></a>消息队列</h2><p>一个场景，用户注册某网站时填写个人信息，需要短信验证码，这时页面响应，有两种模式：</p>\n<ol>\n<li>同步：用户填写信息，提交（信息入库），触发短信发送接口，发送短信，页面反馈给用户</li>\n<li>异步：用户填写信息，提交（信息入库），页面反馈给用户，同时触发接口，发送短信</li>\n</ol>\n<p>消息队列的主要特点：解耦、削峰</p>\n<h3 id=\"消息队列的两种模式\"><a href=\"#消息队列的两种模式\" class=\"headerlink\" title=\"消息队列的两种模式\"></a>消息队列的两种模式</h3><ol>\n<li><p>点对点模式: 消费者主动拉取数据，消息收到后信息清除。消息生产者生产消息发送到Queue中，然后消息消费者从Queue中取出并且消费消息，消息被消费后Queue中不再有存储。。。。。Queue支持存在多个消费者，但是对一个消息而言，只会有一个消费者可以消费。<br> 消息不能复用，比如A生产消息，B消费消息，此时如果C也想消费A的消息，那么只能让A再开一个队列让C接受。<code>只是消息队列，不是消息的存储系统</code>（一对一）</p>\n</li>\n<li><p>发布订阅模式：消费者消费数据后不会清除消息。相当于消息生产者将消息发布到topic中，同时有多个消息消费者（订阅）消费该消息。发布到topic的消息会被所有订阅者消费。（一对多）</p>\n<ol>\n<li>队列主动推送</li>\n<li>消费者主动拉取</li>\n</ol>\n<ul>\n<li><p>不想要的消息？？</p>\n</li>\n<li><p>推送速度如何确定？</p>\n<p>而卡夫卡属于消费者拉取。所以卡夫卡内有个<code>长轮询</code>来不断地问topic内有没有消息。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"基础架构\"><a href=\"#基础架构\" class=\"headerlink\" title=\"基础架构\"></a>基础架构</h2><p>生产者、消费者、kafka集群。(集群就是消息暂停的地方)</p>\n<ol>\n<li>集群中，分布式，多台服务器。服务器中的broker就是卡夫卡的进程。broker中还有组件：主题。主题将消息分类。partition提高卡夫卡的负载能力和并发度。有leader和follower，后者做数据冗余，提升安全性，且前后者不会出现在同一台服务器。生产者只会寻找leader。主题：分区+主副本。</li>\n<li>消费者，有消费者组，将多个消费者用一个组名。<code>一个分区只能被一个消费者组内的某一个消费者消费</code>。消费者组可以提高消费能力。并发度最好的时候就是消费者个数与分支数相等。</li>\n<li>zookeeper，集群要正常工作就要依赖zookeeper，要想多台装有卡夫卡的机器组成集群，只要他们所用的zookeeper是同一套集群就ok了。除了帮卡夫卡存贮信息外还存储消费到何处的位置信息。（0.9版本之前存才zk，之后存在kafka（存在磁盘，默认7天）。目的都一样：记住消费到的位置）</li>\n</ol>\n<h2 id=\"安装部署\"><a href=\"#安装部署\" class=\"headerlink\" title=\"安装部署\"></a>安装部署</h2>"},{"title":"kmp","date":"2020-03-18T14:21:16.000Z","_content":"\nKMP算法\n\n<!-- more -->\n\n","source":"_posts/kmp.md","raw":"---\ntitle: kmp\ndate: 2020-03-18 22:21:16\ncategories: Leecode\ntags: ['kmp','dp']\n---\n\nKMP算法\n\n<!-- more -->\n\n","slug":"kmp","published":1,"updated":"2020-07-19T17:29:13.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgcs001zbyih2aphh9wo","content":"<p>KMP算法</p>\n<a id=\"more\"></a>\n\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>KMP算法</p>","more":""},{"title":"lcoaldatetime","date":"2020-01-11T08:28:37.000Z","_content":"\nDifferences between **Date** and **LocalDateTime**, in fact, Date is deprecated.\n\n<!-- more -->\n\n# Date\n\n```java\n    public static void main(String[] args) {\n\n        Date rightNow = new Date();\n        System.out.println(\"now date: \"+rightNow);\n        System.out.println(\"now year: \"+rightNow.getYear());\n        System.out.println(\"now month: \"+rightNow.getMonth());\n    }\n```\n\n```markdown\nnow date: Sat Jan 11 16:36:03 CST 2020\nnow year: 120\nnow month: 0\n```\n\n\n\nso it's **deprecated**.\n\n## SimpleDateFormat\n\n**Date formats are not synchronized.**\n\n\n\n# LocalDateTime\n\n```java\n    public static void main(String[] args) {\n\n        LocalDateTime rightNow = LocalDateTime.now();\n        System.out.println(\"now date: \"+rightNow);\n        System.out.println(\"now month: \"+rightNow.getMonth());\n        System.out.println(\"now year: \"+rightNow.getYear());\n    }\n```\n\n```markdown\nnow date: 2020-01-11T18:45:20.878750\nnow month: JANUARY\nnow year: 2020\n```\n\n\n\n## DateTimeFormatter\n\n```java\n    public static void main(String[] args) {\n\n        LocalDateTime rightNow = LocalDateTime.now();\n\n        System.out.println(rightNow.format(DateTimeFormatter.ISO_DATE));\n        System.out.println(rightNow.format(DateTimeFormatter.BASIC_ISO_DATE));\n        System.out.println(rightNow.format(DateTimeFormatter.ofPattern(\"yyyy/MM/dd\")));\n    }\n```\n\n```markdown\n2020-01-11\n20200111\n2020/01/11\n```\n\n\n\nnote: most important, **the class is immutable and thread-safe**.\n\n\n\n\n\n\n\n","source":"_posts/lcoaldatetime.md","raw":"---\ntitle: lcoaldatetime\ndate: 2020-01-11 16:28:37\ncategories: Java\ntags: utils\n---\n\nDifferences between **Date** and **LocalDateTime**, in fact, Date is deprecated.\n\n<!-- more -->\n\n# Date\n\n```java\n    public static void main(String[] args) {\n\n        Date rightNow = new Date();\n        System.out.println(\"now date: \"+rightNow);\n        System.out.println(\"now year: \"+rightNow.getYear());\n        System.out.println(\"now month: \"+rightNow.getMonth());\n    }\n```\n\n```markdown\nnow date: Sat Jan 11 16:36:03 CST 2020\nnow year: 120\nnow month: 0\n```\n\n\n\nso it's **deprecated**.\n\n## SimpleDateFormat\n\n**Date formats are not synchronized.**\n\n\n\n# LocalDateTime\n\n```java\n    public static void main(String[] args) {\n\n        LocalDateTime rightNow = LocalDateTime.now();\n        System.out.println(\"now date: \"+rightNow);\n        System.out.println(\"now month: \"+rightNow.getMonth());\n        System.out.println(\"now year: \"+rightNow.getYear());\n    }\n```\n\n```markdown\nnow date: 2020-01-11T18:45:20.878750\nnow month: JANUARY\nnow year: 2020\n```\n\n\n\n## DateTimeFormatter\n\n```java\n    public static void main(String[] args) {\n\n        LocalDateTime rightNow = LocalDateTime.now();\n\n        System.out.println(rightNow.format(DateTimeFormatter.ISO_DATE));\n        System.out.println(rightNow.format(DateTimeFormatter.BASIC_ISO_DATE));\n        System.out.println(rightNow.format(DateTimeFormatter.ofPattern(\"yyyy/MM/dd\")));\n    }\n```\n\n```markdown\n2020-01-11\n20200111\n2020/01/11\n```\n\n\n\nnote: most important, **the class is immutable and thread-safe**.\n\n\n\n\n\n\n\n","slug":"lcoaldatetime","published":1,"updated":"2020-07-19T17:29:13.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgcu0022byihebjh5kv5","content":"<p>Differences between <strong>Date</strong> and <strong>LocalDateTime</strong>, in fact, Date is deprecated.</p>\n<a id=\"more\"></a>\n\n<h1 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Date rightNow = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;now date: &quot;</span>+rightNow);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;now year: &quot;</span>+rightNow.getYear());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;now month: &quot;</span>+rightNow.getMonth());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">now date: Sat Jan 11 16:36:03 CST 2020</span><br><span class=\"line\">now year: 120</span><br><span class=\"line\">now month: 0</span><br></pre></td></tr></table></figure>\n\n\n\n<p>so it’s <strong>deprecated</strong>.</p>\n<h2 id=\"SimpleDateFormat\"><a href=\"#SimpleDateFormat\" class=\"headerlink\" title=\"SimpleDateFormat\"></a>SimpleDateFormat</h2><p><strong>Date formats are not synchronized.</strong></p>\n<h1 id=\"LocalDateTime\"><a href=\"#LocalDateTime\" class=\"headerlink\" title=\"LocalDateTime\"></a>LocalDateTime</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    LocalDateTime rightNow = LocalDateTime.now();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;now date: &quot;</span>+rightNow);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;now month: &quot;</span>+rightNow.getMonth());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;now year: &quot;</span>+rightNow.getYear());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">now date: 2020-01-11T18:45:20.878750</span><br><span class=\"line\">now month: JANUARY</span><br><span class=\"line\">now year: 2020</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"DateTimeFormatter\"><a href=\"#DateTimeFormatter\" class=\"headerlink\" title=\"DateTimeFormatter\"></a>DateTimeFormatter</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    LocalDateTime rightNow = LocalDateTime.now();</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(rightNow.format(DateTimeFormatter.ISO_DATE));</span><br><span class=\"line\">    System.out.println(rightNow.format(DateTimeFormatter.BASIC_ISO_DATE));</span><br><span class=\"line\">    System.out.println(rightNow.format(DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyy/MM/dd&quot;</span>)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2020-01-11</span><br><span class=\"line\">20200111</span><br><span class=\"line\">2020/01/11</span><br></pre></td></tr></table></figure>\n\n\n\n<p>note: most important, <strong>the class is immutable and thread-safe</strong>.</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>Differences between <strong>Date</strong> and <strong>LocalDateTime</strong>, in fact, Date is deprecated.</p>","more":"<h1 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Date rightNow = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;now date: &quot;</span>+rightNow);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;now year: &quot;</span>+rightNow.getYear());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;now month: &quot;</span>+rightNow.getMonth());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">now date: Sat Jan 11 16:36:03 CST 2020</span><br><span class=\"line\">now year: 120</span><br><span class=\"line\">now month: 0</span><br></pre></td></tr></table></figure>\n\n\n\n<p>so it’s <strong>deprecated</strong>.</p>\n<h2 id=\"SimpleDateFormat\"><a href=\"#SimpleDateFormat\" class=\"headerlink\" title=\"SimpleDateFormat\"></a>SimpleDateFormat</h2><p><strong>Date formats are not synchronized.</strong></p>\n<h1 id=\"LocalDateTime\"><a href=\"#LocalDateTime\" class=\"headerlink\" title=\"LocalDateTime\"></a>LocalDateTime</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    LocalDateTime rightNow = LocalDateTime.now();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;now date: &quot;</span>+rightNow);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;now month: &quot;</span>+rightNow.getMonth());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;now year: &quot;</span>+rightNow.getYear());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">now date: 2020-01-11T18:45:20.878750</span><br><span class=\"line\">now month: JANUARY</span><br><span class=\"line\">now year: 2020</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"DateTimeFormatter\"><a href=\"#DateTimeFormatter\" class=\"headerlink\" title=\"DateTimeFormatter\"></a>DateTimeFormatter</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    LocalDateTime rightNow = LocalDateTime.now();</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(rightNow.format(DateTimeFormatter.ISO_DATE));</span><br><span class=\"line\">    System.out.println(rightNow.format(DateTimeFormatter.BASIC_ISO_DATE));</span><br><span class=\"line\">    System.out.println(rightNow.format(DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyy/MM/dd&quot;</span>)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2020-01-11</span><br><span class=\"line\">20200111</span><br><span class=\"line\">2020/01/11</span><br></pre></td></tr></table></figure>\n\n\n\n<p>note: most important, <strong>the class is immutable and thread-safe</strong>.</p>"},{"title":"leecode","date":"2019-12-10T05:13:28.000Z","_content":"\n求两数之和是否为目标值；移除元素；移除重复元素；最长无重复字符的子串；\n\n<!-- mroe -->\n\n# Two Sum\n\nGiven an array of integers, return **indices** of the two numbers such that they add up to a specific target. You may assume that each input would have **exactly** one solution, and you may not use the *same* element twice.\n\n**Example:**\n\n```markdown\nGiven nums = [2,7,11,15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0,1].\n```\n\n----\n\n## Solution\n\n### Approach 1: Brute Force\n\nLoop through each element *x* and find if there is another value that equals to *target - x*.\n\n```java\npublic int[] twoSum(int[] nums, int target) {\n    for (int i = 0; i < nums.length; i++) {\n        for (int j = i + 1; j < nums.length; j++) {\n            if (nums[j] == target - nums[i]) {\n                return new int[] { i, j };\n            }\n        }\n    }\n    throw new IllegalArgumentException(\"No two sum solution\");\n}\n```\n\n#### Complexity Analysis\n\n- Time complexity: O(n^2)\n\n- Space complexity: O(1)\n\n  复杂度其实是2n，n前的常数相比幂来说可以忽略不记。。。\n\n\n### Approach 2:  Two-pass Hash Table\n\nWe reduce the look up time from *O(n)* to *O(1)* by trading space for speed. A hash table is built exactly for this purpose, it supports tast look up in *near* constant time.(\"near\": if a collision occurred, a look up could degenerate to *O(n)* time.).\n\nA simple implementation uses two iterations. In the first iteration, we add each element's value and tis index to the table. Then, in the second iteration we check if each element's complement(*target - nums[i]*) exists in the table. Beware that the complement must not be *nums[i]* itself!\n\n```java\npublic int[] twoSum(int[] nums, int target) {\n    Map<Integer, Integer> map = new HashMap<>();\n    for (int i = 0; i < nums.length; i++) {\n        map.put(nums[i], i);\n    }\n    for (int i = 0; i < nums.length; i++) {\n        int complement = target - nums[i];\n        if (map.containsKey(complement) && map.get(complement) != i) {\n            return new int[] { i, map.get(complement) };\n        }\n    }\n    throw new IllegalArgumentException(\"No two sum solution\");\n}\n```\n\n#### Complexity Analysis:\n\n- Time complexity: *O(n)*. Traverse the list containing *n* elements exactly twice. Since the hash table refuces the look up time to *O(1)*, the time complexity is *O(n)*.\n- Space complexity: *O(n)*. The extra space required depends on the number of items stored in the hash table, which stores exactly *n* elements.\n\n### Approach 3: One-pass Hash Table\n\nWhile we iterate and inserting elements into the table, we also look back to check if current element's complement already exists in the table. If it exists, we have found a solution and return immediately.\n\n```java\npublic int[] twoSum(int[] nums, int target) {\n    Map<Integer, Integer> map = new HashMap<>();\n    for (int i = 0; i < nums.length; i++) {\n        int complement = target - nums[i];\n        if (map.containsKey(complement)) {\n            return new int[] { map.get(complement), i };\n        }\n        map.put(nums[i], i);\n    }\n    throw new IllegalArgumentException(\"No two sum solution\");\n}\n```\n\n#### Complexity Analysis:\n\n- Time Complexity: *O(n)*.\n- Space complexity: *O(n)*.\n\n----\n\n----\n\n# 3Sum\n\nGiven an array `nums` of  _n_ integers, are there elements _a_, _b_, _c_ in `nums` suh that _a+b+c=0_? Find all unique triplets in the array which gives the sum of zero.\n\nExample:\n\n```markdown\nGiven array nums = [-1, 0, 1, 2, -1, -4],\n\nA solution set is:\n[\n\t[-1, 0, 1],\n\t[-1, -1, 2]\n]\n```\n\n## Solution\n\n遍历前`nums.length-2`个元素，每个元素对应的目标为`-nums[i]`，再用双向求和的方式找出符目标的两个元素，与`nums[i]` 一同放入列表。\n\n```java\npublic static List<List<Integer>> threeSum(int[] num) {\n    Arrays.sort(num);\n    List<List<Integer>> res = new LinkedList<>();\n\n    for (int i = 0; i < num.length - 2; i++) {\n        if (i == 0 || num[i] != num[i - 1]) {\n            // lo = i + 1 因为sum = - num[i], 求的是符合sum的，num[i]中i已经被占用了\n            int lo = i + 1, hi = num.length - 1, sum = -num[i];\n            // a standard bi-directional 2Sum sweep\n            while (lo < hi) {\n                if (num[lo] + num[hi] == sum) {\n                    res.add(Arrays.asList(num[i], num[lo], num[hi]));\n                    // 目前低位和下一个低位相同的话，继续next\n                    while (lo < hi && num[lo] == num[lo + 1]) {\n                        lo++;\n                    }\n                    // 目前高位和下一个高位相同的话，next\n                    while (lo < hi && num[hi] == num[hi - 1]) {\n                        hi--;\n                    }\n                    // 为什么同时减，因为不允许放进重复的值\n                    lo++;\n                    hi--;\n                } else if (num[lo] + num[hi] < sum) {\n                    lo++;\n                } else {\n                    hi--;\n                }\n            }\n        }\n    }\n    return res;\n}\n```\n\n\n\n# Remove Element\n\nGiven an array *nums* and a value *val*, remove all instances of that value `in-place` and return the new length.\n\nDo not allocate extra space for another array, you must do this by **modify the input array** `in-place` with O(1) extra memory\n\n## Hints\n\n1. Try two pointers\n2. Did you use the fact that the order of elements can be changed?\n3. What happens when the elements to remove are rare?\n\n---\n\n## Solution\n\n#### Approach 1: Two pointers\n\n#### Intuition:\n\nKeep two pointers *i* and *j*, where *i* is the slow-runner while *j* is the fast-runner.\n\n#### Algorithm\n\nWhen *nums[j]* equals to the given value, skip this element by incrementing *j*. As long as *nums[j] != val*, we copy *nums[j]* to *nums[i]* and increment both indexes at the same time. Repeat the process until *j* reaches the end of the array and the new length is *i*.\n\n```java\npublic int removeElement(int[] nums, int val){\n    int i = 0;\n    for(int j = 0; j < nums.length; j++){\n        if(nums[j] != val){\n            nums[i] = nums[j];\n            i++;\n        }\n    }\n    return i;\n}\n```\n\n\n\n#### Complexity anaylysis\n\n- Time complexity: O(n)\n- Space complexity: O(1)\n\n\n\n### Approach 2: Two Pointers-when elements to remove are rare\n\n#### Intuition\n\nConsider cases where the array contains few elements to remove. For example, *nums = [1,2,3,4]*, val = 4. The previous algorithm will do unnecessary copy operation of the first four elements. Another example is *nums=[4,1,2,3,5]*, val =4. It seems unnecessary to move elements [1,2,3,5] one step left as the problem description mentions that the order of elements could be changed.\n\n#### Algorithm\n\nWhen we encounter *nums[i]=val*, we can **swap the current element out** with the last element and dispose the last one. The essentially reduces the array's size by 1.\n\nNote that the last element that was swapped in could be the value you want to remove itself. But don't worry, in the next iteration we will still check this element.\n\n```java\npublic int removeElement(int[] nums, int val){\n    int i = 0;\n    int n = nums.length;\n    while(i < n){\n        if(nums[i] == val){\n            nums[i] = nums[n - 1];\n            n--; // reduce array size by one\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\n```\n\n#### Complexity analysis\n\n- Time complexity: O(n)\n- Space complexity: O(1)\n\n---\n\n---\n\n\n\n# Remove Duplicates from Sorted Array\n\nGiven a sorted array *nums*, remove the duplicates **in-place** such that each element appear only *once* and return the new length.\n\nDo not allocate extra space for another array.\n\n### Clarification:\n\nConfused why the returned value is an integer but your answer is an array?\n\nNote that the input array is passed in by **reference**, which means modification to the input array will be known to the caller as well.\n\nApproach 1: Two Pointers\n\n#### Algorithm\n\n**Since the array is already sorted**, we can keep two pointers *i* and *j*, where *i* is the slow-runner while *j* is the fast-runner. As long as *nums[i] = nums[j]*, we increment *j* to skip the duplicate.\n\nWhen we encounter *nums[i] != nums[i]*, the duplicate run has ended so we must copy its value to *nums[i+j]*. *i* is then incremented and we repeat the same process again until *j* reaches the end of array.\n\n```java\npublic int removeDuplicates(int[] nums) {\n    if (nums.length == 0) return 0;\n    int i = 0;\n    for (int j = 1; j < nums.length; j++) {\n        if (nums[j] != nums[i]) {\n            i++;\n            nums[i] = nums[j];\n        }\n    }\n    return i + 1;\n}\n```\n\n\n\n# Longest Common Prefix\n\nWrite a function to find the longest common prefix string  amongst an array of strings. If there is no common prefix, return an empty string`\"\"`.\n\n## Solution\n\n### Approach 1: Horizontal scanning\n\n![image.png](https://i.loli.net/2020/02/01/zmUXiwkoG7Dgq8R.png)\n\n```java\npublic String longestCommonPrefix(String[] strs) {\n    if (strs.length == 0) {\n        return \"\";\n    }\n    String prefix = strs[0];\n    for (int i = 1; i < strs.length; i++) {\n        while (strs[i].indexOf(prefix) != 0) {\n            prefix = prefix.substring(0, prefix.length() - 1);\n            if (prefix.isEmpty()) {\n                return \"\";\n            }\n        }\n    }\n    return prefix;\n}\n```\n\n#### Complexity Analysis\n\n- Time Complexity: *O(S)*, where *S* is the sum of all characters in all strings.\n\n  In the worst case  all *n* strings are the same. The algorithm compares the string **S1** with the other strings \\[S2...Sn]. There are *S* character comparisons, where *S* is the sum of all characters in the input array.\n\n- Space complexity: *O(1)*. We only used constant extra space.\n\n### Approach 2: Vertical scanning\n\nImagine a very shot string is at the end of the array. The approach will still do *S* comparisons. One way to optimize this case is to do vertical scanning. We compare characters from top to bottom on the same column(same character index of the strings) before moving on to the next column.\n\n```java\nprivate String longestCommonPrefix2(String[] strs) {\n    if (strs == null || strs.length == 0) {\n        return \"\";\n    }\n    for (int i = 0; i < strs[0].length(); i++) {\n        char c = strs[0].charAt(i);\n        for (int j = 1; j < strs.length; j++) {\n            if (i == strs[j].length() || strs[j].charAt(i) != c) {\n                return strs[0].substring(0, i);\n            }\n        }\n    }\n    return strs[0];\n}\n```\n\n#### Complexity Analysis\n\n- Time complexity: *O(S)*, where *S* is the sum of all characters in all strings. In the worst case there will be *n* equal strings with length *m* and the algorithm perform *S* = *m x n* character comparisons. Even though the worst case is still the same as *Approach 1*, in the best case there are at most *n x minLen* comparisons where *minLen* is the length of the shortest string in the array.\n- Space complexity: *O(1)*. We only used constant extra space.\n\n### Approach 3: Divide and conquer\n\n![image.png](https://i.loli.net/2020/02/01/MzcPpRCeEYbH8nx.png)\n\n...\n\n### Approach 4: Binary search\n\n# Longest Substring Without Repeating Characters\n\n## approach 1: brute force\n\n```java\npublic class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        int n = s.length();\n        int ans = 0;\n        for (int i = 0; i < n; i++)\n            for (int j = i + 1; j <= n; j++)\n                if (allUnique(s, i, j)) ans = Math.max(ans, j - i);\n        return ans;\n    }\n\n    public boolean allUnique(String s, int start, int end) {\n        Set<Character> set = new HashSet<>();\n        for (int i = start; i < end; i++) {\n            Character ch = s.charAt(i);\n            if (set.contains(ch)) return false;\n            set.add(ch);\n        }\n        return true;\n    }\n}\n```\n\n### time complexity: O(n^3)\n\n## approach 2: Sliding Window\n\n```java\npublic class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        int n = s.length();\n        Set<Character> set = new HashSet<>();\n        int ans = 0, i = 0, j = 0;\n        while (i < n && j < n) {\n            // try to extend the range [i, j]\n            if (!set.contains(s.charAt(j))){\n                set.add(s.charAt(j++));\n                ans = Math.max(ans, j - i);\n            }\n            else {\n                set.remove(s.charAt(i++));\n            }\n        }\n        return ans;\n    }\n}\n```\n\ntime complexity: O(2n)\n\n## approach 3: Sliding Window Optimized\n\n### Using HashMap\n\n```java\npublic class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        int n = s.length(), ans = 0;\n        Map<Character, Integer> map = new HashMap<>(); // current index of character\n        // try to extend the range [i, j]\n        for (int j = 0, i = 0; j < n; j++) {\n            if (map.containsKey(s.charAt(j))) {\n                i = Math.max(map.get(s.charAt(j)), i);\n            }\n            ans = Math.max(ans, j - i + 1);\n            map.put(s.charAt(j), j + 1);\n        }\n        return ans;\n    }\n}\n```\n\n### Using ASCII 128\n\n```java\npublic class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        int n = s.length(), ans = 0;\n        int[] index = new int[128]; // current index of character\n        // try to extend the range [i, j]\n        for (int j = 0, i = 0; j < n; j++) {\n            i = Math.max(index[s.charAt(j)], i);\n            ans = Math.max(ans, j - i + 1);\n            index[s.charAt(j)] = j + 1;\n        }\n        return ans;\n    }\n}\n```\n\ntime complexity: O(n)\n\n","source":"_posts/leecode.md","raw":"---\ntitle: leecode\ndate: 2019-12-10 13:13:28\ncategories: Leecode\ntags: leecode_easy\n---\n\n求两数之和是否为目标值；移除元素；移除重复元素；最长无重复字符的子串；\n\n<!-- mroe -->\n\n# Two Sum\n\nGiven an array of integers, return **indices** of the two numbers such that they add up to a specific target. You may assume that each input would have **exactly** one solution, and you may not use the *same* element twice.\n\n**Example:**\n\n```markdown\nGiven nums = [2,7,11,15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0,1].\n```\n\n----\n\n## Solution\n\n### Approach 1: Brute Force\n\nLoop through each element *x* and find if there is another value that equals to *target - x*.\n\n```java\npublic int[] twoSum(int[] nums, int target) {\n    for (int i = 0; i < nums.length; i++) {\n        for (int j = i + 1; j < nums.length; j++) {\n            if (nums[j] == target - nums[i]) {\n                return new int[] { i, j };\n            }\n        }\n    }\n    throw new IllegalArgumentException(\"No two sum solution\");\n}\n```\n\n#### Complexity Analysis\n\n- Time complexity: O(n^2)\n\n- Space complexity: O(1)\n\n  复杂度其实是2n，n前的常数相比幂来说可以忽略不记。。。\n\n\n### Approach 2:  Two-pass Hash Table\n\nWe reduce the look up time from *O(n)* to *O(1)* by trading space for speed. A hash table is built exactly for this purpose, it supports tast look up in *near* constant time.(\"near\": if a collision occurred, a look up could degenerate to *O(n)* time.).\n\nA simple implementation uses two iterations. In the first iteration, we add each element's value and tis index to the table. Then, in the second iteration we check if each element's complement(*target - nums[i]*) exists in the table. Beware that the complement must not be *nums[i]* itself!\n\n```java\npublic int[] twoSum(int[] nums, int target) {\n    Map<Integer, Integer> map = new HashMap<>();\n    for (int i = 0; i < nums.length; i++) {\n        map.put(nums[i], i);\n    }\n    for (int i = 0; i < nums.length; i++) {\n        int complement = target - nums[i];\n        if (map.containsKey(complement) && map.get(complement) != i) {\n            return new int[] { i, map.get(complement) };\n        }\n    }\n    throw new IllegalArgumentException(\"No two sum solution\");\n}\n```\n\n#### Complexity Analysis:\n\n- Time complexity: *O(n)*. Traverse the list containing *n* elements exactly twice. Since the hash table refuces the look up time to *O(1)*, the time complexity is *O(n)*.\n- Space complexity: *O(n)*. The extra space required depends on the number of items stored in the hash table, which stores exactly *n* elements.\n\n### Approach 3: One-pass Hash Table\n\nWhile we iterate and inserting elements into the table, we also look back to check if current element's complement already exists in the table. If it exists, we have found a solution and return immediately.\n\n```java\npublic int[] twoSum(int[] nums, int target) {\n    Map<Integer, Integer> map = new HashMap<>();\n    for (int i = 0; i < nums.length; i++) {\n        int complement = target - nums[i];\n        if (map.containsKey(complement)) {\n            return new int[] { map.get(complement), i };\n        }\n        map.put(nums[i], i);\n    }\n    throw new IllegalArgumentException(\"No two sum solution\");\n}\n```\n\n#### Complexity Analysis:\n\n- Time Complexity: *O(n)*.\n- Space complexity: *O(n)*.\n\n----\n\n----\n\n# 3Sum\n\nGiven an array `nums` of  _n_ integers, are there elements _a_, _b_, _c_ in `nums` suh that _a+b+c=0_? Find all unique triplets in the array which gives the sum of zero.\n\nExample:\n\n```markdown\nGiven array nums = [-1, 0, 1, 2, -1, -4],\n\nA solution set is:\n[\n\t[-1, 0, 1],\n\t[-1, -1, 2]\n]\n```\n\n## Solution\n\n遍历前`nums.length-2`个元素，每个元素对应的目标为`-nums[i]`，再用双向求和的方式找出符目标的两个元素，与`nums[i]` 一同放入列表。\n\n```java\npublic static List<List<Integer>> threeSum(int[] num) {\n    Arrays.sort(num);\n    List<List<Integer>> res = new LinkedList<>();\n\n    for (int i = 0; i < num.length - 2; i++) {\n        if (i == 0 || num[i] != num[i - 1]) {\n            // lo = i + 1 因为sum = - num[i], 求的是符合sum的，num[i]中i已经被占用了\n            int lo = i + 1, hi = num.length - 1, sum = -num[i];\n            // a standard bi-directional 2Sum sweep\n            while (lo < hi) {\n                if (num[lo] + num[hi] == sum) {\n                    res.add(Arrays.asList(num[i], num[lo], num[hi]));\n                    // 目前低位和下一个低位相同的话，继续next\n                    while (lo < hi && num[lo] == num[lo + 1]) {\n                        lo++;\n                    }\n                    // 目前高位和下一个高位相同的话，next\n                    while (lo < hi && num[hi] == num[hi - 1]) {\n                        hi--;\n                    }\n                    // 为什么同时减，因为不允许放进重复的值\n                    lo++;\n                    hi--;\n                } else if (num[lo] + num[hi] < sum) {\n                    lo++;\n                } else {\n                    hi--;\n                }\n            }\n        }\n    }\n    return res;\n}\n```\n\n\n\n# Remove Element\n\nGiven an array *nums* and a value *val*, remove all instances of that value `in-place` and return the new length.\n\nDo not allocate extra space for another array, you must do this by **modify the input array** `in-place` with O(1) extra memory\n\n## Hints\n\n1. Try two pointers\n2. Did you use the fact that the order of elements can be changed?\n3. What happens when the elements to remove are rare?\n\n---\n\n## Solution\n\n#### Approach 1: Two pointers\n\n#### Intuition:\n\nKeep two pointers *i* and *j*, where *i* is the slow-runner while *j* is the fast-runner.\n\n#### Algorithm\n\nWhen *nums[j]* equals to the given value, skip this element by incrementing *j*. As long as *nums[j] != val*, we copy *nums[j]* to *nums[i]* and increment both indexes at the same time. Repeat the process until *j* reaches the end of the array and the new length is *i*.\n\n```java\npublic int removeElement(int[] nums, int val){\n    int i = 0;\n    for(int j = 0; j < nums.length; j++){\n        if(nums[j] != val){\n            nums[i] = nums[j];\n            i++;\n        }\n    }\n    return i;\n}\n```\n\n\n\n#### Complexity anaylysis\n\n- Time complexity: O(n)\n- Space complexity: O(1)\n\n\n\n### Approach 2: Two Pointers-when elements to remove are rare\n\n#### Intuition\n\nConsider cases where the array contains few elements to remove. For example, *nums = [1,2,3,4]*, val = 4. The previous algorithm will do unnecessary copy operation of the first four elements. Another example is *nums=[4,1,2,3,5]*, val =4. It seems unnecessary to move elements [1,2,3,5] one step left as the problem description mentions that the order of elements could be changed.\n\n#### Algorithm\n\nWhen we encounter *nums[i]=val*, we can **swap the current element out** with the last element and dispose the last one. The essentially reduces the array's size by 1.\n\nNote that the last element that was swapped in could be the value you want to remove itself. But don't worry, in the next iteration we will still check this element.\n\n```java\npublic int removeElement(int[] nums, int val){\n    int i = 0;\n    int n = nums.length;\n    while(i < n){\n        if(nums[i] == val){\n            nums[i] = nums[n - 1];\n            n--; // reduce array size by one\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\n```\n\n#### Complexity analysis\n\n- Time complexity: O(n)\n- Space complexity: O(1)\n\n---\n\n---\n\n\n\n# Remove Duplicates from Sorted Array\n\nGiven a sorted array *nums*, remove the duplicates **in-place** such that each element appear only *once* and return the new length.\n\nDo not allocate extra space for another array.\n\n### Clarification:\n\nConfused why the returned value is an integer but your answer is an array?\n\nNote that the input array is passed in by **reference**, which means modification to the input array will be known to the caller as well.\n\nApproach 1: Two Pointers\n\n#### Algorithm\n\n**Since the array is already sorted**, we can keep two pointers *i* and *j*, where *i* is the slow-runner while *j* is the fast-runner. As long as *nums[i] = nums[j]*, we increment *j* to skip the duplicate.\n\nWhen we encounter *nums[i] != nums[i]*, the duplicate run has ended so we must copy its value to *nums[i+j]*. *i* is then incremented and we repeat the same process again until *j* reaches the end of array.\n\n```java\npublic int removeDuplicates(int[] nums) {\n    if (nums.length == 0) return 0;\n    int i = 0;\n    for (int j = 1; j < nums.length; j++) {\n        if (nums[j] != nums[i]) {\n            i++;\n            nums[i] = nums[j];\n        }\n    }\n    return i + 1;\n}\n```\n\n\n\n# Longest Common Prefix\n\nWrite a function to find the longest common prefix string  amongst an array of strings. If there is no common prefix, return an empty string`\"\"`.\n\n## Solution\n\n### Approach 1: Horizontal scanning\n\n![image.png](https://i.loli.net/2020/02/01/zmUXiwkoG7Dgq8R.png)\n\n```java\npublic String longestCommonPrefix(String[] strs) {\n    if (strs.length == 0) {\n        return \"\";\n    }\n    String prefix = strs[0];\n    for (int i = 1; i < strs.length; i++) {\n        while (strs[i].indexOf(prefix) != 0) {\n            prefix = prefix.substring(0, prefix.length() - 1);\n            if (prefix.isEmpty()) {\n                return \"\";\n            }\n        }\n    }\n    return prefix;\n}\n```\n\n#### Complexity Analysis\n\n- Time Complexity: *O(S)*, where *S* is the sum of all characters in all strings.\n\n  In the worst case  all *n* strings are the same. The algorithm compares the string **S1** with the other strings \\[S2...Sn]. There are *S* character comparisons, where *S* is the sum of all characters in the input array.\n\n- Space complexity: *O(1)*. We only used constant extra space.\n\n### Approach 2: Vertical scanning\n\nImagine a very shot string is at the end of the array. The approach will still do *S* comparisons. One way to optimize this case is to do vertical scanning. We compare characters from top to bottom on the same column(same character index of the strings) before moving on to the next column.\n\n```java\nprivate String longestCommonPrefix2(String[] strs) {\n    if (strs == null || strs.length == 0) {\n        return \"\";\n    }\n    for (int i = 0; i < strs[0].length(); i++) {\n        char c = strs[0].charAt(i);\n        for (int j = 1; j < strs.length; j++) {\n            if (i == strs[j].length() || strs[j].charAt(i) != c) {\n                return strs[0].substring(0, i);\n            }\n        }\n    }\n    return strs[0];\n}\n```\n\n#### Complexity Analysis\n\n- Time complexity: *O(S)*, where *S* is the sum of all characters in all strings. In the worst case there will be *n* equal strings with length *m* and the algorithm perform *S* = *m x n* character comparisons. Even though the worst case is still the same as *Approach 1*, in the best case there are at most *n x minLen* comparisons where *minLen* is the length of the shortest string in the array.\n- Space complexity: *O(1)*. We only used constant extra space.\n\n### Approach 3: Divide and conquer\n\n![image.png](https://i.loli.net/2020/02/01/MzcPpRCeEYbH8nx.png)\n\n...\n\n### Approach 4: Binary search\n\n# Longest Substring Without Repeating Characters\n\n## approach 1: brute force\n\n```java\npublic class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        int n = s.length();\n        int ans = 0;\n        for (int i = 0; i < n; i++)\n            for (int j = i + 1; j <= n; j++)\n                if (allUnique(s, i, j)) ans = Math.max(ans, j - i);\n        return ans;\n    }\n\n    public boolean allUnique(String s, int start, int end) {\n        Set<Character> set = new HashSet<>();\n        for (int i = start; i < end; i++) {\n            Character ch = s.charAt(i);\n            if (set.contains(ch)) return false;\n            set.add(ch);\n        }\n        return true;\n    }\n}\n```\n\n### time complexity: O(n^3)\n\n## approach 2: Sliding Window\n\n```java\npublic class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        int n = s.length();\n        Set<Character> set = new HashSet<>();\n        int ans = 0, i = 0, j = 0;\n        while (i < n && j < n) {\n            // try to extend the range [i, j]\n            if (!set.contains(s.charAt(j))){\n                set.add(s.charAt(j++));\n                ans = Math.max(ans, j - i);\n            }\n            else {\n                set.remove(s.charAt(i++));\n            }\n        }\n        return ans;\n    }\n}\n```\n\ntime complexity: O(2n)\n\n## approach 3: Sliding Window Optimized\n\n### Using HashMap\n\n```java\npublic class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        int n = s.length(), ans = 0;\n        Map<Character, Integer> map = new HashMap<>(); // current index of character\n        // try to extend the range [i, j]\n        for (int j = 0, i = 0; j < n; j++) {\n            if (map.containsKey(s.charAt(j))) {\n                i = Math.max(map.get(s.charAt(j)), i);\n            }\n            ans = Math.max(ans, j - i + 1);\n            map.put(s.charAt(j), j + 1);\n        }\n        return ans;\n    }\n}\n```\n\n### Using ASCII 128\n\n```java\npublic class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        int n = s.length(), ans = 0;\n        int[] index = new int[128]; // current index of character\n        // try to extend the range [i, j]\n        for (int j = 0, i = 0; j < n; j++) {\n            i = Math.max(index[s.charAt(j)], i);\n            ans = Math.max(ans, j - i + 1);\n            index[s.charAt(j)] = j + 1;\n        }\n        return ans;\n    }\n}\n```\n\ntime complexity: O(n)\n\n","slug":"leecode","published":1,"updated":"2020-08-15T11:23:24.014Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgcw0025byihgd5s4pwk","content":"<p>求两数之和是否为目标值；移除元素；移除重复元素；最长无重复字符的子串；</p>\n<!-- mroe -->\n\n<h1 id=\"Two-Sum\"><a href=\"#Two-Sum\" class=\"headerlink\" title=\"Two Sum\"></a>Two Sum</h1><p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target. You may assume that each input would have <strong>exactly</strong> one solution, and you may not use the <em>same</em> element twice.</p>\n<p><strong>Example:</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Given nums = [2,7,11,15], target = 9,</span><br><span class=\"line\"></span><br><span class=\"line\">Because nums[0] + nums[1] = 2 + 7 = 9,</span><br><span class=\"line\">return [0,1].</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><h3 id=\"Approach-1-Brute-Force\"><a href=\"#Approach-1-Brute-Force\" class=\"headerlink\" title=\"Approach 1: Brute Force\"></a>Approach 1: Brute Force</h3><p>Loop through each element <em>x</em> and find if there is another value that equals to <em>target - x</em>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[j] == target - nums[i]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; i, j &#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;No two sum solution&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Complexity-Analysis\"><a href=\"#Complexity-Analysis\" class=\"headerlink\" title=\"Complexity Analysis\"></a>Complexity Analysis</h4><ul>\n<li><p>Time complexity: O(n^2)</p>\n</li>\n<li><p>Space complexity: O(1)</p>\n<p>复杂度其实是2n，n前的常数相比幂来说可以忽略不记。。。</p>\n</li>\n</ul>\n<h3 id=\"Approach-2-Two-pass-Hash-Table\"><a href=\"#Approach-2-Two-pass-Hash-Table\" class=\"headerlink\" title=\"Approach 2:  Two-pass Hash Table\"></a>Approach 2:  Two-pass Hash Table</h3><p>We reduce the look up time from <em>O(n)</em> to <em>O(1)</em> by trading space for speed. A hash table is built exactly for this purpose, it supports tast look up in <em>near</em> constant time.(“near”: if a collision occurred, a look up could degenerate to <em>O(n)</em> time.).</p>\n<p>A simple implementation uses two iterations. In the first iteration, we add each element’s value and tis index to the table. Then, in the second iteration we check if each element’s complement(<em>target - nums[i]</em>) exists in the table. Beware that the complement must not be <em>nums[i]</em> itself!</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">    Map&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        map.put(nums[i], i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> complement = target - nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map.containsKey(complement) &amp;&amp; map.get(complement) != i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; i, map.get(complement) &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;No two sum solution&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Complexity-Analysis-1\"><a href=\"#Complexity-Analysis-1\" class=\"headerlink\" title=\"Complexity Analysis:\"></a>Complexity Analysis:</h4><ul>\n<li>Time complexity: <em>O(n)</em>. Traverse the list containing <em>n</em> elements exactly twice. Since the hash table refuces the look up time to <em>O(1)</em>, the time complexity is <em>O(n)</em>.</li>\n<li>Space complexity: <em>O(n)</em>. The extra space required depends on the number of items stored in the hash table, which stores exactly <em>n</em> elements.</li>\n</ul>\n<h3 id=\"Approach-3-One-pass-Hash-Table\"><a href=\"#Approach-3-One-pass-Hash-Table\" class=\"headerlink\" title=\"Approach 3: One-pass Hash Table\"></a>Approach 3: One-pass Hash Table</h3><p>While we iterate and inserting elements into the table, we also look back to check if current element’s complement already exists in the table. If it exists, we have found a solution and return immediately.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">    Map&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> complement = target - nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map.containsKey(complement)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; map.get(complement), i &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        map.put(nums[i], i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;No two sum solution&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Complexity-Analysis-2\"><a href=\"#Complexity-Analysis-2\" class=\"headerlink\" title=\"Complexity Analysis:\"></a>Complexity Analysis:</h4><ul>\n<li>Time Complexity: <em>O(n)</em>.</li>\n<li>Space complexity: <em>O(n)</em>.</li>\n</ul>\n<hr>\n<hr>\n<h1 id=\"3Sum\"><a href=\"#3Sum\" class=\"headerlink\" title=\"3Sum\"></a>3Sum</h1><p>Given an array <code>nums</code> of  <em>n</em> integers, are there elements <em>a</em>, <em>b</em>, <em>c</em> in <code>nums</code> suh that <em>a+b+c=0</em>? Find all unique triplets in the array which gives the sum of zero.</p>\n<p>Example:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Given array nums = [-1, 0, 1, 2, -1, -4],</span><br><span class=\"line\"></span><br><span class=\"line\">A solution set is:</span><br><span class=\"line\">[</span><br><span class=\"line\"><span class=\"code\">    [-1, 0, 1],</span></span><br><span class=\"line\"><span class=\"code\">    [-1, -1, 2]</span></span><br><span class=\"line\"><span class=\"code\">]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Solution-1\"><a href=\"#Solution-1\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><p>遍历前<code>nums.length-2</code>个元素，每个元素对应的目标为<code>-nums[i]</code>，再用双向求和的方式找出符目标的两个元素，与<code>nums[i]</code> 一同放入列表。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class=\"keyword\">int</span>[] num) &#123;</span><br><span class=\"line\">    Arrays.sort(num);</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; num.length - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> || num[i] != num[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// lo = i + 1 因为sum = - num[i], 求的是符合sum的，num[i]中i已经被占用了</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> lo = i + <span class=\"number\">1</span>, hi = num.length - <span class=\"number\">1</span>, sum = -num[i];</span><br><span class=\"line\">            <span class=\"comment\">// a standard bi-directional 2Sum sweep</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (lo &lt; hi) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (num[lo] + num[hi] == sum) &#123;</span><br><span class=\"line\">                    res.add(Arrays.asList(num[i], num[lo], num[hi]));</span><br><span class=\"line\">                    <span class=\"comment\">// 目前低位和下一个低位相同的话，继续next</span></span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (lo &lt; hi &amp;&amp; num[lo] == num[lo + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                        lo++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// 目前高位和下一个高位相同的话，next</span></span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (lo &lt; hi &amp;&amp; num[hi] == num[hi - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                        hi--;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// 为什么同时减，因为不允许放进重复的值</span></span><br><span class=\"line\">                    lo++;</span><br><span class=\"line\">                    hi--;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num[lo] + num[hi] &lt; sum) &#123;</span><br><span class=\"line\">                    lo++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    hi--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Remove-Element\"><a href=\"#Remove-Element\" class=\"headerlink\" title=\"Remove Element\"></a>Remove Element</h1><p>Given an array <em>nums</em> and a value <em>val</em>, remove all instances of that value <code>in-place</code> and return the new length.</p>\n<p>Do not allocate extra space for another array, you must do this by <strong>modify the input array</strong> <code>in-place</code> with O(1) extra memory</p>\n<h2 id=\"Hints\"><a href=\"#Hints\" class=\"headerlink\" title=\"Hints\"></a>Hints</h2><ol>\n<li>Try two pointers</li>\n<li>Did you use the fact that the order of elements can be changed?</li>\n<li>What happens when the elements to remove are rare?</li>\n</ol>\n<hr>\n<h2 id=\"Solution-2\"><a href=\"#Solution-2\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><h4 id=\"Approach-1-Two-pointers\"><a href=\"#Approach-1-Two-pointers\" class=\"headerlink\" title=\"Approach 1: Two pointers\"></a>Approach 1: Two pointers</h4><h4 id=\"Intuition\"><a href=\"#Intuition\" class=\"headerlink\" title=\"Intuition:\"></a>Intuition:</h4><p>Keep two pointers <em>i</em> and <em>j</em>, where <em>i</em> is the slow-runner while <em>j</em> is the fast-runner.</p>\n<h4 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h4><p>When <em>nums[j]</em> equals to the given value, skip this element by incrementing <em>j</em>. As long as <em>nums[j] != val</em>, we copy <em>nums[j]</em> to <em>nums[i]</em> and increment both indexes at the same time. Repeat the process until <em>j</em> reaches the end of the array and the new length is <em>i</em>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">removeElement</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; nums.length; j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[j] != val)&#123;</span><br><span class=\"line\">            nums[i] = nums[j];</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Complexity-anaylysis\"><a href=\"#Complexity-anaylysis\" class=\"headerlink\" title=\"Complexity anaylysis\"></a>Complexity anaylysis</h4><ul>\n<li>Time complexity: O(n)</li>\n<li>Space complexity: O(1)</li>\n</ul>\n<h3 id=\"Approach-2-Two-Pointers-when-elements-to-remove-are-rare\"><a href=\"#Approach-2-Two-Pointers-when-elements-to-remove-are-rare\" class=\"headerlink\" title=\"Approach 2: Two Pointers-when elements to remove are rare\"></a>Approach 2: Two Pointers-when elements to remove are rare</h3><h4 id=\"Intuition-1\"><a href=\"#Intuition-1\" class=\"headerlink\" title=\"Intuition\"></a>Intuition</h4><p>Consider cases where the array contains few elements to remove. For example, <em>nums = [1,2,3,4]</em>, val = 4. The previous algorithm will do unnecessary copy operation of the first four elements. Another example is <em>nums=[4,1,2,3,5]</em>, val =4. It seems unnecessary to move elements [1,2,3,5] one step left as the problem description mentions that the order of elements could be changed.</p>\n<h4 id=\"Algorithm-1\"><a href=\"#Algorithm-1\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h4><p>When we encounter <em>nums[i]=val</em>, we can <strong>swap the current element out</strong> with the last element and dispose the last one. The essentially reduces the array’s size by 1.</p>\n<p>Note that the last element that was swapped in could be the value you want to remove itself. But don’t worry, in the next iteration we will still check this element.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">removeElement</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i] == val)&#123;</span><br><span class=\"line\">            nums[i] = nums[n - <span class=\"number\">1</span>];</span><br><span class=\"line\">            n--; <span class=\"comment\">// reduce array size by one</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Complexity-analysis\"><a href=\"#Complexity-analysis\" class=\"headerlink\" title=\"Complexity analysis\"></a>Complexity analysis</h4><ul>\n<li>Time complexity: O(n)</li>\n<li>Space complexity: O(1)</li>\n</ul>\n<hr>\n<hr>\n<h1 id=\"Remove-Duplicates-from-Sorted-Array\"><a href=\"#Remove-Duplicates-from-Sorted-Array\" class=\"headerlink\" title=\"Remove Duplicates from Sorted Array\"></a>Remove Duplicates from Sorted Array</h1><p>Given a sorted array <em>nums</em>, remove the duplicates <strong>in-place</strong> such that each element appear only <em>once</em> and return the new length.</p>\n<p>Do not allocate extra space for another array.</p>\n<h3 id=\"Clarification\"><a href=\"#Clarification\" class=\"headerlink\" title=\"Clarification:\"></a>Clarification:</h3><p>Confused why the returned value is an integer but your answer is an array?</p>\n<p>Note that the input array is passed in by <strong>reference</strong>, which means modification to the input array will be known to the caller as well.</p>\n<p>Approach 1: Two Pointers</p>\n<h4 id=\"Algorithm-2\"><a href=\"#Algorithm-2\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h4><p><strong>Since the array is already sorted</strong>, we can keep two pointers <em>i</em> and <em>j</em>, where <em>i</em> is the slow-runner while <em>j</em> is the fast-runner. As long as <em>nums[i] = nums[j]</em>, we increment <em>j</em> to skip the duplicate.</p>\n<p>When we encounter <em>nums[i] != nums[i]</em>, the duplicate run has ended so we must copy its value to <em>nums[i+j]</em>. <em>i</em> is then incremented and we repeat the same process again until <em>j</em> reaches the end of array.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">removeDuplicates</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[j] != nums[i]) &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            nums[i] = nums[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Longest-Common-Prefix\"><a href=\"#Longest-Common-Prefix\" class=\"headerlink\" title=\"Longest Common Prefix\"></a>Longest Common Prefix</h1><p>Write a function to find the longest common prefix string  amongst an array of strings. If there is no common prefix, return an empty string<code>&quot;&quot;</code>.</p>\n<h2 id=\"Solution-3\"><a href=\"#Solution-3\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><h3 id=\"Approach-1-Horizontal-scanning\"><a href=\"#Approach-1-Horizontal-scanning\" class=\"headerlink\" title=\"Approach 1: Horizontal scanning\"></a>Approach 1: Horizontal scanning</h3><p><img src=\"https://i.loli.net/2020/02/01/zmUXiwkoG7Dgq8R.png\" alt=\"image.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">longestCommonPrefix</span><span class=\"params\">(String[] strs)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (strs.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    String prefix = strs[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; strs.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (strs[i].indexOf(prefix) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            prefix = prefix.substring(<span class=\"number\">0</span>, prefix.length() - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prefix.isEmpty()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> prefix;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Complexity-Analysis-3\"><a href=\"#Complexity-Analysis-3\" class=\"headerlink\" title=\"Complexity Analysis\"></a>Complexity Analysis</h4><ul>\n<li><p>Time Complexity: <em>O(S)</em>, where <em>S</em> is the sum of all characters in all strings.</p>\n<p>In the worst case  all <em>n</em> strings are the same. The algorithm compares the string <strong>S1</strong> with the other strings [S2…Sn]. There are <em>S</em> character comparisons, where <em>S</em> is the sum of all characters in the input array.</p>\n</li>\n<li><p>Space complexity: <em>O(1)</em>. We only used constant extra space.</p>\n</li>\n</ul>\n<h3 id=\"Approach-2-Vertical-scanning\"><a href=\"#Approach-2-Vertical-scanning\" class=\"headerlink\" title=\"Approach 2: Vertical scanning\"></a>Approach 2: Vertical scanning</h3><p>Imagine a very shot string is at the end of the array. The approach will still do <em>S</em> comparisons. One way to optimize this case is to do vertical scanning. We compare characters from top to bottom on the same column(same character index of the strings) before moving on to the next column.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">longestCommonPrefix2</span><span class=\"params\">(String[] strs)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (strs == <span class=\"keyword\">null</span> || strs.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; strs[<span class=\"number\">0</span>].length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> c = strs[<span class=\"number\">0</span>].charAt(i);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; strs.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == strs[j].length() || strs[j].charAt(i) != c) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> strs[<span class=\"number\">0</span>].substring(<span class=\"number\">0</span>, i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> strs[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Complexity-Analysis-4\"><a href=\"#Complexity-Analysis-4\" class=\"headerlink\" title=\"Complexity Analysis\"></a>Complexity Analysis</h4><ul>\n<li>Time complexity: <em>O(S)</em>, where <em>S</em> is the sum of all characters in all strings. In the worst case there will be <em>n</em> equal strings with length <em>m</em> and the algorithm perform <em>S</em> = <em>m x n</em> character comparisons. Even though the worst case is still the same as <em>Approach 1</em>, in the best case there are at most <em>n x minLen</em> comparisons where <em>minLen</em> is the length of the shortest string in the array.</li>\n<li>Space complexity: <em>O(1)</em>. We only used constant extra space.</li>\n</ul>\n<h3 id=\"Approach-3-Divide-and-conquer\"><a href=\"#Approach-3-Divide-and-conquer\" class=\"headerlink\" title=\"Approach 3: Divide and conquer\"></a>Approach 3: Divide and conquer</h3><p><img src=\"https://i.loli.net/2020/02/01/MzcPpRCeEYbH8nx.png\" alt=\"image.png\"></p>\n<p>…</p>\n<h3 id=\"Approach-4-Binary-search\"><a href=\"#Approach-4-Binary-search\" class=\"headerlink\" title=\"Approach 4: Binary search\"></a>Approach 4: Binary search</h3><h1 id=\"Longest-Substring-Without-Repeating-Characters\"><a href=\"#Longest-Substring-Without-Repeating-Characters\" class=\"headerlink\" title=\"Longest Substring Without Repeating Characters\"></a>Longest Substring Without Repeating Characters</h1><h2 id=\"approach-1-brute-force\"><a href=\"#approach-1-brute-force\" class=\"headerlink\" title=\"approach 1: brute force\"></a>approach 1: brute force</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = s.length();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (allUnique(s, i, j)) ans = Math.max(ans, j - i);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">allUnique</span><span class=\"params\">(String s, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">        Set&lt;Character&gt; set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt; end; i++) &#123;</span><br><span class=\"line\">            Character ch = s.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (set.contains(ch)) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            set.add(ch);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"time-complexity-O-n-3\"><a href=\"#time-complexity-O-n-3\" class=\"headerlink\" title=\"time complexity: O(n^3)\"></a>time complexity: O(n^3)</h3><h2 id=\"approach-2-Sliding-Window\"><a href=\"#approach-2-Sliding-Window\" class=\"headerlink\" title=\"approach 2: Sliding Window\"></a>approach 2: Sliding Window</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = s.length();</span><br><span class=\"line\">        Set&lt;Character&gt; set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>, i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; n &amp;&amp; j &lt; n) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// try to extend the range [i, j]</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!set.contains(s.charAt(j)))&#123;</span><br><span class=\"line\">                set.add(s.charAt(j++));</span><br><span class=\"line\">                ans = Math.max(ans, j - i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                set.remove(s.charAt(i++));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>time complexity: O(2n)</p>\n<h2 id=\"approach-3-Sliding-Window-Optimized\"><a href=\"#approach-3-Sliding-Window-Optimized\" class=\"headerlink\" title=\"approach 3: Sliding Window Optimized\"></a>approach 3: Sliding Window Optimized</h2><h3 id=\"Using-HashMap\"><a href=\"#Using-HashMap\" class=\"headerlink\" title=\"Using HashMap\"></a>Using HashMap</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = s.length(), ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        Map&lt;Character, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;(); <span class=\"comment\">// current index of character</span></span><br><span class=\"line\">        <span class=\"comment\">// try to extend the range [i, j]</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>, i = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map.containsKey(s.charAt(j))) &#123;</span><br><span class=\"line\">                i = Math.max(map.get(s.charAt(j)), i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans = Math.max(ans, j - i + <span class=\"number\">1</span>);</span><br><span class=\"line\">            map.put(s.charAt(j), j + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Using-ASCII-128\"><a href=\"#Using-ASCII-128\" class=\"headerlink\" title=\"Using ASCII 128\"></a>Using ASCII 128</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = s.length(), ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] index = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">128</span>]; <span class=\"comment\">// current index of character</span></span><br><span class=\"line\">        <span class=\"comment\">// try to extend the range [i, j]</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>, i = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            i = Math.max(index[s.charAt(j)], i);</span><br><span class=\"line\">            ans = Math.max(ans, j - i + <span class=\"number\">1</span>);</span><br><span class=\"line\">            index[s.charAt(j)] = j + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>time complexity: O(n)</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"","more":"<p>求两数之和是否为目标值；移除元素；移除重复元素；最长无重复字符的子串；</p>\n<!-- mroe -->\n\n<h1 id=\"Two-Sum\"><a href=\"#Two-Sum\" class=\"headerlink\" title=\"Two Sum\"></a>Two Sum</h1><p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target. You may assume that each input would have <strong>exactly</strong> one solution, and you may not use the <em>same</em> element twice.</p>\n<p><strong>Example:</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Given nums = [2,7,11,15], target = 9,</span><br><span class=\"line\"></span><br><span class=\"line\">Because nums[0] + nums[1] = 2 + 7 = 9,</span><br><span class=\"line\">return [0,1].</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><h3 id=\"Approach-1-Brute-Force\"><a href=\"#Approach-1-Brute-Force\" class=\"headerlink\" title=\"Approach 1: Brute Force\"></a>Approach 1: Brute Force</h3><p>Loop through each element <em>x</em> and find if there is another value that equals to <em>target - x</em>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[j] == target - nums[i]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; i, j &#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;No two sum solution&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Complexity-Analysis\"><a href=\"#Complexity-Analysis\" class=\"headerlink\" title=\"Complexity Analysis\"></a>Complexity Analysis</h4><ul>\n<li><p>Time complexity: O(n^2)</p>\n</li>\n<li><p>Space complexity: O(1)</p>\n<p>复杂度其实是2n，n前的常数相比幂来说可以忽略不记。。。</p>\n</li>\n</ul>\n<h3 id=\"Approach-2-Two-pass-Hash-Table\"><a href=\"#Approach-2-Two-pass-Hash-Table\" class=\"headerlink\" title=\"Approach 2:  Two-pass Hash Table\"></a>Approach 2:  Two-pass Hash Table</h3><p>We reduce the look up time from <em>O(n)</em> to <em>O(1)</em> by trading space for speed. A hash table is built exactly for this purpose, it supports tast look up in <em>near</em> constant time.(“near”: if a collision occurred, a look up could degenerate to <em>O(n)</em> time.).</p>\n<p>A simple implementation uses two iterations. In the first iteration, we add each element’s value and tis index to the table. Then, in the second iteration we check if each element’s complement(<em>target - nums[i]</em>) exists in the table. Beware that the complement must not be <em>nums[i]</em> itself!</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">    Map&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        map.put(nums[i], i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> complement = target - nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map.containsKey(complement) &amp;&amp; map.get(complement) != i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; i, map.get(complement) &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;No two sum solution&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Complexity-Analysis-1\"><a href=\"#Complexity-Analysis-1\" class=\"headerlink\" title=\"Complexity Analysis:\"></a>Complexity Analysis:</h4><ul>\n<li>Time complexity: <em>O(n)</em>. Traverse the list containing <em>n</em> elements exactly twice. Since the hash table refuces the look up time to <em>O(1)</em>, the time complexity is <em>O(n)</em>.</li>\n<li>Space complexity: <em>O(n)</em>. The extra space required depends on the number of items stored in the hash table, which stores exactly <em>n</em> elements.</li>\n</ul>\n<h3 id=\"Approach-3-One-pass-Hash-Table\"><a href=\"#Approach-3-One-pass-Hash-Table\" class=\"headerlink\" title=\"Approach 3: One-pass Hash Table\"></a>Approach 3: One-pass Hash Table</h3><p>While we iterate and inserting elements into the table, we also look back to check if current element’s complement already exists in the table. If it exists, we have found a solution and return immediately.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">    Map&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> complement = target - nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map.containsKey(complement)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; map.get(complement), i &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        map.put(nums[i], i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;No two sum solution&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Complexity-Analysis-2\"><a href=\"#Complexity-Analysis-2\" class=\"headerlink\" title=\"Complexity Analysis:\"></a>Complexity Analysis:</h4><ul>\n<li>Time Complexity: <em>O(n)</em>.</li>\n<li>Space complexity: <em>O(n)</em>.</li>\n</ul>\n<hr>\n<hr>\n<h1 id=\"3Sum\"><a href=\"#3Sum\" class=\"headerlink\" title=\"3Sum\"></a>3Sum</h1><p>Given an array <code>nums</code> of  <em>n</em> integers, are there elements <em>a</em>, <em>b</em>, <em>c</em> in <code>nums</code> suh that <em>a+b+c=0</em>? Find all unique triplets in the array which gives the sum of zero.</p>\n<p>Example:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Given array nums = [-1, 0, 1, 2, -1, -4],</span><br><span class=\"line\"></span><br><span class=\"line\">A solution set is:</span><br><span class=\"line\">[</span><br><span class=\"line\"><span class=\"code\">    [-1, 0, 1],</span></span><br><span class=\"line\"><span class=\"code\">    [-1, -1, 2]</span></span><br><span class=\"line\"><span class=\"code\">]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Solution-1\"><a href=\"#Solution-1\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><p>遍历前<code>nums.length-2</code>个元素，每个元素对应的目标为<code>-nums[i]</code>，再用双向求和的方式找出符目标的两个元素，与<code>nums[i]</code> 一同放入列表。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class=\"keyword\">int</span>[] num) &#123;</span><br><span class=\"line\">    Arrays.sort(num);</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; num.length - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> || num[i] != num[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// lo = i + 1 因为sum = - num[i], 求的是符合sum的，num[i]中i已经被占用了</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> lo = i + <span class=\"number\">1</span>, hi = num.length - <span class=\"number\">1</span>, sum = -num[i];</span><br><span class=\"line\">            <span class=\"comment\">// a standard bi-directional 2Sum sweep</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (lo &lt; hi) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (num[lo] + num[hi] == sum) &#123;</span><br><span class=\"line\">                    res.add(Arrays.asList(num[i], num[lo], num[hi]));</span><br><span class=\"line\">                    <span class=\"comment\">// 目前低位和下一个低位相同的话，继续next</span></span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (lo &lt; hi &amp;&amp; num[lo] == num[lo + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                        lo++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// 目前高位和下一个高位相同的话，next</span></span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (lo &lt; hi &amp;&amp; num[hi] == num[hi - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                        hi--;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// 为什么同时减，因为不允许放进重复的值</span></span><br><span class=\"line\">                    lo++;</span><br><span class=\"line\">                    hi--;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num[lo] + num[hi] &lt; sum) &#123;</span><br><span class=\"line\">                    lo++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    hi--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Remove-Element\"><a href=\"#Remove-Element\" class=\"headerlink\" title=\"Remove Element\"></a>Remove Element</h1><p>Given an array <em>nums</em> and a value <em>val</em>, remove all instances of that value <code>in-place</code> and return the new length.</p>\n<p>Do not allocate extra space for another array, you must do this by <strong>modify the input array</strong> <code>in-place</code> with O(1) extra memory</p>\n<h2 id=\"Hints\"><a href=\"#Hints\" class=\"headerlink\" title=\"Hints\"></a>Hints</h2><ol>\n<li>Try two pointers</li>\n<li>Did you use the fact that the order of elements can be changed?</li>\n<li>What happens when the elements to remove are rare?</li>\n</ol>\n<hr>\n<h2 id=\"Solution-2\"><a href=\"#Solution-2\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><h4 id=\"Approach-1-Two-pointers\"><a href=\"#Approach-1-Two-pointers\" class=\"headerlink\" title=\"Approach 1: Two pointers\"></a>Approach 1: Two pointers</h4><h4 id=\"Intuition\"><a href=\"#Intuition\" class=\"headerlink\" title=\"Intuition:\"></a>Intuition:</h4><p>Keep two pointers <em>i</em> and <em>j</em>, where <em>i</em> is the slow-runner while <em>j</em> is the fast-runner.</p>\n<h4 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h4><p>When <em>nums[j]</em> equals to the given value, skip this element by incrementing <em>j</em>. As long as <em>nums[j] != val</em>, we copy <em>nums[j]</em> to <em>nums[i]</em> and increment both indexes at the same time. Repeat the process until <em>j</em> reaches the end of the array and the new length is <em>i</em>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">removeElement</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; nums.length; j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[j] != val)&#123;</span><br><span class=\"line\">            nums[i] = nums[j];</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Complexity-anaylysis\"><a href=\"#Complexity-anaylysis\" class=\"headerlink\" title=\"Complexity anaylysis\"></a>Complexity anaylysis</h4><ul>\n<li>Time complexity: O(n)</li>\n<li>Space complexity: O(1)</li>\n</ul>\n<h3 id=\"Approach-2-Two-Pointers-when-elements-to-remove-are-rare\"><a href=\"#Approach-2-Two-Pointers-when-elements-to-remove-are-rare\" class=\"headerlink\" title=\"Approach 2: Two Pointers-when elements to remove are rare\"></a>Approach 2: Two Pointers-when elements to remove are rare</h3><h4 id=\"Intuition-1\"><a href=\"#Intuition-1\" class=\"headerlink\" title=\"Intuition\"></a>Intuition</h4><p>Consider cases where the array contains few elements to remove. For example, <em>nums = [1,2,3,4]</em>, val = 4. The previous algorithm will do unnecessary copy operation of the first four elements. Another example is <em>nums=[4,1,2,3,5]</em>, val =4. It seems unnecessary to move elements [1,2,3,5] one step left as the problem description mentions that the order of elements could be changed.</p>\n<h4 id=\"Algorithm-1\"><a href=\"#Algorithm-1\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h4><p>When we encounter <em>nums[i]=val</em>, we can <strong>swap the current element out</strong> with the last element and dispose the last one. The essentially reduces the array’s size by 1.</p>\n<p>Note that the last element that was swapped in could be the value you want to remove itself. But don’t worry, in the next iteration we will still check this element.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">removeElement</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i] == val)&#123;</span><br><span class=\"line\">            nums[i] = nums[n - <span class=\"number\">1</span>];</span><br><span class=\"line\">            n--; <span class=\"comment\">// reduce array size by one</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Complexity-analysis\"><a href=\"#Complexity-analysis\" class=\"headerlink\" title=\"Complexity analysis\"></a>Complexity analysis</h4><ul>\n<li>Time complexity: O(n)</li>\n<li>Space complexity: O(1)</li>\n</ul>\n<hr>\n<hr>\n<h1 id=\"Remove-Duplicates-from-Sorted-Array\"><a href=\"#Remove-Duplicates-from-Sorted-Array\" class=\"headerlink\" title=\"Remove Duplicates from Sorted Array\"></a>Remove Duplicates from Sorted Array</h1><p>Given a sorted array <em>nums</em>, remove the duplicates <strong>in-place</strong> such that each element appear only <em>once</em> and return the new length.</p>\n<p>Do not allocate extra space for another array.</p>\n<h3 id=\"Clarification\"><a href=\"#Clarification\" class=\"headerlink\" title=\"Clarification:\"></a>Clarification:</h3><p>Confused why the returned value is an integer but your answer is an array?</p>\n<p>Note that the input array is passed in by <strong>reference</strong>, which means modification to the input array will be known to the caller as well.</p>\n<p>Approach 1: Two Pointers</p>\n<h4 id=\"Algorithm-2\"><a href=\"#Algorithm-2\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h4><p><strong>Since the array is already sorted</strong>, we can keep two pointers <em>i</em> and <em>j</em>, where <em>i</em> is the slow-runner while <em>j</em> is the fast-runner. As long as <em>nums[i] = nums[j]</em>, we increment <em>j</em> to skip the duplicate.</p>\n<p>When we encounter <em>nums[i] != nums[i]</em>, the duplicate run has ended so we must copy its value to <em>nums[i+j]</em>. <em>i</em> is then incremented and we repeat the same process again until <em>j</em> reaches the end of array.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">removeDuplicates</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[j] != nums[i]) &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            nums[i] = nums[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Longest-Common-Prefix\"><a href=\"#Longest-Common-Prefix\" class=\"headerlink\" title=\"Longest Common Prefix\"></a>Longest Common Prefix</h1><p>Write a function to find the longest common prefix string  amongst an array of strings. If there is no common prefix, return an empty string<code>&quot;&quot;</code>.</p>\n<h2 id=\"Solution-3\"><a href=\"#Solution-3\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><h3 id=\"Approach-1-Horizontal-scanning\"><a href=\"#Approach-1-Horizontal-scanning\" class=\"headerlink\" title=\"Approach 1: Horizontal scanning\"></a>Approach 1: Horizontal scanning</h3><p><img src=\"https://i.loli.net/2020/02/01/zmUXiwkoG7Dgq8R.png\" alt=\"image.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">longestCommonPrefix</span><span class=\"params\">(String[] strs)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (strs.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    String prefix = strs[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; strs.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (strs[i].indexOf(prefix) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            prefix = prefix.substring(<span class=\"number\">0</span>, prefix.length() - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prefix.isEmpty()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> prefix;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Complexity-Analysis-3\"><a href=\"#Complexity-Analysis-3\" class=\"headerlink\" title=\"Complexity Analysis\"></a>Complexity Analysis</h4><ul>\n<li><p>Time Complexity: <em>O(S)</em>, where <em>S</em> is the sum of all characters in all strings.</p>\n<p>In the worst case  all <em>n</em> strings are the same. The algorithm compares the string <strong>S1</strong> with the other strings [S2…Sn]. There are <em>S</em> character comparisons, where <em>S</em> is the sum of all characters in the input array.</p>\n</li>\n<li><p>Space complexity: <em>O(1)</em>. We only used constant extra space.</p>\n</li>\n</ul>\n<h3 id=\"Approach-2-Vertical-scanning\"><a href=\"#Approach-2-Vertical-scanning\" class=\"headerlink\" title=\"Approach 2: Vertical scanning\"></a>Approach 2: Vertical scanning</h3><p>Imagine a very shot string is at the end of the array. The approach will still do <em>S</em> comparisons. One way to optimize this case is to do vertical scanning. We compare characters from top to bottom on the same column(same character index of the strings) before moving on to the next column.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">longestCommonPrefix2</span><span class=\"params\">(String[] strs)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (strs == <span class=\"keyword\">null</span> || strs.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; strs[<span class=\"number\">0</span>].length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> c = strs[<span class=\"number\">0</span>].charAt(i);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; strs.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == strs[j].length() || strs[j].charAt(i) != c) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> strs[<span class=\"number\">0</span>].substring(<span class=\"number\">0</span>, i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> strs[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Complexity-Analysis-4\"><a href=\"#Complexity-Analysis-4\" class=\"headerlink\" title=\"Complexity Analysis\"></a>Complexity Analysis</h4><ul>\n<li>Time complexity: <em>O(S)</em>, where <em>S</em> is the sum of all characters in all strings. In the worst case there will be <em>n</em> equal strings with length <em>m</em> and the algorithm perform <em>S</em> = <em>m x n</em> character comparisons. Even though the worst case is still the same as <em>Approach 1</em>, in the best case there are at most <em>n x minLen</em> comparisons where <em>minLen</em> is the length of the shortest string in the array.</li>\n<li>Space complexity: <em>O(1)</em>. We only used constant extra space.</li>\n</ul>\n<h3 id=\"Approach-3-Divide-and-conquer\"><a href=\"#Approach-3-Divide-and-conquer\" class=\"headerlink\" title=\"Approach 3: Divide and conquer\"></a>Approach 3: Divide and conquer</h3><p><img src=\"https://i.loli.net/2020/02/01/MzcPpRCeEYbH8nx.png\" alt=\"image.png\"></p>\n<p>…</p>\n<h3 id=\"Approach-4-Binary-search\"><a href=\"#Approach-4-Binary-search\" class=\"headerlink\" title=\"Approach 4: Binary search\"></a>Approach 4: Binary search</h3><h1 id=\"Longest-Substring-Without-Repeating-Characters\"><a href=\"#Longest-Substring-Without-Repeating-Characters\" class=\"headerlink\" title=\"Longest Substring Without Repeating Characters\"></a>Longest Substring Without Repeating Characters</h1><h2 id=\"approach-1-brute-force\"><a href=\"#approach-1-brute-force\" class=\"headerlink\" title=\"approach 1: brute force\"></a>approach 1: brute force</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = s.length();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (allUnique(s, i, j)) ans = Math.max(ans, j - i);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">allUnique</span><span class=\"params\">(String s, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">        Set&lt;Character&gt; set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt; end; i++) &#123;</span><br><span class=\"line\">            Character ch = s.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (set.contains(ch)) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            set.add(ch);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"time-complexity-O-n-3\"><a href=\"#time-complexity-O-n-3\" class=\"headerlink\" title=\"time complexity: O(n^3)\"></a>time complexity: O(n^3)</h3><h2 id=\"approach-2-Sliding-Window\"><a href=\"#approach-2-Sliding-Window\" class=\"headerlink\" title=\"approach 2: Sliding Window\"></a>approach 2: Sliding Window</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = s.length();</span><br><span class=\"line\">        Set&lt;Character&gt; set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>, i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; n &amp;&amp; j &lt; n) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// try to extend the range [i, j]</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!set.contains(s.charAt(j)))&#123;</span><br><span class=\"line\">                set.add(s.charAt(j++));</span><br><span class=\"line\">                ans = Math.max(ans, j - i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                set.remove(s.charAt(i++));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>time complexity: O(2n)</p>\n<h2 id=\"approach-3-Sliding-Window-Optimized\"><a href=\"#approach-3-Sliding-Window-Optimized\" class=\"headerlink\" title=\"approach 3: Sliding Window Optimized\"></a>approach 3: Sliding Window Optimized</h2><h3 id=\"Using-HashMap\"><a href=\"#Using-HashMap\" class=\"headerlink\" title=\"Using HashMap\"></a>Using HashMap</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = s.length(), ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        Map&lt;Character, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;(); <span class=\"comment\">// current index of character</span></span><br><span class=\"line\">        <span class=\"comment\">// try to extend the range [i, j]</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>, i = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map.containsKey(s.charAt(j))) &#123;</span><br><span class=\"line\">                i = Math.max(map.get(s.charAt(j)), i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans = Math.max(ans, j - i + <span class=\"number\">1</span>);</span><br><span class=\"line\">            map.put(s.charAt(j), j + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Using-ASCII-128\"><a href=\"#Using-ASCII-128\" class=\"headerlink\" title=\"Using ASCII 128\"></a>Using ASCII 128</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = s.length(), ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] index = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">128</span>]; <span class=\"comment\">// current index of character</span></span><br><span class=\"line\">        <span class=\"comment\">// try to extend the range [i, j]</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>, i = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            i = Math.max(index[s.charAt(j)], i);</span><br><span class=\"line\">            ans = Math.max(ans, j - i + <span class=\"number\">1</span>);</span><br><span class=\"line\">            index[s.charAt(j)] = j + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>time complexity: O(n)</p>\n"},{"title":"leecode2","date":"2020-03-07T03:46:01.000Z","mathjax":true,"_content":"\n像那种结果要返回所有符合要求解的题十有八九都是要利用递归。根本思想是DFS，常用手段是递归。\n\nHere you go, [leetcode discuss](https://leetcode.com/discuss/general-discussion/458695/Dynamic-Programming-Patterns)\n\n<!-- more -->\n\n#  LCS\n\n先回顾下`最长公共子串`问题。连着两天做到了相关的算法题，换汤不换药的。\n\n题目描述：\n\n给定两个字符串，求两个字符串的最大公共子串，例如：\"abcd\", \"acefd\"的最大公共子串是\"acd\"。\n\n## 思路\n\n要找到最大公子串，要直面的问题是对比，对比如果出现相同的字母该如何处理，不同的又要如何处理。\n\n可以思考这样一个方案，逐个比较，如果发现了不同的字母，可以两个子串其中一个的不同字母去掉，在比较余下的谁的值更大，这里的值是最大子串的长度。如果相同，将相同的字母划去后加一，再比较划去后的子串，又回到一开始字母相同或不同的问题了。\n\n```flow\nst=>start: two strings\nop=>operation: compare two strings\ncond=>condition: if the letter equals\nop1=>operation: 划去在比较的相同的字母，形成一组新的字符串，值加一\nop2=>operation: 划去不同的字母，形成两组新的字符串,分别比较取最大\ncond2=>condition: 是否有空串\nend=>end: end\nst->op->cond\ncond(yes)->op1->cond2\ncond(no)->op2->cond2\ncond2(yes)->end\ncond2(no)->op\n```\n\n如上图所示。如果用表格记录的话，在划去不同的字母后形成的两组子串中最大值以及划去相同字母后余下的字符串比较的值都是被保留在表格中的，于是整体算法思路就很清楚了。\n\n|      | \" \"  |  a   |  b   |  c   |  e   |  f   |\n| :--: | :--: | :--: | :--: | :--: | :--: | :--: |\n| \" \"  |  0   |  0   |  0   |  0   |  0   |  0   |\n|  a   |  0   |  1   |  1   |  1   |  1   |  1   |\n|  c   |  0   |  1   |  1   |  2   |  2   |  2   |\n|  e   |  0   |  1   |  1   |  2   |  3   |  3   |\n|  f   |  0   |  1   |  1   |  2   |  3   |  4   |\n|  d   |  0   |  1   |  1   |  1   |  3   |  4   |\n\n我们可以用dp表示一个二维数组，相当于上图中的表格，做出新的流程图：\n\n```flow\nst=>start: two strings\nend=>end: end\nop=>operation: compare two strings\ncond=>condition: if two string equal?\nop2=>operation: 1+dp[i][j]\nop3=>operation: Math.max(dp[i][j+1],dp[i+1][j])\nst->op->cond\ncond(yes)->op2->end\ncond(no)->op3->end\n```\n\n# KNAPSACK\n\n0/1背包问题，这里主要讲解动态规划方法。\n\ni.e. 背包总容量7kg，4件物品，流程如下（横轴0-7为容量）：\n\n| val  | wt   | 0     | 1    | 2    | 3     | 4    | 5    | 6    | 7     |\n| ---- | ---- | ----- | ---- | ---- | ----- | ---- | ---- | ---- | ----- |\n| 0    | 0    | 0     | 0    | 0    | 0     | 0    | 0    | 0    | 0     |\n| 1    | 1    | ==0== | 1    | 1    | 1     | 1    | 1    | 1    | 1     |\n| 4    | 3    | 0     | 1    | 1    | ==4== | 5    | 5    | 5    | 5     |\n| 5    | 4    | 0     | 1    | 1    | 4     | 5    | 6    | 6    | ==9== |\n| 7    | 5    | 0     | 1    | 1    | 4     | 5    | 7    | 8    | ==9== |\n\n## 递推式：\n\n```java\nif(j<wt[i]){\n    dp[i][j] = dp[i-1][j];\n}else{\n    dp[i][j] = Math.max(val[i - 1] + dp[i - 1][j - wt[i - 1]], dp[i - 1][j]);\n} \n```\n\n\n\n```java\n/**\n * dynamic programming solution\n *\n * @param W   total weight\n * @param wt  items weight\n * @param val items value\n * @param n   items value length\n * @return max value\n */\nstatic int knapSack1(int W, int[] wt, int[] val, int n) {\n    int i, j;\n    int[][] dp = new int[n + 1][W + 1];\n\n    for (i = 0; i <= n; i++) {\n        for (j = 0; j <= W; j++) {\n            if (i == 0 || j == 0) {\n                dp[i][j] = 0;\n            } else if (j < wt[i - 1]) {\n                dp[i][j] = dp[i - 1][j];\n            } else {\n                dp[i][j] = Math.max(val[i - 1] + dp[i - 1][j - wt[i - 1]], dp[i - 1][j]);\n            }\n        }\n    }\n    return dp[n][W];\n}\n```\n\n```java\n/**\n  * recursive solution\n  *\n  * @param W   total weight\n  * @param wt  items weight\n  * @param val items value\n  * @param n   items value length\n  * @return max value\n  */\nstatic int knapSack(int W, int[] wt, int[] val, int n) {\n    if (n == 0 || W == 0) {\n        return 0;\n    }\n    if (wt[n - 1] > W) {\n        return knapSack(W, wt, val, n - 1);\n    } else {\n        return Math.max(val[n - 1] + knapSack(W - wt[n - 1], wt, val, n - 1), knapSack(W, wt, val, n - 1));\n    }\n}\n```\n\n\n\n# DFS\n\n题目描述：给定一个数组和一个目标值，要求返回由数组中数字组合成目标值的所有组合。\n\n例如：【2,3,6,7】目标值7. 返回【【2,2,3】【7】】\n\n```java\npublic List<List<Integer>> combinationSum(int[] candidates, int target) {\n    List<List<Integer>> result = new ArrayList<>();\n    List<Integer> temp = new ArrayList<>();\n    helper(candidates, 0, target, 0, temp, result);\n    return result;\n}\n \nprivate void helper(int[] candidates, int start, int target, int sum,\n                    List<Integer> list, List<List<Integer>> result){\n    if(sum>target){\n        return;\n    }\n \n    if(sum==target){\n        result.add(new ArrayList<>(list));\n        return;\n    }\n \n    for(int i=start; i<candidates.length; i++){\n        list.add(candidates[i]);\n        helper(candidates, i, target, sum+candidates[i], list, result);\n        list.remove(list.size()-1);\n    }\n}\n```\n\n","source":"_posts/leecode2.md","raw":"---\ntitle: leecode2\ndate: 2020-03-07 11:46:01\ncategories: Leecode\ntags: ['lcs','recursion']\nmathjax: true\n---\n\n像那种结果要返回所有符合要求解的题十有八九都是要利用递归。根本思想是DFS，常用手段是递归。\n\nHere you go, [leetcode discuss](https://leetcode.com/discuss/general-discussion/458695/Dynamic-Programming-Patterns)\n\n<!-- more -->\n\n#  LCS\n\n先回顾下`最长公共子串`问题。连着两天做到了相关的算法题，换汤不换药的。\n\n题目描述：\n\n给定两个字符串，求两个字符串的最大公共子串，例如：\"abcd\", \"acefd\"的最大公共子串是\"acd\"。\n\n## 思路\n\n要找到最大公子串，要直面的问题是对比，对比如果出现相同的字母该如何处理，不同的又要如何处理。\n\n可以思考这样一个方案，逐个比较，如果发现了不同的字母，可以两个子串其中一个的不同字母去掉，在比较余下的谁的值更大，这里的值是最大子串的长度。如果相同，将相同的字母划去后加一，再比较划去后的子串，又回到一开始字母相同或不同的问题了。\n\n```flow\nst=>start: two strings\nop=>operation: compare two strings\ncond=>condition: if the letter equals\nop1=>operation: 划去在比较的相同的字母，形成一组新的字符串，值加一\nop2=>operation: 划去不同的字母，形成两组新的字符串,分别比较取最大\ncond2=>condition: 是否有空串\nend=>end: end\nst->op->cond\ncond(yes)->op1->cond2\ncond(no)->op2->cond2\ncond2(yes)->end\ncond2(no)->op\n```\n\n如上图所示。如果用表格记录的话，在划去不同的字母后形成的两组子串中最大值以及划去相同字母后余下的字符串比较的值都是被保留在表格中的，于是整体算法思路就很清楚了。\n\n|      | \" \"  |  a   |  b   |  c   |  e   |  f   |\n| :--: | :--: | :--: | :--: | :--: | :--: | :--: |\n| \" \"  |  0   |  0   |  0   |  0   |  0   |  0   |\n|  a   |  0   |  1   |  1   |  1   |  1   |  1   |\n|  c   |  0   |  1   |  1   |  2   |  2   |  2   |\n|  e   |  0   |  1   |  1   |  2   |  3   |  3   |\n|  f   |  0   |  1   |  1   |  2   |  3   |  4   |\n|  d   |  0   |  1   |  1   |  1   |  3   |  4   |\n\n我们可以用dp表示一个二维数组，相当于上图中的表格，做出新的流程图：\n\n```flow\nst=>start: two strings\nend=>end: end\nop=>operation: compare two strings\ncond=>condition: if two string equal?\nop2=>operation: 1+dp[i][j]\nop3=>operation: Math.max(dp[i][j+1],dp[i+1][j])\nst->op->cond\ncond(yes)->op2->end\ncond(no)->op3->end\n```\n\n# KNAPSACK\n\n0/1背包问题，这里主要讲解动态规划方法。\n\ni.e. 背包总容量7kg，4件物品，流程如下（横轴0-7为容量）：\n\n| val  | wt   | 0     | 1    | 2    | 3     | 4    | 5    | 6    | 7     |\n| ---- | ---- | ----- | ---- | ---- | ----- | ---- | ---- | ---- | ----- |\n| 0    | 0    | 0     | 0    | 0    | 0     | 0    | 0    | 0    | 0     |\n| 1    | 1    | ==0== | 1    | 1    | 1     | 1    | 1    | 1    | 1     |\n| 4    | 3    | 0     | 1    | 1    | ==4== | 5    | 5    | 5    | 5     |\n| 5    | 4    | 0     | 1    | 1    | 4     | 5    | 6    | 6    | ==9== |\n| 7    | 5    | 0     | 1    | 1    | 4     | 5    | 7    | 8    | ==9== |\n\n## 递推式：\n\n```java\nif(j<wt[i]){\n    dp[i][j] = dp[i-1][j];\n}else{\n    dp[i][j] = Math.max(val[i - 1] + dp[i - 1][j - wt[i - 1]], dp[i - 1][j]);\n} \n```\n\n\n\n```java\n/**\n * dynamic programming solution\n *\n * @param W   total weight\n * @param wt  items weight\n * @param val items value\n * @param n   items value length\n * @return max value\n */\nstatic int knapSack1(int W, int[] wt, int[] val, int n) {\n    int i, j;\n    int[][] dp = new int[n + 1][W + 1];\n\n    for (i = 0; i <= n; i++) {\n        for (j = 0; j <= W; j++) {\n            if (i == 0 || j == 0) {\n                dp[i][j] = 0;\n            } else if (j < wt[i - 1]) {\n                dp[i][j] = dp[i - 1][j];\n            } else {\n                dp[i][j] = Math.max(val[i - 1] + dp[i - 1][j - wt[i - 1]], dp[i - 1][j]);\n            }\n        }\n    }\n    return dp[n][W];\n}\n```\n\n```java\n/**\n  * recursive solution\n  *\n  * @param W   total weight\n  * @param wt  items weight\n  * @param val items value\n  * @param n   items value length\n  * @return max value\n  */\nstatic int knapSack(int W, int[] wt, int[] val, int n) {\n    if (n == 0 || W == 0) {\n        return 0;\n    }\n    if (wt[n - 1] > W) {\n        return knapSack(W, wt, val, n - 1);\n    } else {\n        return Math.max(val[n - 1] + knapSack(W - wt[n - 1], wt, val, n - 1), knapSack(W, wt, val, n - 1));\n    }\n}\n```\n\n\n\n# DFS\n\n题目描述：给定一个数组和一个目标值，要求返回由数组中数字组合成目标值的所有组合。\n\n例如：【2,3,6,7】目标值7. 返回【【2,2,3】【7】】\n\n```java\npublic List<List<Integer>> combinationSum(int[] candidates, int target) {\n    List<List<Integer>> result = new ArrayList<>();\n    List<Integer> temp = new ArrayList<>();\n    helper(candidates, 0, target, 0, temp, result);\n    return result;\n}\n \nprivate void helper(int[] candidates, int start, int target, int sum,\n                    List<Integer> list, List<List<Integer>> result){\n    if(sum>target){\n        return;\n    }\n \n    if(sum==target){\n        result.add(new ArrayList<>(list));\n        return;\n    }\n \n    for(int i=start; i<candidates.length; i++){\n        list.add(candidates[i]);\n        helper(candidates, i, target, sum+candidates[i], list, result);\n        list.remove(list.size()-1);\n    }\n}\n```\n\n","slug":"leecode2","published":1,"updated":"2020-07-19T17:29:13.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgcx0029byih1vjv3nou","content":"<p>像那种结果要返回所有符合要求解的题十有八九都是要利用递归。根本思想是DFS，常用手段是递归。</p>\n<p>Here you go, <a href=\"https://leetcode.com/discuss/general-discussion/458695/Dynamic-Programming-Patterns\">leetcode discuss</a></p>\n<a id=\"more\"></a>\n\n<h1 id=\"LCS\"><a href=\"#LCS\" class=\"headerlink\" title=\"LCS\"></a>LCS</h1><p>先回顾下<code>最长公共子串</code>问题。连着两天做到了相关的算法题，换汤不换药的。</p>\n<p>题目描述：</p>\n<p>给定两个字符串，求两个字符串的最大公共子串，例如：”abcd”, “acefd”的最大公共子串是”acd”。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>要找到最大公子串，要直面的问题是对比，对比如果出现相同的字母该如何处理，不同的又要如何处理。</p>\n<p>可以思考这样一个方案，逐个比较，如果发现了不同的字母，可以两个子串其中一个的不同字母去掉，在比较余下的谁的值更大，这里的值是最大子串的长度。如果相同，将相同的字母划去后加一，再比较划去后的子串，又回到一开始字母相同或不同的问题了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">st&#x3D;&gt;start: two strings</span><br><span class=\"line\">op&#x3D;&gt;operation: compare two strings</span><br><span class=\"line\">cond&#x3D;&gt;condition: if the letter equals</span><br><span class=\"line\">op1&#x3D;&gt;operation: 划去在比较的相同的字母，形成一组新的字符串，值加一</span><br><span class=\"line\">op2&#x3D;&gt;operation: 划去不同的字母，形成两组新的字符串,分别比较取最大</span><br><span class=\"line\">cond2&#x3D;&gt;condition: 是否有空串</span><br><span class=\"line\">end&#x3D;&gt;end: end</span><br><span class=\"line\">st-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;op1-&gt;cond2</span><br><span class=\"line\">cond(no)-&gt;op2-&gt;cond2</span><br><span class=\"line\">cond2(yes)-&gt;end</span><br><span class=\"line\">cond2(no)-&gt;op</span><br></pre></td></tr></table></figure>\n\n<p>如上图所示。如果用表格记录的话，在划去不同的字母后形成的两组子串中最大值以及划去相同字母后余下的字符串比较的值都是被保留在表格中的，于是整体算法思路就很清楚了。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">“ “</th>\n<th align=\"center\">a</th>\n<th align=\"center\">b</th>\n<th align=\"center\">c</th>\n<th align=\"center\">e</th>\n<th align=\"center\">f</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">“ “</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">a</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">c</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">2</td>\n<td align=\"center\">2</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">e</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">2</td>\n<td align=\"center\">3</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td align=\"center\">f</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">2</td>\n<td align=\"center\">3</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">d</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">3</td>\n<td align=\"center\">4</td>\n</tr>\n</tbody></table>\n<p>我们可以用dp表示一个二维数组，相当于上图中的表格，做出新的流程图：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">st&#x3D;&gt;start: two strings</span><br><span class=\"line\">end&#x3D;&gt;end: end</span><br><span class=\"line\">op&#x3D;&gt;operation: compare two strings</span><br><span class=\"line\">cond&#x3D;&gt;condition: if two string equal?</span><br><span class=\"line\">op2&#x3D;&gt;operation: 1+dp[i][j]</span><br><span class=\"line\">op3&#x3D;&gt;operation: Math.max(dp[i][j+1],dp[i+1][j])</span><br><span class=\"line\">st-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;op2-&gt;end</span><br><span class=\"line\">cond(no)-&gt;op3-&gt;end</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"KNAPSACK\"><a href=\"#KNAPSACK\" class=\"headerlink\" title=\"KNAPSACK\"></a>KNAPSACK</h1><p>0/1背包问题，这里主要讲解动态规划方法。</p>\n<p>i.e. 背包总容量7kg，4件物品，流程如下（横轴0-7为容量）：</p>\n<table>\n<thead>\n<tr>\n<th>val</th>\n<th>wt</th>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>==0==</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>4</td>\n<td>3</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>==4==</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>5</td>\n<td>4</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>4</td>\n<td>5</td>\n<td>6</td>\n<td>6</td>\n<td>==9==</td>\n</tr>\n<tr>\n<td>7</td>\n<td>5</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>4</td>\n<td>5</td>\n<td>7</td>\n<td>8</td>\n<td>==9==</td>\n</tr>\n</tbody></table>\n<h2 id=\"递推式：\"><a href=\"#递推式：\" class=\"headerlink\" title=\"递推式：\"></a>递推式：</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(j&lt;wt[i])&#123;</span><br><span class=\"line\">    dp[i][j] = dp[i-<span class=\"number\">1</span>][j];</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    dp[i][j] = Math.max(val[i - <span class=\"number\">1</span>] + dp[i - <span class=\"number\">1</span>][j - wt[i - <span class=\"number\">1</span>]], dp[i - <span class=\"number\">1</span>][j]);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * dynamic programming solution</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> W   total weight</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> wt  items weight</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> val items value</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> n   items value length</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> max value</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">knapSack1</span><span class=\"params\">(<span class=\"keyword\">int</span> W, <span class=\"keyword\">int</span>[] wt, <span class=\"keyword\">int</span>[] val, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n + <span class=\"number\">1</span>][W + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt;= W; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> || j == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                dp[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (j &lt; wt[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                dp[i][j] = dp[i - <span class=\"number\">1</span>][j];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                dp[i][j] = Math.max(val[i - <span class=\"number\">1</span>] + dp[i - <span class=\"number\">1</span>][j - wt[i - <span class=\"number\">1</span>]], dp[i - <span class=\"number\">1</span>][j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[n][W];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * recursive solution</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> W   total weight</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> wt  items weight</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> val items value</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> n   items value length</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return</span> max value</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">knapSack</span><span class=\"params\">(<span class=\"keyword\">int</span> W, <span class=\"keyword\">int</span>[] wt, <span class=\"keyword\">int</span>[] val, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span> || W == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (wt[n - <span class=\"number\">1</span>] &gt; W) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> knapSack(W, wt, val, n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(val[n - <span class=\"number\">1</span>] + knapSack(W - wt[n - <span class=\"number\">1</span>], wt, val, n - <span class=\"number\">1</span>), knapSack(W, wt, val, n - <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"DFS\"><a href=\"#DFS\" class=\"headerlink\" title=\"DFS\"></a>DFS</h1><p>题目描述：给定一个数组和一个目标值，要求返回由数组中数字组合成目标值的所有组合。</p>\n<p>例如：【2,3,6,7】目标值7. 返回【【2,2,3】【7】】</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class=\"keyword\">int</span>[] candidates, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    List&lt;Integer&gt; temp = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    helper(candidates, <span class=\"number\">0</span>, target, <span class=\"number\">0</span>, temp, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(<span class=\"keyword\">int</span>[] candidates, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span> sum,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                    List&lt;Integer&gt; list, List&lt;List&lt;Integer&gt;&gt; result)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sum&gt;target)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sum==target)&#123;</span><br><span class=\"line\">        result.add(<span class=\"keyword\">new</span> ArrayList&lt;&gt;(list));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=start; i&lt;candidates.length; i++)&#123;</span><br><span class=\"line\">        list.add(candidates[i]);</span><br><span class=\"line\">        helper(candidates, i, target, sum+candidates[i], list, result);</span><br><span class=\"line\">        list.remove(list.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>像那种结果要返回所有符合要求解的题十有八九都是要利用递归。根本思想是DFS，常用手段是递归。</p>\n<p>Here you go, <a href=\"https://leetcode.com/discuss/general-discussion/458695/Dynamic-Programming-Patterns\">leetcode discuss</a></p>","more":"<h1 id=\"LCS\"><a href=\"#LCS\" class=\"headerlink\" title=\"LCS\"></a>LCS</h1><p>先回顾下<code>最长公共子串</code>问题。连着两天做到了相关的算法题，换汤不换药的。</p>\n<p>题目描述：</p>\n<p>给定两个字符串，求两个字符串的最大公共子串，例如：”abcd”, “acefd”的最大公共子串是”acd”。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>要找到最大公子串，要直面的问题是对比，对比如果出现相同的字母该如何处理，不同的又要如何处理。</p>\n<p>可以思考这样一个方案，逐个比较，如果发现了不同的字母，可以两个子串其中一个的不同字母去掉，在比较余下的谁的值更大，这里的值是最大子串的长度。如果相同，将相同的字母划去后加一，再比较划去后的子串，又回到一开始字母相同或不同的问题了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">st&#x3D;&gt;start: two strings</span><br><span class=\"line\">op&#x3D;&gt;operation: compare two strings</span><br><span class=\"line\">cond&#x3D;&gt;condition: if the letter equals</span><br><span class=\"line\">op1&#x3D;&gt;operation: 划去在比较的相同的字母，形成一组新的字符串，值加一</span><br><span class=\"line\">op2&#x3D;&gt;operation: 划去不同的字母，形成两组新的字符串,分别比较取最大</span><br><span class=\"line\">cond2&#x3D;&gt;condition: 是否有空串</span><br><span class=\"line\">end&#x3D;&gt;end: end</span><br><span class=\"line\">st-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;op1-&gt;cond2</span><br><span class=\"line\">cond(no)-&gt;op2-&gt;cond2</span><br><span class=\"line\">cond2(yes)-&gt;end</span><br><span class=\"line\">cond2(no)-&gt;op</span><br></pre></td></tr></table></figure>\n\n<p>如上图所示。如果用表格记录的话，在划去不同的字母后形成的两组子串中最大值以及划去相同字母后余下的字符串比较的值都是被保留在表格中的，于是整体算法思路就很清楚了。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">“ “</th>\n<th align=\"center\">a</th>\n<th align=\"center\">b</th>\n<th align=\"center\">c</th>\n<th align=\"center\">e</th>\n<th align=\"center\">f</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">“ “</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">a</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">c</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">2</td>\n<td align=\"center\">2</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">e</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">2</td>\n<td align=\"center\">3</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td align=\"center\">f</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">2</td>\n<td align=\"center\">3</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">d</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">3</td>\n<td align=\"center\">4</td>\n</tr>\n</tbody></table>\n<p>我们可以用dp表示一个二维数组，相当于上图中的表格，做出新的流程图：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">st&#x3D;&gt;start: two strings</span><br><span class=\"line\">end&#x3D;&gt;end: end</span><br><span class=\"line\">op&#x3D;&gt;operation: compare two strings</span><br><span class=\"line\">cond&#x3D;&gt;condition: if two string equal?</span><br><span class=\"line\">op2&#x3D;&gt;operation: 1+dp[i][j]</span><br><span class=\"line\">op3&#x3D;&gt;operation: Math.max(dp[i][j+1],dp[i+1][j])</span><br><span class=\"line\">st-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;op2-&gt;end</span><br><span class=\"line\">cond(no)-&gt;op3-&gt;end</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"KNAPSACK\"><a href=\"#KNAPSACK\" class=\"headerlink\" title=\"KNAPSACK\"></a>KNAPSACK</h1><p>0/1背包问题，这里主要讲解动态规划方法。</p>\n<p>i.e. 背包总容量7kg，4件物品，流程如下（横轴0-7为容量）：</p>\n<table>\n<thead>\n<tr>\n<th>val</th>\n<th>wt</th>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>==0==</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>4</td>\n<td>3</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>==4==</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>5</td>\n<td>4</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>4</td>\n<td>5</td>\n<td>6</td>\n<td>6</td>\n<td>==9==</td>\n</tr>\n<tr>\n<td>7</td>\n<td>5</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>4</td>\n<td>5</td>\n<td>7</td>\n<td>8</td>\n<td>==9==</td>\n</tr>\n</tbody></table>\n<h2 id=\"递推式：\"><a href=\"#递推式：\" class=\"headerlink\" title=\"递推式：\"></a>递推式：</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(j&lt;wt[i])&#123;</span><br><span class=\"line\">    dp[i][j] = dp[i-<span class=\"number\">1</span>][j];</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    dp[i][j] = Math.max(val[i - <span class=\"number\">1</span>] + dp[i - <span class=\"number\">1</span>][j - wt[i - <span class=\"number\">1</span>]], dp[i - <span class=\"number\">1</span>][j]);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * dynamic programming solution</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> W   total weight</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> wt  items weight</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> val items value</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> n   items value length</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> max value</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">knapSack1</span><span class=\"params\">(<span class=\"keyword\">int</span> W, <span class=\"keyword\">int</span>[] wt, <span class=\"keyword\">int</span>[] val, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n + <span class=\"number\">1</span>][W + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt;= W; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> || j == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                dp[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (j &lt; wt[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                dp[i][j] = dp[i - <span class=\"number\">1</span>][j];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                dp[i][j] = Math.max(val[i - <span class=\"number\">1</span>] + dp[i - <span class=\"number\">1</span>][j - wt[i - <span class=\"number\">1</span>]], dp[i - <span class=\"number\">1</span>][j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[n][W];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * recursive solution</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> W   total weight</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> wt  items weight</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> val items value</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> n   items value length</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return</span> max value</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">knapSack</span><span class=\"params\">(<span class=\"keyword\">int</span> W, <span class=\"keyword\">int</span>[] wt, <span class=\"keyword\">int</span>[] val, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span> || W == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (wt[n - <span class=\"number\">1</span>] &gt; W) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> knapSack(W, wt, val, n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(val[n - <span class=\"number\">1</span>] + knapSack(W - wt[n - <span class=\"number\">1</span>], wt, val, n - <span class=\"number\">1</span>), knapSack(W, wt, val, n - <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"DFS\"><a href=\"#DFS\" class=\"headerlink\" title=\"DFS\"></a>DFS</h1><p>题目描述：给定一个数组和一个目标值，要求返回由数组中数字组合成目标值的所有组合。</p>\n<p>例如：【2,3,6,7】目标值7. 返回【【2,2,3】【7】】</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class=\"keyword\">int</span>[] candidates, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    List&lt;Integer&gt; temp = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    helper(candidates, <span class=\"number\">0</span>, target, <span class=\"number\">0</span>, temp, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(<span class=\"keyword\">int</span>[] candidates, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span> sum,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                    List&lt;Integer&gt; list, List&lt;List&lt;Integer&gt;&gt; result)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sum&gt;target)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sum==target)&#123;</span><br><span class=\"line\">        result.add(<span class=\"keyword\">new</span> ArrayList&lt;&gt;(list));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=start; i&lt;candidates.length; i++)&#123;</span><br><span class=\"line\">        list.add(candidates[i]);</span><br><span class=\"line\">        helper(candidates, i, target, sum+candidates[i], list, result);</span><br><span class=\"line\">        list.remove(list.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"lock","date":"2020-07-20T13:46:41.000Z","_content":"\n锁跟多线程紧密相关，有复杂与简单之分。\n\n<!--more-->\n\n# 分类\n\n![image.png](https://i.loli.net/2020/07/20/AwVJYTyQqzUpEPl.png)\n\n# 乐观锁|悲观锁\n\n所谓乐观锁、悲观锁可以类比地看作**JVM里的方法区**，他们只是规范、概念，具体落地的话有不同的实现，所以不仅仅是java中，数据库中也有类似的概念。那么，什么是乐观锁、悲观锁呢？\n\n- 悲观锁：对于同一个数据的并发操作，悲观锁认为自己在使用数据的时候一定有别的线程来修改，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。在Java中，`synchronized`关键字和`Lock的实现类`都是悲观锁。\n- 乐观锁：认为自己在使用数据时不会有别的线程修改数据，所以不会加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。如果这个数据没有被更新，当前线程将自己修改的数据写入；如果数据已经被其他线程更新，则做进一步的操作（报错、重试或其他等等）。在Java中，通过**无锁编程**实现的乐观锁，最常用的就是`CAS算法`，Java原子类中的递增操作就是通过**CAS自旋实现**的。\n\n根据他们的概念，可以发现**悲观锁适合写操作多的场景**，**乐观锁适合读操作多的场景**，这样利于性能的优化提升。\n\n```java\n// synchronized\npublic synchronized void testMehthod(){\n    // do something...\n}\n\n// ReentrantLock\nprivate ReentrantLock lock = new ReentrantLock();\npublic void modifyPublicResources()){\n    try{\n        lock.lock();\n        // do something...\n    }finally{\n        lock.unlock();\n    }\n}\n\n// 乐观锁\nprivate AtomicInteger ai = new AtomicInteger();\natomicInteger.incrementAndGet(); // 执行自增1\n```\n\n\n\n# Compare And Swap\n\nCAS，比较与交换，是一种无锁算法，在不使用锁的情况下实现多线程之间的变量同步，java并发包中的**原子类**就是通过这种算法实现了乐观锁。算法涉及到三个操作数：\n\n- 需要读写的内存值V （已存在的值）\n- 进行比较的值A\n- 要写入的新值B\n\n当`V=A`时，CAS通过原子方式用新值B来更新V的值（其中“比较”与“更新”两个操作是一个原子），否则不执行任何操作。一般情况下，“更新”是一个不断重试的操作。\n\n## AtomicInteger\n\n```java\npublic class AtomicInteger extends Number implements java.io.Serializable {\n    private static final long serialVersionUID = 6214790243416807050L;\n\n    // setup to use Unsafe.compareAndSwapInt for updates\n    // 获取并操作内存的数据\n    private static final Unsafe unsafe = Unsafe.getUnsafe();\n    // 存储value在AtomicInteger中的偏移量\n    private static final long valueOffset;\n\n    static {\n        try {\n            valueOffset = unsafe.objectFieldOffset\n                (AtomicInteger.class.getDeclaredField(\"value\"));\n        } catch (Exception ex) { throw new Error(ex); }\n    }\n\t// 存储AtomicInteger的int值\n    private volatile int value;\n```\n\n```java\npublic final int getAndIncrement() {\n    return unsafe.getAndAddInt(this, valueOffset, 1);\n}\n```\n\n```java\npublic final int getAndAddInt(Object var1, long var2, int var4) {\n    int var5;\n    do {\n        var5 = this.getIntVolatile(var1, var2);\n    } while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));\n\n    return var5;\n}\n```\n\n```java\npublic final native boolean compareAndSwapInt(Object var1, long var2, int var4, int var5);\n```\n\n一目了然了吧，最终的`compareAndSwapInt`是`native`，所以整个”比较+更新“操作属于原子操作，在JDK通过CPU的cmpxchg指令去比较寄存器中的A和内存中的V。CAS虽然避开了锁，但是也有自身的瑕疵：\n\n- 看到`do-while`了吧，循环时间长会造成较大的CPU开销。\n\n**note:** ABA问题，即原本是A，后来改成了B，然后又改成了A，这时用CAS去比较的话结果是什么呢？当然是false啦，每次更新时会加上版本号做标记，类似”1A-2B-3A\"\n\n# 自旋锁|适应性自旋锁\n\n涉及到线程的两个状态转换：阻塞、唤醒。这个操作需要操作系统来完成，且状态转换要耗费一定的处理器时间，如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长。\n\n在许多场景中，同步资源的锁定时间很短，为了这一小段时间去切换线程，线程挂起和恢复现场的花费可能会让系统得不偿失。如果物理机器有多个处理器，能够让两个或以上的线程同时并行执行，我们就可以让后面那个请求锁的线程不放弃CPU的执行时间，看看持有锁的线程是否很快就会释放锁。\n\n而为了让当前线程“稍等一下”，我们需让当前线程进行自旋，如果在自旋完成后前面锁定同步资源的线程已经释放了锁，那么当前线程就可以不必阻塞而是直接获取同步资源，从而避免切换线程的开销。这就是自旋锁。reference [here](https://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&mid=2651749434&idx=3&sn=5ffa63ad47fe166f2f1a9f604ed10091&chksm=bd12a5778a652c61509d9e718ab086ff27ad8768586ea9b38c3dcf9e017a8e49bcae3df9bcc8&scene=38#wechat_redirect)\n\n# 公平锁|非公平锁\n\n简而言之，公平锁是好好排队的，非公平锁是插队来的。\n\n在类`ReentrantLock`中，有一个内部类`Sync`，他是继承`AbstractQueuedSnchronizer`的，对锁的添加、释放等操作大部分都是在`Sync`实现的，他又有`FairSync`和`NonfairSync`两个子类。`ReentrantLock`默认使用非公平锁。\n\n# 独享锁|共享锁\n\n别被名字搞晕了！独享=排他=互斥锁，同《操作系统》中的相关概念。如果数据身上有了一把排他锁，那么其他线程就不能再对他施加任何锁，例如JDK中的`synchronized`和并发包中的`Lock`。\n\n共享锁是指数据身上有了共享锁，其他线程也可以在他身上加锁，只能加共享锁。获得共享锁的线程只能读数据，不能修改数据。\n\n独享锁和共享锁也是通过AQS来实现的。具体参考类`ReentrantReadWriteLock`。类中有`ReadLock`和`WriteLock`两把锁，","source":"_posts/lock.md","raw":"---\ntitle: lock\ndate: 2020-07-20 21:46:41\ncategories: Java\ntags: lock\n---\n\n锁跟多线程紧密相关，有复杂与简单之分。\n\n<!--more-->\n\n# 分类\n\n![image.png](https://i.loli.net/2020/07/20/AwVJYTyQqzUpEPl.png)\n\n# 乐观锁|悲观锁\n\n所谓乐观锁、悲观锁可以类比地看作**JVM里的方法区**，他们只是规范、概念，具体落地的话有不同的实现，所以不仅仅是java中，数据库中也有类似的概念。那么，什么是乐观锁、悲观锁呢？\n\n- 悲观锁：对于同一个数据的并发操作，悲观锁认为自己在使用数据的时候一定有别的线程来修改，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。在Java中，`synchronized`关键字和`Lock的实现类`都是悲观锁。\n- 乐观锁：认为自己在使用数据时不会有别的线程修改数据，所以不会加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。如果这个数据没有被更新，当前线程将自己修改的数据写入；如果数据已经被其他线程更新，则做进一步的操作（报错、重试或其他等等）。在Java中，通过**无锁编程**实现的乐观锁，最常用的就是`CAS算法`，Java原子类中的递增操作就是通过**CAS自旋实现**的。\n\n根据他们的概念，可以发现**悲观锁适合写操作多的场景**，**乐观锁适合读操作多的场景**，这样利于性能的优化提升。\n\n```java\n// synchronized\npublic synchronized void testMehthod(){\n    // do something...\n}\n\n// ReentrantLock\nprivate ReentrantLock lock = new ReentrantLock();\npublic void modifyPublicResources()){\n    try{\n        lock.lock();\n        // do something...\n    }finally{\n        lock.unlock();\n    }\n}\n\n// 乐观锁\nprivate AtomicInteger ai = new AtomicInteger();\natomicInteger.incrementAndGet(); // 执行自增1\n```\n\n\n\n# Compare And Swap\n\nCAS，比较与交换，是一种无锁算法，在不使用锁的情况下实现多线程之间的变量同步，java并发包中的**原子类**就是通过这种算法实现了乐观锁。算法涉及到三个操作数：\n\n- 需要读写的内存值V （已存在的值）\n- 进行比较的值A\n- 要写入的新值B\n\n当`V=A`时，CAS通过原子方式用新值B来更新V的值（其中“比较”与“更新”两个操作是一个原子），否则不执行任何操作。一般情况下，“更新”是一个不断重试的操作。\n\n## AtomicInteger\n\n```java\npublic class AtomicInteger extends Number implements java.io.Serializable {\n    private static final long serialVersionUID = 6214790243416807050L;\n\n    // setup to use Unsafe.compareAndSwapInt for updates\n    // 获取并操作内存的数据\n    private static final Unsafe unsafe = Unsafe.getUnsafe();\n    // 存储value在AtomicInteger中的偏移量\n    private static final long valueOffset;\n\n    static {\n        try {\n            valueOffset = unsafe.objectFieldOffset\n                (AtomicInteger.class.getDeclaredField(\"value\"));\n        } catch (Exception ex) { throw new Error(ex); }\n    }\n\t// 存储AtomicInteger的int值\n    private volatile int value;\n```\n\n```java\npublic final int getAndIncrement() {\n    return unsafe.getAndAddInt(this, valueOffset, 1);\n}\n```\n\n```java\npublic final int getAndAddInt(Object var1, long var2, int var4) {\n    int var5;\n    do {\n        var5 = this.getIntVolatile(var1, var2);\n    } while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));\n\n    return var5;\n}\n```\n\n```java\npublic final native boolean compareAndSwapInt(Object var1, long var2, int var4, int var5);\n```\n\n一目了然了吧，最终的`compareAndSwapInt`是`native`，所以整个”比较+更新“操作属于原子操作，在JDK通过CPU的cmpxchg指令去比较寄存器中的A和内存中的V。CAS虽然避开了锁，但是也有自身的瑕疵：\n\n- 看到`do-while`了吧，循环时间长会造成较大的CPU开销。\n\n**note:** ABA问题，即原本是A，后来改成了B，然后又改成了A，这时用CAS去比较的话结果是什么呢？当然是false啦，每次更新时会加上版本号做标记，类似”1A-2B-3A\"\n\n# 自旋锁|适应性自旋锁\n\n涉及到线程的两个状态转换：阻塞、唤醒。这个操作需要操作系统来完成，且状态转换要耗费一定的处理器时间，如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长。\n\n在许多场景中，同步资源的锁定时间很短，为了这一小段时间去切换线程，线程挂起和恢复现场的花费可能会让系统得不偿失。如果物理机器有多个处理器，能够让两个或以上的线程同时并行执行，我们就可以让后面那个请求锁的线程不放弃CPU的执行时间，看看持有锁的线程是否很快就会释放锁。\n\n而为了让当前线程“稍等一下”，我们需让当前线程进行自旋，如果在自旋完成后前面锁定同步资源的线程已经释放了锁，那么当前线程就可以不必阻塞而是直接获取同步资源，从而避免切换线程的开销。这就是自旋锁。reference [here](https://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&mid=2651749434&idx=3&sn=5ffa63ad47fe166f2f1a9f604ed10091&chksm=bd12a5778a652c61509d9e718ab086ff27ad8768586ea9b38c3dcf9e017a8e49bcae3df9bcc8&scene=38#wechat_redirect)\n\n# 公平锁|非公平锁\n\n简而言之，公平锁是好好排队的，非公平锁是插队来的。\n\n在类`ReentrantLock`中，有一个内部类`Sync`，他是继承`AbstractQueuedSnchronizer`的，对锁的添加、释放等操作大部分都是在`Sync`实现的，他又有`FairSync`和`NonfairSync`两个子类。`ReentrantLock`默认使用非公平锁。\n\n# 独享锁|共享锁\n\n别被名字搞晕了！独享=排他=互斥锁，同《操作系统》中的相关概念。如果数据身上有了一把排他锁，那么其他线程就不能再对他施加任何锁，例如JDK中的`synchronized`和并发包中的`Lock`。\n\n共享锁是指数据身上有了共享锁，其他线程也可以在他身上加锁，只能加共享锁。获得共享锁的线程只能读数据，不能修改数据。\n\n独享锁和共享锁也是通过AQS来实现的。具体参考类`ReentrantReadWriteLock`。类中有`ReadLock`和`WriteLock`两把锁，","slug":"lock","published":1,"updated":"2020-08-23T02:23:51.331Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgcz002bbyih1j971bpx","content":"<p>锁跟多线程紧密相关，有复杂与简单之分。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h1><p><img src=\"https://i.loli.net/2020/07/20/AwVJYTyQqzUpEPl.png\" alt=\"image.png\"></p>\n<h1 id=\"乐观锁-悲观锁\"><a href=\"#乐观锁-悲观锁\" class=\"headerlink\" title=\"乐观锁|悲观锁\"></a>乐观锁|悲观锁</h1><p>所谓乐观锁、悲观锁可以类比地看作<strong>JVM里的方法区</strong>，他们只是规范、概念，具体落地的话有不同的实现，所以不仅仅是java中，数据库中也有类似的概念。那么，什么是乐观锁、悲观锁呢？</p>\n<ul>\n<li>悲观锁：对于同一个数据的并发操作，悲观锁认为自己在使用数据的时候一定有别的线程来修改，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。在Java中，<code>synchronized</code>关键字和<code>Lock的实现类</code>都是悲观锁。</li>\n<li>乐观锁：认为自己在使用数据时不会有别的线程修改数据，所以不会加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。如果这个数据没有被更新，当前线程将自己修改的数据写入；如果数据已经被其他线程更新，则做进一步的操作（报错、重试或其他等等）。在Java中，通过<strong>无锁编程</strong>实现的乐观锁，最常用的就是<code>CAS算法</code>，Java原子类中的递增操作就是通过<strong>CAS自旋实现</strong>的。</li>\n</ul>\n<p>根据他们的概念，可以发现<strong>悲观锁适合写操作多的场景</strong>，<strong>乐观锁适合读操作多的场景</strong>，这样利于性能的优化提升。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// synchronized</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">testMehthod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ReentrantLock</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">modifyPublicResources</span><span class=\"params\">()</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"comment\">// do something...</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 乐观锁</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> AtomicInteger ai = <span class=\"keyword\">new</span> AtomicInteger();</span><br><span class=\"line\">atomicInteger.incrementAndGet(); <span class=\"comment\">// 执行自增1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Compare-And-Swap\"><a href=\"#Compare-And-Swap\" class=\"headerlink\" title=\"Compare And Swap\"></a>Compare And Swap</h1><p>CAS，比较与交换，是一种无锁算法，在不使用锁的情况下实现多线程之间的变量同步，java并发包中的<strong>原子类</strong>就是通过这种算法实现了乐观锁。算法涉及到三个操作数：</p>\n<ul>\n<li>需要读写的内存值V （已存在的值）</li>\n<li>进行比较的值A</li>\n<li>要写入的新值B</li>\n</ul>\n<p>当<code>V=A</code>时，CAS通过原子方式用新值B来更新V的值（其中“比较”与“更新”两个操作是一个原子），否则不执行任何操作。一般情况下，“更新”是一个不断重试的操作。</p>\n<h2 id=\"AtomicInteger\"><a href=\"#AtomicInteger\" class=\"headerlink\" title=\"AtomicInteger\"></a>AtomicInteger</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AtomicInteger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Number</span> <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">6214790243416807050L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// setup to use Unsafe.compareAndSwapInt for updates</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取并操作内存的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class=\"line\">    <span class=\"comment\">// 存储value在AtomicInteger中的偏移量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> valueOffset;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            valueOffset = unsafe.objectFieldOffset</span><br><span class=\"line\">                (AtomicInteger.class.getDeclaredField(&quot;value&quot;));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(ex); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 存储AtomicInteger的int值</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> value;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAndIncrement</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"keyword\">this</span>, valueOffset, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAndAddInt</span><span class=\"params\">(Object var1, <span class=\"keyword\">long</span> var2, <span class=\"keyword\">int</span> var4)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> var5;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        var5 = <span class=\"keyword\">this</span>.getIntVolatile(var1, var2);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span>(!<span class=\"keyword\">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> var5;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSwapInt</span><span class=\"params\">(Object var1, <span class=\"keyword\">long</span> var2, <span class=\"keyword\">int</span> var4, <span class=\"keyword\">int</span> var5)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>一目了然了吧，最终的<code>compareAndSwapInt</code>是<code>native</code>，所以整个”比较+更新“操作属于原子操作，在JDK通过CPU的cmpxchg指令去比较寄存器中的A和内存中的V。CAS虽然避开了锁，但是也有自身的瑕疵：</p>\n<ul>\n<li>看到<code>do-while</code>了吧，循环时间长会造成较大的CPU开销。</li>\n</ul>\n<p><strong>note:</strong> ABA问题，即原本是A，后来改成了B，然后又改成了A，这时用CAS去比较的话结果是什么呢？当然是false啦，每次更新时会加上版本号做标记，类似”1A-2B-3A”</p>\n<h1 id=\"自旋锁-适应性自旋锁\"><a href=\"#自旋锁-适应性自旋锁\" class=\"headerlink\" title=\"自旋锁|适应性自旋锁\"></a>自旋锁|适应性自旋锁</h1><p>涉及到线程的两个状态转换：阻塞、唤醒。这个操作需要操作系统来完成，且状态转换要耗费一定的处理器时间，如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长。</p>\n<p>在许多场景中，同步资源的锁定时间很短，为了这一小段时间去切换线程，线程挂起和恢复现场的花费可能会让系统得不偿失。如果物理机器有多个处理器，能够让两个或以上的线程同时并行执行，我们就可以让后面那个请求锁的线程不放弃CPU的执行时间，看看持有锁的线程是否很快就会释放锁。</p>\n<p>而为了让当前线程“稍等一下”，我们需让当前线程进行自旋，如果在自旋完成后前面锁定同步资源的线程已经释放了锁，那么当前线程就可以不必阻塞而是直接获取同步资源，从而避免切换线程的开销。这就是自旋锁。reference <a href=\"https://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&mid=2651749434&idx=3&sn=5ffa63ad47fe166f2f1a9f604ed10091&chksm=bd12a5778a652c61509d9e718ab086ff27ad8768586ea9b38c3dcf9e017a8e49bcae3df9bcc8&scene=38#wechat_redirect\">here</a></p>\n<h1 id=\"公平锁-非公平锁\"><a href=\"#公平锁-非公平锁\" class=\"headerlink\" title=\"公平锁|非公平锁\"></a>公平锁|非公平锁</h1><p>简而言之，公平锁是好好排队的，非公平锁是插队来的。</p>\n<p>在类<code>ReentrantLock</code>中，有一个内部类<code>Sync</code>，他是继承<code>AbstractQueuedSnchronizer</code>的，对锁的添加、释放等操作大部分都是在<code>Sync</code>实现的，他又有<code>FairSync</code>和<code>NonfairSync</code>两个子类。<code>ReentrantLock</code>默认使用非公平锁。</p>\n<h1 id=\"独享锁-共享锁\"><a href=\"#独享锁-共享锁\" class=\"headerlink\" title=\"独享锁|共享锁\"></a>独享锁|共享锁</h1><p>别被名字搞晕了！独享=排他=互斥锁，同《操作系统》中的相关概念。如果数据身上有了一把排他锁，那么其他线程就不能再对他施加任何锁，例如JDK中的<code>synchronized</code>和并发包中的<code>Lock</code>。</p>\n<p>共享锁是指数据身上有了共享锁，其他线程也可以在他身上加锁，只能加共享锁。获得共享锁的线程只能读数据，不能修改数据。</p>\n<p>独享锁和共享锁也是通过AQS来实现的。具体参考类<code>ReentrantReadWriteLock</code>。类中有<code>ReadLock</code>和<code>WriteLock</code>两把锁，</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>锁跟多线程紧密相关，有复杂与简单之分。</p>","more":"<h1 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h1><p><img src=\"https://i.loli.net/2020/07/20/AwVJYTyQqzUpEPl.png\" alt=\"image.png\"></p>\n<h1 id=\"乐观锁-悲观锁\"><a href=\"#乐观锁-悲观锁\" class=\"headerlink\" title=\"乐观锁|悲观锁\"></a>乐观锁|悲观锁</h1><p>所谓乐观锁、悲观锁可以类比地看作<strong>JVM里的方法区</strong>，他们只是规范、概念，具体落地的话有不同的实现，所以不仅仅是java中，数据库中也有类似的概念。那么，什么是乐观锁、悲观锁呢？</p>\n<ul>\n<li>悲观锁：对于同一个数据的并发操作，悲观锁认为自己在使用数据的时候一定有别的线程来修改，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。在Java中，<code>synchronized</code>关键字和<code>Lock的实现类</code>都是悲观锁。</li>\n<li>乐观锁：认为自己在使用数据时不会有别的线程修改数据，所以不会加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。如果这个数据没有被更新，当前线程将自己修改的数据写入；如果数据已经被其他线程更新，则做进一步的操作（报错、重试或其他等等）。在Java中，通过<strong>无锁编程</strong>实现的乐观锁，最常用的就是<code>CAS算法</code>，Java原子类中的递增操作就是通过<strong>CAS自旋实现</strong>的。</li>\n</ul>\n<p>根据他们的概念，可以发现<strong>悲观锁适合写操作多的场景</strong>，<strong>乐观锁适合读操作多的场景</strong>，这样利于性能的优化提升。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// synchronized</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">testMehthod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ReentrantLock</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">modifyPublicResources</span><span class=\"params\">()</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"comment\">// do something...</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 乐观锁</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> AtomicInteger ai = <span class=\"keyword\">new</span> AtomicInteger();</span><br><span class=\"line\">atomicInteger.incrementAndGet(); <span class=\"comment\">// 执行自增1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Compare-And-Swap\"><a href=\"#Compare-And-Swap\" class=\"headerlink\" title=\"Compare And Swap\"></a>Compare And Swap</h1><p>CAS，比较与交换，是一种无锁算法，在不使用锁的情况下实现多线程之间的变量同步，java并发包中的<strong>原子类</strong>就是通过这种算法实现了乐观锁。算法涉及到三个操作数：</p>\n<ul>\n<li>需要读写的内存值V （已存在的值）</li>\n<li>进行比较的值A</li>\n<li>要写入的新值B</li>\n</ul>\n<p>当<code>V=A</code>时，CAS通过原子方式用新值B来更新V的值（其中“比较”与“更新”两个操作是一个原子），否则不执行任何操作。一般情况下，“更新”是一个不断重试的操作。</p>\n<h2 id=\"AtomicInteger\"><a href=\"#AtomicInteger\" class=\"headerlink\" title=\"AtomicInteger\"></a>AtomicInteger</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AtomicInteger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Number</span> <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">6214790243416807050L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// setup to use Unsafe.compareAndSwapInt for updates</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取并操作内存的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class=\"line\">    <span class=\"comment\">// 存储value在AtomicInteger中的偏移量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> valueOffset;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            valueOffset = unsafe.objectFieldOffset</span><br><span class=\"line\">                (AtomicInteger.class.getDeclaredField(&quot;value&quot;));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(ex); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 存储AtomicInteger的int值</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> value;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAndIncrement</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"keyword\">this</span>, valueOffset, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAndAddInt</span><span class=\"params\">(Object var1, <span class=\"keyword\">long</span> var2, <span class=\"keyword\">int</span> var4)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> var5;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        var5 = <span class=\"keyword\">this</span>.getIntVolatile(var1, var2);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span>(!<span class=\"keyword\">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> var5;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSwapInt</span><span class=\"params\">(Object var1, <span class=\"keyword\">long</span> var2, <span class=\"keyword\">int</span> var4, <span class=\"keyword\">int</span> var5)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>一目了然了吧，最终的<code>compareAndSwapInt</code>是<code>native</code>，所以整个”比较+更新“操作属于原子操作，在JDK通过CPU的cmpxchg指令去比较寄存器中的A和内存中的V。CAS虽然避开了锁，但是也有自身的瑕疵：</p>\n<ul>\n<li>看到<code>do-while</code>了吧，循环时间长会造成较大的CPU开销。</li>\n</ul>\n<p><strong>note:</strong> ABA问题，即原本是A，后来改成了B，然后又改成了A，这时用CAS去比较的话结果是什么呢？当然是false啦，每次更新时会加上版本号做标记，类似”1A-2B-3A”</p>\n<h1 id=\"自旋锁-适应性自旋锁\"><a href=\"#自旋锁-适应性自旋锁\" class=\"headerlink\" title=\"自旋锁|适应性自旋锁\"></a>自旋锁|适应性自旋锁</h1><p>涉及到线程的两个状态转换：阻塞、唤醒。这个操作需要操作系统来完成，且状态转换要耗费一定的处理器时间，如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长。</p>\n<p>在许多场景中，同步资源的锁定时间很短，为了这一小段时间去切换线程，线程挂起和恢复现场的花费可能会让系统得不偿失。如果物理机器有多个处理器，能够让两个或以上的线程同时并行执行，我们就可以让后面那个请求锁的线程不放弃CPU的执行时间，看看持有锁的线程是否很快就会释放锁。</p>\n<p>而为了让当前线程“稍等一下”，我们需让当前线程进行自旋，如果在自旋完成后前面锁定同步资源的线程已经释放了锁，那么当前线程就可以不必阻塞而是直接获取同步资源，从而避免切换线程的开销。这就是自旋锁。reference <a href=\"https://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&mid=2651749434&idx=3&sn=5ffa63ad47fe166f2f1a9f604ed10091&chksm=bd12a5778a652c61509d9e718ab086ff27ad8768586ea9b38c3dcf9e017a8e49bcae3df9bcc8&scene=38#wechat_redirect\">here</a></p>\n<h1 id=\"公平锁-非公平锁\"><a href=\"#公平锁-非公平锁\" class=\"headerlink\" title=\"公平锁|非公平锁\"></a>公平锁|非公平锁</h1><p>简而言之，公平锁是好好排队的，非公平锁是插队来的。</p>\n<p>在类<code>ReentrantLock</code>中，有一个内部类<code>Sync</code>，他是继承<code>AbstractQueuedSnchronizer</code>的，对锁的添加、释放等操作大部分都是在<code>Sync</code>实现的，他又有<code>FairSync</code>和<code>NonfairSync</code>两个子类。<code>ReentrantLock</code>默认使用非公平锁。</p>\n<h1 id=\"独享锁-共享锁\"><a href=\"#独享锁-共享锁\" class=\"headerlink\" title=\"独享锁|共享锁\"></a>独享锁|共享锁</h1><p>别被名字搞晕了！独享=排他=互斥锁，同《操作系统》中的相关概念。如果数据身上有了一把排他锁，那么其他线程就不能再对他施加任何锁，例如JDK中的<code>synchronized</code>和并发包中的<code>Lock</code>。</p>\n<p>共享锁是指数据身上有了共享锁，其他线程也可以在他身上加锁，只能加共享锁。获得共享锁的线程只能读数据，不能修改数据。</p>\n<p>独享锁和共享锁也是通过AQS来实现的。具体参考类<code>ReentrantReadWriteLock</code>。类中有<code>ReadLock</code>和<code>WriteLock</code>两把锁，</p>"},{"title":"mybatis","date":"2020-08-05T14:21:19.000Z","_content":"\nMybatis帮助我们提升与数据库交互的效率，简化了JDBC的样板代码。\n\n<!--more-->\n\n# 流程\n\n```flow\nstart=>start: start\nconfig=>operation: mybatis-config.xml\nbuild=>operation: SqlSessionFactoryBuilder\nfactory=>operation: SqlSessionFactory\nsession=>parallel: SqlSession\nmapper=>operation: Sql Mapper\nend=>end: end\n\nstart->config->build->factory->session\nsession(path1,)->end\nsession(path2,right)->mapper->end\n```\n\n对于`SqlSessionFactoryBuilder`来说，作用是创建`SqlSessionFactory`，一旦创建完工厂就没用了，所以是作为**局部变量**；而对于`SqlSessionFactory`，可以把它看作*连接池*，应该一直运行，不应重复创建、销毁或另建实例（单例模式登场），否则浪费资源，他可以创建`SqlSession` 。创建`SqlSession`后用来链接数据库，每个session被看作是请求数据库，他是**线程不安全**的，每个线程都应有自己的session，不共享，所以最佳作用域是**方法域**，即每次与数据库交互都创建一个`SqlSession`，用完关闭（关闭是为了释放资源给别的线程使用，否则并发大了容易宕机）。\n\n## 属性名与数据库表字段名\n\n当pojo中的实例变量与数据库字段中不一致时，可以使用`resultMap`来解决，即**结果集映射**。\n\n也常用`resultType`，但是他是简单地将所有列映射到HashMap中的key上，很单一，不适合处理复杂情况，而map可以更加灵活地处理情况。用来`resultMap`时可以去掉`resultType`属性。\n\n## 日志工厂\n\nmybatis会默认去寻找日志框架，配置后会有sql信息输出，十分有用！\n\n```xml\n<settings>\n\t<setting name=\"logImpl\" value=\"log4j\"/>\n</settings>\n```\n\n## 分页\n\nmybatis支持分页，有`limit`和`rowBounts`两个方法。区别是前者在sql中实现，后者面向对象。\n\n```sql\nselect * from USER limit #{index},#{size}\n```\n\n# 缓存\n\n默认定义了两级缓存：一级缓存、二级缓存\n\n## 一级缓存\n\n默认开启，在session的`close`之前都有效，如果是查询相同的数据，直接在缓存中拿。\n\n## 二级缓存\n\n需要手动开启和配置，基于`namespace`级别，有`Cache`接口来自定义实现。","source":"_posts/mybatis.md","raw":"---\ntitle: mybatis\ndate: 2020-08-05 22:21:19\ncategories: Java\ntags: mybatis\n---\n\nMybatis帮助我们提升与数据库交互的效率，简化了JDBC的样板代码。\n\n<!--more-->\n\n# 流程\n\n```flow\nstart=>start: start\nconfig=>operation: mybatis-config.xml\nbuild=>operation: SqlSessionFactoryBuilder\nfactory=>operation: SqlSessionFactory\nsession=>parallel: SqlSession\nmapper=>operation: Sql Mapper\nend=>end: end\n\nstart->config->build->factory->session\nsession(path1,)->end\nsession(path2,right)->mapper->end\n```\n\n对于`SqlSessionFactoryBuilder`来说，作用是创建`SqlSessionFactory`，一旦创建完工厂就没用了，所以是作为**局部变量**；而对于`SqlSessionFactory`，可以把它看作*连接池*，应该一直运行，不应重复创建、销毁或另建实例（单例模式登场），否则浪费资源，他可以创建`SqlSession` 。创建`SqlSession`后用来链接数据库，每个session被看作是请求数据库，他是**线程不安全**的，每个线程都应有自己的session，不共享，所以最佳作用域是**方法域**，即每次与数据库交互都创建一个`SqlSession`，用完关闭（关闭是为了释放资源给别的线程使用，否则并发大了容易宕机）。\n\n## 属性名与数据库表字段名\n\n当pojo中的实例变量与数据库字段中不一致时，可以使用`resultMap`来解决，即**结果集映射**。\n\n也常用`resultType`，但是他是简单地将所有列映射到HashMap中的key上，很单一，不适合处理复杂情况，而map可以更加灵活地处理情况。用来`resultMap`时可以去掉`resultType`属性。\n\n## 日志工厂\n\nmybatis会默认去寻找日志框架，配置后会有sql信息输出，十分有用！\n\n```xml\n<settings>\n\t<setting name=\"logImpl\" value=\"log4j\"/>\n</settings>\n```\n\n## 分页\n\nmybatis支持分页，有`limit`和`rowBounts`两个方法。区别是前者在sql中实现，后者面向对象。\n\n```sql\nselect * from USER limit #{index},#{size}\n```\n\n# 缓存\n\n默认定义了两级缓存：一级缓存、二级缓存\n\n## 一级缓存\n\n默认开启，在session的`close`之前都有效，如果是查询相同的数据，直接在缓存中拿。\n\n## 二级缓存\n\n需要手动开启和配置，基于`namespace`级别，有`Cache`接口来自定义实现。","slug":"mybatis","published":1,"updated":"2020-08-05T16:02:18.465Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgd0002fbyih09177mo3","content":"<p>Mybatis帮助我们提升与数据库交互的效率，简化了JDBC的样板代码。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start&#x3D;&gt;start: start</span><br><span class=\"line\">config&#x3D;&gt;operation: mybatis-config.xml</span><br><span class=\"line\">build&#x3D;&gt;operation: SqlSessionFactoryBuilder</span><br><span class=\"line\">factory&#x3D;&gt;operation: SqlSessionFactory</span><br><span class=\"line\">session&#x3D;&gt;parallel: SqlSession</span><br><span class=\"line\">mapper&#x3D;&gt;operation: Sql Mapper</span><br><span class=\"line\">end&#x3D;&gt;end: end</span><br><span class=\"line\"></span><br><span class=\"line\">start-&gt;config-&gt;build-&gt;factory-&gt;session</span><br><span class=\"line\">session(path1,)-&gt;end</span><br><span class=\"line\">session(path2,right)-&gt;mapper-&gt;end</span><br></pre></td></tr></table></figure>\n\n<p>对于<code>SqlSessionFactoryBuilder</code>来说，作用是创建<code>SqlSessionFactory</code>，一旦创建完工厂就没用了，所以是作为<strong>局部变量</strong>；而对于<code>SqlSessionFactory</code>，可以把它看作<em>连接池</em>，应该一直运行，不应重复创建、销毁或另建实例（单例模式登场），否则浪费资源，他可以创建<code>SqlSession</code> 。创建<code>SqlSession</code>后用来链接数据库，每个session被看作是请求数据库，他是<strong>线程不安全</strong>的，每个线程都应有自己的session，不共享，所以最佳作用域是<strong>方法域</strong>，即每次与数据库交互都创建一个<code>SqlSession</code>，用完关闭（关闭是为了释放资源给别的线程使用，否则并发大了容易宕机）。</p>\n<h2 id=\"属性名与数据库表字段名\"><a href=\"#属性名与数据库表字段名\" class=\"headerlink\" title=\"属性名与数据库表字段名\"></a>属性名与数据库表字段名</h2><p>当pojo中的实例变量与数据库字段中不一致时，可以使用<code>resultMap</code>来解决，即<strong>结果集映射</strong>。</p>\n<p>也常用<code>resultType</code>，但是他是简单地将所有列映射到HashMap中的key上，很单一，不适合处理复杂情况，而map可以更加灵活地处理情况。用来<code>resultMap</code>时可以去掉<code>resultType</code>属性。</p>\n<h2 id=\"日志工厂\"><a href=\"#日志工厂\" class=\"headerlink\" title=\"日志工厂\"></a>日志工厂</h2><p>mybatis会默认去寻找日志框架，配置后会有sql信息输出，十分有用！</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;logImpl&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;log4j&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分页\"><a href=\"#分页\" class=\"headerlink\" title=\"分页\"></a>分页</h2><p>mybatis支持分页，有<code>limit</code>和<code>rowBounts</code>两个方法。区别是前者在sql中实现，后者面向对象。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">USER</span> <span class=\"keyword\">limit</span> <span class=\"comment\">#&#123;index&#125;,#&#123;size&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h1><p>默认定义了两级缓存：一级缓存、二级缓存</p>\n<h2 id=\"一级缓存\"><a href=\"#一级缓存\" class=\"headerlink\" title=\"一级缓存\"></a>一级缓存</h2><p>默认开启，在session的<code>close</code>之前都有效，如果是查询相同的数据，直接在缓存中拿。</p>\n<h2 id=\"二级缓存\"><a href=\"#二级缓存\" class=\"headerlink\" title=\"二级缓存\"></a>二级缓存</h2><p>需要手动开启和配置，基于<code>namespace</code>级别，有<code>Cache</code>接口来自定义实现。</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>Mybatis帮助我们提升与数据库交互的效率，简化了JDBC的样板代码。</p>","more":"<h1 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start&#x3D;&gt;start: start</span><br><span class=\"line\">config&#x3D;&gt;operation: mybatis-config.xml</span><br><span class=\"line\">build&#x3D;&gt;operation: SqlSessionFactoryBuilder</span><br><span class=\"line\">factory&#x3D;&gt;operation: SqlSessionFactory</span><br><span class=\"line\">session&#x3D;&gt;parallel: SqlSession</span><br><span class=\"line\">mapper&#x3D;&gt;operation: Sql Mapper</span><br><span class=\"line\">end&#x3D;&gt;end: end</span><br><span class=\"line\"></span><br><span class=\"line\">start-&gt;config-&gt;build-&gt;factory-&gt;session</span><br><span class=\"line\">session(path1,)-&gt;end</span><br><span class=\"line\">session(path2,right)-&gt;mapper-&gt;end</span><br></pre></td></tr></table></figure>\n\n<p>对于<code>SqlSessionFactoryBuilder</code>来说，作用是创建<code>SqlSessionFactory</code>，一旦创建完工厂就没用了，所以是作为<strong>局部变量</strong>；而对于<code>SqlSessionFactory</code>，可以把它看作<em>连接池</em>，应该一直运行，不应重复创建、销毁或另建实例（单例模式登场），否则浪费资源，他可以创建<code>SqlSession</code> 。创建<code>SqlSession</code>后用来链接数据库，每个session被看作是请求数据库，他是<strong>线程不安全</strong>的，每个线程都应有自己的session，不共享，所以最佳作用域是<strong>方法域</strong>，即每次与数据库交互都创建一个<code>SqlSession</code>，用完关闭（关闭是为了释放资源给别的线程使用，否则并发大了容易宕机）。</p>\n<h2 id=\"属性名与数据库表字段名\"><a href=\"#属性名与数据库表字段名\" class=\"headerlink\" title=\"属性名与数据库表字段名\"></a>属性名与数据库表字段名</h2><p>当pojo中的实例变量与数据库字段中不一致时，可以使用<code>resultMap</code>来解决，即<strong>结果集映射</strong>。</p>\n<p>也常用<code>resultType</code>，但是他是简单地将所有列映射到HashMap中的key上，很单一，不适合处理复杂情况，而map可以更加灵活地处理情况。用来<code>resultMap</code>时可以去掉<code>resultType</code>属性。</p>\n<h2 id=\"日志工厂\"><a href=\"#日志工厂\" class=\"headerlink\" title=\"日志工厂\"></a>日志工厂</h2><p>mybatis会默认去寻找日志框架，配置后会有sql信息输出，十分有用！</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;logImpl&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;log4j&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分页\"><a href=\"#分页\" class=\"headerlink\" title=\"分页\"></a>分页</h2><p>mybatis支持分页，有<code>limit</code>和<code>rowBounts</code>两个方法。区别是前者在sql中实现，后者面向对象。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">USER</span> <span class=\"keyword\">limit</span> <span class=\"comment\">#&#123;index&#125;,#&#123;size&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h1><p>默认定义了两级缓存：一级缓存、二级缓存</p>\n<h2 id=\"一级缓存\"><a href=\"#一级缓存\" class=\"headerlink\" title=\"一级缓存\"></a>一级缓存</h2><p>默认开启，在session的<code>close</code>之前都有效，如果是查询相同的数据，直接在缓存中拿。</p>\n<h2 id=\"二级缓存\"><a href=\"#二级缓存\" class=\"headerlink\" title=\"二级缓存\"></a>二级缓存</h2><p>需要手动开启和配置，基于<code>namespace</code>级别，有<code>Cache</code>接口来自定义实现。</p>"},{"title":"nginx","date":"2019-11-02T14:53:32.000Z","_content":"# NIGNX\n\n*Nginx* (engine x) 是一个高性能的HTTP和**反向代理**web服务器，同时也提供了IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。\n\n它是一款轻量级的Web服务器反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好。\n\n特点：\n\n- 反向代理\n- 负载均衡\n- 动静分离\n- 高可用\n\n\n\n## 反向代理\n\n客户端对代理是无感知的，因为客户端不需要任何配置就可以访问，只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，再返回给客户端。此时反向代理服务器的目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器IP地址。\n\n## 正向代理\n\n如果把局域网外的Internet比作资源库，则局域网中的客户端要访问Internet，则需要通过代理服务器来访问，这种代理服务就称作正向代理。（nginx还可以用作正向代理来进行上网功能。）\n\n正向访问需要在浏览器配置代理服务器。\n\n\n\n## 负载均衡\n\n单个服务器解决不了问题，我们增加服务器的数量，然后将请求分发到各个服务上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，即负载均衡。\n\n\n\n## 动静分离\n\n为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力。静态资源和动态资源分开部署放置两台不同的服务器。\n\n静态资源：html, css, js\n\n动态资源：jsp, servlet\n\n## 操作\n\n### 常用命令\n\n前提条件：进入nginx目录\n\n/usr/localnginx/sbin\n\n- 查看nginx版本号\n- 启动\n- 关闭\n- 重新加载nginx\n\n[referenct](https://mp.weixin.qq.com/s/PeNWaCDf_6gp2fCQa0Gvng)\n\n# 配置\n\n1. 配置EPEL源\n\n   ```bash\n   sudo yum install -y epel-release\n   sudo yum -y update\n   ```\n\n2. 安装nginx\n\n   ```bash\n   sudo yum instll -y nginx\n   ```\n\n   安装成功后：\n\n   `默认网站目录`：_/usr/share/nginx/html_\n\n   `默认的配置文件为`：_/etc/nginx/nginx.conf_\n\n   `自定义配置文件目录为`：_/etc/nginx/conf.d/_\n\n3. 开启端口80和443\n\n   如果关闭了防火墙，直接略过。\n\n   ```bash\n   sudo firewall-cmd --permanent --zone=public --add-service=http\n   sudo firewall-cmd --permanent --zone=public --add-service=https\n   sudo firewall-cmd --reload\n   ```\n\n4. 命令\n\n   - 启动\n\n     ```bash\n     systemctl start nginx\n     ```\n\n   - 停止\n\n     ```bash\n     systemctl stop nginx\n     ```\n\n   - 重启\n\n     ```bash\n     systemctl restart nginx\n     ```\n\n   - 查看状态\n\n     ```bash\n     systemctl status nginx\n     ```\n\n   - 启用开机启动\n\n     ```bash\n     systemctl enable nginx\n     ```\n\n     测试的时候，直接`nginx`命令即可，方便调试，调试时使用：\n\n     ```bash\n     nginx -t\n     ```\n\n     ```bash\n     nginx -s reload\n     ```\n\n     \n\n   - 禁止开机启动\n\n     ```bash\n     systemctl disbale nginx\n     ```\n\n5. https\n\n   1. 关于https的相关证书，可以从阿里云控制台获取（因为我租用的是阿里云服务器）。\n\n   3. 拷贝证书至nginx\n   \n      domain为个人域名。\n   \n      ```bash\n   mkdir -p /etc/nginx/ssl\n      \n   acme.sh --install-cert -d domain \\\n      --key-file       /etc/nginx/ssl/domain.key  \\\n      --fullchain-file /etc/nginx/ssl/domain.cer \\\n      --reloadcmd     \"service nginx force-reload\"\n      ```\n   \n6. 配置nginx\n\n   删除**/etc/nginx/nginx.conf**中的server部分代码\n\n   ```markdown\n   server{\n   ...\n   }\n   ```\n\n   在**/etc/nginx/conf.d**创建自定义配置文件夹**default.conf**\n\n   ```properties\n   server {\n       listen 80;\n       listen 443 ssl;\n       server_name  domain www.domain;\n       location / {\n            root /usr/share/nginx/html;\n            index  index.html index.htm;\n        }\n   \n       ssl_certificate /etc/nginx/ssl/domain.crt;\n       ssl_certificate_key /etc/nginx/ssl/domain.key;\n       ssl_session_timeout  5m;\n       ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n       ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;\n       ssl_prefer_server_ciphers  on;\n   \n       error_page 497  https://$host$uri?$args;\n   }\n   ```\n   \n\n   \n\n   \n","source":"_posts/nginx.md","raw":"---\ntitle: nginx\ndate: 2019-11-02 22:53:32\ncategories: Network\ntags: network\n---\n# NIGNX\n\n*Nginx* (engine x) 是一个高性能的HTTP和**反向代理**web服务器，同时也提供了IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。\n\n它是一款轻量级的Web服务器反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好。\n\n特点：\n\n- 反向代理\n- 负载均衡\n- 动静分离\n- 高可用\n\n\n\n## 反向代理\n\n客户端对代理是无感知的，因为客户端不需要任何配置就可以访问，只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，再返回给客户端。此时反向代理服务器的目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器IP地址。\n\n## 正向代理\n\n如果把局域网外的Internet比作资源库，则局域网中的客户端要访问Internet，则需要通过代理服务器来访问，这种代理服务就称作正向代理。（nginx还可以用作正向代理来进行上网功能。）\n\n正向访问需要在浏览器配置代理服务器。\n\n\n\n## 负载均衡\n\n单个服务器解决不了问题，我们增加服务器的数量，然后将请求分发到各个服务上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，即负载均衡。\n\n\n\n## 动静分离\n\n为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力。静态资源和动态资源分开部署放置两台不同的服务器。\n\n静态资源：html, css, js\n\n动态资源：jsp, servlet\n\n## 操作\n\n### 常用命令\n\n前提条件：进入nginx目录\n\n/usr/localnginx/sbin\n\n- 查看nginx版本号\n- 启动\n- 关闭\n- 重新加载nginx\n\n[referenct](https://mp.weixin.qq.com/s/PeNWaCDf_6gp2fCQa0Gvng)\n\n# 配置\n\n1. 配置EPEL源\n\n   ```bash\n   sudo yum install -y epel-release\n   sudo yum -y update\n   ```\n\n2. 安装nginx\n\n   ```bash\n   sudo yum instll -y nginx\n   ```\n\n   安装成功后：\n\n   `默认网站目录`：_/usr/share/nginx/html_\n\n   `默认的配置文件为`：_/etc/nginx/nginx.conf_\n\n   `自定义配置文件目录为`：_/etc/nginx/conf.d/_\n\n3. 开启端口80和443\n\n   如果关闭了防火墙，直接略过。\n\n   ```bash\n   sudo firewall-cmd --permanent --zone=public --add-service=http\n   sudo firewall-cmd --permanent --zone=public --add-service=https\n   sudo firewall-cmd --reload\n   ```\n\n4. 命令\n\n   - 启动\n\n     ```bash\n     systemctl start nginx\n     ```\n\n   - 停止\n\n     ```bash\n     systemctl stop nginx\n     ```\n\n   - 重启\n\n     ```bash\n     systemctl restart nginx\n     ```\n\n   - 查看状态\n\n     ```bash\n     systemctl status nginx\n     ```\n\n   - 启用开机启动\n\n     ```bash\n     systemctl enable nginx\n     ```\n\n     测试的时候，直接`nginx`命令即可，方便调试，调试时使用：\n\n     ```bash\n     nginx -t\n     ```\n\n     ```bash\n     nginx -s reload\n     ```\n\n     \n\n   - 禁止开机启动\n\n     ```bash\n     systemctl disbale nginx\n     ```\n\n5. https\n\n   1. 关于https的相关证书，可以从阿里云控制台获取（因为我租用的是阿里云服务器）。\n\n   3. 拷贝证书至nginx\n   \n      domain为个人域名。\n   \n      ```bash\n   mkdir -p /etc/nginx/ssl\n      \n   acme.sh --install-cert -d domain \\\n      --key-file       /etc/nginx/ssl/domain.key  \\\n      --fullchain-file /etc/nginx/ssl/domain.cer \\\n      --reloadcmd     \"service nginx force-reload\"\n      ```\n   \n6. 配置nginx\n\n   删除**/etc/nginx/nginx.conf**中的server部分代码\n\n   ```markdown\n   server{\n   ...\n   }\n   ```\n\n   在**/etc/nginx/conf.d**创建自定义配置文件夹**default.conf**\n\n   ```properties\n   server {\n       listen 80;\n       listen 443 ssl;\n       server_name  domain www.domain;\n       location / {\n            root /usr/share/nginx/html;\n            index  index.html index.htm;\n        }\n   \n       ssl_certificate /etc/nginx/ssl/domain.crt;\n       ssl_certificate_key /etc/nginx/ssl/domain.key;\n       ssl_session_timeout  5m;\n       ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n       ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;\n       ssl_prefer_server_ciphers  on;\n   \n       error_page 497  https://$host$uri?$args;\n   }\n   ```\n   \n\n   \n\n   \n","slug":"nginx","published":1,"updated":"2020-07-19T17:29:13.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgd1002ibyih1tos61ra","content":"<h1 id=\"NIGNX\"><a href=\"#NIGNX\" class=\"headerlink\" title=\"NIGNX\"></a>NIGNX</h1><p><em>Nginx</em> (engine x) 是一个高性能的HTTP和<strong>反向代理</strong>web服务器，同时也提供了IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。</p>\n<p>它是一款轻量级的Web服务器反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好。</p>\n<p>特点：</p>\n<ul>\n<li>反向代理</li>\n<li>负载均衡</li>\n<li>动静分离</li>\n<li>高可用</li>\n</ul>\n<h2 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h2><p>客户端对代理是无感知的，因为客户端不需要任何配置就可以访问，只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，再返回给客户端。此时反向代理服务器的目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器IP地址。</p>\n<h2 id=\"正向代理\"><a href=\"#正向代理\" class=\"headerlink\" title=\"正向代理\"></a>正向代理</h2><p>如果把局域网外的Internet比作资源库，则局域网中的客户端要访问Internet，则需要通过代理服务器来访问，这种代理服务就称作正向代理。（nginx还可以用作正向代理来进行上网功能。）</p>\n<p>正向访问需要在浏览器配置代理服务器。</p>\n<h2 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h2><p>单个服务器解决不了问题，我们增加服务器的数量，然后将请求分发到各个服务上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，即负载均衡。</p>\n<h2 id=\"动静分离\"><a href=\"#动静分离\" class=\"headerlink\" title=\"动静分离\"></a>动静分离</h2><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力。静态资源和动态资源分开部署放置两台不同的服务器。</p>\n<p>静态资源：html, css, js</p>\n<p>动态资源：jsp, servlet</p>\n<h2 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h2><h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><p>前提条件：进入nginx目录</p>\n<p>/usr/localnginx/sbin</p>\n<ul>\n<li>查看nginx版本号</li>\n<li>启动</li>\n<li>关闭</li>\n<li>重新加载nginx</li>\n</ul>\n<p><a href=\"https://mp.weixin.qq.com/s/PeNWaCDf_6gp2fCQa0Gvng\">referenct</a></p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><ol>\n<li><p>配置EPEL源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y epel-release</span><br><span class=\"line\">sudo yum -y update</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum instll -y nginx</span><br></pre></td></tr></table></figure>\n\n<p>安装成功后：</p>\n<p><code>默认网站目录</code>：<em>/usr/share/nginx/html</em></p>\n<p><code>默认的配置文件为</code>：<em>/etc/nginx/nginx.conf</em></p>\n<p><code>自定义配置文件目录为</code>：<em>/etc/nginx/conf.d/</em></p>\n</li>\n<li><p>开启端口80和443</p>\n<p>如果关闭了防火墙，直接略过。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo firewall-cmd --permanent --zone=public --add-service=http</span><br><span class=\"line\">sudo firewall-cmd --permanent --zone=public --add-service=https</span><br><span class=\"line\">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>命令</p>\n<ul>\n<li><p>启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>停止</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启用开机启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> nginx</span><br></pre></td></tr></table></figure>\n\n<p>测试的时候，直接<code>nginx</code>命令即可，方便调试，调试时使用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p>禁止开机启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl disbale nginx</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<ol start=\"5\">\n<li><p>https</p>\n<ol>\n<li><p>关于https的相关证书，可以从阿里云控制台获取（因为我租用的是阿里云服务器）。</p>\n</li>\n<li><p>拷贝证书至nginx</p>\n<p>domain为个人域名。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /etc/nginx/ssl</span><br><span class=\"line\">   </span><br><span class=\"line\">acme.sh --install-cert -d domain \\</span><br><span class=\"line\">   --key-file       /etc/nginx/ssl/domain.key  \\</span><br><span class=\"line\">   --fullchain-file /etc/nginx/ssl/domain.cer \\</span><br><span class=\"line\">   --reloadcmd     <span class=\"string\">&quot;service nginx force-reload&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>配置nginx</p>\n<p>删除**/etc/nginx/nginx.conf**中的server部分代码</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在**/etc/nginx/conf.d<strong>创建自定义配置文件夹</strong>default.conf**</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">listen</span> <span class=\"string\">80;</span></span><br><span class=\"line\">    <span class=\"attr\">listen</span> <span class=\"string\">443 ssl;</span></span><br><span class=\"line\">    <span class=\"attr\">server_name</span>  <span class=\"string\">domain www.domain;</span></span><br><span class=\"line\">    <span class=\"attr\">location</span> <span class=\"string\">/ &#123;</span></span><br><span class=\"line\">         <span class=\"attr\">root</span> <span class=\"string\">/usr/share/nginx/html;</span></span><br><span class=\"line\">         <span class=\"attr\">index</span>  <span class=\"string\">index.html index.htm;</span></span><br><span class=\"line\">     <span class=\"attr\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">ssl_certificate</span> <span class=\"string\">/etc/nginx/ssl/domain.crt;</span></span><br><span class=\"line\">    <span class=\"attr\">ssl_certificate_key</span> <span class=\"string\">/etc/nginx/ssl/domain.key;</span></span><br><span class=\"line\">    <span class=\"attr\">ssl_session_timeout</span>  <span class=\"string\">5m;</span></span><br><span class=\"line\">    <span class=\"attr\">ssl_protocols</span> <span class=\"string\">TLSv1 TLSv1.1 TLSv1.2;</span></span><br><span class=\"line\">    <span class=\"attr\">ssl_ciphers</span> <span class=\"string\">ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;</span></span><br><span class=\"line\">    <span class=\"attr\">ssl_prefer_server_ciphers</span>  <span class=\"string\">on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">error_page</span> <span class=\"string\">497  https://$host$uri?$args;</span></span><br><span class=\"line\"><span class=\"attr\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n</li>\n</ol>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"","more":"<h1 id=\"NIGNX\"><a href=\"#NIGNX\" class=\"headerlink\" title=\"NIGNX\"></a>NIGNX</h1><p><em>Nginx</em> (engine x) 是一个高性能的HTTP和<strong>反向代理</strong>web服务器，同时也提供了IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。</p>\n<p>它是一款轻量级的Web服务器反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好。</p>\n<p>特点：</p>\n<ul>\n<li>反向代理</li>\n<li>负载均衡</li>\n<li>动静分离</li>\n<li>高可用</li>\n</ul>\n<h2 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h2><p>客户端对代理是无感知的，因为客户端不需要任何配置就可以访问，只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，再返回给客户端。此时反向代理服务器的目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器IP地址。</p>\n<h2 id=\"正向代理\"><a href=\"#正向代理\" class=\"headerlink\" title=\"正向代理\"></a>正向代理</h2><p>如果把局域网外的Internet比作资源库，则局域网中的客户端要访问Internet，则需要通过代理服务器来访问，这种代理服务就称作正向代理。（nginx还可以用作正向代理来进行上网功能。）</p>\n<p>正向访问需要在浏览器配置代理服务器。</p>\n<h2 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h2><p>单个服务器解决不了问题，我们增加服务器的数量，然后将请求分发到各个服务上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，即负载均衡。</p>\n<h2 id=\"动静分离\"><a href=\"#动静分离\" class=\"headerlink\" title=\"动静分离\"></a>动静分离</h2><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力。静态资源和动态资源分开部署放置两台不同的服务器。</p>\n<p>静态资源：html, css, js</p>\n<p>动态资源：jsp, servlet</p>\n<h2 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h2><h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><p>前提条件：进入nginx目录</p>\n<p>/usr/localnginx/sbin</p>\n<ul>\n<li>查看nginx版本号</li>\n<li>启动</li>\n<li>关闭</li>\n<li>重新加载nginx</li>\n</ul>\n<p><a href=\"https://mp.weixin.qq.com/s/PeNWaCDf_6gp2fCQa0Gvng\">referenct</a></p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><ol>\n<li><p>配置EPEL源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y epel-release</span><br><span class=\"line\">sudo yum -y update</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum instll -y nginx</span><br></pre></td></tr></table></figure>\n\n<p>安装成功后：</p>\n<p><code>默认网站目录</code>：<em>/usr/share/nginx/html</em></p>\n<p><code>默认的配置文件为</code>：<em>/etc/nginx/nginx.conf</em></p>\n<p><code>自定义配置文件目录为</code>：<em>/etc/nginx/conf.d/</em></p>\n</li>\n<li><p>开启端口80和443</p>\n<p>如果关闭了防火墙，直接略过。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo firewall-cmd --permanent --zone=public --add-service=http</span><br><span class=\"line\">sudo firewall-cmd --permanent --zone=public --add-service=https</span><br><span class=\"line\">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>命令</p>\n<ul>\n<li><p>启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>停止</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启用开机启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> nginx</span><br></pre></td></tr></table></figure>\n\n<p>测试的时候，直接<code>nginx</code>命令即可，方便调试，调试时使用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p>禁止开机启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl disbale nginx</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<ol start=\"5\">\n<li><p>https</p>\n<ol>\n<li><p>关于https的相关证书，可以从阿里云控制台获取（因为我租用的是阿里云服务器）。</p>\n</li>\n<li><p>拷贝证书至nginx</p>\n<p>domain为个人域名。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /etc/nginx/ssl</span><br><span class=\"line\">   </span><br><span class=\"line\">acme.sh --install-cert -d domain \\</span><br><span class=\"line\">   --key-file       /etc/nginx/ssl/domain.key  \\</span><br><span class=\"line\">   --fullchain-file /etc/nginx/ssl/domain.cer \\</span><br><span class=\"line\">   --reloadcmd     <span class=\"string\">&quot;service nginx force-reload&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>配置nginx</p>\n<p>删除**/etc/nginx/nginx.conf**中的server部分代码</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在**/etc/nginx/conf.d<strong>创建自定义配置文件夹</strong>default.conf**</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">listen</span> <span class=\"string\">80;</span></span><br><span class=\"line\">    <span class=\"attr\">listen</span> <span class=\"string\">443 ssl;</span></span><br><span class=\"line\">    <span class=\"attr\">server_name</span>  <span class=\"string\">domain www.domain;</span></span><br><span class=\"line\">    <span class=\"attr\">location</span> <span class=\"string\">/ &#123;</span></span><br><span class=\"line\">         <span class=\"attr\">root</span> <span class=\"string\">/usr/share/nginx/html;</span></span><br><span class=\"line\">         <span class=\"attr\">index</span>  <span class=\"string\">index.html index.htm;</span></span><br><span class=\"line\">     <span class=\"attr\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">ssl_certificate</span> <span class=\"string\">/etc/nginx/ssl/domain.crt;</span></span><br><span class=\"line\">    <span class=\"attr\">ssl_certificate_key</span> <span class=\"string\">/etc/nginx/ssl/domain.key;</span></span><br><span class=\"line\">    <span class=\"attr\">ssl_session_timeout</span>  <span class=\"string\">5m;</span></span><br><span class=\"line\">    <span class=\"attr\">ssl_protocols</span> <span class=\"string\">TLSv1 TLSv1.1 TLSv1.2;</span></span><br><span class=\"line\">    <span class=\"attr\">ssl_ciphers</span> <span class=\"string\">ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;</span></span><br><span class=\"line\">    <span class=\"attr\">ssl_prefer_server_ciphers</span>  <span class=\"string\">on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">error_page</span> <span class=\"string\">497  https://$host$uri?$args;</span></span><br><span class=\"line\"><span class=\"attr\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n</li>\n</ol>\n"},{"title":"observer","date":"2020-06-12T09:12:38.000Z","_content":"\n观察者模式，融入一个场景的话就是观察者能够及时的知晓被观察者的动态。换句话说，改变常规的获取信息的方式，就是被观察者的每次动态推送到观察者。有咩有MQ的味道？\n\n<!--more-->\n\n一个好的设计模式能拯救一堆代码。\n\n# 场景\n\n设计一个应用：气象站检测到数据，显示装置应及时显示数据，气象站提供了一组API。\n\n```java\npublic class WeatherData(){\n    getTemperature(){};\n    getHumidity(){};\n    \n    /**\n    * 一旦气象更新，此方法会被调用。\n    */\n    measuremetnsChanged(){\n        // our codes go here\n    };\n}\n```\n\n如果直接在`measuremetnsChanged`这个方法里写参数的更新，那么毫无疑问，违反了基本的编码常识：面向接口编程与松耦合。在后续更改显示装置代码的话，还得修改程序。\n\n```java\npublic void measuremetnsChanged(){\n    currentConditionsDisplay.update(getTemperature(), getHumiditiy(), getPressure());\n    forecastDisplay.update(getTemperature(), getHumiditiy(), getPressure());\n    ......\n}\n```\n\n# 观察者模式\n\n先看看我们平时是怎么浏览微信订阅号消息：\n\n首先整个流程应该有两个参与者\n\n- 订阅号运营者\n- 订阅者\n\n订阅号运营者需要关心的是如何高质量完成推文，订阅者关心的是能否收到推文（前提是订阅了）。在微信上，我们只需要订阅感兴趣的订阅号，微信方就会实现推送订阅号的推文，运营者和订阅者只需专注于自己的事情就好。\n\n那么观察者模式也类似：\n\n> 订阅号运营者+订阅者=观察者模式\n\n不一样的是名称，订阅号运营者改为“subject\"（主题），订阅者改为”observer\"（观察者）。\n\n由于一个主题可以被多个观察者订阅，所以，它实现了对象之间**一对多**；同时，这种对象设计也让主题和观察者之间**松耦合**.\n\n对于主题，只知道观察者实现了某个接口（observer），不需要知道观察者的具体类型、做了什么，而且，任何时候都可以添加/删除观察者，因为主题唯一依赖的是一个实现observer接口的对象列表。\n\n## 实现\n\n![Screenshot from 2020-06-12 18-03-04.png](https://i.loli.net/2020/06/12/cwTWVXNpIQ5ebGo.png)\n\n我们为subject定义一个接口，这样，无论有多少个主题，实现subject就可以了。对于观察者，除了要实现Observer接口外，有参构造函数必须要传入一个特定的主题，这样观察者才有意义。\n\n```java\npublic CurrentConditionsDisplay(Subject weatherData) {\n    this.weatherData = weatherData;\n    weatherData.registerObserver(this);\n}\n```\n\n以上是手动实现了观察者模式所需的api，事实上，java的util包中内置了观察者模式。只不过不是接口，而是类，使用时需要继承它，如果想同时实现它和另外一个父类就无法做到了，一定程度上限制了它的复用。所以还是根据业务手动创建观察者模式，并不难。\n\n完整代码参考：[项目传送门](https://github.com/Sebastian-Getts/designPatternsPractice)\n\n## 原理\n\n虽然类似订阅，但是主观对象是不同的！！！比如微信订阅号，是否接收通知（是否订阅）是由订阅者来决定的，而在观察者模式当中，主观对象是主题，这就好比订阅的后半段。观察者模式的主动权不在观察者，而在于“想让谁观察”的主题：在一个具体的类实现了主题接口后，他能决定在自己有变化时通知谁，所以实现主题与观察者之间的耦合是在观察者接口中的注册方法。可以在主题中实现一个数组，用于保存观察者，在主题有变化时遍历数组中的观察者，实现通知。\n\n# 应用\n\n观察者模式在JavaBeans、Swing和RMI中都实现了观察者模式。","source":"_posts/observer.md","raw":"---\ntitle: observer\ndate: 2020-06-12 17:12:38\ncategories: Java\ntags: design_patterns\n---\n\n观察者模式，融入一个场景的话就是观察者能够及时的知晓被观察者的动态。换句话说，改变常规的获取信息的方式，就是被观察者的每次动态推送到观察者。有咩有MQ的味道？\n\n<!--more-->\n\n一个好的设计模式能拯救一堆代码。\n\n# 场景\n\n设计一个应用：气象站检测到数据，显示装置应及时显示数据，气象站提供了一组API。\n\n```java\npublic class WeatherData(){\n    getTemperature(){};\n    getHumidity(){};\n    \n    /**\n    * 一旦气象更新，此方法会被调用。\n    */\n    measuremetnsChanged(){\n        // our codes go here\n    };\n}\n```\n\n如果直接在`measuremetnsChanged`这个方法里写参数的更新，那么毫无疑问，违反了基本的编码常识：面向接口编程与松耦合。在后续更改显示装置代码的话，还得修改程序。\n\n```java\npublic void measuremetnsChanged(){\n    currentConditionsDisplay.update(getTemperature(), getHumiditiy(), getPressure());\n    forecastDisplay.update(getTemperature(), getHumiditiy(), getPressure());\n    ......\n}\n```\n\n# 观察者模式\n\n先看看我们平时是怎么浏览微信订阅号消息：\n\n首先整个流程应该有两个参与者\n\n- 订阅号运营者\n- 订阅者\n\n订阅号运营者需要关心的是如何高质量完成推文，订阅者关心的是能否收到推文（前提是订阅了）。在微信上，我们只需要订阅感兴趣的订阅号，微信方就会实现推送订阅号的推文，运营者和订阅者只需专注于自己的事情就好。\n\n那么观察者模式也类似：\n\n> 订阅号运营者+订阅者=观察者模式\n\n不一样的是名称，订阅号运营者改为“subject\"（主题），订阅者改为”observer\"（观察者）。\n\n由于一个主题可以被多个观察者订阅，所以，它实现了对象之间**一对多**；同时，这种对象设计也让主题和观察者之间**松耦合**.\n\n对于主题，只知道观察者实现了某个接口（observer），不需要知道观察者的具体类型、做了什么，而且，任何时候都可以添加/删除观察者，因为主题唯一依赖的是一个实现observer接口的对象列表。\n\n## 实现\n\n![Screenshot from 2020-06-12 18-03-04.png](https://i.loli.net/2020/06/12/cwTWVXNpIQ5ebGo.png)\n\n我们为subject定义一个接口，这样，无论有多少个主题，实现subject就可以了。对于观察者，除了要实现Observer接口外，有参构造函数必须要传入一个特定的主题，这样观察者才有意义。\n\n```java\npublic CurrentConditionsDisplay(Subject weatherData) {\n    this.weatherData = weatherData;\n    weatherData.registerObserver(this);\n}\n```\n\n以上是手动实现了观察者模式所需的api，事实上，java的util包中内置了观察者模式。只不过不是接口，而是类，使用时需要继承它，如果想同时实现它和另外一个父类就无法做到了，一定程度上限制了它的复用。所以还是根据业务手动创建观察者模式，并不难。\n\n完整代码参考：[项目传送门](https://github.com/Sebastian-Getts/designPatternsPractice)\n\n## 原理\n\n虽然类似订阅，但是主观对象是不同的！！！比如微信订阅号，是否接收通知（是否订阅）是由订阅者来决定的，而在观察者模式当中，主观对象是主题，这就好比订阅的后半段。观察者模式的主动权不在观察者，而在于“想让谁观察”的主题：在一个具体的类实现了主题接口后，他能决定在自己有变化时通知谁，所以实现主题与观察者之间的耦合是在观察者接口中的注册方法。可以在主题中实现一个数组，用于保存观察者，在主题有变化时遍历数组中的观察者，实现通知。\n\n# 应用\n\n观察者模式在JavaBeans、Swing和RMI中都实现了观察者模式。","slug":"observer","published":1,"updated":"2020-07-19T17:29:13.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgd3002mbyihft1n58g9","content":"<p>观察者模式，融入一个场景的话就是观察者能够及时的知晓被观察者的动态。换句话说，改变常规的获取信息的方式，就是被观察者的每次动态推送到观察者。有咩有MQ的味道？</p>\n<a id=\"more\"></a>\n\n<p>一个好的设计模式能拯救一堆代码。</p>\n<h1 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h1><p>设计一个应用：气象站检测到数据，显示装置应及时显示数据，气象站提供了一组API。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> class <span class=\"title\">WeatherData</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    getTemperature()&#123;&#125;;</span><br><span class=\"line\">    getHumidity()&#123;&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 一旦气象更新，此方法会被调用。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    measuremetnsChanged()&#123;</span><br><span class=\"line\">        <span class=\"comment\">// our codes go here</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果直接在<code>measuremetnsChanged</code>这个方法里写参数的更新，那么毫无疑问，违反了基本的编码常识：面向接口编程与松耦合。在后续更改显示装置代码的话，还得修改程序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">measuremetnsChanged</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    currentConditionsDisplay.update(getTemperature(), getHumiditiy(), getPressure());</span><br><span class=\"line\">    forecastDisplay.update(getTemperature(), getHumiditiy(), getPressure());</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h1><p>先看看我们平时是怎么浏览微信订阅号消息：</p>\n<p>首先整个流程应该有两个参与者</p>\n<ul>\n<li>订阅号运营者</li>\n<li>订阅者</li>\n</ul>\n<p>订阅号运营者需要关心的是如何高质量完成推文，订阅者关心的是能否收到推文（前提是订阅了）。在微信上，我们只需要订阅感兴趣的订阅号，微信方就会实现推送订阅号的推文，运营者和订阅者只需专注于自己的事情就好。</p>\n<p>那么观察者模式也类似：</p>\n<blockquote>\n<p>订阅号运营者+订阅者=观察者模式</p>\n</blockquote>\n<p>不一样的是名称，订阅号运营者改为“subject”（主题），订阅者改为”observer”（观察者）。</p>\n<p>由于一个主题可以被多个观察者订阅，所以，它实现了对象之间<strong>一对多</strong>；同时，这种对象设计也让主题和观察者之间<strong>松耦合</strong>.</p>\n<p>对于主题，只知道观察者实现了某个接口（observer），不需要知道观察者的具体类型、做了什么，而且，任何时候都可以添加/删除观察者，因为主题唯一依赖的是一个实现observer接口的对象列表。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p><img src=\"https://i.loli.net/2020/06/12/cwTWVXNpIQ5ebGo.png\" alt=\"Screenshot from 2020-06-12 18-03-04.png\"></p>\n<p>我们为subject定义一个接口，这样，无论有多少个主题，实现subject就可以了。对于观察者，除了要实现Observer接口外，有参构造函数必须要传入一个特定的主题，这样观察者才有意义。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CurrentConditionsDisplay</span><span class=\"params\">(Subject weatherData)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.weatherData = weatherData;</span><br><span class=\"line\">    weatherData.registerObserver(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上是手动实现了观察者模式所需的api，事实上，java的util包中内置了观察者模式。只不过不是接口，而是类，使用时需要继承它，如果想同时实现它和另外一个父类就无法做到了，一定程度上限制了它的复用。所以还是根据业务手动创建观察者模式，并不难。</p>\n<p>完整代码参考：<a href=\"https://github.com/Sebastian-Getts/designPatternsPractice\">项目传送门</a></p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>虽然类似订阅，但是主观对象是不同的！！！比如微信订阅号，是否接收通知（是否订阅）是由订阅者来决定的，而在观察者模式当中，主观对象是主题，这就好比订阅的后半段。观察者模式的主动权不在观察者，而在于“想让谁观察”的主题：在一个具体的类实现了主题接口后，他能决定在自己有变化时通知谁，所以实现主题与观察者之间的耦合是在观察者接口中的注册方法。可以在主题中实现一个数组，用于保存观察者，在主题有变化时遍历数组中的观察者，实现通知。</p>\n<h1 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h1><p>观察者模式在JavaBeans、Swing和RMI中都实现了观察者模式。</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>观察者模式，融入一个场景的话就是观察者能够及时的知晓被观察者的动态。换句话说，改变常规的获取信息的方式，就是被观察者的每次动态推送到观察者。有咩有MQ的味道？</p>","more":"<p>一个好的设计模式能拯救一堆代码。</p>\n<h1 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h1><p>设计一个应用：气象站检测到数据，显示装置应及时显示数据，气象站提供了一组API。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> class <span class=\"title\">WeatherData</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    getTemperature()&#123;&#125;;</span><br><span class=\"line\">    getHumidity()&#123;&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 一旦气象更新，此方法会被调用。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    measuremetnsChanged()&#123;</span><br><span class=\"line\">        <span class=\"comment\">// our codes go here</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果直接在<code>measuremetnsChanged</code>这个方法里写参数的更新，那么毫无疑问，违反了基本的编码常识：面向接口编程与松耦合。在后续更改显示装置代码的话，还得修改程序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">measuremetnsChanged</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    currentConditionsDisplay.update(getTemperature(), getHumiditiy(), getPressure());</span><br><span class=\"line\">    forecastDisplay.update(getTemperature(), getHumiditiy(), getPressure());</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h1><p>先看看我们平时是怎么浏览微信订阅号消息：</p>\n<p>首先整个流程应该有两个参与者</p>\n<ul>\n<li>订阅号运营者</li>\n<li>订阅者</li>\n</ul>\n<p>订阅号运营者需要关心的是如何高质量完成推文，订阅者关心的是能否收到推文（前提是订阅了）。在微信上，我们只需要订阅感兴趣的订阅号，微信方就会实现推送订阅号的推文，运营者和订阅者只需专注于自己的事情就好。</p>\n<p>那么观察者模式也类似：</p>\n<blockquote>\n<p>订阅号运营者+订阅者=观察者模式</p>\n</blockquote>\n<p>不一样的是名称，订阅号运营者改为“subject”（主题），订阅者改为”observer”（观察者）。</p>\n<p>由于一个主题可以被多个观察者订阅，所以，它实现了对象之间<strong>一对多</strong>；同时，这种对象设计也让主题和观察者之间<strong>松耦合</strong>.</p>\n<p>对于主题，只知道观察者实现了某个接口（observer），不需要知道观察者的具体类型、做了什么，而且，任何时候都可以添加/删除观察者，因为主题唯一依赖的是一个实现observer接口的对象列表。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p><img src=\"https://i.loli.net/2020/06/12/cwTWVXNpIQ5ebGo.png\" alt=\"Screenshot from 2020-06-12 18-03-04.png\"></p>\n<p>我们为subject定义一个接口，这样，无论有多少个主题，实现subject就可以了。对于观察者，除了要实现Observer接口外，有参构造函数必须要传入一个特定的主题，这样观察者才有意义。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CurrentConditionsDisplay</span><span class=\"params\">(Subject weatherData)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.weatherData = weatherData;</span><br><span class=\"line\">    weatherData.registerObserver(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上是手动实现了观察者模式所需的api，事实上，java的util包中内置了观察者模式。只不过不是接口，而是类，使用时需要继承它，如果想同时实现它和另外一个父类就无法做到了，一定程度上限制了它的复用。所以还是根据业务手动创建观察者模式，并不难。</p>\n<p>完整代码参考：<a href=\"https://github.com/Sebastian-Getts/designPatternsPractice\">项目传送门</a></p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>虽然类似订阅，但是主观对象是不同的！！！比如微信订阅号，是否接收通知（是否订阅）是由订阅者来决定的，而在观察者模式当中，主观对象是主题，这就好比订阅的后半段。观察者模式的主动权不在观察者，而在于“想让谁观察”的主题：在一个具体的类实现了主题接口后，他能决定在自己有变化时通知谁，所以实现主题与观察者之间的耦合是在观察者接口中的注册方法。可以在主题中实现一个数组，用于保存观察者，在主题有变化时遍历数组中的观察者，实现通知。</p>\n<h1 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h1><p>观察者模式在JavaBeans、Swing和RMI中都实现了观察者模式。</p>"},{"title":"redis","date":"2020-06-09T13:54:01.000Z","_content":"\n常用redis，深入了解redis的性能和瓶颈。[reference](https://github.com/antirez/redis)\n\n<!--more-->\n\n# 介绍\n\nredis: **内存**中的数据结构存储系统，可以用作**数据库**、**缓存**和**消息中间件**，nosql的一种。\n\n## nosql\n\n关系型数据库不够用，出来了nosql。。。\n\n1. 一开始单体应用，小用户量能承受。但是当体量变大时：\n   - 数据量大\n   - 数据的索引大\n   - 访问量大\n2. 读写分离思想（垂直拆分），写一个库，其他库从这个库做同步，但是数据库大部分其实都是读，把刚查到的进行缓存，这样下一个要查且数据没变的话就用缓存中的数据。 添加一层**memcache**缓存\n3. 集群（水平拆分）：上面的读写分离copy多份。\n\nmysql早些年使用的是MyISAM引擎，特性是**表锁**（查询某个数据会将整个表锁起来，高并发下性能下滑），现在使用的是Innodb，改为了**行锁**。\n\n不能用mysql做实时存储和访问、个人信息、地理位置（如微信热门10万+的文章记录等）。\n\n### 特点\n\n1. 易于扩展，数据间没有关系（key value键值对），好比java面向接口，便于解偶。\n2. 大数据量也高性能（写8万次/秒，读11万次/秒）\n3. 多样型，不需要事先设计数据库\n4. 没有固定的查询语言；最终一致性\n5. 键值对存储，列存储，文档存储，图形存储库（社交）\n6. 高性能、高可用、高可扩\n7. CAP、BASE，异地多活\n8. 多样、实时、并发（Volume, Variety, Veiocity）\n\n与关系型一起使用。\n\n商品的描述、评论（文字比较多的）：文档型数据库（MongoDB）\n\n商品的基本信息（价格、商家、名称）：MySQL\n\n图片：FastDFS, GFS, HDFS, OSS...\n\n商品热门的波段信息：内存数据库（Redis，Tair，Memcache……）\n\n==没有什么不是加以层解决不了的==： 统一服务层。\n\n### 文档型数据库\n\nMongoDB，介于关系型和非关系型数据库中的中间产品，非关系型数据库中功能最丰富的。\n\n### KV键值对\n\nRedis，Tair\n\n### 列存储数据库\n\nHBase（大数据）\n\n分布式文件系统\n\n### 图\n\n类似知识图谱，不是存储图形。主要用于存储社交网络。\n\nNeo4j，InfoGrid。\n\n# Redis\n\nRemote Dictionary Server. C语言编写的。免费，开源，提供多种语言的api。\n\n- 内存存储、持久化，但是内存是断电即失，所以持久化很重要（rdb、aof）\n- 计时器、计数器（浏览量）\n\n## 测试\n\n安装后自带的测试工具\n\n```bash\nredis-benchmark -h localhost -p 6379 -100 -n 100000\n```\n\n## 基础\n\n默认16个数据库且使用的是第0个。 \n\n### GEOSPATIAL\n\n地理位置，不仅仅是GET、SET！根据经纬度获取距离。\n\n## springboot集成\n\n版本<2.0 底层使用的jedis，BIO，直连数据库，多线程下不安全，优化方式是jedis pool连接池。\n\n版本>2.0 底层使用的lettuce，NIO，采用netty，实例可以在多个线程中进行共享，不存在线程不安全的情况。\n\n## rdb\n\n为什么会有这个rdb？\n\nredis的高速查询来源于它的内存存储，由于内存断电即失，可以把rdb作为备份来弥补这个不足。所以rdb即redis databse。但是也不是每次操作都保存，否则性能急速降低，这也带来另一个问题，即最后一个/批操作不会被保存。\n\n```flow\nstart=>start: start\nend=>end: end\ncondition=>condition: 触发rdb\nrdbfile=>inputoutput: dump.rdb\noperation=>operation: go on dealing with\n\nstart->condition\ncondition(yes)->rdbfile->end\ncondition(no)->operation->end\n```\n\n#### 触发机制\n\n1. save的规则\n2. 执行flushall\n3. 退出redis\n\n产生备份，会自动生成一个dump.rdb\n\n#### 用rdb恢复\n\n```bash\nconfig get dir\n```\n\n#### 优点：\n\n1. 适合大数据\n2. 对数据完整性要求不高（比如90srdb一次，60s的时候宕机，就会造成数据丢失）\n\n#### 缺点：\n\n1. 需要一定的时间间隔进程操作\n2. fork进程的时候会占用一定的内容空间\n\n## AOF\n\nAppend Only File， 将我们的所有命令都记录下来，相当于history，恢复的时候再追加。这是另一种恢复的方法。\n\n- 大数据的情况下效率会比较低。\n- 默认是不开启的。\n\n开启后会记录操作记录，关闭redis的时候会产生aof文件，如果恶意篡改，redis无法正常启动。\n\n修复aof文件 `redis-check-aof --fix`\n\n### 优点：\n\n1. 每次修改都同步，文件的完整性更好，默认每秒同步一次，可能会丢失一秒的数据\n2. 从不同步效率最高\n\n### 缺点：\n\n1. 相对于数据文件，aof远大于rdb，修复的速度比rdb慢\n2. 默认是rdb，效率自然高于aof。\n\n**与rdb混合使用**\n\n## 主从复制\n\n将一台redis服务器的数据复制到其他的redis服务器，前者称为主节点，后者称为从结点。\n\n作用：数据冗余、故障恢复、负载均衡（读写分离）、高可用（集群）基石\n\nreids的容量有限，机器的内存不可能全部用来给redis做存储内存，最大不应该超过20G。\n\n默认情况下每台redis都是主节点；一个主节点可以有多个从结点，但是一个从结点只能有一个主节点。\n\n### 环境配置\n\n```shell\ninfo replication # 查看当前库的信息\n```\n\n一般情况下只用配置从机即可。\n\n```shell\nSLAVEOF ip:port # ip:port为主机\n```\n\n上面的是命令配置，只是暂时的。**实际生产应该修改配置文件**，在文件中写主机的地址和密码，主机负责写，从机负责读，主机的所有数据会自动被从机保存。\n\n#### 如果主机宕机了呢？\n\n默认情况下，主机挂了以后，用`info replication`查看剩余机器，从机运行正常，但是没有写操作了。主机恢复后，仍旧正常主从复制。考虑到主机要人工手动恢复、排查故障，仍旧会影响业务。\n\n更好的情况是，默认从剩余的从机中选择一个作为主机，继续完成写操作。\n\n- 全量复制 master将整个数据传送到slaver\n- 增量复制\n\n只要重新链接master，一次全量复制将被自动执行\n\n### 哨兵模式\n\nSentinel（Redis2.8起）后台监控主机是否故障，如果故障了根据投票数自动将从库转为主库。\n\n哨兵是一个独立的进程。通过发送命令，等待Redis服务器响应，从而监控运行的多个redis实例。为了防止哨兵挂了，还要配置哨兵集群。（如果一主二从，正常应该启动六个进程，加上哨兵的话）\n\n#### 优点\n\n1. 集群\n2. 主从切换\n\n#### 缺点\n\n1. 不方便在线扩容，一旦到达上线。\n2. 配置麻烦（配置文件的内容很多）。简单的话可以只启动一个哨兵监控主机，会自动检测到从机。\n\n## redis异常处理\n\n### 缓存穿透（一直查询不到）\n\n```flow\nstart=>start: request\nend=>end: response\ncondition=>condition: redis缓存中是否存在\nop1=>operation: select in mysql\nstart->condition\ncondition(yes)->end\ncondition(no)->op1->end\n```\n\n如果请求量非常大，redis相当于空白，都去请求到dao层，redis的作用就没了。\n\n#### 布隆过滤器\n\n它是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合则丢弃，避免了对底层存储系统的查询压力\n\n#### 缓存空对象\n\n### 缓存击穿（量太大，缓存过期）\n\n活力集中在一个点（一个热评的点，如微博）。\n\n#### 加互斥锁\n\n#### 设置热点数据永不过期\n\n### 缓存雪崩\n\n在某一个时间段，缓存集中过期失效，可能瞬间把数据库压跨。\n\n#### redis高可用\n\n#### 限流降级\n\n#### 数据预热\n\n正式部署前先把可能的数据访问一遍（加入缓存），设置不同的过期时间，让缓存失效的时间尽可能平均。\n\n","source":"_posts/redis.md","raw":"---\ntitle: redis\ndate: 2020-06-09 21:54:01\ncategories: DB\ntags: \n- redis\n- nosql\n---\n\n常用redis，深入了解redis的性能和瓶颈。[reference](https://github.com/antirez/redis)\n\n<!--more-->\n\n# 介绍\n\nredis: **内存**中的数据结构存储系统，可以用作**数据库**、**缓存**和**消息中间件**，nosql的一种。\n\n## nosql\n\n关系型数据库不够用，出来了nosql。。。\n\n1. 一开始单体应用，小用户量能承受。但是当体量变大时：\n   - 数据量大\n   - 数据的索引大\n   - 访问量大\n2. 读写分离思想（垂直拆分），写一个库，其他库从这个库做同步，但是数据库大部分其实都是读，把刚查到的进行缓存，这样下一个要查且数据没变的话就用缓存中的数据。 添加一层**memcache**缓存\n3. 集群（水平拆分）：上面的读写分离copy多份。\n\nmysql早些年使用的是MyISAM引擎，特性是**表锁**（查询某个数据会将整个表锁起来，高并发下性能下滑），现在使用的是Innodb，改为了**行锁**。\n\n不能用mysql做实时存储和访问、个人信息、地理位置（如微信热门10万+的文章记录等）。\n\n### 特点\n\n1. 易于扩展，数据间没有关系（key value键值对），好比java面向接口，便于解偶。\n2. 大数据量也高性能（写8万次/秒，读11万次/秒）\n3. 多样型，不需要事先设计数据库\n4. 没有固定的查询语言；最终一致性\n5. 键值对存储，列存储，文档存储，图形存储库（社交）\n6. 高性能、高可用、高可扩\n7. CAP、BASE，异地多活\n8. 多样、实时、并发（Volume, Variety, Veiocity）\n\n与关系型一起使用。\n\n商品的描述、评论（文字比较多的）：文档型数据库（MongoDB）\n\n商品的基本信息（价格、商家、名称）：MySQL\n\n图片：FastDFS, GFS, HDFS, OSS...\n\n商品热门的波段信息：内存数据库（Redis，Tair，Memcache……）\n\n==没有什么不是加以层解决不了的==： 统一服务层。\n\n### 文档型数据库\n\nMongoDB，介于关系型和非关系型数据库中的中间产品，非关系型数据库中功能最丰富的。\n\n### KV键值对\n\nRedis，Tair\n\n### 列存储数据库\n\nHBase（大数据）\n\n分布式文件系统\n\n### 图\n\n类似知识图谱，不是存储图形。主要用于存储社交网络。\n\nNeo4j，InfoGrid。\n\n# Redis\n\nRemote Dictionary Server. C语言编写的。免费，开源，提供多种语言的api。\n\n- 内存存储、持久化，但是内存是断电即失，所以持久化很重要（rdb、aof）\n- 计时器、计数器（浏览量）\n\n## 测试\n\n安装后自带的测试工具\n\n```bash\nredis-benchmark -h localhost -p 6379 -100 -n 100000\n```\n\n## 基础\n\n默认16个数据库且使用的是第0个。 \n\n### GEOSPATIAL\n\n地理位置，不仅仅是GET、SET！根据经纬度获取距离。\n\n## springboot集成\n\n版本<2.0 底层使用的jedis，BIO，直连数据库，多线程下不安全，优化方式是jedis pool连接池。\n\n版本>2.0 底层使用的lettuce，NIO，采用netty，实例可以在多个线程中进行共享，不存在线程不安全的情况。\n\n## rdb\n\n为什么会有这个rdb？\n\nredis的高速查询来源于它的内存存储，由于内存断电即失，可以把rdb作为备份来弥补这个不足。所以rdb即redis databse。但是也不是每次操作都保存，否则性能急速降低，这也带来另一个问题，即最后一个/批操作不会被保存。\n\n```flow\nstart=>start: start\nend=>end: end\ncondition=>condition: 触发rdb\nrdbfile=>inputoutput: dump.rdb\noperation=>operation: go on dealing with\n\nstart->condition\ncondition(yes)->rdbfile->end\ncondition(no)->operation->end\n```\n\n#### 触发机制\n\n1. save的规则\n2. 执行flushall\n3. 退出redis\n\n产生备份，会自动生成一个dump.rdb\n\n#### 用rdb恢复\n\n```bash\nconfig get dir\n```\n\n#### 优点：\n\n1. 适合大数据\n2. 对数据完整性要求不高（比如90srdb一次，60s的时候宕机，就会造成数据丢失）\n\n#### 缺点：\n\n1. 需要一定的时间间隔进程操作\n2. fork进程的时候会占用一定的内容空间\n\n## AOF\n\nAppend Only File， 将我们的所有命令都记录下来，相当于history，恢复的时候再追加。这是另一种恢复的方法。\n\n- 大数据的情况下效率会比较低。\n- 默认是不开启的。\n\n开启后会记录操作记录，关闭redis的时候会产生aof文件，如果恶意篡改，redis无法正常启动。\n\n修复aof文件 `redis-check-aof --fix`\n\n### 优点：\n\n1. 每次修改都同步，文件的完整性更好，默认每秒同步一次，可能会丢失一秒的数据\n2. 从不同步效率最高\n\n### 缺点：\n\n1. 相对于数据文件，aof远大于rdb，修复的速度比rdb慢\n2. 默认是rdb，效率自然高于aof。\n\n**与rdb混合使用**\n\n## 主从复制\n\n将一台redis服务器的数据复制到其他的redis服务器，前者称为主节点，后者称为从结点。\n\n作用：数据冗余、故障恢复、负载均衡（读写分离）、高可用（集群）基石\n\nreids的容量有限，机器的内存不可能全部用来给redis做存储内存，最大不应该超过20G。\n\n默认情况下每台redis都是主节点；一个主节点可以有多个从结点，但是一个从结点只能有一个主节点。\n\n### 环境配置\n\n```shell\ninfo replication # 查看当前库的信息\n```\n\n一般情况下只用配置从机即可。\n\n```shell\nSLAVEOF ip:port # ip:port为主机\n```\n\n上面的是命令配置，只是暂时的。**实际生产应该修改配置文件**，在文件中写主机的地址和密码，主机负责写，从机负责读，主机的所有数据会自动被从机保存。\n\n#### 如果主机宕机了呢？\n\n默认情况下，主机挂了以后，用`info replication`查看剩余机器，从机运行正常，但是没有写操作了。主机恢复后，仍旧正常主从复制。考虑到主机要人工手动恢复、排查故障，仍旧会影响业务。\n\n更好的情况是，默认从剩余的从机中选择一个作为主机，继续完成写操作。\n\n- 全量复制 master将整个数据传送到slaver\n- 增量复制\n\n只要重新链接master，一次全量复制将被自动执行\n\n### 哨兵模式\n\nSentinel（Redis2.8起）后台监控主机是否故障，如果故障了根据投票数自动将从库转为主库。\n\n哨兵是一个独立的进程。通过发送命令，等待Redis服务器响应，从而监控运行的多个redis实例。为了防止哨兵挂了，还要配置哨兵集群。（如果一主二从，正常应该启动六个进程，加上哨兵的话）\n\n#### 优点\n\n1. 集群\n2. 主从切换\n\n#### 缺点\n\n1. 不方便在线扩容，一旦到达上线。\n2. 配置麻烦（配置文件的内容很多）。简单的话可以只启动一个哨兵监控主机，会自动检测到从机。\n\n## redis异常处理\n\n### 缓存穿透（一直查询不到）\n\n```flow\nstart=>start: request\nend=>end: response\ncondition=>condition: redis缓存中是否存在\nop1=>operation: select in mysql\nstart->condition\ncondition(yes)->end\ncondition(no)->op1->end\n```\n\n如果请求量非常大，redis相当于空白，都去请求到dao层，redis的作用就没了。\n\n#### 布隆过滤器\n\n它是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合则丢弃，避免了对底层存储系统的查询压力\n\n#### 缓存空对象\n\n### 缓存击穿（量太大，缓存过期）\n\n活力集中在一个点（一个热评的点，如微博）。\n\n#### 加互斥锁\n\n#### 设置热点数据永不过期\n\n### 缓存雪崩\n\n在某一个时间段，缓存集中过期失效，可能瞬间把数据库压跨。\n\n#### redis高可用\n\n#### 限流降级\n\n#### 数据预热\n\n正式部署前先把可能的数据访问一遍（加入缓存），设置不同的过期时间，让缓存失效的时间尽可能平均。\n\n","slug":"redis","published":1,"updated":"2020-08-06T12:11:06.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgd4002pbyih4sfnfjjw","content":"<p>常用redis，深入了解redis的性能和瓶颈。<a href=\"https://github.com/antirez/redis\">reference</a></p>\n<a id=\"more\"></a>\n\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>redis: <strong>内存</strong>中的数据结构存储系统，可以用作<strong>数据库</strong>、<strong>缓存</strong>和<strong>消息中间件</strong>，nosql的一种。</p>\n<h2 id=\"nosql\"><a href=\"#nosql\" class=\"headerlink\" title=\"nosql\"></a>nosql</h2><p>关系型数据库不够用，出来了nosql。。。</p>\n<ol>\n<li>一开始单体应用，小用户量能承受。但是当体量变大时：<ul>\n<li>数据量大</li>\n<li>数据的索引大</li>\n<li>访问量大</li>\n</ul>\n</li>\n<li>读写分离思想（垂直拆分），写一个库，其他库从这个库做同步，但是数据库大部分其实都是读，把刚查到的进行缓存，这样下一个要查且数据没变的话就用缓存中的数据。 添加一层<strong>memcache</strong>缓存</li>\n<li>集群（水平拆分）：上面的读写分离copy多份。</li>\n</ol>\n<p>mysql早些年使用的是MyISAM引擎，特性是<strong>表锁</strong>（查询某个数据会将整个表锁起来，高并发下性能下滑），现在使用的是Innodb，改为了<strong>行锁</strong>。</p>\n<p>不能用mysql做实时存储和访问、个人信息、地理位置（如微信热门10万+的文章记录等）。</p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ol>\n<li>易于扩展，数据间没有关系（key value键值对），好比java面向接口，便于解偶。</li>\n<li>大数据量也高性能（写8万次/秒，读11万次/秒）</li>\n<li>多样型，不需要事先设计数据库</li>\n<li>没有固定的查询语言；最终一致性</li>\n<li>键值对存储，列存储，文档存储，图形存储库（社交）</li>\n<li>高性能、高可用、高可扩</li>\n<li>CAP、BASE，异地多活</li>\n<li>多样、实时、并发（Volume, Variety, Veiocity）</li>\n</ol>\n<p>与关系型一起使用。</p>\n<p>商品的描述、评论（文字比较多的）：文档型数据库（MongoDB）</p>\n<p>商品的基本信息（价格、商家、名称）：MySQL</p>\n<p>图片：FastDFS, GFS, HDFS, OSS…</p>\n<p>商品热门的波段信息：内存数据库（Redis，Tair，Memcache……）</p>\n<p>==没有什么不是加以层解决不了的==： 统一服务层。</p>\n<h3 id=\"文档型数据库\"><a href=\"#文档型数据库\" class=\"headerlink\" title=\"文档型数据库\"></a>文档型数据库</h3><p>MongoDB，介于关系型和非关系型数据库中的中间产品，非关系型数据库中功能最丰富的。</p>\n<h3 id=\"KV键值对\"><a href=\"#KV键值对\" class=\"headerlink\" title=\"KV键值对\"></a>KV键值对</h3><p>Redis，Tair</p>\n<h3 id=\"列存储数据库\"><a href=\"#列存储数据库\" class=\"headerlink\" title=\"列存储数据库\"></a>列存储数据库</h3><p>HBase（大数据）</p>\n<p>分布式文件系统</p>\n<h3 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h3><p>类似知识图谱，不是存储图形。主要用于存储社交网络。</p>\n<p>Neo4j，InfoGrid。</p>\n<h1 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h1><p>Remote Dictionary Server. C语言编写的。免费，开源，提供多种语言的api。</p>\n<ul>\n<li>内存存储、持久化，但是内存是断电即失，所以持久化很重要（rdb、aof）</li>\n<li>计时器、计数器（浏览量）</li>\n</ul>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>安装后自带的测试工具</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-benchmark -h localhost -p 6379 -100 -n 100000</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p>默认16个数据库且使用的是第0个。 </p>\n<h3 id=\"GEOSPATIAL\"><a href=\"#GEOSPATIAL\" class=\"headerlink\" title=\"GEOSPATIAL\"></a>GEOSPATIAL</h3><p>地理位置，不仅仅是GET、SET！根据经纬度获取距离。</p>\n<h2 id=\"springboot集成\"><a href=\"#springboot集成\" class=\"headerlink\" title=\"springboot集成\"></a>springboot集成</h2><p>版本&lt;2.0 底层使用的jedis，BIO，直连数据库，多线程下不安全，优化方式是jedis pool连接池。</p>\n<p>版本&gt;2.0 底层使用的lettuce，NIO，采用netty，实例可以在多个线程中进行共享，不存在线程不安全的情况。</p>\n<h2 id=\"rdb\"><a href=\"#rdb\" class=\"headerlink\" title=\"rdb\"></a>rdb</h2><p>为什么会有这个rdb？</p>\n<p>redis的高速查询来源于它的内存存储，由于内存断电即失，可以把rdb作为备份来弥补这个不足。所以rdb即redis databse。但是也不是每次操作都保存，否则性能急速降低，这也带来另一个问题，即最后一个/批操作不会被保存。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start&#x3D;&gt;start: start</span><br><span class=\"line\">end&#x3D;&gt;end: end</span><br><span class=\"line\">condition&#x3D;&gt;condition: 触发rdb</span><br><span class=\"line\">rdbfile&#x3D;&gt;inputoutput: dump.rdb</span><br><span class=\"line\">operation&#x3D;&gt;operation: go on dealing with</span><br><span class=\"line\"></span><br><span class=\"line\">start-&gt;condition</span><br><span class=\"line\">condition(yes)-&gt;rdbfile-&gt;end</span><br><span class=\"line\">condition(no)-&gt;operation-&gt;end</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"触发机制\"><a href=\"#触发机制\" class=\"headerlink\" title=\"触发机制\"></a>触发机制</h4><ol>\n<li>save的规则</li>\n<li>执行flushall</li>\n<li>退出redis</li>\n</ol>\n<p>产生备份，会自动生成一个dump.rdb</p>\n<h4 id=\"用rdb恢复\"><a href=\"#用rdb恢复\" class=\"headerlink\" title=\"用rdb恢复\"></a>用rdb恢复</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config get dir</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a>优点：</h4><ol>\n<li>适合大数据</li>\n<li>对数据完整性要求不高（比如90srdb一次，60s的时候宕机，就会造成数据丢失）</li>\n</ol>\n<h4 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h4><ol>\n<li>需要一定的时间间隔进程操作</li>\n<li>fork进程的时候会占用一定的内容空间</li>\n</ol>\n<h2 id=\"AOF\"><a href=\"#AOF\" class=\"headerlink\" title=\"AOF\"></a>AOF</h2><p>Append Only File， 将我们的所有命令都记录下来，相当于history，恢复的时候再追加。这是另一种恢复的方法。</p>\n<ul>\n<li>大数据的情况下效率会比较低。</li>\n<li>默认是不开启的。</li>\n</ul>\n<p>开启后会记录操作记录，关闭redis的时候会产生aof文件，如果恶意篡改，redis无法正常启动。</p>\n<p>修复aof文件 <code>redis-check-aof --fix</code></p>\n<h3 id=\"优点：-1\"><a href=\"#优点：-1\" class=\"headerlink\" title=\"优点：\"></a>优点：</h3><ol>\n<li>每次修改都同步，文件的完整性更好，默认每秒同步一次，可能会丢失一秒的数据</li>\n<li>从不同步效率最高</li>\n</ol>\n<h3 id=\"缺点：-1\"><a href=\"#缺点：-1\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h3><ol>\n<li>相对于数据文件，aof远大于rdb，修复的速度比rdb慢</li>\n<li>默认是rdb，效率自然高于aof。</li>\n</ol>\n<p><strong>与rdb混合使用</strong></p>\n<h2 id=\"主从复制\"><a href=\"#主从复制\" class=\"headerlink\" title=\"主从复制\"></a>主从复制</h2><p>将一台redis服务器的数据复制到其他的redis服务器，前者称为主节点，后者称为从结点。</p>\n<p>作用：数据冗余、故障恢复、负载均衡（读写分离）、高可用（集群）基石</p>\n<p>reids的容量有限，机器的内存不可能全部用来给redis做存储内存，最大不应该超过20G。</p>\n<p>默认情况下每台redis都是主节点；一个主节点可以有多个从结点，但是一个从结点只能有一个主节点。</p>\n<h3 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">info replication # 查看当前库的信息</span><br></pre></td></tr></table></figure>\n\n<p>一般情况下只用配置从机即可。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SLAVEOF ip:port # ip:port为主机</span><br></pre></td></tr></table></figure>\n\n<p>上面的是命令配置，只是暂时的。<strong>实际生产应该修改配置文件</strong>，在文件中写主机的地址和密码，主机负责写，从机负责读，主机的所有数据会自动被从机保存。</p>\n<h4 id=\"如果主机宕机了呢？\"><a href=\"#如果主机宕机了呢？\" class=\"headerlink\" title=\"如果主机宕机了呢？\"></a>如果主机宕机了呢？</h4><p>默认情况下，主机挂了以后，用<code>info replication</code>查看剩余机器，从机运行正常，但是没有写操作了。主机恢复后，仍旧正常主从复制。考虑到主机要人工手动恢复、排查故障，仍旧会影响业务。</p>\n<p>更好的情况是，默认从剩余的从机中选择一个作为主机，继续完成写操作。</p>\n<ul>\n<li>全量复制 master将整个数据传送到slaver</li>\n<li>增量复制</li>\n</ul>\n<p>只要重新链接master，一次全量复制将被自动执行</p>\n<h3 id=\"哨兵模式\"><a href=\"#哨兵模式\" class=\"headerlink\" title=\"哨兵模式\"></a>哨兵模式</h3><p>Sentinel（Redis2.8起）后台监控主机是否故障，如果故障了根据投票数自动将从库转为主库。</p>\n<p>哨兵是一个独立的进程。通过发送命令，等待Redis服务器响应，从而监控运行的多个redis实例。为了防止哨兵挂了，还要配置哨兵集群。（如果一主二从，正常应该启动六个进程，加上哨兵的话）</p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ol>\n<li>集群</li>\n<li>主从切换</li>\n</ol>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ol>\n<li>不方便在线扩容，一旦到达上线。</li>\n<li>配置麻烦（配置文件的内容很多）。简单的话可以只启动一个哨兵监控主机，会自动检测到从机。</li>\n</ol>\n<h2 id=\"redis异常处理\"><a href=\"#redis异常处理\" class=\"headerlink\" title=\"redis异常处理\"></a>redis异常处理</h2><h3 id=\"缓存穿透（一直查询不到）\"><a href=\"#缓存穿透（一直查询不到）\" class=\"headerlink\" title=\"缓存穿透（一直查询不到）\"></a>缓存穿透（一直查询不到）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start&#x3D;&gt;start: request</span><br><span class=\"line\">end&#x3D;&gt;end: response</span><br><span class=\"line\">condition&#x3D;&gt;condition: redis缓存中是否存在</span><br><span class=\"line\">op1&#x3D;&gt;operation: select in mysql</span><br><span class=\"line\">start-&gt;condition</span><br><span class=\"line\">condition(yes)-&gt;end</span><br><span class=\"line\">condition(no)-&gt;op1-&gt;end</span><br></pre></td></tr></table></figure>\n\n<p>如果请求量非常大，redis相当于空白，都去请求到dao层，redis的作用就没了。</p>\n<h4 id=\"布隆过滤器\"><a href=\"#布隆过滤器\" class=\"headerlink\" title=\"布隆过滤器\"></a>布隆过滤器</h4><p>它是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合则丢弃，避免了对底层存储系统的查询压力</p>\n<h4 id=\"缓存空对象\"><a href=\"#缓存空对象\" class=\"headerlink\" title=\"缓存空对象\"></a>缓存空对象</h4><h3 id=\"缓存击穿（量太大，缓存过期）\"><a href=\"#缓存击穿（量太大，缓存过期）\" class=\"headerlink\" title=\"缓存击穿（量太大，缓存过期）\"></a>缓存击穿（量太大，缓存过期）</h3><p>活力集中在一个点（一个热评的点，如微博）。</p>\n<h4 id=\"加互斥锁\"><a href=\"#加互斥锁\" class=\"headerlink\" title=\"加互斥锁\"></a>加互斥锁</h4><h4 id=\"设置热点数据永不过期\"><a href=\"#设置热点数据永不过期\" class=\"headerlink\" title=\"设置热点数据永不过期\"></a>设置热点数据永不过期</h4><h3 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h3><p>在某一个时间段，缓存集中过期失效，可能瞬间把数据库压跨。</p>\n<h4 id=\"redis高可用\"><a href=\"#redis高可用\" class=\"headerlink\" title=\"redis高可用\"></a>redis高可用</h4><h4 id=\"限流降级\"><a href=\"#限流降级\" class=\"headerlink\" title=\"限流降级\"></a>限流降级</h4><h4 id=\"数据预热\"><a href=\"#数据预热\" class=\"headerlink\" title=\"数据预热\"></a>数据预热</h4><p>正式部署前先把可能的数据访问一遍（加入缓存），设置不同的过期时间，让缓存失效的时间尽可能平均。</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>常用redis，深入了解redis的性能和瓶颈。<a href=\"https://github.com/antirez/redis\">reference</a></p>","more":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>redis: <strong>内存</strong>中的数据结构存储系统，可以用作<strong>数据库</strong>、<strong>缓存</strong>和<strong>消息中间件</strong>，nosql的一种。</p>\n<h2 id=\"nosql\"><a href=\"#nosql\" class=\"headerlink\" title=\"nosql\"></a>nosql</h2><p>关系型数据库不够用，出来了nosql。。。</p>\n<ol>\n<li>一开始单体应用，小用户量能承受。但是当体量变大时：<ul>\n<li>数据量大</li>\n<li>数据的索引大</li>\n<li>访问量大</li>\n</ul>\n</li>\n<li>读写分离思想（垂直拆分），写一个库，其他库从这个库做同步，但是数据库大部分其实都是读，把刚查到的进行缓存，这样下一个要查且数据没变的话就用缓存中的数据。 添加一层<strong>memcache</strong>缓存</li>\n<li>集群（水平拆分）：上面的读写分离copy多份。</li>\n</ol>\n<p>mysql早些年使用的是MyISAM引擎，特性是<strong>表锁</strong>（查询某个数据会将整个表锁起来，高并发下性能下滑），现在使用的是Innodb，改为了<strong>行锁</strong>。</p>\n<p>不能用mysql做实时存储和访问、个人信息、地理位置（如微信热门10万+的文章记录等）。</p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ol>\n<li>易于扩展，数据间没有关系（key value键值对），好比java面向接口，便于解偶。</li>\n<li>大数据量也高性能（写8万次/秒，读11万次/秒）</li>\n<li>多样型，不需要事先设计数据库</li>\n<li>没有固定的查询语言；最终一致性</li>\n<li>键值对存储，列存储，文档存储，图形存储库（社交）</li>\n<li>高性能、高可用、高可扩</li>\n<li>CAP、BASE，异地多活</li>\n<li>多样、实时、并发（Volume, Variety, Veiocity）</li>\n</ol>\n<p>与关系型一起使用。</p>\n<p>商品的描述、评论（文字比较多的）：文档型数据库（MongoDB）</p>\n<p>商品的基本信息（价格、商家、名称）：MySQL</p>\n<p>图片：FastDFS, GFS, HDFS, OSS…</p>\n<p>商品热门的波段信息：内存数据库（Redis，Tair，Memcache……）</p>\n<p>==没有什么不是加以层解决不了的==： 统一服务层。</p>\n<h3 id=\"文档型数据库\"><a href=\"#文档型数据库\" class=\"headerlink\" title=\"文档型数据库\"></a>文档型数据库</h3><p>MongoDB，介于关系型和非关系型数据库中的中间产品，非关系型数据库中功能最丰富的。</p>\n<h3 id=\"KV键值对\"><a href=\"#KV键值对\" class=\"headerlink\" title=\"KV键值对\"></a>KV键值对</h3><p>Redis，Tair</p>\n<h3 id=\"列存储数据库\"><a href=\"#列存储数据库\" class=\"headerlink\" title=\"列存储数据库\"></a>列存储数据库</h3><p>HBase（大数据）</p>\n<p>分布式文件系统</p>\n<h3 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h3><p>类似知识图谱，不是存储图形。主要用于存储社交网络。</p>\n<p>Neo4j，InfoGrid。</p>\n<h1 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h1><p>Remote Dictionary Server. C语言编写的。免费，开源，提供多种语言的api。</p>\n<ul>\n<li>内存存储、持久化，但是内存是断电即失，所以持久化很重要（rdb、aof）</li>\n<li>计时器、计数器（浏览量）</li>\n</ul>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>安装后自带的测试工具</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-benchmark -h localhost -p 6379 -100 -n 100000</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p>默认16个数据库且使用的是第0个。 </p>\n<h3 id=\"GEOSPATIAL\"><a href=\"#GEOSPATIAL\" class=\"headerlink\" title=\"GEOSPATIAL\"></a>GEOSPATIAL</h3><p>地理位置，不仅仅是GET、SET！根据经纬度获取距离。</p>\n<h2 id=\"springboot集成\"><a href=\"#springboot集成\" class=\"headerlink\" title=\"springboot集成\"></a>springboot集成</h2><p>版本&lt;2.0 底层使用的jedis，BIO，直连数据库，多线程下不安全，优化方式是jedis pool连接池。</p>\n<p>版本&gt;2.0 底层使用的lettuce，NIO，采用netty，实例可以在多个线程中进行共享，不存在线程不安全的情况。</p>\n<h2 id=\"rdb\"><a href=\"#rdb\" class=\"headerlink\" title=\"rdb\"></a>rdb</h2><p>为什么会有这个rdb？</p>\n<p>redis的高速查询来源于它的内存存储，由于内存断电即失，可以把rdb作为备份来弥补这个不足。所以rdb即redis databse。但是也不是每次操作都保存，否则性能急速降低，这也带来另一个问题，即最后一个/批操作不会被保存。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start&#x3D;&gt;start: start</span><br><span class=\"line\">end&#x3D;&gt;end: end</span><br><span class=\"line\">condition&#x3D;&gt;condition: 触发rdb</span><br><span class=\"line\">rdbfile&#x3D;&gt;inputoutput: dump.rdb</span><br><span class=\"line\">operation&#x3D;&gt;operation: go on dealing with</span><br><span class=\"line\"></span><br><span class=\"line\">start-&gt;condition</span><br><span class=\"line\">condition(yes)-&gt;rdbfile-&gt;end</span><br><span class=\"line\">condition(no)-&gt;operation-&gt;end</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"触发机制\"><a href=\"#触发机制\" class=\"headerlink\" title=\"触发机制\"></a>触发机制</h4><ol>\n<li>save的规则</li>\n<li>执行flushall</li>\n<li>退出redis</li>\n</ol>\n<p>产生备份，会自动生成一个dump.rdb</p>\n<h4 id=\"用rdb恢复\"><a href=\"#用rdb恢复\" class=\"headerlink\" title=\"用rdb恢复\"></a>用rdb恢复</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config get dir</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a>优点：</h4><ol>\n<li>适合大数据</li>\n<li>对数据完整性要求不高（比如90srdb一次，60s的时候宕机，就会造成数据丢失）</li>\n</ol>\n<h4 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h4><ol>\n<li>需要一定的时间间隔进程操作</li>\n<li>fork进程的时候会占用一定的内容空间</li>\n</ol>\n<h2 id=\"AOF\"><a href=\"#AOF\" class=\"headerlink\" title=\"AOF\"></a>AOF</h2><p>Append Only File， 将我们的所有命令都记录下来，相当于history，恢复的时候再追加。这是另一种恢复的方法。</p>\n<ul>\n<li>大数据的情况下效率会比较低。</li>\n<li>默认是不开启的。</li>\n</ul>\n<p>开启后会记录操作记录，关闭redis的时候会产生aof文件，如果恶意篡改，redis无法正常启动。</p>\n<p>修复aof文件 <code>redis-check-aof --fix</code></p>\n<h3 id=\"优点：-1\"><a href=\"#优点：-1\" class=\"headerlink\" title=\"优点：\"></a>优点：</h3><ol>\n<li>每次修改都同步，文件的完整性更好，默认每秒同步一次，可能会丢失一秒的数据</li>\n<li>从不同步效率最高</li>\n</ol>\n<h3 id=\"缺点：-1\"><a href=\"#缺点：-1\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h3><ol>\n<li>相对于数据文件，aof远大于rdb，修复的速度比rdb慢</li>\n<li>默认是rdb，效率自然高于aof。</li>\n</ol>\n<p><strong>与rdb混合使用</strong></p>\n<h2 id=\"主从复制\"><a href=\"#主从复制\" class=\"headerlink\" title=\"主从复制\"></a>主从复制</h2><p>将一台redis服务器的数据复制到其他的redis服务器，前者称为主节点，后者称为从结点。</p>\n<p>作用：数据冗余、故障恢复、负载均衡（读写分离）、高可用（集群）基石</p>\n<p>reids的容量有限，机器的内存不可能全部用来给redis做存储内存，最大不应该超过20G。</p>\n<p>默认情况下每台redis都是主节点；一个主节点可以有多个从结点，但是一个从结点只能有一个主节点。</p>\n<h3 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">info replication # 查看当前库的信息</span><br></pre></td></tr></table></figure>\n\n<p>一般情况下只用配置从机即可。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SLAVEOF ip:port # ip:port为主机</span><br></pre></td></tr></table></figure>\n\n<p>上面的是命令配置，只是暂时的。<strong>实际生产应该修改配置文件</strong>，在文件中写主机的地址和密码，主机负责写，从机负责读，主机的所有数据会自动被从机保存。</p>\n<h4 id=\"如果主机宕机了呢？\"><a href=\"#如果主机宕机了呢？\" class=\"headerlink\" title=\"如果主机宕机了呢？\"></a>如果主机宕机了呢？</h4><p>默认情况下，主机挂了以后，用<code>info replication</code>查看剩余机器，从机运行正常，但是没有写操作了。主机恢复后，仍旧正常主从复制。考虑到主机要人工手动恢复、排查故障，仍旧会影响业务。</p>\n<p>更好的情况是，默认从剩余的从机中选择一个作为主机，继续完成写操作。</p>\n<ul>\n<li>全量复制 master将整个数据传送到slaver</li>\n<li>增量复制</li>\n</ul>\n<p>只要重新链接master，一次全量复制将被自动执行</p>\n<h3 id=\"哨兵模式\"><a href=\"#哨兵模式\" class=\"headerlink\" title=\"哨兵模式\"></a>哨兵模式</h3><p>Sentinel（Redis2.8起）后台监控主机是否故障，如果故障了根据投票数自动将从库转为主库。</p>\n<p>哨兵是一个独立的进程。通过发送命令，等待Redis服务器响应，从而监控运行的多个redis实例。为了防止哨兵挂了，还要配置哨兵集群。（如果一主二从，正常应该启动六个进程，加上哨兵的话）</p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ol>\n<li>集群</li>\n<li>主从切换</li>\n</ol>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ol>\n<li>不方便在线扩容，一旦到达上线。</li>\n<li>配置麻烦（配置文件的内容很多）。简单的话可以只启动一个哨兵监控主机，会自动检测到从机。</li>\n</ol>\n<h2 id=\"redis异常处理\"><a href=\"#redis异常处理\" class=\"headerlink\" title=\"redis异常处理\"></a>redis异常处理</h2><h3 id=\"缓存穿透（一直查询不到）\"><a href=\"#缓存穿透（一直查询不到）\" class=\"headerlink\" title=\"缓存穿透（一直查询不到）\"></a>缓存穿透（一直查询不到）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start&#x3D;&gt;start: request</span><br><span class=\"line\">end&#x3D;&gt;end: response</span><br><span class=\"line\">condition&#x3D;&gt;condition: redis缓存中是否存在</span><br><span class=\"line\">op1&#x3D;&gt;operation: select in mysql</span><br><span class=\"line\">start-&gt;condition</span><br><span class=\"line\">condition(yes)-&gt;end</span><br><span class=\"line\">condition(no)-&gt;op1-&gt;end</span><br></pre></td></tr></table></figure>\n\n<p>如果请求量非常大，redis相当于空白，都去请求到dao层，redis的作用就没了。</p>\n<h4 id=\"布隆过滤器\"><a href=\"#布隆过滤器\" class=\"headerlink\" title=\"布隆过滤器\"></a>布隆过滤器</h4><p>它是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合则丢弃，避免了对底层存储系统的查询压力</p>\n<h4 id=\"缓存空对象\"><a href=\"#缓存空对象\" class=\"headerlink\" title=\"缓存空对象\"></a>缓存空对象</h4><h3 id=\"缓存击穿（量太大，缓存过期）\"><a href=\"#缓存击穿（量太大，缓存过期）\" class=\"headerlink\" title=\"缓存击穿（量太大，缓存过期）\"></a>缓存击穿（量太大，缓存过期）</h3><p>活力集中在一个点（一个热评的点，如微博）。</p>\n<h4 id=\"加互斥锁\"><a href=\"#加互斥锁\" class=\"headerlink\" title=\"加互斥锁\"></a>加互斥锁</h4><h4 id=\"设置热点数据永不过期\"><a href=\"#设置热点数据永不过期\" class=\"headerlink\" title=\"设置热点数据永不过期\"></a>设置热点数据永不过期</h4><h3 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h3><p>在某一个时间段，缓存集中过期失效，可能瞬间把数据库压跨。</p>\n<h4 id=\"redis高可用\"><a href=\"#redis高可用\" class=\"headerlink\" title=\"redis高可用\"></a>redis高可用</h4><h4 id=\"限流降级\"><a href=\"#限流降级\" class=\"headerlink\" title=\"限流降级\"></a>限流降级</h4><h4 id=\"数据预热\"><a href=\"#数据预热\" class=\"headerlink\" title=\"数据预热\"></a>数据预热</h4><p>正式部署前先把可能的数据访问一遍（加入缓存），设置不同的过期时间，让缓存失效的时间尽可能平均。</p>"},{"title":"regex","date":"2020-06-01T15:38:31.000Z","_content":"\nJava正则表达式介绍及应用。\n\n<!--more-->\n\n# Intro\n\nregular expression => regex。用来描述**匹配**一个字符串集合的**模式**，可以用它来匹配、替换和分割字符串。\n\nJava里String的方法matches(xxxx)，其中就可以装载正则表达式。","source":"_posts/regex.md","raw":"---\ntitle: regex\ndate: 2020-06-01 23:38:31\ncategories: Java\ntags: regex\n---\n\nJava正则表达式介绍及应用。\n\n<!--more-->\n\n# Intro\n\nregular expression => regex。用来描述**匹配**一个字符串集合的**模式**，可以用它来匹配、替换和分割字符串。\n\nJava里String的方法matches(xxxx)，其中就可以装载正则表达式。","slug":"regex","published":1,"updated":"2020-07-19T17:29:13.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgd7002sbyih0qmhhzrs","content":"<p>Java正则表达式介绍及应用。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h1><p>regular expression =&gt; regex。用来描述<strong>匹配</strong>一个字符串集合的<strong>模式</strong>，可以用它来匹配、替换和分割字符串。</p>\n<p>Java里String的方法matches(xxxx)，其中就可以装载正则表达式。</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>Java正则表达式介绍及应用。</p>","more":"<h1 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h1><p>regular expression =&gt; regex。用来描述<strong>匹配</strong>一个字符串集合的<strong>模式</strong>，可以用它来匹配、替换和分割字符串。</p>\n<p>Java里String的方法matches(xxxx)，其中就可以装载正则表达式。</p>"},{"title":"restful","date":"2019-11-28T14:17:48.000Z","_content":"\nrestful风格的项目要前后端分离，前后端的http请求类型要清楚==。。。好像以用有8种。\n\n<!-- more -->\n\n# 序\n\nrest: Representational State Transfer\n\n所有东西都是资源，所有操作都通过对资源的增删改查（CRUD）来实现，与其对应的URL操作是POST, DELETE, PUT, GET，且所有操作都是无状态的。\n\n## POST\n\n新增\n\n数据存放于**请求正文**，意味着可以放**大量数据**且**不限类型**，安全性高。\n\n- 传输任意类型数据，包括声音、图片等\n- 数据量大，，理论上无上限\n- 安全性高\n- 客户端浏览器不会对POST请求进行缓存。\n\n```java\n@PostMapping(\"/addr\")\npublic String editAddr(@RequesetBody Map<String, String> map){\n    System.out.println(map.get(\"addr\"));\n}\n```\n\n\n\n## GET\n\n获取\n\n他的特点和缺点都很明显（==特点就是缺点？）\n\n- 参数值只能是字符串，而不能是其他类型\n- 可以携带的数据量小（因为是在地址栏输入）\n- 数据安全性低\n- 会使用缓存，第一次打开的时候会下载相关信息（css，image…），提高用户体验\n\n```java\n@GetMapping(\"/homepage/storage/{id}\")\npublic string getDetails(@PathVariable(\"id\") String id){\n    return id;\n}\n```\n\n\n\n## PUT\n\n修改\n\n## DELETE\n\n删除，同get请求。\n\n## Q&A\n\n登录/退出如何设计？\n\n登录的过程无非就是向服务器 端索要授权，退出就是服务端注销授权。所以\n\n```markdown\nPOST/authorization 登录\nDELETE/authorizatio 退出\n```\n\n命名？\n\n/资源名称/资源ID\n\n对GET缓存而不对POST缓存？\n\n同restful的含义，POST一般是上传（新增）资源，GET是获取资源，浏览器对POST缓存是没有意义的。\n\n## 命令行工具\n\n### CURL\n\n方便用来测试非get请求的api，e.g.\n\n```bash\ncurl -H \"Content-Type:application/json\" -X POST --data'{\"name\":\"Qin\"}' http:127.0.0.1:8888/getName/\n```\n\n其中`-H`是表示请求头的信息，指出参数类型，`-X`后添加请求类型，GET请求可以不用指明。\n\n```bash\ncurl -X DELETE https://127.0.0.1:8080/apache/tomcat\n```\n\n\n\n","source":"_posts/restful.md","raw":"---\ntitle: restful\ndate: 2019-11-28 22:17:48\ncategories: Java\ntags:\n- http\n- swagger\n---\n\nrestful风格的项目要前后端分离，前后端的http请求类型要清楚==。。。好像以用有8种。\n\n<!-- more -->\n\n# 序\n\nrest: Representational State Transfer\n\n所有东西都是资源，所有操作都通过对资源的增删改查（CRUD）来实现，与其对应的URL操作是POST, DELETE, PUT, GET，且所有操作都是无状态的。\n\n## POST\n\n新增\n\n数据存放于**请求正文**，意味着可以放**大量数据**且**不限类型**，安全性高。\n\n- 传输任意类型数据，包括声音、图片等\n- 数据量大，，理论上无上限\n- 安全性高\n- 客户端浏览器不会对POST请求进行缓存。\n\n```java\n@PostMapping(\"/addr\")\npublic String editAddr(@RequesetBody Map<String, String> map){\n    System.out.println(map.get(\"addr\"));\n}\n```\n\n\n\n## GET\n\n获取\n\n他的特点和缺点都很明显（==特点就是缺点？）\n\n- 参数值只能是字符串，而不能是其他类型\n- 可以携带的数据量小（因为是在地址栏输入）\n- 数据安全性低\n- 会使用缓存，第一次打开的时候会下载相关信息（css，image…），提高用户体验\n\n```java\n@GetMapping(\"/homepage/storage/{id}\")\npublic string getDetails(@PathVariable(\"id\") String id){\n    return id;\n}\n```\n\n\n\n## PUT\n\n修改\n\n## DELETE\n\n删除，同get请求。\n\n## Q&A\n\n登录/退出如何设计？\n\n登录的过程无非就是向服务器 端索要授权，退出就是服务端注销授权。所以\n\n```markdown\nPOST/authorization 登录\nDELETE/authorizatio 退出\n```\n\n命名？\n\n/资源名称/资源ID\n\n对GET缓存而不对POST缓存？\n\n同restful的含义，POST一般是上传（新增）资源，GET是获取资源，浏览器对POST缓存是没有意义的。\n\n## 命令行工具\n\n### CURL\n\n方便用来测试非get请求的api，e.g.\n\n```bash\ncurl -H \"Content-Type:application/json\" -X POST --data'{\"name\":\"Qin\"}' http:127.0.0.1:8888/getName/\n```\n\n其中`-H`是表示请求头的信息，指出参数类型，`-X`后添加请求类型，GET请求可以不用指明。\n\n```bash\ncurl -X DELETE https://127.0.0.1:8080/apache/tomcat\n```\n\n\n\n","slug":"restful","published":1,"updated":"2020-07-19T17:29:13.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgd9002wbyihbo4uh6qx","content":"<p>restful风格的项目要前后端分离，前后端的http请求类型要清楚==。。。好像以用有8种。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><p>rest: Representational State Transfer</p>\n<p>所有东西都是资源，所有操作都通过对资源的增删改查（CRUD）来实现，与其对应的URL操作是POST, DELETE, PUT, GET，且所有操作都是无状态的。</p>\n<h2 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h2><p>新增</p>\n<p>数据存放于<strong>请求正文</strong>，意味着可以放<strong>大量数据</strong>且<strong>不限类型</strong>，安全性高。</p>\n<ul>\n<li>传输任意类型数据，包括声音、图片等</li>\n<li>数据量大，，理论上无上限</li>\n<li>安全性高</li>\n<li>客户端浏览器不会对POST请求进行缓存。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/addr&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">editAddr</span><span class=\"params\">(<span class=\"meta\">@RequesetBody</span> Map&lt;String, String&gt; map)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(map.get(<span class=\"string\">&quot;addr&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h2><p>获取</p>\n<p>他的特点和缺点都很明显（==特点就是缺点？）</p>\n<ul>\n<li>参数值只能是字符串，而不能是其他类型</li>\n<li>可以携带的数据量小（因为是在地址栏输入）</li>\n<li>数据安全性低</li>\n<li>会使用缓存，第一次打开的时候会下载相关信息（css，image…），提高用户体验</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/homepage/storage/&#123;id&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> string <span class=\"title\">getDetails</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> String id)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"PUT\"><a href=\"#PUT\" class=\"headerlink\" title=\"PUT\"></a>PUT</h2><p>修改</p>\n<h2 id=\"DELETE\"><a href=\"#DELETE\" class=\"headerlink\" title=\"DELETE\"></a>DELETE</h2><p>删除，同get请求。</p>\n<h2 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h2><p>登录/退出如何设计？</p>\n<p>登录的过程无非就是向服务器 端索要授权，退出就是服务端注销授权。所以</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST/authorization 登录</span><br><span class=\"line\">DELETE/authorizatio 退出</span><br></pre></td></tr></table></figure>\n\n<p>命名？</p>\n<p>/资源名称/资源ID</p>\n<p>对GET缓存而不对POST缓存？</p>\n<p>同restful的含义，POST一般是上传（新增）资源，GET是获取资源，浏览器对POST缓存是没有意义的。</p>\n<h2 id=\"命令行工具\"><a href=\"#命令行工具\" class=\"headerlink\" title=\"命令行工具\"></a>命令行工具</h2><h3 id=\"CURL\"><a href=\"#CURL\" class=\"headerlink\" title=\"CURL\"></a>CURL</h3><p>方便用来测试非get请求的api，e.g.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -H <span class=\"string\">&quot;Content-Type:application/json&quot;</span> -X POST --data<span class=\"string\">&#x27;&#123;&quot;name&quot;:&quot;Qin&quot;&#125;&#x27;</span> http:127.0.0.1:8888/getName/</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>-H</code>是表示请求头的信息，指出参数类型，<code>-X</code>后添加请求类型，GET请求可以不用指明。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X DELETE https://127.0.0.1:8080/apache/tomcat</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>restful风格的项目要前后端分离，前后端的http请求类型要清楚==。。。好像以用有8种。</p>","more":"<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><p>rest: Representational State Transfer</p>\n<p>所有东西都是资源，所有操作都通过对资源的增删改查（CRUD）来实现，与其对应的URL操作是POST, DELETE, PUT, GET，且所有操作都是无状态的。</p>\n<h2 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h2><p>新增</p>\n<p>数据存放于<strong>请求正文</strong>，意味着可以放<strong>大量数据</strong>且<strong>不限类型</strong>，安全性高。</p>\n<ul>\n<li>传输任意类型数据，包括声音、图片等</li>\n<li>数据量大，，理论上无上限</li>\n<li>安全性高</li>\n<li>客户端浏览器不会对POST请求进行缓存。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/addr&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">editAddr</span><span class=\"params\">(<span class=\"meta\">@RequesetBody</span> Map&lt;String, String&gt; map)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(map.get(<span class=\"string\">&quot;addr&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h2><p>获取</p>\n<p>他的特点和缺点都很明显（==特点就是缺点？）</p>\n<ul>\n<li>参数值只能是字符串，而不能是其他类型</li>\n<li>可以携带的数据量小（因为是在地址栏输入）</li>\n<li>数据安全性低</li>\n<li>会使用缓存，第一次打开的时候会下载相关信息（css，image…），提高用户体验</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/homepage/storage/&#123;id&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> string <span class=\"title\">getDetails</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> String id)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"PUT\"><a href=\"#PUT\" class=\"headerlink\" title=\"PUT\"></a>PUT</h2><p>修改</p>\n<h2 id=\"DELETE\"><a href=\"#DELETE\" class=\"headerlink\" title=\"DELETE\"></a>DELETE</h2><p>删除，同get请求。</p>\n<h2 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h2><p>登录/退出如何设计？</p>\n<p>登录的过程无非就是向服务器 端索要授权，退出就是服务端注销授权。所以</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST/authorization 登录</span><br><span class=\"line\">DELETE/authorizatio 退出</span><br></pre></td></tr></table></figure>\n\n<p>命名？</p>\n<p>/资源名称/资源ID</p>\n<p>对GET缓存而不对POST缓存？</p>\n<p>同restful的含义，POST一般是上传（新增）资源，GET是获取资源，浏览器对POST缓存是没有意义的。</p>\n<h2 id=\"命令行工具\"><a href=\"#命令行工具\" class=\"headerlink\" title=\"命令行工具\"></a>命令行工具</h2><h3 id=\"CURL\"><a href=\"#CURL\" class=\"headerlink\" title=\"CURL\"></a>CURL</h3><p>方便用来测试非get请求的api，e.g.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -H <span class=\"string\">&quot;Content-Type:application/json&quot;</span> -X POST --data<span class=\"string\">&#x27;&#123;&quot;name&quot;:&quot;Qin&quot;&#125;&#x27;</span> http:127.0.0.1:8888/getName/</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>-H</code>是表示请求头的信息，指出参数类型，<code>-X</code>后添加请求类型，GET请求可以不用指明。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X DELETE https://127.0.0.1:8080/apache/tomcat</span><br></pre></td></tr></table></figure>"},{"title":"springAOP","date":"2020-03-28T06:43:58.000Z","_content":"\nAOP, 切面。聊聊几个通知。\n\n<!--more-->\n\n# 用途\n\n如果是吃个蛋糕，会怎么吃？有的人会一层一层吃，当然最上面是奶油或者水果，最下方是面包，但是大部分人都不会这么吃，会用刀将蛋糕切开，将糅合了多层的可口蛋糕一起送入口中，而非第一种吃法那样有先后顺序。Spring框架中的AOP的用途就好比那把刀，将容器中的bean有个安排。\n\n# 通知\n\nAOP中的刀不像是切蛋糕那样最终把蛋糕送入口中，它的实际工序会更多。比如送入口中可能是最后一步，在这之前也许会统一撒点肉松、统一加热之类的。虽然有点奇怪。\n\nSpring的命名是让人通俗易懂的，也可以理解为你的英语水平够用。诸如*@Before*, *@After*...之类的一眼扫过去就能知道它的作用。目前用到的有5个：l@Before, @After, @AfterReturning, @AfterThrowing和@Around。他们都不是直接标注就可以使用，而是**需要指要作用的方法**。\n\n由于作用的目标方法大多相同，因此还可以提取公共的路径。\n\n与之相关的要先介绍`JointPoint`，根据词意不难理解：切点。切面中的切点可以说是很细节的了，能用他来获取切面相关的信息，可以理解为“帮手”。\n\n## @PointCut\n\n公用切入点。括号后加入作用路径。\n\n```java\n@Pointcut(\"execution(public int org.example.aop.MathCalculate.*(..)) \")\npublic void pointCut() {\n}\n```\n\nMathCalculate为类名，`MathCalculate.*`表示作用于类下的所有方法。`(..)`表示任意参数。\n\n\n\n## @Before\n\n这个是前置通知。表示在方法执行前执行标识了这个注解的方法。\n\n```java\n@Before(\"pointCut()\")\npublic void logStart(JoinPoint joinPoint) {\n    System.out.println(joinPoint.getSignature().getName() + \"，logStart()..方法名：\" + \"....参数：\" + Arrays.asList(joinPoint.getArgs()));\n}\n```\n\n\n\n## @After\n\n后置通知。方法结束后会被调用，**无论方法成功还是失败**，类似于`finally`。\n\n```java\n@After(\"pointCut()\")\npublic void logEnd(JoinPoint joinPoint) {\n    System.out.println(joinPoint.getSignature().getName() + \"，@After.方法名：\" + \". 一定会返回的。.参数：\" + Arrays.asList(joinPoint.getArgs()));\n}\n```\n\n\n\n## @AfterReturning\n\n返回通知。在方法正常结束时用。因为是正常结束，一般都需要知道返回的结果，所以入参相比之前的就多了一个。\n\n```java\n@AfterReturning(value = \"pointCut()\", returning = \"object\")\npublic void logReturn(JoinPoint joinPoint, Object object) {\n    System.out.println(joinPoint.getSignature().getName() + \"，@AfterReturning..正常返回。.运行结果：\" + object);\n}\n```\n\n\n\n## @AfterThrowing\n\n异常通知。抛出异常的时候用。抛出的异常也是对象，需要告诉Spring，所以这也算一个入参。\n\n```java\n@AfterThrowing(value = \"pointCut()\", throwing = \"exception\")\npublic void logException(JoinPoint joinPoint, Exception exception) {\n    System.out.println(\" 方法名：\" + joinPoint.getSignature().getName() + \".....异常信息：\" + exception);\n}\n```\n\n\n\n## @Around\n\n环绕通知。听这个名字有没有觉得很仙气，很厉害的样子。的确厉害，一个顶四个。。\n\n他的“帮手”也不再是JointPoint了，而是升级版的：`ProceedingJoinPoint`。\n\n```java\n@Around(value = \"pointCut()\")\npublic Object logAround(ProceedingJoinPoint proceedingJoinPoint) {\n    Object result;\n    try {\n        result = proceedingJoinPoint.proceed();\n        System.out.println(proceedingJoinPoint.getSignature().getName() + \"，Around ..方法名：\" + \"....参数：\" + Arrays.asList(proceedingJoinPoint.getArgs()));\n\n        System.out.println(proceedingJoinPoint.getSignature().getName() + \"，Around..正常返回。.运行结果：\" + result);\n    } catch (Throwable throwable) {\n        System.out.println(\" 方法名：\" + proceedingJoinPoint.getSignature().getName() + \"....Around  .异常信息：\" + throwable);\n        throw new RuntimeException(throwable);\n    }\n    System.out.println(proceedingJoinPoint.getSignature().getName() + \"，Around.方法名：\" + \". 一定会返回的。.参数：\" + Arrays.asList(proceedingJoinPoint.getArgs()));\n    return result;\n}\n```\n\n## 注意事项\n\n如果认为标注注解就能生效就  *too young to navie* 了。\n\n- 将业务逻辑代码以及切面类（例如日志打印服务）都加入到容器中，并且告诉Spring哪个是切面类（在类上加**@Aspect**）\n- 在切面类上的要用的通知方法上加入相应注解（如@Before）。\n- 在配置类上开启注解的aop模式（ **@EnableAspectJAutoProxy**）。\n\n# 源码\n\n## @EnableAspectJAutoProxy","source":"_posts/springAOP.md","raw":"---\ntitle: springAOP\ndate: 2020-03-28 14:43:58\ncategories: Spring\ntags: aop\n---\n\nAOP, 切面。聊聊几个通知。\n\n<!--more-->\n\n# 用途\n\n如果是吃个蛋糕，会怎么吃？有的人会一层一层吃，当然最上面是奶油或者水果，最下方是面包，但是大部分人都不会这么吃，会用刀将蛋糕切开，将糅合了多层的可口蛋糕一起送入口中，而非第一种吃法那样有先后顺序。Spring框架中的AOP的用途就好比那把刀，将容器中的bean有个安排。\n\n# 通知\n\nAOP中的刀不像是切蛋糕那样最终把蛋糕送入口中，它的实际工序会更多。比如送入口中可能是最后一步，在这之前也许会统一撒点肉松、统一加热之类的。虽然有点奇怪。\n\nSpring的命名是让人通俗易懂的，也可以理解为你的英语水平够用。诸如*@Before*, *@After*...之类的一眼扫过去就能知道它的作用。目前用到的有5个：l@Before, @After, @AfterReturning, @AfterThrowing和@Around。他们都不是直接标注就可以使用，而是**需要指要作用的方法**。\n\n由于作用的目标方法大多相同，因此还可以提取公共的路径。\n\n与之相关的要先介绍`JointPoint`，根据词意不难理解：切点。切面中的切点可以说是很细节的了，能用他来获取切面相关的信息，可以理解为“帮手”。\n\n## @PointCut\n\n公用切入点。括号后加入作用路径。\n\n```java\n@Pointcut(\"execution(public int org.example.aop.MathCalculate.*(..)) \")\npublic void pointCut() {\n}\n```\n\nMathCalculate为类名，`MathCalculate.*`表示作用于类下的所有方法。`(..)`表示任意参数。\n\n\n\n## @Before\n\n这个是前置通知。表示在方法执行前执行标识了这个注解的方法。\n\n```java\n@Before(\"pointCut()\")\npublic void logStart(JoinPoint joinPoint) {\n    System.out.println(joinPoint.getSignature().getName() + \"，logStart()..方法名：\" + \"....参数：\" + Arrays.asList(joinPoint.getArgs()));\n}\n```\n\n\n\n## @After\n\n后置通知。方法结束后会被调用，**无论方法成功还是失败**，类似于`finally`。\n\n```java\n@After(\"pointCut()\")\npublic void logEnd(JoinPoint joinPoint) {\n    System.out.println(joinPoint.getSignature().getName() + \"，@After.方法名：\" + \". 一定会返回的。.参数：\" + Arrays.asList(joinPoint.getArgs()));\n}\n```\n\n\n\n## @AfterReturning\n\n返回通知。在方法正常结束时用。因为是正常结束，一般都需要知道返回的结果，所以入参相比之前的就多了一个。\n\n```java\n@AfterReturning(value = \"pointCut()\", returning = \"object\")\npublic void logReturn(JoinPoint joinPoint, Object object) {\n    System.out.println(joinPoint.getSignature().getName() + \"，@AfterReturning..正常返回。.运行结果：\" + object);\n}\n```\n\n\n\n## @AfterThrowing\n\n异常通知。抛出异常的时候用。抛出的异常也是对象，需要告诉Spring，所以这也算一个入参。\n\n```java\n@AfterThrowing(value = \"pointCut()\", throwing = \"exception\")\npublic void logException(JoinPoint joinPoint, Exception exception) {\n    System.out.println(\" 方法名：\" + joinPoint.getSignature().getName() + \".....异常信息：\" + exception);\n}\n```\n\n\n\n## @Around\n\n环绕通知。听这个名字有没有觉得很仙气，很厉害的样子。的确厉害，一个顶四个。。\n\n他的“帮手”也不再是JointPoint了，而是升级版的：`ProceedingJoinPoint`。\n\n```java\n@Around(value = \"pointCut()\")\npublic Object logAround(ProceedingJoinPoint proceedingJoinPoint) {\n    Object result;\n    try {\n        result = proceedingJoinPoint.proceed();\n        System.out.println(proceedingJoinPoint.getSignature().getName() + \"，Around ..方法名：\" + \"....参数：\" + Arrays.asList(proceedingJoinPoint.getArgs()));\n\n        System.out.println(proceedingJoinPoint.getSignature().getName() + \"，Around..正常返回。.运行结果：\" + result);\n    } catch (Throwable throwable) {\n        System.out.println(\" 方法名：\" + proceedingJoinPoint.getSignature().getName() + \"....Around  .异常信息：\" + throwable);\n        throw new RuntimeException(throwable);\n    }\n    System.out.println(proceedingJoinPoint.getSignature().getName() + \"，Around.方法名：\" + \". 一定会返回的。.参数：\" + Arrays.asList(proceedingJoinPoint.getArgs()));\n    return result;\n}\n```\n\n## 注意事项\n\n如果认为标注注解就能生效就  *too young to navie* 了。\n\n- 将业务逻辑代码以及切面类（例如日志打印服务）都加入到容器中，并且告诉Spring哪个是切面类（在类上加**@Aspect**）\n- 在切面类上的要用的通知方法上加入相应注解（如@Before）。\n- 在配置类上开启注解的aop模式（ **@EnableAspectJAutoProxy**）。\n\n# 源码\n\n## @EnableAspectJAutoProxy","slug":"springAOP","published":1,"updated":"2020-07-19T17:29:13.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgdb002zbyihh3i56g47","content":"<p>AOP, 切面。聊聊几个通知。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h1><p>如果是吃个蛋糕，会怎么吃？有的人会一层一层吃，当然最上面是奶油或者水果，最下方是面包，但是大部分人都不会这么吃，会用刀将蛋糕切开，将糅合了多层的可口蛋糕一起送入口中，而非第一种吃法那样有先后顺序。Spring框架中的AOP的用途就好比那把刀，将容器中的bean有个安排。</p>\n<h1 id=\"通知\"><a href=\"#通知\" class=\"headerlink\" title=\"通知\"></a>通知</h1><p>AOP中的刀不像是切蛋糕那样最终把蛋糕送入口中，它的实际工序会更多。比如送入口中可能是最后一步，在这之前也许会统一撒点肉松、统一加热之类的。虽然有点奇怪。</p>\n<p>Spring的命名是让人通俗易懂的，也可以理解为你的英语水平够用。诸如*@Before*, <em>@After</em>…之类的一眼扫过去就能知道它的作用。目前用到的有5个：l@Before, @After, @AfterReturning, @AfterThrowing和@Around。他们都不是直接标注就可以使用，而是<strong>需要指要作用的方法</strong>。</p>\n<p>由于作用的目标方法大多相同，因此还可以提取公共的路径。</p>\n<p>与之相关的要先介绍<code>JointPoint</code>，根据词意不难理解：切点。切面中的切点可以说是很细节的了，能用他来获取切面相关的信息，可以理解为“帮手”。</p>\n<h2 id=\"PointCut\"><a href=\"#PointCut\" class=\"headerlink\" title=\"@PointCut\"></a>@PointCut</h2><p>公用切入点。括号后加入作用路径。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Pointcut(&quot;execution(public int org.example.aop.MathCalculate.*(..)) &quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pointCut</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>MathCalculate为类名，<code>MathCalculate.*</code>表示作用于类下的所有方法。<code>(..)</code>表示任意参数。</p>\n<h2 id=\"Before\"><a href=\"#Before\" class=\"headerlink\" title=\"@Before\"></a>@Before</h2><p>这个是前置通知。表示在方法执行前执行标识了这个注解的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Before(&quot;pointCut()&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logStart</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(joinPoint.getSignature().getName() + <span class=\"string\">&quot;，logStart()..方法名：&quot;</span> + <span class=\"string\">&quot;....参数：&quot;</span> + Arrays.asList(joinPoint.getArgs()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"After\"><a href=\"#After\" class=\"headerlink\" title=\"@After\"></a>@After</h2><p>后置通知。方法结束后会被调用，<strong>无论方法成功还是失败</strong>，类似于<code>finally</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@After(&quot;pointCut()&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logEnd</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(joinPoint.getSignature().getName() + <span class=\"string\">&quot;，@After.方法名：&quot;</span> + <span class=\"string\">&quot;. 一定会返回的。.参数：&quot;</span> + Arrays.asList(joinPoint.getArgs()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"AfterReturning\"><a href=\"#AfterReturning\" class=\"headerlink\" title=\"@AfterReturning\"></a>@AfterReturning</h2><p>返回通知。在方法正常结束时用。因为是正常结束，一般都需要知道返回的结果，所以入参相比之前的就多了一个。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AfterReturning(value = &quot;pointCut()&quot;, returning = &quot;object&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logReturn</span><span class=\"params\">(JoinPoint joinPoint, Object object)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(joinPoint.getSignature().getName() + <span class=\"string\">&quot;，@AfterReturning..正常返回。.运行结果：&quot;</span> + object);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"AfterThrowing\"><a href=\"#AfterThrowing\" class=\"headerlink\" title=\"@AfterThrowing\"></a>@AfterThrowing</h2><p>异常通知。抛出异常的时候用。抛出的异常也是对象，需要告诉Spring，所以这也算一个入参。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AfterThrowing(value = &quot;pointCut()&quot;, throwing = &quot;exception&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logException</span><span class=\"params\">(JoinPoint joinPoint, Exception exception)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot; 方法名：&quot;</span> + joinPoint.getSignature().getName() + <span class=\"string\">&quot;.....异常信息：&quot;</span> + exception);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Around\"><a href=\"#Around\" class=\"headerlink\" title=\"@Around\"></a>@Around</h2><p>环绕通知。听这个名字有没有觉得很仙气，很厉害的样子。的确厉害，一个顶四个。。</p>\n<p>他的“帮手”也不再是JointPoint了，而是升级版的：<code>ProceedingJoinPoint</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Around(value = &quot;pointCut()&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">logAround</span><span class=\"params\">(ProceedingJoinPoint proceedingJoinPoint)</span> </span>&#123;</span><br><span class=\"line\">    Object result;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        result = proceedingJoinPoint.proceed();</span><br><span class=\"line\">        System.out.println(proceedingJoinPoint.getSignature().getName() + <span class=\"string\">&quot;，Around ..方法名：&quot;</span> + <span class=\"string\">&quot;....参数：&quot;</span> + Arrays.asList(proceedingJoinPoint.getArgs()));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(proceedingJoinPoint.getSignature().getName() + <span class=\"string\">&quot;，Around..正常返回。.运行结果：&quot;</span> + result);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable throwable) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 方法名：&quot;</span> + proceedingJoinPoint.getSignature().getName() + <span class=\"string\">&quot;....Around  .异常信息：&quot;</span> + throwable);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(throwable);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(proceedingJoinPoint.getSignature().getName() + <span class=\"string\">&quot;，Around.方法名：&quot;</span> + <span class=\"string\">&quot;. 一定会返回的。.参数：&quot;</span> + Arrays.asList(proceedingJoinPoint.getArgs()));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>如果认为标注注解就能生效就  <em>too young to navie</em> 了。</p>\n<ul>\n<li>将业务逻辑代码以及切面类（例如日志打印服务）都加入到容器中，并且告诉Spring哪个是切面类（在类上加**@Aspect**）</li>\n<li>在切面类上的要用的通知方法上加入相应注解（如@Before）。</li>\n<li>在配置类上开启注解的aop模式（ <strong>@EnableAspectJAutoProxy</strong>）。</li>\n</ul>\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><h2 id=\"EnableAspectJAutoProxy\"><a href=\"#EnableAspectJAutoProxy\" class=\"headerlink\" title=\"@EnableAspectJAutoProxy\"></a>@EnableAspectJAutoProxy</h2>","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>AOP, 切面。聊聊几个通知。</p>","more":"<h1 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h1><p>如果是吃个蛋糕，会怎么吃？有的人会一层一层吃，当然最上面是奶油或者水果，最下方是面包，但是大部分人都不会这么吃，会用刀将蛋糕切开，将糅合了多层的可口蛋糕一起送入口中，而非第一种吃法那样有先后顺序。Spring框架中的AOP的用途就好比那把刀，将容器中的bean有个安排。</p>\n<h1 id=\"通知\"><a href=\"#通知\" class=\"headerlink\" title=\"通知\"></a>通知</h1><p>AOP中的刀不像是切蛋糕那样最终把蛋糕送入口中，它的实际工序会更多。比如送入口中可能是最后一步，在这之前也许会统一撒点肉松、统一加热之类的。虽然有点奇怪。</p>\n<p>Spring的命名是让人通俗易懂的，也可以理解为你的英语水平够用。诸如*@Before*, <em>@After</em>…之类的一眼扫过去就能知道它的作用。目前用到的有5个：l@Before, @After, @AfterReturning, @AfterThrowing和@Around。他们都不是直接标注就可以使用，而是<strong>需要指要作用的方法</strong>。</p>\n<p>由于作用的目标方法大多相同，因此还可以提取公共的路径。</p>\n<p>与之相关的要先介绍<code>JointPoint</code>，根据词意不难理解：切点。切面中的切点可以说是很细节的了，能用他来获取切面相关的信息，可以理解为“帮手”。</p>\n<h2 id=\"PointCut\"><a href=\"#PointCut\" class=\"headerlink\" title=\"@PointCut\"></a>@PointCut</h2><p>公用切入点。括号后加入作用路径。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Pointcut(&quot;execution(public int org.example.aop.MathCalculate.*(..)) &quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pointCut</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>MathCalculate为类名，<code>MathCalculate.*</code>表示作用于类下的所有方法。<code>(..)</code>表示任意参数。</p>\n<h2 id=\"Before\"><a href=\"#Before\" class=\"headerlink\" title=\"@Before\"></a>@Before</h2><p>这个是前置通知。表示在方法执行前执行标识了这个注解的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Before(&quot;pointCut()&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logStart</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(joinPoint.getSignature().getName() + <span class=\"string\">&quot;，logStart()..方法名：&quot;</span> + <span class=\"string\">&quot;....参数：&quot;</span> + Arrays.asList(joinPoint.getArgs()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"After\"><a href=\"#After\" class=\"headerlink\" title=\"@After\"></a>@After</h2><p>后置通知。方法结束后会被调用，<strong>无论方法成功还是失败</strong>，类似于<code>finally</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@After(&quot;pointCut()&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logEnd</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(joinPoint.getSignature().getName() + <span class=\"string\">&quot;，@After.方法名：&quot;</span> + <span class=\"string\">&quot;. 一定会返回的。.参数：&quot;</span> + Arrays.asList(joinPoint.getArgs()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"AfterReturning\"><a href=\"#AfterReturning\" class=\"headerlink\" title=\"@AfterReturning\"></a>@AfterReturning</h2><p>返回通知。在方法正常结束时用。因为是正常结束，一般都需要知道返回的结果，所以入参相比之前的就多了一个。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AfterReturning(value = &quot;pointCut()&quot;, returning = &quot;object&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logReturn</span><span class=\"params\">(JoinPoint joinPoint, Object object)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(joinPoint.getSignature().getName() + <span class=\"string\">&quot;，@AfterReturning..正常返回。.运行结果：&quot;</span> + object);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"AfterThrowing\"><a href=\"#AfterThrowing\" class=\"headerlink\" title=\"@AfterThrowing\"></a>@AfterThrowing</h2><p>异常通知。抛出异常的时候用。抛出的异常也是对象，需要告诉Spring，所以这也算一个入参。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AfterThrowing(value = &quot;pointCut()&quot;, throwing = &quot;exception&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logException</span><span class=\"params\">(JoinPoint joinPoint, Exception exception)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot; 方法名：&quot;</span> + joinPoint.getSignature().getName() + <span class=\"string\">&quot;.....异常信息：&quot;</span> + exception);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Around\"><a href=\"#Around\" class=\"headerlink\" title=\"@Around\"></a>@Around</h2><p>环绕通知。听这个名字有没有觉得很仙气，很厉害的样子。的确厉害，一个顶四个。。</p>\n<p>他的“帮手”也不再是JointPoint了，而是升级版的：<code>ProceedingJoinPoint</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Around(value = &quot;pointCut()&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">logAround</span><span class=\"params\">(ProceedingJoinPoint proceedingJoinPoint)</span> </span>&#123;</span><br><span class=\"line\">    Object result;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        result = proceedingJoinPoint.proceed();</span><br><span class=\"line\">        System.out.println(proceedingJoinPoint.getSignature().getName() + <span class=\"string\">&quot;，Around ..方法名：&quot;</span> + <span class=\"string\">&quot;....参数：&quot;</span> + Arrays.asList(proceedingJoinPoint.getArgs()));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(proceedingJoinPoint.getSignature().getName() + <span class=\"string\">&quot;，Around..正常返回。.运行结果：&quot;</span> + result);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable throwable) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 方法名：&quot;</span> + proceedingJoinPoint.getSignature().getName() + <span class=\"string\">&quot;....Around  .异常信息：&quot;</span> + throwable);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(throwable);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(proceedingJoinPoint.getSignature().getName() + <span class=\"string\">&quot;，Around.方法名：&quot;</span> + <span class=\"string\">&quot;. 一定会返回的。.参数：&quot;</span> + Arrays.asList(proceedingJoinPoint.getArgs()));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>如果认为标注注解就能生效就  <em>too young to navie</em> 了。</p>\n<ul>\n<li>将业务逻辑代码以及切面类（例如日志打印服务）都加入到容器中，并且告诉Spring哪个是切面类（在类上加**@Aspect**）</li>\n<li>在切面类上的要用的通知方法上加入相应注解（如@Before）。</li>\n<li>在配置类上开启注解的aop模式（ <strong>@EnableAspectJAutoProxy</strong>）。</li>\n</ul>\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><h2 id=\"EnableAspectJAutoProxy\"><a href=\"#EnableAspectJAutoProxy\" class=\"headerlink\" title=\"@EnableAspectJAutoProxy\"></a>@EnableAspectJAutoProxy</h2>"},{"title":"static_final","date":"2020-04-12T08:19:56.000Z","_content":"\nJava的关键字static, final，以及部分jvm的内容。\n\n<!-- more -->\n\n# final\n\n先说说final的位置，它可以标注在__类__上、__方法__上以及__变量__上，且变量部分实例和局部。\n\n简单来说，final的作用就是令其唯一。\n\n| final | influence    |\n| ----- | ------------ |\n| 类    | 不能被继承   |\n| 方法  | 不能被重写   |\n| 变量  | 不能再被更改 |\n\n# static\n\n同上，他的位置也是多样的。可以标注在__方法__上和__变量__上。\n\n静态，不受实例的影响：例如 Math.max(a, b)，输出的结果只跟调用方传入的a、b的值有关，与Math的实例无关。\n\n```java\npublic class MyBook{\n    double price;\n    \n    public static void main(String[] args){\n        //会报告异常，静态方法中不能使用实例变量，对他来说是未知的。\n        System.out.println(price);\n    }\n    \n    public void setPrice(double price){\n        this.price = price;\n    }\n    \n    public float getPrice(){\n        return pricce;\n    }\n    \n    public float sellingPrice(){\n        int bookPrice = 2/3 * price;\n        return bookPrice;\n    }\n}\n```\n\n如上例所示，由于静态方法是直接用类名来引用的，所以**实例变量**对于它来说是未知的。那么，实例变量是谁可知、又如何可知的呢？\n\n\n\n## 变量\n\n变量按照不同的分类可以用不同的分法。\n\n按照位置分类，可以有局部变量和实例变量；按照类型又可以有原始变量和引用变量。\n\n局部变量：声明在方法内部的变量，如例子中方法sellingPrice()内的变量`bookPrice`。\n\n实例变量：声明在类内、方法之外的变量，如例子中的`price`。关于实例变量，在上例中每创建一个MyBook的对象，都会伴随对象产生一个变量price，且互不影响。\n\n原始变量：即primitive变量，使用java的基本数据类型声明的变量，如`int a = 0`。\n\n引用变量：在创建对象的过程中，将对象赋予的变量。如`MyBook firstBook = new MyBook();`中，`new MyBook()`的作用是利用构造函数创建对象，`MyBook firstBook`声明引用变量，最后是赋值对象给引用。\n\n### static\n\n如果在实例变量上添加了static修饰符，那么这个变量会被所有的实例共享。\n\n## 栈和堆\n\n声明之后的变量存到哪里去了？栈和堆。\n\n- 局部变量会跟随方法一起保存在栈中，除此之外还有方法的调用状态，他们一起被称为**堆栈块**。\n- 实例变量会跟随类的对象一起保存在堆中。\n\n所以，在静态方法中，对于实例变量是不可知的，或者说不知道该调用哪一个实例变量。\n\n非primitive的变量只是保存对象的引用。对象都存在堆中，而引用的变量本身会放在栈上。\n","source":"_posts/static-final.md","raw":"---\ntitle: static_final\ndate: 2020-04-12 16:19:56\ncategories: Java\ntags:\n- static\n- final\n---\n\nJava的关键字static, final，以及部分jvm的内容。\n\n<!-- more -->\n\n# final\n\n先说说final的位置，它可以标注在__类__上、__方法__上以及__变量__上，且变量部分实例和局部。\n\n简单来说，final的作用就是令其唯一。\n\n| final | influence    |\n| ----- | ------------ |\n| 类    | 不能被继承   |\n| 方法  | 不能被重写   |\n| 变量  | 不能再被更改 |\n\n# static\n\n同上，他的位置也是多样的。可以标注在__方法__上和__变量__上。\n\n静态，不受实例的影响：例如 Math.max(a, b)，输出的结果只跟调用方传入的a、b的值有关，与Math的实例无关。\n\n```java\npublic class MyBook{\n    double price;\n    \n    public static void main(String[] args){\n        //会报告异常，静态方法中不能使用实例变量，对他来说是未知的。\n        System.out.println(price);\n    }\n    \n    public void setPrice(double price){\n        this.price = price;\n    }\n    \n    public float getPrice(){\n        return pricce;\n    }\n    \n    public float sellingPrice(){\n        int bookPrice = 2/3 * price;\n        return bookPrice;\n    }\n}\n```\n\n如上例所示，由于静态方法是直接用类名来引用的，所以**实例变量**对于它来说是未知的。那么，实例变量是谁可知、又如何可知的呢？\n\n\n\n## 变量\n\n变量按照不同的分类可以用不同的分法。\n\n按照位置分类，可以有局部变量和实例变量；按照类型又可以有原始变量和引用变量。\n\n局部变量：声明在方法内部的变量，如例子中方法sellingPrice()内的变量`bookPrice`。\n\n实例变量：声明在类内、方法之外的变量，如例子中的`price`。关于实例变量，在上例中每创建一个MyBook的对象，都会伴随对象产生一个变量price，且互不影响。\n\n原始变量：即primitive变量，使用java的基本数据类型声明的变量，如`int a = 0`。\n\n引用变量：在创建对象的过程中，将对象赋予的变量。如`MyBook firstBook = new MyBook();`中，`new MyBook()`的作用是利用构造函数创建对象，`MyBook firstBook`声明引用变量，最后是赋值对象给引用。\n\n### static\n\n如果在实例变量上添加了static修饰符，那么这个变量会被所有的实例共享。\n\n## 栈和堆\n\n声明之后的变量存到哪里去了？栈和堆。\n\n- 局部变量会跟随方法一起保存在栈中，除此之外还有方法的调用状态，他们一起被称为**堆栈块**。\n- 实例变量会跟随类的对象一起保存在堆中。\n\n所以，在静态方法中，对于实例变量是不可知的，或者说不知道该调用哪一个实例变量。\n\n非primitive的变量只是保存对象的引用。对象都存在堆中，而引用的变量本身会放在栈上。\n","slug":"static-final","published":1,"updated":"2020-08-15T11:22:06.137Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgde0032byihfd1ha414","content":"<p>Java的关键字static, final，以及部分jvm的内容。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"final\"><a href=\"#final\" class=\"headerlink\" title=\"final\"></a>final</h1><p>先说说final的位置，它可以标注在__类__上、__方法__上以及__变量__上，且变量部分实例和局部。</p>\n<p>简单来说，final的作用就是令其唯一。</p>\n<table>\n<thead>\n<tr>\n<th>final</th>\n<th>influence</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>类</td>\n<td>不能被继承</td>\n</tr>\n<tr>\n<td>方法</td>\n<td>不能被重写</td>\n</tr>\n<tr>\n<td>变量</td>\n<td>不能再被更改</td>\n</tr>\n</tbody></table>\n<h1 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h1><p>同上，他的位置也是多样的。可以标注在__方法__上和__变量__上。</p>\n<p>静态，不受实例的影响：例如 Math.max(a, b)，输出的结果只跟调用方传入的a、b的值有关，与Math的实例无关。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBook</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//会报告异常，静态方法中不能使用实例变量，对他来说是未知的。</span></span><br><span class=\"line\">        System.out.println(price);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> price)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">getPrice</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pricce;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">sellingPrice</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> bookPrice = <span class=\"number\">2</span>/<span class=\"number\">3</span> * price;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bookPrice;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上例所示，由于静态方法是直接用类名来引用的，所以<strong>实例变量</strong>对于它来说是未知的。那么，实例变量是谁可知、又如何可知的呢？</p>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>变量按照不同的分类可以用不同的分法。</p>\n<p>按照位置分类，可以有局部变量和实例变量；按照类型又可以有原始变量和引用变量。</p>\n<p>局部变量：声明在方法内部的变量，如例子中方法sellingPrice()内的变量<code>bookPrice</code>。</p>\n<p>实例变量：声明在类内、方法之外的变量，如例子中的<code>price</code>。关于实例变量，在上例中每创建一个MyBook的对象，都会伴随对象产生一个变量price，且互不影响。</p>\n<p>原始变量：即primitive变量，使用java的基本数据类型声明的变量，如<code>int a = 0</code>。</p>\n<p>引用变量：在创建对象的过程中，将对象赋予的变量。如<code>MyBook firstBook = new MyBook();</code>中，<code>new MyBook()</code>的作用是利用构造函数创建对象，<code>MyBook firstBook</code>声明引用变量，最后是赋值对象给引用。</p>\n<h3 id=\"static-1\"><a href=\"#static-1\" class=\"headerlink\" title=\"static\"></a>static</h3><p>如果在实例变量上添加了static修饰符，那么这个变量会被所有的实例共享。</p>\n<h2 id=\"栈和堆\"><a href=\"#栈和堆\" class=\"headerlink\" title=\"栈和堆\"></a>栈和堆</h2><p>声明之后的变量存到哪里去了？栈和堆。</p>\n<ul>\n<li>局部变量会跟随方法一起保存在栈中，除此之外还有方法的调用状态，他们一起被称为<strong>堆栈块</strong>。</li>\n<li>实例变量会跟随类的对象一起保存在堆中。</li>\n</ul>\n<p>所以，在静态方法中，对于实例变量是不可知的，或者说不知道该调用哪一个实例变量。</p>\n<p>非primitive的变量只是保存对象的引用。对象都存在堆中，而引用的变量本身会放在栈上。</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>Java的关键字static, final，以及部分jvm的内容。</p>","more":"<h1 id=\"final\"><a href=\"#final\" class=\"headerlink\" title=\"final\"></a>final</h1><p>先说说final的位置，它可以标注在__类__上、__方法__上以及__变量__上，且变量部分实例和局部。</p>\n<p>简单来说，final的作用就是令其唯一。</p>\n<table>\n<thead>\n<tr>\n<th>final</th>\n<th>influence</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>类</td>\n<td>不能被继承</td>\n</tr>\n<tr>\n<td>方法</td>\n<td>不能被重写</td>\n</tr>\n<tr>\n<td>变量</td>\n<td>不能再被更改</td>\n</tr>\n</tbody></table>\n<h1 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h1><p>同上，他的位置也是多样的。可以标注在__方法__上和__变量__上。</p>\n<p>静态，不受实例的影响：例如 Math.max(a, b)，输出的结果只跟调用方传入的a、b的值有关，与Math的实例无关。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBook</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//会报告异常，静态方法中不能使用实例变量，对他来说是未知的。</span></span><br><span class=\"line\">        System.out.println(price);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> price)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">getPrice</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pricce;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">sellingPrice</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> bookPrice = <span class=\"number\">2</span>/<span class=\"number\">3</span> * price;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bookPrice;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上例所示，由于静态方法是直接用类名来引用的，所以<strong>实例变量</strong>对于它来说是未知的。那么，实例变量是谁可知、又如何可知的呢？</p>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>变量按照不同的分类可以用不同的分法。</p>\n<p>按照位置分类，可以有局部变量和实例变量；按照类型又可以有原始变量和引用变量。</p>\n<p>局部变量：声明在方法内部的变量，如例子中方法sellingPrice()内的变量<code>bookPrice</code>。</p>\n<p>实例变量：声明在类内、方法之外的变量，如例子中的<code>price</code>。关于实例变量，在上例中每创建一个MyBook的对象，都会伴随对象产生一个变量price，且互不影响。</p>\n<p>原始变量：即primitive变量，使用java的基本数据类型声明的变量，如<code>int a = 0</code>。</p>\n<p>引用变量：在创建对象的过程中，将对象赋予的变量。如<code>MyBook firstBook = new MyBook();</code>中，<code>new MyBook()</code>的作用是利用构造函数创建对象，<code>MyBook firstBook</code>声明引用变量，最后是赋值对象给引用。</p>\n<h3 id=\"static-1\"><a href=\"#static-1\" class=\"headerlink\" title=\"static\"></a>static</h3><p>如果在实例变量上添加了static修饰符，那么这个变量会被所有的实例共享。</p>\n<h2 id=\"栈和堆\"><a href=\"#栈和堆\" class=\"headerlink\" title=\"栈和堆\"></a>栈和堆</h2><p>声明之后的变量存到哪里去了？栈和堆。</p>\n<ul>\n<li>局部变量会跟随方法一起保存在栈中，除此之外还有方法的调用状态，他们一起被称为<strong>堆栈块</strong>。</li>\n<li>实例变量会跟随类的对象一起保存在堆中。</li>\n</ul>\n<p>所以，在静态方法中，对于实例变量是不可知的，或者说不知道该调用哪一个实例变量。</p>\n<p>非primitive的变量只是保存对象的引用。对象都存在堆中，而引用的变量本身会放在栈上。</p>"},{"title":"subsets","date":"2020-06-27T15:09:34.000Z","_content":"\nReturn all possible subsets(the power set).\n\n<!--more-->\n\n# 5460. Number of Good Pairs\n\nGiven an array of integers `nums`.\n\nA pair (i, j) is called _good_ if `nums[i] == nums[j]` and `i < j`.\n\nReturn the numbers of _good_ pairs.\n\nExample 1:\n\n```example\nInput: nums = [1,2,3,1,1,3]\nOutput: 4\nExplanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.\n```\n\nExample 2:\n\n```example\nInput: nums = [1,1,1,1]\nOutput: 6\nExplanation: Each pair in the array are good.\n```\n\nExample 3:\n\n```example\nInput: nums = [1,2,3]\nOutput: 0\n```\n\n## Thinking \n\n- 蛮力法获取到所有重复的数字，如何解出符合要求的解？\n- 用什么数据结构保存数组和对应的下标以保证遍历一次数组而不是两次？\n- 利用递归求解应该是个不错的选择。\n\n## Result\n\n想多了。。。\n\n```java\npublic int numIdenticalPairs(int[] nums) {\n    int count = 0;\n    // 这里i、j的命名与题目相反，思路结果是ok的\n    for (int i = 0; i < nums.length; i++) {\n        for (int j = 0; j < i; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n```\n\n# 78. Subsets\n\nGiven a set of distinct integers, *nums*, return all possible\n\n**Note:** The solution set must not contain duplicate subsets.\n\n**Example:**\n\n```markdown\nInput: nums = [1,2,3]\nOutput:\n[\n  [3],\n  [1],\n  [2],\n  [1,2,3],\n  [1,3],\n  [2,3],\n  [1,2],\n  []\n]\n```\n\n## Solution\n\n```java\npublic List<List<Integer>> subsets(int[] nums) {\n    if(nums == null){\n        return null;\n    }\n\n    List<List<Integer>> result = new ArrayList<>();\n\n    for(int value: nums){\n        List<List<Integer>> temp = new ArrayList<>();\n\n        for(List<Integer> a:result){\n            temp.add(new ArrayList<>(a));\n        }\n\n        for(List<Integer> a:temp){\n            a.add(value);\n        }\n\n        List<Integer> single = new ArrayList<>();\n        single.add(value);\n        temp.add(single);\n\n        result.addAll(temp);\n    }\n\n    result.add(new ArrayList<>());\n\n    return result;\n}\n```\n\n所有的工作都在一个for循环中完成了，return前的一次add是加入空表，因为空也是原数组的一个子集。来看看for循环中做了什么，把result中的线性表赋给临时表、往临时表中的每个元素添加目前正在遍历的元素、往临时表中作为独立元素添加目前正在遍历的元素，最后是将临时表赋给result。\n\n# 90. Subset II\n\n","source":"_posts/subsets.md","raw":"---\ntitle: subsets\ndate: 2020-06-27 23:09:34\ncategories: Leetcode\ntags: \n---\n\nReturn all possible subsets(the power set).\n\n<!--more-->\n\n# 5460. Number of Good Pairs\n\nGiven an array of integers `nums`.\n\nA pair (i, j) is called _good_ if `nums[i] == nums[j]` and `i < j`.\n\nReturn the numbers of _good_ pairs.\n\nExample 1:\n\n```example\nInput: nums = [1,2,3,1,1,3]\nOutput: 4\nExplanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.\n```\n\nExample 2:\n\n```example\nInput: nums = [1,1,1,1]\nOutput: 6\nExplanation: Each pair in the array are good.\n```\n\nExample 3:\n\n```example\nInput: nums = [1,2,3]\nOutput: 0\n```\n\n## Thinking \n\n- 蛮力法获取到所有重复的数字，如何解出符合要求的解？\n- 用什么数据结构保存数组和对应的下标以保证遍历一次数组而不是两次？\n- 利用递归求解应该是个不错的选择。\n\n## Result\n\n想多了。。。\n\n```java\npublic int numIdenticalPairs(int[] nums) {\n    int count = 0;\n    // 这里i、j的命名与题目相反，思路结果是ok的\n    for (int i = 0; i < nums.length; i++) {\n        for (int j = 0; j < i; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n```\n\n# 78. Subsets\n\nGiven a set of distinct integers, *nums*, return all possible\n\n**Note:** The solution set must not contain duplicate subsets.\n\n**Example:**\n\n```markdown\nInput: nums = [1,2,3]\nOutput:\n[\n  [3],\n  [1],\n  [2],\n  [1,2,3],\n  [1,3],\n  [2,3],\n  [1,2],\n  []\n]\n```\n\n## Solution\n\n```java\npublic List<List<Integer>> subsets(int[] nums) {\n    if(nums == null){\n        return null;\n    }\n\n    List<List<Integer>> result = new ArrayList<>();\n\n    for(int value: nums){\n        List<List<Integer>> temp = new ArrayList<>();\n\n        for(List<Integer> a:result){\n            temp.add(new ArrayList<>(a));\n        }\n\n        for(List<Integer> a:temp){\n            a.add(value);\n        }\n\n        List<Integer> single = new ArrayList<>();\n        single.add(value);\n        temp.add(single);\n\n        result.addAll(temp);\n    }\n\n    result.add(new ArrayList<>());\n\n    return result;\n}\n```\n\n所有的工作都在一个for循环中完成了，return前的一次add是加入空表，因为空也是原数组的一个子集。来看看for循环中做了什么，把result中的线性表赋给临时表、往临时表中的每个元素添加目前正在遍历的元素、往临时表中作为独立元素添加目前正在遍历的元素，最后是将临时表赋给result。\n\n# 90. Subset II\n\n","slug":"subsets","published":1,"updated":"2020-07-19T17:29:13.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgdg0036byih1pk21dti","content":"<p>Return all possible subsets(the power set).</p>\n<a id=\"more\"></a>\n\n<h1 id=\"5460-Number-of-Good-Pairs\"><a href=\"#5460-Number-of-Good-Pairs\" class=\"headerlink\" title=\"5460. Number of Good Pairs\"></a>5460. Number of Good Pairs</h1><p>Given an array of integers <code>nums</code>.</p>\n<p>A pair (i, j) is called <em>good</em> if <code>nums[i] == nums[j]</code> and <code>i &lt; j</code>.</p>\n<p>Return the numbers of <em>good</em> pairs.</p>\n<p>Example 1:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: nums &#x3D; [1,2,3,1,1,3]</span><br><span class=\"line\">Output: 4</span><br><span class=\"line\">Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.</span><br></pre></td></tr></table></figure>\n\n<p>Example 2:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: nums &#x3D; [1,1,1,1]</span><br><span class=\"line\">Output: 6</span><br><span class=\"line\">Explanation: Each pair in the array are good.</span><br></pre></td></tr></table></figure>\n\n<p>Example 3:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: nums &#x3D; [1,2,3]</span><br><span class=\"line\">Output: 0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Thinking\"><a href=\"#Thinking\" class=\"headerlink\" title=\"Thinking\"></a>Thinking</h2><ul>\n<li>蛮力法获取到所有重复的数字，如何解出符合要求的解？</li>\n<li>用什么数据结构保存数组和对应的下标以保证遍历一次数组而不是两次？</li>\n<li>利用递归求解应该是个不错的选择。</li>\n</ul>\n<h2 id=\"Result\"><a href=\"#Result\" class=\"headerlink\" title=\"Result\"></a>Result</h2><p>想多了。。。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">numIdenticalPairs</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 这里i、j的命名与题目相反，思路结果是ok的</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] == nums[j]) &#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"78-Subsets\"><a href=\"#78-Subsets\" class=\"headerlink\" title=\"78. Subsets\"></a>78. Subsets</h1><p>Given a set of distinct integers, <em>nums</em>, return all possible</p>\n<p><strong>Note:</strong> The solution set must not contain duplicate subsets.</p>\n<p><strong>Example:</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: nums = [1,2,3]</span><br><span class=\"line\">Output:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [3],</span><br><span class=\"line\">  [1],</span><br><span class=\"line\">  [2],</span><br><span class=\"line\">  [1,2,3],</span><br><span class=\"line\">  [1,3],</span><br><span class=\"line\">  [2,3],</span><br><span class=\"line\">  [1,2],</span><br><span class=\"line\">  []</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> value: nums)&#123;</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; temp = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(List&lt;Integer&gt; a:result)&#123;</span><br><span class=\"line\">            temp.add(<span class=\"keyword\">new</span> ArrayList&lt;&gt;(a));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(List&lt;Integer&gt; a:temp)&#123;</span><br><span class=\"line\">            a.add(value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Integer&gt; single = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        single.add(value);</span><br><span class=\"line\">        temp.add(single);</span><br><span class=\"line\"></span><br><span class=\"line\">        result.addAll(temp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    result.add(<span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所有的工作都在一个for循环中完成了，return前的一次add是加入空表，因为空也是原数组的一个子集。来看看for循环中做了什么，把result中的线性表赋给临时表、往临时表中的每个元素添加目前正在遍历的元素、往临时表中作为独立元素添加目前正在遍历的元素，最后是将临时表赋给result。</p>\n<h1 id=\"90-Subset-II\"><a href=\"#90-Subset-II\" class=\"headerlink\" title=\"90. Subset II\"></a>90. Subset II</h1>","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>Return all possible subsets(the power set).</p>","more":"<h1 id=\"5460-Number-of-Good-Pairs\"><a href=\"#5460-Number-of-Good-Pairs\" class=\"headerlink\" title=\"5460. Number of Good Pairs\"></a>5460. Number of Good Pairs</h1><p>Given an array of integers <code>nums</code>.</p>\n<p>A pair (i, j) is called <em>good</em> if <code>nums[i] == nums[j]</code> and <code>i &lt; j</code>.</p>\n<p>Return the numbers of <em>good</em> pairs.</p>\n<p>Example 1:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: nums &#x3D; [1,2,3,1,1,3]</span><br><span class=\"line\">Output: 4</span><br><span class=\"line\">Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.</span><br></pre></td></tr></table></figure>\n\n<p>Example 2:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: nums &#x3D; [1,1,1,1]</span><br><span class=\"line\">Output: 6</span><br><span class=\"line\">Explanation: Each pair in the array are good.</span><br></pre></td></tr></table></figure>\n\n<p>Example 3:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: nums &#x3D; [1,2,3]</span><br><span class=\"line\">Output: 0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Thinking\"><a href=\"#Thinking\" class=\"headerlink\" title=\"Thinking\"></a>Thinking</h2><ul>\n<li>蛮力法获取到所有重复的数字，如何解出符合要求的解？</li>\n<li>用什么数据结构保存数组和对应的下标以保证遍历一次数组而不是两次？</li>\n<li>利用递归求解应该是个不错的选择。</li>\n</ul>\n<h2 id=\"Result\"><a href=\"#Result\" class=\"headerlink\" title=\"Result\"></a>Result</h2><p>想多了。。。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">numIdenticalPairs</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 这里i、j的命名与题目相反，思路结果是ok的</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] == nums[j]) &#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"78-Subsets\"><a href=\"#78-Subsets\" class=\"headerlink\" title=\"78. Subsets\"></a>78. Subsets</h1><p>Given a set of distinct integers, <em>nums</em>, return all possible</p>\n<p><strong>Note:</strong> The solution set must not contain duplicate subsets.</p>\n<p><strong>Example:</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: nums = [1,2,3]</span><br><span class=\"line\">Output:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [3],</span><br><span class=\"line\">  [1],</span><br><span class=\"line\">  [2],</span><br><span class=\"line\">  [1,2,3],</span><br><span class=\"line\">  [1,3],</span><br><span class=\"line\">  [2,3],</span><br><span class=\"line\">  [1,2],</span><br><span class=\"line\">  []</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> value: nums)&#123;</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; temp = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(List&lt;Integer&gt; a:result)&#123;</span><br><span class=\"line\">            temp.add(<span class=\"keyword\">new</span> ArrayList&lt;&gt;(a));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(List&lt;Integer&gt; a:temp)&#123;</span><br><span class=\"line\">            a.add(value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Integer&gt; single = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        single.add(value);</span><br><span class=\"line\">        temp.add(single);</span><br><span class=\"line\"></span><br><span class=\"line\">        result.addAll(temp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    result.add(<span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所有的工作都在一个for循环中完成了，return前的一次add是加入空表，因为空也是原数组的一个子集。来看看for循环中做了什么，把result中的线性表赋给临时表、往临时表中的每个元素添加目前正在遍历的元素、往临时表中作为独立元素添加目前正在遍历的元素，最后是将临时表赋给result。</p>\n<h1 id=\"90-Subset-II\"><a href=\"#90-Subset-II\" class=\"headerlink\" title=\"90. Subset II\"></a>90. Subset II</h1>"},{"title":"swagger","date":"2019-11-02T14:51:41.000Z","_content":"# SWAGGER\n\n## 前后端分离\n\nVue + SpringBoot\n\n\n\n后端时代：前端只有管理静态页面；模板引擎jsp\n\n\n\n前后端分离时代：\n\n- 后端：后端控制层、服务层、数据访问层\n- 前端：前端控制层，视图层\n  - 伪造后端数据，json。不需要后端，前端一九能够跑起来\n- 前后端交互：api\n- 前后端相对独立，松耦合\n- 前后端甚至可以部署在不同的服务器上\n\n产生一个问题：\n\n- 前后端集成联调，前后端人员无法做到及时协商\n\n解决方案：\n\n- 首先指定schema（计划的提纲），实时更新api\n- 早些年，指定word文档计划\n- 前后端分离\n  - 前端测试后端接口：postman\n  - 后端提供接口，需要实时更新最新的消息及改动\n\n## swagger\n\nrestful api 文档在线自动生成工具\n\n在项目使用swagger需要springfox\n\n- swagger2\n- ui\n\n#### springboot集成swagger\n\n导入相关依赖：\n\n```xml\n<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->\n<dependency>\n    <groupId>io.springfox</groupId>\n    <artifactId>springfox-swagger2</artifactId>\n    <version>2.9.2</version>\n</dependency>\n\n<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->\n<dependency>\n    <groupId>io.springfox</groupId>\n    <artifactId>springfox-swagger-ui</artifactId>\n    <version>2.9.2</version>\n</dependency>\n\n```\n\n#### 配置swagger\n\nswagger的实例**docket**\n\n##### 配置swagger信息\n\n新建一个关于swagger的配置类\n\n```java\n@Configuration\n@EnableSwagger2\npublic class SwaggerConfig {\n\n    @Bean\n    public Docket docket() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo());\n    }\n\n    private ApiInfo apiInfo() {\n        Contact contact = new Contact(\"Sebastian\", \"https://www.raspberrypi.org/\", \"2573992956@qq.com\");\n        return new ApiInfo(\"Sebastian's api document\", \"FUN SWAGGER\", \"1.1\",\n                \"http://www.baidu.com\", contact, \"Apache 2.0\",\n                \"http://www.bing.com\", new ArrayList());\n    }\n}\n```\n\n##### 配置扫描接口及开关\n\nDocket.select()\n\n>  RequestHandlerSelectors //配置要扫描接口的方式\n\n源码涉及[链式调用](https://www.jb51.net/article/49405.htm)\n\n```java\n@Bean\npublic Docket docket() {\n    return new Docket(DocumentationType.SWAGGER_2)\n        .apiInfo(apiInfo())\n        .enable(false)\n        .select()\n        .apis(RequestHandlerSelectors.basePackage(\"com.sunday.personal.tuesday.controller\"))\n        //                .paths(PathSelectors.ant(\"/com/sunday/personal/tuesday/config/*\"))\n        .build(); //build\n}\n//basePackage, 扫描路径中的\n//any，扫描全部\n//withClassAnnotation(RestController.class)，扫描类上有…的类\n//withMethodAnnotation(...)，扫描方法上有…的类\n```\n\n\n\n<u>只在测试环境使用swagger：</u>\n\n```java\n@Bean\npublic Docket docket(Environment environment) {\n\n\n    //TODO:设置要显示的swagger环境\n    //Profiles profiles = Profiles.of(\"dev\");\n\n    //获取项目的环境\n    boolean flag = environment.acceptsProfiles(); //acceptsProfiles(profiles)\n\n    return new Docket(DocumentationType.SWAGGER_2)\n        .apiInfo(apiInfo())\n        .enable(false)\n        .select()\n        .apis(RequestHandlerSelectors.basePackage(\"com.sunday.personal.tuesday.controller\"))\n        //                .paths(PathSelectors.ant(\"/com/sunday/personal/tuesday/config/*\"))\n        .build(); //build\n}\n```\n\n#### 配置api分组\n\n```java\n@Bean\npublic Docket docket2(){\n    return new Docket(DocumentationType.SWAGGER_2).groupName(\"crm\");\n}\n\n@Bean\npublic Docket docket1(){\n    return new Docket(DocumentationType.SWAGGER_2).groupName(\"pay\");\n}\n\n@Bean\npublic Docket docket() {\n\n\n    //TODO:设置要显示的swagger环境\n    //        Profiles profiles = Profiles.of(\"dev\");\n\n    //获取项目的环境\n    //        boolean flag = environment.acceptsProfiles(); //acceptsProfiles(profiles)\n\n    return new Docket(DocumentationType.SWAGGER_2)\n        .apiInfo(apiInfo())\n        .groupName(\"interface\")\n        .enable(true)\n        .select()\n        .apis(RequestHandlerSelectors.basePackage(\"com.sunday.personal.tuesday.controller\"))\n        .build(); //build\n}\n```\n\n#### 实体类配置\n\n@Api...注释","source":"_posts/swagger.md","raw":"---\ntitle: swagger\ndate: 2019-11-02 22:51:41\ncategories: Java\ntags:\n- swagger\n- SpringBoot\n---\n# SWAGGER\n\n## 前后端分离\n\nVue + SpringBoot\n\n\n\n后端时代：前端只有管理静态页面；模板引擎jsp\n\n\n\n前后端分离时代：\n\n- 后端：后端控制层、服务层、数据访问层\n- 前端：前端控制层，视图层\n  - 伪造后端数据，json。不需要后端，前端一九能够跑起来\n- 前后端交互：api\n- 前后端相对独立，松耦合\n- 前后端甚至可以部署在不同的服务器上\n\n产生一个问题：\n\n- 前后端集成联调，前后端人员无法做到及时协商\n\n解决方案：\n\n- 首先指定schema（计划的提纲），实时更新api\n- 早些年，指定word文档计划\n- 前后端分离\n  - 前端测试后端接口：postman\n  - 后端提供接口，需要实时更新最新的消息及改动\n\n## swagger\n\nrestful api 文档在线自动生成工具\n\n在项目使用swagger需要springfox\n\n- swagger2\n- ui\n\n#### springboot集成swagger\n\n导入相关依赖：\n\n```xml\n<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->\n<dependency>\n    <groupId>io.springfox</groupId>\n    <artifactId>springfox-swagger2</artifactId>\n    <version>2.9.2</version>\n</dependency>\n\n<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->\n<dependency>\n    <groupId>io.springfox</groupId>\n    <artifactId>springfox-swagger-ui</artifactId>\n    <version>2.9.2</version>\n</dependency>\n\n```\n\n#### 配置swagger\n\nswagger的实例**docket**\n\n##### 配置swagger信息\n\n新建一个关于swagger的配置类\n\n```java\n@Configuration\n@EnableSwagger2\npublic class SwaggerConfig {\n\n    @Bean\n    public Docket docket() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo());\n    }\n\n    private ApiInfo apiInfo() {\n        Contact contact = new Contact(\"Sebastian\", \"https://www.raspberrypi.org/\", \"2573992956@qq.com\");\n        return new ApiInfo(\"Sebastian's api document\", \"FUN SWAGGER\", \"1.1\",\n                \"http://www.baidu.com\", contact, \"Apache 2.0\",\n                \"http://www.bing.com\", new ArrayList());\n    }\n}\n```\n\n##### 配置扫描接口及开关\n\nDocket.select()\n\n>  RequestHandlerSelectors //配置要扫描接口的方式\n\n源码涉及[链式调用](https://www.jb51.net/article/49405.htm)\n\n```java\n@Bean\npublic Docket docket() {\n    return new Docket(DocumentationType.SWAGGER_2)\n        .apiInfo(apiInfo())\n        .enable(false)\n        .select()\n        .apis(RequestHandlerSelectors.basePackage(\"com.sunday.personal.tuesday.controller\"))\n        //                .paths(PathSelectors.ant(\"/com/sunday/personal/tuesday/config/*\"))\n        .build(); //build\n}\n//basePackage, 扫描路径中的\n//any，扫描全部\n//withClassAnnotation(RestController.class)，扫描类上有…的类\n//withMethodAnnotation(...)，扫描方法上有…的类\n```\n\n\n\n<u>只在测试环境使用swagger：</u>\n\n```java\n@Bean\npublic Docket docket(Environment environment) {\n\n\n    //TODO:设置要显示的swagger环境\n    //Profiles profiles = Profiles.of(\"dev\");\n\n    //获取项目的环境\n    boolean flag = environment.acceptsProfiles(); //acceptsProfiles(profiles)\n\n    return new Docket(DocumentationType.SWAGGER_2)\n        .apiInfo(apiInfo())\n        .enable(false)\n        .select()\n        .apis(RequestHandlerSelectors.basePackage(\"com.sunday.personal.tuesday.controller\"))\n        //                .paths(PathSelectors.ant(\"/com/sunday/personal/tuesday/config/*\"))\n        .build(); //build\n}\n```\n\n#### 配置api分组\n\n```java\n@Bean\npublic Docket docket2(){\n    return new Docket(DocumentationType.SWAGGER_2).groupName(\"crm\");\n}\n\n@Bean\npublic Docket docket1(){\n    return new Docket(DocumentationType.SWAGGER_2).groupName(\"pay\");\n}\n\n@Bean\npublic Docket docket() {\n\n\n    //TODO:设置要显示的swagger环境\n    //        Profiles profiles = Profiles.of(\"dev\");\n\n    //获取项目的环境\n    //        boolean flag = environment.acceptsProfiles(); //acceptsProfiles(profiles)\n\n    return new Docket(DocumentationType.SWAGGER_2)\n        .apiInfo(apiInfo())\n        .groupName(\"interface\")\n        .enable(true)\n        .select()\n        .apis(RequestHandlerSelectors.basePackage(\"com.sunday.personal.tuesday.controller\"))\n        .build(); //build\n}\n```\n\n#### 实体类配置\n\n@Api...注释","slug":"swagger","published":1,"updated":"2020-07-19T17:29:13.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgdh0039byihhv4je5r4","content":"<h1 id=\"SWAGGER\"><a href=\"#SWAGGER\" class=\"headerlink\" title=\"SWAGGER\"></a>SWAGGER</h1><h2 id=\"前后端分离\"><a href=\"#前后端分离\" class=\"headerlink\" title=\"前后端分离\"></a>前后端分离</h2><p>Vue + SpringBoot</p>\n<p>后端时代：前端只有管理静态页面；模板引擎jsp</p>\n<p>前后端分离时代：</p>\n<ul>\n<li>后端：后端控制层、服务层、数据访问层</li>\n<li>前端：前端控制层，视图层<ul>\n<li>伪造后端数据，json。不需要后端，前端一九能够跑起来</li>\n</ul>\n</li>\n<li>前后端交互：api</li>\n<li>前后端相对独立，松耦合</li>\n<li>前后端甚至可以部署在不同的服务器上</li>\n</ul>\n<p>产生一个问题：</p>\n<ul>\n<li>前后端集成联调，前后端人员无法做到及时协商</li>\n</ul>\n<p>解决方案：</p>\n<ul>\n<li>首先指定schema（计划的提纲），实时更新api</li>\n<li>早些年，指定word文档计划</li>\n<li>前后端分离<ul>\n<li>前端测试后端接口：postman</li>\n<li>后端提供接口，需要实时更新最新的消息及改动</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"swagger\"><a href=\"#swagger\" class=\"headerlink\" title=\"swagger\"></a>swagger</h2><p>restful api 文档在线自动生成工具</p>\n<p>在项目使用swagger需要springfox</p>\n<ul>\n<li>swagger2</li>\n<li>ui</li>\n</ul>\n<h4 id=\"springboot集成swagger\"><a href=\"#springboot集成swagger\" class=\"headerlink\" title=\"springboot集成swagger\"></a>springboot集成swagger</h4><p>导入相关依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-swagger2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.9.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-swagger-ui<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.9.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置swagger\"><a href=\"#配置swagger\" class=\"headerlink\" title=\"配置swagger\"></a>配置swagger</h4><p>swagger的实例<strong>docket</strong></p>\n<h5 id=\"配置swagger信息\"><a href=\"#配置swagger信息\" class=\"headerlink\" title=\"配置swagger信息\"></a>配置swagger信息</h5><p>新建一个关于swagger的配置类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableSwagger2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">docket</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">                .apiInfo(apiInfo());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> ApiInfo <span class=\"title\">apiInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Contact contact = <span class=\"keyword\">new</span> Contact(<span class=\"string\">&quot;Sebastian&quot;</span>, <span class=\"string\">&quot;https://www.raspberrypi.org/&quot;</span>, <span class=\"string\">&quot;2573992956@qq.com&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ApiInfo(<span class=\"string\">&quot;Sebastian&#x27;s api document&quot;</span>, <span class=\"string\">&quot;FUN SWAGGER&quot;</span>, <span class=\"string\">&quot;1.1&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;http://www.baidu.com&quot;</span>, contact, <span class=\"string\">&quot;Apache 2.0&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;http://www.bing.com&quot;</span>, <span class=\"keyword\">new</span> ArrayList());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置扫描接口及开关\"><a href=\"#配置扫描接口及开关\" class=\"headerlink\" title=\"配置扫描接口及开关\"></a>配置扫描接口及开关</h5><p>Docket.select()</p>\n<blockquote>\n<p> RequestHandlerSelectors //配置要扫描接口的方式</p>\n</blockquote>\n<p>源码涉及<a href=\"https://www.jb51.net/article/49405.htm\">链式调用</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">docket</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">        .apiInfo(apiInfo())</span><br><span class=\"line\">        .enable(<span class=\"keyword\">false</span>)</span><br><span class=\"line\">        .select()</span><br><span class=\"line\">        .apis(RequestHandlerSelectors.basePackage(<span class=\"string\">&quot;com.sunday.personal.tuesday.controller&quot;</span>))</span><br><span class=\"line\">        <span class=\"comment\">//                .paths(PathSelectors.ant(&quot;/com/sunday/personal/tuesday/config/*&quot;))</span></span><br><span class=\"line\">        .build(); <span class=\"comment\">//build</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//basePackage, 扫描路径中的</span></span><br><span class=\"line\"><span class=\"comment\">//any，扫描全部</span></span><br><span class=\"line\"><span class=\"comment\">//withClassAnnotation(RestController.class)，扫描类上有…的类</span></span><br><span class=\"line\"><span class=\"comment\">//withMethodAnnotation(...)，扫描方法上有…的类</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><u>只在测试环境使用swagger：</u></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">docket</span><span class=\"params\">(Environment environment)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//<span class=\"doctag\">TODO:</span>设置要显示的swagger环境</span></span><br><span class=\"line\">    <span class=\"comment\">//Profiles profiles = Profiles.of(&quot;dev&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取项目的环境</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> flag = environment.acceptsProfiles(); <span class=\"comment\">//acceptsProfiles(profiles)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">        .apiInfo(apiInfo())</span><br><span class=\"line\">        .enable(<span class=\"keyword\">false</span>)</span><br><span class=\"line\">        .select()</span><br><span class=\"line\">        .apis(RequestHandlerSelectors.basePackage(<span class=\"string\">&quot;com.sunday.personal.tuesday.controller&quot;</span>))</span><br><span class=\"line\">        <span class=\"comment\">//                .paths(PathSelectors.ant(&quot;/com/sunday/personal/tuesday/config/*&quot;))</span></span><br><span class=\"line\">        .build(); <span class=\"comment\">//build</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置api分组\"><a href=\"#配置api分组\" class=\"headerlink\" title=\"配置api分组\"></a>配置api分组</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">docket2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class=\"string\">&quot;crm&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">docket1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class=\"string\">&quot;pay&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">docket</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//<span class=\"doctag\">TODO:</span>设置要显示的swagger环境</span></span><br><span class=\"line\">    <span class=\"comment\">//        Profiles profiles = Profiles.of(&quot;dev&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取项目的环境</span></span><br><span class=\"line\">    <span class=\"comment\">//        boolean flag = environment.acceptsProfiles(); //acceptsProfiles(profiles)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">        .apiInfo(apiInfo())</span><br><span class=\"line\">        .groupName(<span class=\"string\">&quot;interface&quot;</span>)</span><br><span class=\"line\">        .enable(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">        .select()</span><br><span class=\"line\">        .apis(RequestHandlerSelectors.basePackage(<span class=\"string\">&quot;com.sunday.personal.tuesday.controller&quot;</span>))</span><br><span class=\"line\">        .build(); <span class=\"comment\">//build</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实体类配置\"><a href=\"#实体类配置\" class=\"headerlink\" title=\"实体类配置\"></a>实体类配置</h4><p>@Api…注释</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"","more":"<h1 id=\"SWAGGER\"><a href=\"#SWAGGER\" class=\"headerlink\" title=\"SWAGGER\"></a>SWAGGER</h1><h2 id=\"前后端分离\"><a href=\"#前后端分离\" class=\"headerlink\" title=\"前后端分离\"></a>前后端分离</h2><p>Vue + SpringBoot</p>\n<p>后端时代：前端只有管理静态页面；模板引擎jsp</p>\n<p>前后端分离时代：</p>\n<ul>\n<li>后端：后端控制层、服务层、数据访问层</li>\n<li>前端：前端控制层，视图层<ul>\n<li>伪造后端数据，json。不需要后端，前端一九能够跑起来</li>\n</ul>\n</li>\n<li>前后端交互：api</li>\n<li>前后端相对独立，松耦合</li>\n<li>前后端甚至可以部署在不同的服务器上</li>\n</ul>\n<p>产生一个问题：</p>\n<ul>\n<li>前后端集成联调，前后端人员无法做到及时协商</li>\n</ul>\n<p>解决方案：</p>\n<ul>\n<li>首先指定schema（计划的提纲），实时更新api</li>\n<li>早些年，指定word文档计划</li>\n<li>前后端分离<ul>\n<li>前端测试后端接口：postman</li>\n<li>后端提供接口，需要实时更新最新的消息及改动</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"swagger\"><a href=\"#swagger\" class=\"headerlink\" title=\"swagger\"></a>swagger</h2><p>restful api 文档在线自动生成工具</p>\n<p>在项目使用swagger需要springfox</p>\n<ul>\n<li>swagger2</li>\n<li>ui</li>\n</ul>\n<h4 id=\"springboot集成swagger\"><a href=\"#springboot集成swagger\" class=\"headerlink\" title=\"springboot集成swagger\"></a>springboot集成swagger</h4><p>导入相关依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-swagger2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.9.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-swagger-ui<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.9.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置swagger\"><a href=\"#配置swagger\" class=\"headerlink\" title=\"配置swagger\"></a>配置swagger</h4><p>swagger的实例<strong>docket</strong></p>\n<h5 id=\"配置swagger信息\"><a href=\"#配置swagger信息\" class=\"headerlink\" title=\"配置swagger信息\"></a>配置swagger信息</h5><p>新建一个关于swagger的配置类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableSwagger2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">docket</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">                .apiInfo(apiInfo());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> ApiInfo <span class=\"title\">apiInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Contact contact = <span class=\"keyword\">new</span> Contact(<span class=\"string\">&quot;Sebastian&quot;</span>, <span class=\"string\">&quot;https://www.raspberrypi.org/&quot;</span>, <span class=\"string\">&quot;2573992956@qq.com&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ApiInfo(<span class=\"string\">&quot;Sebastian&#x27;s api document&quot;</span>, <span class=\"string\">&quot;FUN SWAGGER&quot;</span>, <span class=\"string\">&quot;1.1&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;http://www.baidu.com&quot;</span>, contact, <span class=\"string\">&quot;Apache 2.0&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;http://www.bing.com&quot;</span>, <span class=\"keyword\">new</span> ArrayList());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置扫描接口及开关\"><a href=\"#配置扫描接口及开关\" class=\"headerlink\" title=\"配置扫描接口及开关\"></a>配置扫描接口及开关</h5><p>Docket.select()</p>\n<blockquote>\n<p> RequestHandlerSelectors //配置要扫描接口的方式</p>\n</blockquote>\n<p>源码涉及<a href=\"https://www.jb51.net/article/49405.htm\">链式调用</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">docket</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">        .apiInfo(apiInfo())</span><br><span class=\"line\">        .enable(<span class=\"keyword\">false</span>)</span><br><span class=\"line\">        .select()</span><br><span class=\"line\">        .apis(RequestHandlerSelectors.basePackage(<span class=\"string\">&quot;com.sunday.personal.tuesday.controller&quot;</span>))</span><br><span class=\"line\">        <span class=\"comment\">//                .paths(PathSelectors.ant(&quot;/com/sunday/personal/tuesday/config/*&quot;))</span></span><br><span class=\"line\">        .build(); <span class=\"comment\">//build</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//basePackage, 扫描路径中的</span></span><br><span class=\"line\"><span class=\"comment\">//any，扫描全部</span></span><br><span class=\"line\"><span class=\"comment\">//withClassAnnotation(RestController.class)，扫描类上有…的类</span></span><br><span class=\"line\"><span class=\"comment\">//withMethodAnnotation(...)，扫描方法上有…的类</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><u>只在测试环境使用swagger：</u></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">docket</span><span class=\"params\">(Environment environment)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//<span class=\"doctag\">TODO:</span>设置要显示的swagger环境</span></span><br><span class=\"line\">    <span class=\"comment\">//Profiles profiles = Profiles.of(&quot;dev&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取项目的环境</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> flag = environment.acceptsProfiles(); <span class=\"comment\">//acceptsProfiles(profiles)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">        .apiInfo(apiInfo())</span><br><span class=\"line\">        .enable(<span class=\"keyword\">false</span>)</span><br><span class=\"line\">        .select()</span><br><span class=\"line\">        .apis(RequestHandlerSelectors.basePackage(<span class=\"string\">&quot;com.sunday.personal.tuesday.controller&quot;</span>))</span><br><span class=\"line\">        <span class=\"comment\">//                .paths(PathSelectors.ant(&quot;/com/sunday/personal/tuesday/config/*&quot;))</span></span><br><span class=\"line\">        .build(); <span class=\"comment\">//build</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置api分组\"><a href=\"#配置api分组\" class=\"headerlink\" title=\"配置api分组\"></a>配置api分组</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">docket2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class=\"string\">&quot;crm&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">docket1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class=\"string\">&quot;pay&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">docket</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//<span class=\"doctag\">TODO:</span>设置要显示的swagger环境</span></span><br><span class=\"line\">    <span class=\"comment\">//        Profiles profiles = Profiles.of(&quot;dev&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取项目的环境</span></span><br><span class=\"line\">    <span class=\"comment\">//        boolean flag = environment.acceptsProfiles(); //acceptsProfiles(profiles)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">        .apiInfo(apiInfo())</span><br><span class=\"line\">        .groupName(<span class=\"string\">&quot;interface&quot;</span>)</span><br><span class=\"line\">        .enable(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">        .select()</span><br><span class=\"line\">        .apis(RequestHandlerSelectors.basePackage(<span class=\"string\">&quot;com.sunday.personal.tuesday.controller&quot;</span>))</span><br><span class=\"line\">        .build(); <span class=\"comment\">//build</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实体类配置\"><a href=\"#实体类配置\" class=\"headerlink\" title=\"实体类配置\"></a>实体类配置</h4><p>@Api…注释</p>\n"},{"title":"tensorflow01","date":"2019-12-07T03:36:19.000Z","_content":"\n一些python基础语法。。。\n<!-- more -->\n\n# pyton\n1. 循环语句\n```markdown\nfor variable in range(startValue, endValue):\n    do somthing\n\n---\nfor variable in listName:\n    do something\n---\nwhile condition:\n    do something\n---\nstop the circle\nbreak\n```\n\n2. 函数、模块、包\n函数：执行某些操作的一段代码\n定义函数：\n```markdown\ndef functionName (parameter list):\n    function body\n```\n使用函数：\n```markdown\nfunctionName (parameter list)\n```\ne.g.:\n```python\ninput(\"please input your class number:\")\n```\n\n模块：函数的集合，先导入，再使用，用`模块.函数名`调用。\n包：包 含有多个模块。\n```python\nfrom PIL import Image\n```\nfrom 包 import 模块\n\n\n3. 类、对象、面向对象\n类：是函数的集合，可实例化出对象的模具\n实例化：对象=类（）\n对象：是实例化出的实体，对象实实在在存在，完成具体工作\n面向对象：优化修改类，类实例化出对象，对象调用类里的函数执行具体的操作\n----\n类的定义：\n```markdown\nclass className (fatherClassName):\n    pass\n```\n- 先用pass占位，起架构；再用具体的函数替换pass完善类。\n- 类里定义函数时，语法规定第一个参数必须是self。\n- \\__init\\__函数，在新对象实例化时会自动运行，用于给新对象赋初值。\n\ne.g.\n```python\nclass Animals():\n    def breathe(self):\n        print \"breathing\"\n    def move(self):\n        print \"moving\"\n    def eat(self):\n        print \"eating food\"\n\nclass Mammals(Animals):\n    def breastfeed(self):\n        print \"feeding young\"\n\nclass Cats(Mammals):\n    def __init__(self, spots):\n        self.spots = spots\n    def catch_mouse(self):\n        print \"catch mosue\"\n    def lef_foot_forward(self):\n        print \"left foot forward\"\n    def left_foot_backward(self):\n        print \"left foot backward\"\n    def dance(self):\n        self.left_foot_backward()\n        self.left_foot_backward()\n        self.left_foot_backward()\n\nkitty=Cats(10)\nprint kitty.spots\nkitty.dance()\nkitty.breastfeed()\nkitty.move()\n```\n\n4. 文件操作\n- 文件写操作 import pickle\n```markdown\n开：文件变量=open（“文件路径文件名”，“wb”）\n存：pickle.dump（待写入的变量，文件变量）\n关：文件变量.close()\n```\n- 文件读操作 import pickle\n```markdown\n开：文件变量=open（“文件路径文件名”，“rb”）\n取：放内容的变量=pickle.load（文件变量）\n关：文件变量.close()\n```\n\n","source":"_posts/tensorflow01.md","raw":"---\ntitle: tensorflow01\ndate: 2019-12-07 11:36:19\ncategories: Tensorflow\ntags:\n- tensorflow\n- python\n---\n\n一些python基础语法。。。\n<!-- more -->\n\n# pyton\n1. 循环语句\n```markdown\nfor variable in range(startValue, endValue):\n    do somthing\n\n---\nfor variable in listName:\n    do something\n---\nwhile condition:\n    do something\n---\nstop the circle\nbreak\n```\n\n2. 函数、模块、包\n函数：执行某些操作的一段代码\n定义函数：\n```markdown\ndef functionName (parameter list):\n    function body\n```\n使用函数：\n```markdown\nfunctionName (parameter list)\n```\ne.g.:\n```python\ninput(\"please input your class number:\")\n```\n\n模块：函数的集合，先导入，再使用，用`模块.函数名`调用。\n包：包 含有多个模块。\n```python\nfrom PIL import Image\n```\nfrom 包 import 模块\n\n\n3. 类、对象、面向对象\n类：是函数的集合，可实例化出对象的模具\n实例化：对象=类（）\n对象：是实例化出的实体，对象实实在在存在，完成具体工作\n面向对象：优化修改类，类实例化出对象，对象调用类里的函数执行具体的操作\n----\n类的定义：\n```markdown\nclass className (fatherClassName):\n    pass\n```\n- 先用pass占位，起架构；再用具体的函数替换pass完善类。\n- 类里定义函数时，语法规定第一个参数必须是self。\n- \\__init\\__函数，在新对象实例化时会自动运行，用于给新对象赋初值。\n\ne.g.\n```python\nclass Animals():\n    def breathe(self):\n        print \"breathing\"\n    def move(self):\n        print \"moving\"\n    def eat(self):\n        print \"eating food\"\n\nclass Mammals(Animals):\n    def breastfeed(self):\n        print \"feeding young\"\n\nclass Cats(Mammals):\n    def __init__(self, spots):\n        self.spots = spots\n    def catch_mouse(self):\n        print \"catch mosue\"\n    def lef_foot_forward(self):\n        print \"left foot forward\"\n    def left_foot_backward(self):\n        print \"left foot backward\"\n    def dance(self):\n        self.left_foot_backward()\n        self.left_foot_backward()\n        self.left_foot_backward()\n\nkitty=Cats(10)\nprint kitty.spots\nkitty.dance()\nkitty.breastfeed()\nkitty.move()\n```\n\n4. 文件操作\n- 文件写操作 import pickle\n```markdown\n开：文件变量=open（“文件路径文件名”，“wb”）\n存：pickle.dump（待写入的变量，文件变量）\n关：文件变量.close()\n```\n- 文件读操作 import pickle\n```markdown\n开：文件变量=open（“文件路径文件名”，“rb”）\n取：放内容的变量=pickle.load（文件变量）\n关：文件变量.close()\n```\n\n","slug":"tensorflow01","published":1,"updated":"2020-07-19T17:29:13.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgdj003cbyih95mv08oy","content":"<p>一些python基础语法。。。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"pyton\"><a href=\"#pyton\" class=\"headerlink\" title=\"pyton\"></a>pyton</h1><ol>\n<li><p>循环语句</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for variable in range(startValue, endValue):</span><br><span class=\"line\"><span class=\"code\">    do somthing</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"code\">---</span></span><br><span class=\"line\"><span class=\"code\">for variable in listName:</span></span><br><span class=\"line\"><span class=\"code\">    do something</span></span><br><span class=\"line\"><span class=\"code\">---</span></span><br><span class=\"line\"><span class=\"code\">while condition:</span></span><br><span class=\"line\"><span class=\"code\">    do something</span></span><br><span class=\"line\"><span class=\"code\">---</span></span><br><span class=\"line\"><span class=\"code\">stop the circle</span></span><br><span class=\"line\"><span class=\"code\">break</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数、模块、包<br>函数：执行某些操作的一段代码<br>定义函数：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def functionName (parameter list):</span><br><span class=\"line\"><span class=\"code\">    function body</span></span><br></pre></td></tr></table></figure>\n<p>使用函数：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">functionName (parameter list)</span><br></pre></td></tr></table></figure>\n<p>e.g.:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input(<span class=\"string\">&quot;please input your class number:&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>模块：函数的集合，先导入，再使用，用<code>模块.函数名</code>调用。<br>包：包 含有多个模块。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br></pre></td></tr></table></figure>\n<p>from 包 import 模块</p>\n<ol start=\"3\">\n<li>类、对象、面向对象<br>类：是函数的集合，可实例化出对象的模具<br>实例化：对象=类（）<br>对象：是实例化出的实体，对象实实在在存在，完成具体工作<br>面向对象：优化修改类，类实例化出对象，对象调用类里的函数执行具体的操作</li>\n</ol>\n<hr>\n<p>类的定义：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class className (fatherClassName):</span><br><span class=\"line\"><span class=\"code\">    pass</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>先用pass占位，起架构；再用具体的函数替换pass完善类。</li>\n<li>类里定义函数时，语法规定第一个参数必须是self。</li>\n<li>__init__函数，在新对象实例化时会自动运行，用于给新对象赋初值。</li>\n</ul>\n<p>e.g.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animals</span>():</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">breathe</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">&quot;breathing&quot;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">move</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">&quot;moving&quot;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">eat</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">&quot;eating food&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mammals</span>(<span class=\"params\">Animals</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">breastfeed</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">&quot;feeding young&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cats</span>(<span class=\"params\">Mammals</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, spots</span>):</span></span><br><span class=\"line\">        self.spots = spots</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">catch_mouse</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">&quot;catch mosue&quot;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lef_foot_forward</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">&quot;left foot forward&quot;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">left_foot_backward</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">&quot;left foot backward&quot;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dance</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.left_foot_backward()</span><br><span class=\"line\">        self.left_foot_backward()</span><br><span class=\"line\">        self.left_foot_backward()</span><br><span class=\"line\"></span><br><span class=\"line\">kitty=Cats(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> kitty.spots</span><br><span class=\"line\">kitty.dance()</span><br><span class=\"line\">kitty.breastfeed()</span><br><span class=\"line\">kitty.move()</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>文件操作</li>\n</ol>\n<ul>\n<li>文件写操作 import pickle<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开：文件变量=open（“文件路径文件名”，“wb”）</span><br><span class=\"line\">存：pickle.dump（待写入的变量，文件变量）</span><br><span class=\"line\">关：文件变量.close()</span><br></pre></td></tr></table></figure></li>\n<li>文件读操作 import pickle<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开：文件变量=open（“文件路径文件名”，“rb”）</span><br><span class=\"line\">取：放内容的变量=pickle.load（文件变量）</span><br><span class=\"line\">关：文件变量.close()</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>一些python基础语法。。。</p>","more":"<h1 id=\"pyton\"><a href=\"#pyton\" class=\"headerlink\" title=\"pyton\"></a>pyton</h1><ol>\n<li><p>循环语句</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for variable in range(startValue, endValue):</span><br><span class=\"line\"><span class=\"code\">    do somthing</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"code\">---</span></span><br><span class=\"line\"><span class=\"code\">for variable in listName:</span></span><br><span class=\"line\"><span class=\"code\">    do something</span></span><br><span class=\"line\"><span class=\"code\">---</span></span><br><span class=\"line\"><span class=\"code\">while condition:</span></span><br><span class=\"line\"><span class=\"code\">    do something</span></span><br><span class=\"line\"><span class=\"code\">---</span></span><br><span class=\"line\"><span class=\"code\">stop the circle</span></span><br><span class=\"line\"><span class=\"code\">break</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数、模块、包<br>函数：执行某些操作的一段代码<br>定义函数：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def functionName (parameter list):</span><br><span class=\"line\"><span class=\"code\">    function body</span></span><br></pre></td></tr></table></figure>\n<p>使用函数：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">functionName (parameter list)</span><br></pre></td></tr></table></figure>\n<p>e.g.:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input(<span class=\"string\">&quot;please input your class number:&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>模块：函数的集合，先导入，再使用，用<code>模块.函数名</code>调用。<br>包：包 含有多个模块。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br></pre></td></tr></table></figure>\n<p>from 包 import 模块</p>\n<ol start=\"3\">\n<li>类、对象、面向对象<br>类：是函数的集合，可实例化出对象的模具<br>实例化：对象=类（）<br>对象：是实例化出的实体，对象实实在在存在，完成具体工作<br>面向对象：优化修改类，类实例化出对象，对象调用类里的函数执行具体的操作</li>\n</ol>\n<hr>\n<p>类的定义：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class className (fatherClassName):</span><br><span class=\"line\"><span class=\"code\">    pass</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>先用pass占位，起架构；再用具体的函数替换pass完善类。</li>\n<li>类里定义函数时，语法规定第一个参数必须是self。</li>\n<li>__init__函数，在新对象实例化时会自动运行，用于给新对象赋初值。</li>\n</ul>\n<p>e.g.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animals</span>():</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">breathe</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">&quot;breathing&quot;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">move</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">&quot;moving&quot;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">eat</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">&quot;eating food&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mammals</span>(<span class=\"params\">Animals</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">breastfeed</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">&quot;feeding young&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cats</span>(<span class=\"params\">Mammals</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, spots</span>):</span></span><br><span class=\"line\">        self.spots = spots</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">catch_mouse</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">&quot;catch mosue&quot;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lef_foot_forward</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">&quot;left foot forward&quot;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">left_foot_backward</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">&quot;left foot backward&quot;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dance</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.left_foot_backward()</span><br><span class=\"line\">        self.left_foot_backward()</span><br><span class=\"line\">        self.left_foot_backward()</span><br><span class=\"line\"></span><br><span class=\"line\">kitty=Cats(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> kitty.spots</span><br><span class=\"line\">kitty.dance()</span><br><span class=\"line\">kitty.breastfeed()</span><br><span class=\"line\">kitty.move()</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>文件操作</li>\n</ol>\n<ul>\n<li>文件写操作 import pickle<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开：文件变量=open（“文件路径文件名”，“wb”）</span><br><span class=\"line\">存：pickle.dump（待写入的变量，文件变量）</span><br><span class=\"line\">关：文件变量.close()</span><br></pre></td></tr></table></figure></li>\n<li>文件读操作 import pickle<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开：文件变量=open（“文件路径文件名”，“rb”）</span><br><span class=\"line\">取：放内容的变量=pickle.load（文件变量）</span><br><span class=\"line\">关：文件变量.close()</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>"},{"title":"tensorflow02","date":"2019-12-08T05:05:17.000Z","mathjax":true,"_content":"\n试着搭建一个神经网络，总结搭建八股\n\n<!-- more -->\n\n# 序\n\n基于tensorflow的NN：用`张量`表示数据，用`计算图`搭建神经网络，用`会话`执行计算图，优化线上的`权重`（参数），得到模型。\n\n- 张量（tensor）：多维数组（列表）\n\n- 阶：张量的维数\n\n  | 维数 | 阶   | 名字        | 列子                                   |\n  | ---- | ---- | ----------- | -------------------------------------- |\n  | 0-D  | 0    | 标量 scalar | s=1 2 3                                |\n  | 1-D  | 1    | 向量 vector | v=[1,2,3] 数组                         |\n  | 2-D  | 2    | 矩阵 matrix | m=[[1,2,3],[4,5,6],[7,8,9]] 二维数组   |\n  | n-D  | n    | 张量 tensor | t=[[[...]]] n个 方括号有n个就是n阶张量 |\n\n  张量可以表示0阶到n阶数组\n\n- 数据类型：tf.float32 t.int32 ...\n\ne.g.\n\n```python\nimport tensorflow as tf\n\na = tf.constant([1.0,2.0])\nb = tf.constant([3.0,4.0])\n\nresult = a + b\nprint result\n```\n\n```python\nTensor(\"add:0\", shape=(2,),dtype=float32)\n节点名：第0个输出 维度=一维数组长度2  数据类型 \n```\n\n\n\n## 计算图\n\n搭建神经网络的计算过程，**只搭建，不运算**。如序中所示。\n\n```python\nimport tensorflow as tf\n\nx=tf.constant([[1.0,2.0]])\nw=tf.constant([[3.0],[4.0]])\n\ny=tf.matmul(x,w)\nprint y\n\n输出：Tensor(\"matmul:0\",shape(1,1),dtype=float32)\n```\n\n如果，不清楚python矩阵，试试这个numpy模块的输出：\n\n```python\n>>> import numpy as np\n\n>>> a = np.arange(15).reshape(3,5)\n>>> a\n>>> a.shape\n```\n\n\n\n\n\n## 会话\n\n执行计算图中的节点运算\n\n>with.tf.Session() as sess: print sess.run(y)\n\n```python\nimport tensorflow as tf\n\nx=tf.constant([[1.0,2.0]])\nw=tf.constant([[3.0],[4.0]])\n\ny=tf.matmul(x,w)\nprint y\n\nwith tf.Session() as sess:\nprint sess.run(y)\n\n\nTensor(\"matmul:0\",shape(1,1),dtype=float32)\n[[11.]]\n```\n\n\n\n## 参数\n\n即`权重W`，用变量表示，随机给初值。\n\n> w = tf.Variable(tf.random_normal([2,3], stddev=2, mean=0, seed=1))\n>\n> ​\t\t\t\t\t\t\t\t正态分布\t产生2x3矩阵\t标准差为2 均值为0  随机种子\n\n>tf.truncated_normal()        tf.random_uniform()\n>\n>去掉过大偏离点的正态分布      平均分布\n\ntf.zeros 全0数组  tf.zeros([3,2],int32) 生产[[0,0],[0,0],[0,0]]\n\ntf.ones 全1数组  tf.ones([3,2],int32) 生成[[1,1],[1,1],[1,1]]\n\ntf.fill 全定值数组  tf.fill([3,2],6) 生成[[6,6],[6,6],[6,6]]\n\ntf.constant 直接给值  tf.constant([3,2,1]) 生成[3,2,1]\n\n\n\n## 实现过程\n\n1. 准备数据集，提取特征，作为输入喂给神经网络（Neural Network, NN)\n2. 搭建NN结构，从输入到输出（先搭建计算图，再用会话执行）`NN向前传播算法：计算输出`\n3. 大量特征数据喂给NN，迭代优化NN参数 `NN反向传播算法：优化参数训练模型`\n4. 使用训练好的模型预测和分类\n\n1～3为循环的训练过程，4为使用过程\n\ne.g.; 生产一批零件，将体积x1和重量x2为特征输入NN，通过NN后输出一个数值。\n\n发现用线性代数的思想去理解传播过程、权重这些东西会好理解一些\n\ne.g.1\n\n```python\n#coding:utf-8\n#两层简单神经网络（全连接）\nimport tensorflow as tf\n\n#定义输入和输出\nx = tf.constant([[0.7,0.5]])\nw1 = tf.Variable(tf.random_normal([2,3],stddev=1, seed=1))\nw2 = tf.Variable(tf.random_normal([3,1],stddev=1,seed=1))\n\n#定义前向传播过程\na = tf.matmul(x, w1)\ny = tf.matmul(a, w2)\n\n#用会话计算结果\nwidth tf.Session() as sess:\n    init_op = tf.global_variables_initializer()\n    sess.run(init_op)\n    print\"y in tf3_3.py is:\\n\", sess.run(y)\n    \n```\n\n\n\n```markdown\ny is:\n[[3.0904665]]\n```\n\ne.g.2\n\n```python\n#coding:utf-8\n#两层简单神经网络（全连接）\nimport tensorflow as tf\n\n#定义输入和输出\nx = tf.constant([[0.7,0.5]])\nw1 = tf.Variable(tf.random_normal([2, 3], stddev=1, seed=1))\nw2 = tf.Variable(tf.random_normal([3, 1], stddev=1, seed=1))\n \n#定义前向传播过程\na = tf.matmul(x, w1)\ny = tf.matmul(a, w2)\n\n#用会话计算结果\nwith tf.Session() as sess:\n    init_op = tf.global_variables_initializer()\n    sess.run(init_op)\n    print\"y in tf3_3.py is:\\n\", sess.run(y)\n\n```\n\ne.g.3\n\n```python\nimport tensorflow as tf\n\nx = tf.placeholder(tf.float32, shape=(None, 2))\nw1= tf.Variable(tf.random_normal([2,3], stddev=1, seed=1))\nw2= tf.Variable(tf.random_normal([3,1], stddev=1, seed=1))\n\na = tf.matmul(x, w1)\ny = tf.matmul(a, w2)\n\nwith tf.Session() as sess:\n    init_op = tf.global_variables_initializer()\n    sess.run(init_op)\n    print \"the result of tf3_5.py is:\\n\", sess.run(y, feed_dict={x: [[0.7,0.5],[0.2,0.3],[0.3, 0.4],[0.4,0.5]]})\n    print \"w1:\\n\", sess.run(w1)\n    print \"w2:\\n\", sess.run(w2)\n```\n\n\n\n# 反向传播\n\n训练模型参数，在所有参数上用梯度下降，使NN模型在训练数据上的损失函数最小。\n\n- 损失函数（loss）：`预测值（y）`与`已知答案（y_）`的差距\n\n- 均方误差MSE：\n  $$\n  MSE(y\\_,y)=\\frac{\\sum ^n _{i=1} (y-y\\_)^2}{n}\n  $$\n\n  $$\n  loss = tf.refuce\\_mean(tf.square(y\\_-y))\n  $$\n\n  \n\n- 反向传播训练方法：以减小loss值为优化目标\n\n- 学习率：决定参数每次更新的幅度。（recommand: 0.001)\n\ne.g.:\n\n```python\n#coding:utf-8\n\nimport tensorflow as tf\nimport  numpy as np #python的科学计算模块\nBATCH_SIZE = 8 #一次喂入神经网络多少组数据\nseed = 23455 \n\n#基于seed产生随机数\nrng = np.random.RandomState(seed)\n\n#随机数返回32行2列的矩阵 表示32组 体积和中路 作为输入数据集\nX = rng.rand(32,2)\n\n#从X的32行2列的矩阵中 取出一行 判断如果和小于1 给Y赋值1，否则0.\nY = [[int(x0+x1 < 1)] for (x0, x1) in X] #是否为真\n\nprint \"X:\\n\",X\nprint \"Y:\\n\",Y\n\n#定义神经网路的输入、参数和输出，，定义前向传播过程\nx = tf.placeholder(tf.float32, shape=(None, 2))\ny_= tf.placeholder(tf.float32, shape=(None, 1))\n\nw1= tf.Variable(tf.random_normal([2,3], stddev=1, seed=1))\nw2= tf.Variable(tf.random_normal([3,1], stddev=1, seed=1))\n\na=tf.matmul(x, w1) #矩阵乘法\ny=tf.matmul(a, w2)\n\n#定义损失函数及反向传播方法\nloss = tf.reduce_mean(tf.square(y-y_)) #均方误差\ntrain_step = tf.train.GradientDescentOptimizer(0.001).minimize(loss) #梯度下降\n#train_step = tf.train.MomentumOptimizer(0.001,0.9).minimize(loss)\n#train_step = tf.train.AdamOptimizer(0.001).minimize(loss)\n\n#生成会话，训练STEPS轮\nwith tf.Session() as sess:\n    init_op = tf.global_variables_initializer()\n    sess.run(init_op)\n\n    print \"w1:\\n\", sess.run(w1)\n    print \"w2:\\n\", sess.run(w2)\n    print \"\\n\"\n\n    #训练模型\n    STEPS = 3000 #训练3000轮\n    for i in range(STEPS):\n        start = (i*BATCH_SIZE) % 32\n        end = start + BATCH_SIZE\n        sess.run(train_step, feed_dict={x: X[start: end], y_:Y[start:end]})\n        if i%500 == 0: #每500轮后打印loss\n            total_loss = sess.run(loss, feed_dict={x: X, y_: Y})\n            print(\"After %d training step(s), loss on all data is %g\" % (i, total_loss))\n\n    #输出训练后的参数取值\n    print \"\\n\"\n    print \"w1:\\n\", sess.run(w1)\n    print \"w2:\\n\", sess.run(w2)\n```\n\n\n\n## 搭建神经网络的八股：\n\n准备、前传、反传、迭代\n\n- 准备 import\n- 前向传播：定义输入、参数和输出. e.g.: x, y_, w1, w2, a, y\n- 反向传播：定义损失函数、反向传播方法. e.g.: loss, tran_step\n- 生成会话，训练STEPS轮\n\n","source":"_posts/tensorflow02.md","raw":"---\ntitle: tensorflow02\ndate: 2019-12-08 13:05:17\ncategories: Tensorflow\ntags: tensorflow\nmathjax: true\n---\n\n试着搭建一个神经网络，总结搭建八股\n\n<!-- more -->\n\n# 序\n\n基于tensorflow的NN：用`张量`表示数据，用`计算图`搭建神经网络，用`会话`执行计算图，优化线上的`权重`（参数），得到模型。\n\n- 张量（tensor）：多维数组（列表）\n\n- 阶：张量的维数\n\n  | 维数 | 阶   | 名字        | 列子                                   |\n  | ---- | ---- | ----------- | -------------------------------------- |\n  | 0-D  | 0    | 标量 scalar | s=1 2 3                                |\n  | 1-D  | 1    | 向量 vector | v=[1,2,3] 数组                         |\n  | 2-D  | 2    | 矩阵 matrix | m=[[1,2,3],[4,5,6],[7,8,9]] 二维数组   |\n  | n-D  | n    | 张量 tensor | t=[[[...]]] n个 方括号有n个就是n阶张量 |\n\n  张量可以表示0阶到n阶数组\n\n- 数据类型：tf.float32 t.int32 ...\n\ne.g.\n\n```python\nimport tensorflow as tf\n\na = tf.constant([1.0,2.0])\nb = tf.constant([3.0,4.0])\n\nresult = a + b\nprint result\n```\n\n```python\nTensor(\"add:0\", shape=(2,),dtype=float32)\n节点名：第0个输出 维度=一维数组长度2  数据类型 \n```\n\n\n\n## 计算图\n\n搭建神经网络的计算过程，**只搭建，不运算**。如序中所示。\n\n```python\nimport tensorflow as tf\n\nx=tf.constant([[1.0,2.0]])\nw=tf.constant([[3.0],[4.0]])\n\ny=tf.matmul(x,w)\nprint y\n\n输出：Tensor(\"matmul:0\",shape(1,1),dtype=float32)\n```\n\n如果，不清楚python矩阵，试试这个numpy模块的输出：\n\n```python\n>>> import numpy as np\n\n>>> a = np.arange(15).reshape(3,5)\n>>> a\n>>> a.shape\n```\n\n\n\n\n\n## 会话\n\n执行计算图中的节点运算\n\n>with.tf.Session() as sess: print sess.run(y)\n\n```python\nimport tensorflow as tf\n\nx=tf.constant([[1.0,2.0]])\nw=tf.constant([[3.0],[4.0]])\n\ny=tf.matmul(x,w)\nprint y\n\nwith tf.Session() as sess:\nprint sess.run(y)\n\n\nTensor(\"matmul:0\",shape(1,1),dtype=float32)\n[[11.]]\n```\n\n\n\n## 参数\n\n即`权重W`，用变量表示，随机给初值。\n\n> w = tf.Variable(tf.random_normal([2,3], stddev=2, mean=0, seed=1))\n>\n> ​\t\t\t\t\t\t\t\t正态分布\t产生2x3矩阵\t标准差为2 均值为0  随机种子\n\n>tf.truncated_normal()        tf.random_uniform()\n>\n>去掉过大偏离点的正态分布      平均分布\n\ntf.zeros 全0数组  tf.zeros([3,2],int32) 生产[[0,0],[0,0],[0,0]]\n\ntf.ones 全1数组  tf.ones([3,2],int32) 生成[[1,1],[1,1],[1,1]]\n\ntf.fill 全定值数组  tf.fill([3,2],6) 生成[[6,6],[6,6],[6,6]]\n\ntf.constant 直接给值  tf.constant([3,2,1]) 生成[3,2,1]\n\n\n\n## 实现过程\n\n1. 准备数据集，提取特征，作为输入喂给神经网络（Neural Network, NN)\n2. 搭建NN结构，从输入到输出（先搭建计算图，再用会话执行）`NN向前传播算法：计算输出`\n3. 大量特征数据喂给NN，迭代优化NN参数 `NN反向传播算法：优化参数训练模型`\n4. 使用训练好的模型预测和分类\n\n1～3为循环的训练过程，4为使用过程\n\ne.g.; 生产一批零件，将体积x1和重量x2为特征输入NN，通过NN后输出一个数值。\n\n发现用线性代数的思想去理解传播过程、权重这些东西会好理解一些\n\ne.g.1\n\n```python\n#coding:utf-8\n#两层简单神经网络（全连接）\nimport tensorflow as tf\n\n#定义输入和输出\nx = tf.constant([[0.7,0.5]])\nw1 = tf.Variable(tf.random_normal([2,3],stddev=1, seed=1))\nw2 = tf.Variable(tf.random_normal([3,1],stddev=1,seed=1))\n\n#定义前向传播过程\na = tf.matmul(x, w1)\ny = tf.matmul(a, w2)\n\n#用会话计算结果\nwidth tf.Session() as sess:\n    init_op = tf.global_variables_initializer()\n    sess.run(init_op)\n    print\"y in tf3_3.py is:\\n\", sess.run(y)\n    \n```\n\n\n\n```markdown\ny is:\n[[3.0904665]]\n```\n\ne.g.2\n\n```python\n#coding:utf-8\n#两层简单神经网络（全连接）\nimport tensorflow as tf\n\n#定义输入和输出\nx = tf.constant([[0.7,0.5]])\nw1 = tf.Variable(tf.random_normal([2, 3], stddev=1, seed=1))\nw2 = tf.Variable(tf.random_normal([3, 1], stddev=1, seed=1))\n \n#定义前向传播过程\na = tf.matmul(x, w1)\ny = tf.matmul(a, w2)\n\n#用会话计算结果\nwith tf.Session() as sess:\n    init_op = tf.global_variables_initializer()\n    sess.run(init_op)\n    print\"y in tf3_3.py is:\\n\", sess.run(y)\n\n```\n\ne.g.3\n\n```python\nimport tensorflow as tf\n\nx = tf.placeholder(tf.float32, shape=(None, 2))\nw1= tf.Variable(tf.random_normal([2,3], stddev=1, seed=1))\nw2= tf.Variable(tf.random_normal([3,1], stddev=1, seed=1))\n\na = tf.matmul(x, w1)\ny = tf.matmul(a, w2)\n\nwith tf.Session() as sess:\n    init_op = tf.global_variables_initializer()\n    sess.run(init_op)\n    print \"the result of tf3_5.py is:\\n\", sess.run(y, feed_dict={x: [[0.7,0.5],[0.2,0.3],[0.3, 0.4],[0.4,0.5]]})\n    print \"w1:\\n\", sess.run(w1)\n    print \"w2:\\n\", sess.run(w2)\n```\n\n\n\n# 反向传播\n\n训练模型参数，在所有参数上用梯度下降，使NN模型在训练数据上的损失函数最小。\n\n- 损失函数（loss）：`预测值（y）`与`已知答案（y_）`的差距\n\n- 均方误差MSE：\n  $$\n  MSE(y\\_,y)=\\frac{\\sum ^n _{i=1} (y-y\\_)^2}{n}\n  $$\n\n  $$\n  loss = tf.refuce\\_mean(tf.square(y\\_-y))\n  $$\n\n  \n\n- 反向传播训练方法：以减小loss值为优化目标\n\n- 学习率：决定参数每次更新的幅度。（recommand: 0.001)\n\ne.g.:\n\n```python\n#coding:utf-8\n\nimport tensorflow as tf\nimport  numpy as np #python的科学计算模块\nBATCH_SIZE = 8 #一次喂入神经网络多少组数据\nseed = 23455 \n\n#基于seed产生随机数\nrng = np.random.RandomState(seed)\n\n#随机数返回32行2列的矩阵 表示32组 体积和中路 作为输入数据集\nX = rng.rand(32,2)\n\n#从X的32行2列的矩阵中 取出一行 判断如果和小于1 给Y赋值1，否则0.\nY = [[int(x0+x1 < 1)] for (x0, x1) in X] #是否为真\n\nprint \"X:\\n\",X\nprint \"Y:\\n\",Y\n\n#定义神经网路的输入、参数和输出，，定义前向传播过程\nx = tf.placeholder(tf.float32, shape=(None, 2))\ny_= tf.placeholder(tf.float32, shape=(None, 1))\n\nw1= tf.Variable(tf.random_normal([2,3], stddev=1, seed=1))\nw2= tf.Variable(tf.random_normal([3,1], stddev=1, seed=1))\n\na=tf.matmul(x, w1) #矩阵乘法\ny=tf.matmul(a, w2)\n\n#定义损失函数及反向传播方法\nloss = tf.reduce_mean(tf.square(y-y_)) #均方误差\ntrain_step = tf.train.GradientDescentOptimizer(0.001).minimize(loss) #梯度下降\n#train_step = tf.train.MomentumOptimizer(0.001,0.9).minimize(loss)\n#train_step = tf.train.AdamOptimizer(0.001).minimize(loss)\n\n#生成会话，训练STEPS轮\nwith tf.Session() as sess:\n    init_op = tf.global_variables_initializer()\n    sess.run(init_op)\n\n    print \"w1:\\n\", sess.run(w1)\n    print \"w2:\\n\", sess.run(w2)\n    print \"\\n\"\n\n    #训练模型\n    STEPS = 3000 #训练3000轮\n    for i in range(STEPS):\n        start = (i*BATCH_SIZE) % 32\n        end = start + BATCH_SIZE\n        sess.run(train_step, feed_dict={x: X[start: end], y_:Y[start:end]})\n        if i%500 == 0: #每500轮后打印loss\n            total_loss = sess.run(loss, feed_dict={x: X, y_: Y})\n            print(\"After %d training step(s), loss on all data is %g\" % (i, total_loss))\n\n    #输出训练后的参数取值\n    print \"\\n\"\n    print \"w1:\\n\", sess.run(w1)\n    print \"w2:\\n\", sess.run(w2)\n```\n\n\n\n## 搭建神经网络的八股：\n\n准备、前传、反传、迭代\n\n- 准备 import\n- 前向传播：定义输入、参数和输出. e.g.: x, y_, w1, w2, a, y\n- 反向传播：定义损失函数、反向传播方法. e.g.: loss, tran_step\n- 生成会话，训练STEPS轮\n\n","slug":"tensorflow02","published":1,"updated":"2020-08-15T11:21:55.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgdk003gbyihat7ob9nq","content":"<p>试着搭建一个神经网络，总结搭建八股</p>\n<a id=\"more\"></a>\n\n<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><p>基于tensorflow的NN：用<code>张量</code>表示数据，用<code>计算图</code>搭建神经网络，用<code>会话</code>执行计算图，优化线上的<code>权重</code>（参数），得到模型。</p>\n<ul>\n<li><p>张量（tensor）：多维数组（列表）</p>\n</li>\n<li><p>阶：张量的维数</p>\n<table>\n<thead>\n<tr>\n<th>维数</th>\n<th>阶</th>\n<th>名字</th>\n<th>列子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0-D</td>\n<td>0</td>\n<td>标量 scalar</td>\n<td>s=1 2 3</td>\n</tr>\n<tr>\n<td>1-D</td>\n<td>1</td>\n<td>向量 vector</td>\n<td>v=[1,2,3] 数组</td>\n</tr>\n<tr>\n<td>2-D</td>\n<td>2</td>\n<td>矩阵 matrix</td>\n<td>m=[[1,2,3],[4,5,6],[7,8,9]] 二维数组</td>\n</tr>\n<tr>\n<td>n-D</td>\n<td>n</td>\n<td>张量 tensor</td>\n<td>t=[[[…]]] n个 方括号有n个就是n阶张量</td>\n</tr>\n</tbody></table>\n<p>张量可以表示0阶到n阶数组</p>\n</li>\n<li><p>数据类型：tf.float32 t.int32 …</p>\n</li>\n</ul>\n<p>e.g.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\">a = tf.constant([<span class=\"number\">1.0</span>,<span class=\"number\">2.0</span>])</span><br><span class=\"line\">b = tf.constant([<span class=\"number\">3.0</span>,<span class=\"number\">4.0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">result = a + b</span><br><span class=\"line\"><span class=\"keyword\">print</span> result</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Tensor(<span class=\"string\">&quot;add:0&quot;</span>, shape=(<span class=\"number\">2</span>,),dtype=float32)</span><br><span class=\"line\">节点名：第<span class=\"number\">0</span>个输出 维度=一维数组长度<span class=\"number\">2</span>  数据类型 </span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"计算图\"><a href=\"#计算图\" class=\"headerlink\" title=\"计算图\"></a>计算图</h2><p>搭建神经网络的计算过程，<strong>只搭建，不运算</strong>。如序中所示。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\">x=tf.constant([[<span class=\"number\">1.0</span>,<span class=\"number\">2.0</span>]])</span><br><span class=\"line\">w=tf.constant([[<span class=\"number\">3.0</span>],[<span class=\"number\">4.0</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\">y=tf.matmul(x,w)</span><br><span class=\"line\"><span class=\"keyword\">print</span> y</span><br><span class=\"line\"></span><br><span class=\"line\">输出：Tensor(<span class=\"string\">&quot;matmul:0&quot;</span>,shape(<span class=\"number\">1</span>,<span class=\"number\">1</span>),dtype=float32)</span><br></pre></td></tr></table></figure>\n\n<p>如果，不清楚python矩阵，试试这个numpy模块的输出：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = np.arange(<span class=\"number\">15</span>).reshape(<span class=\"number\">3</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.shape</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"会话\"><a href=\"#会话\" class=\"headerlink\" title=\"会话\"></a>会话</h2><p>执行计算图中的节点运算</p>\n<blockquote>\n<p>with.tf.Session() as sess: print sess.run(y)</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\">x=tf.constant([[<span class=\"number\">1.0</span>,<span class=\"number\">2.0</span>]])</span><br><span class=\"line\">w=tf.constant([[<span class=\"number\">3.0</span>],[<span class=\"number\">4.0</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\">y=tf.matmul(x,w)</span><br><span class=\"line\"><span class=\"keyword\">print</span> y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\"><span class=\"keyword\">print</span> sess.run(y)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Tensor(<span class=\"string\">&quot;matmul:0&quot;</span>,shape(<span class=\"number\">1</span>,<span class=\"number\">1</span>),dtype=float32)</span><br><span class=\"line\">[[<span class=\"number\">11.</span>]]</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><p>即<code>权重W</code>，用变量表示，随机给初值。</p>\n<blockquote>\n<p>w = tf.Variable(tf.random_normal([2,3], stddev=2, mean=0, seed=1))</p>\n<p>​                                正态分布    产生2x3矩阵    标准差为2 均值为0  随机种子</p>\n</blockquote>\n<blockquote>\n<p>tf.truncated_normal()        tf.random_uniform()</p>\n<p>去掉过大偏离点的正态分布      平均分布</p>\n</blockquote>\n<p>tf.zeros 全0数组  tf.zeros([3,2],int32) 生产[[0,0],[0,0],[0,0]]</p>\n<p>tf.ones 全1数组  tf.ones([3,2],int32) 生成[[1,1],[1,1],[1,1]]</p>\n<p>tf.fill 全定值数组  tf.fill([3,2],6) 生成[[6,6],[6,6],[6,6]]</p>\n<p>tf.constant 直接给值  tf.constant([3,2,1]) 生成[3,2,1]</p>\n<h2 id=\"实现过程\"><a href=\"#实现过程\" class=\"headerlink\" title=\"实现过程\"></a>实现过程</h2><ol>\n<li>准备数据集，提取特征，作为输入喂给神经网络（Neural Network, NN)</li>\n<li>搭建NN结构，从输入到输出（先搭建计算图，再用会话执行）<code>NN向前传播算法：计算输出</code></li>\n<li>大量特征数据喂给NN，迭代优化NN参数 <code>NN反向传播算法：优化参数训练模型</code></li>\n<li>使用训练好的模型预测和分类</li>\n</ol>\n<p>1～3为循环的训练过程，4为使用过程</p>\n<p>e.g.; 生产一批零件，将体积x1和重量x2为特征输入NN，通过NN后输出一个数值。</p>\n<p>发现用线性代数的思想去理解传播过程、权重这些东西会好理解一些</p>\n<p>e.g.1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"comment\">#两层简单神经网络（全连接）</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#定义输入和输出</span></span><br><span class=\"line\">x = tf.constant([[<span class=\"number\">0.7</span>,<span class=\"number\">0.5</span>]])</span><br><span class=\"line\">w1 = tf.Variable(tf.random_normal([<span class=\"number\">2</span>,<span class=\"number\">3</span>],stddev=<span class=\"number\">1</span>, seed=<span class=\"number\">1</span>))</span><br><span class=\"line\">w2 = tf.Variable(tf.random_normal([<span class=\"number\">3</span>,<span class=\"number\">1</span>],stddev=<span class=\"number\">1</span>,seed=<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#定义前向传播过程</span></span><br><span class=\"line\">a = tf.matmul(x, w1)</span><br><span class=\"line\">y = tf.matmul(a, w2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#用会话计算结果</span></span><br><span class=\"line\">width tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    init_op = tf.global_variables_initializer()</span><br><span class=\"line\">    sess.run(init_op)</span><br><span class=\"line\">    <span class=\"keyword\">print</span><span class=\"string\">&quot;y in tf3_3.py is:\\n&quot;</span>, sess.run(y)</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y is:</span><br><span class=\"line\">[[3.0904665]]</span><br></pre></td></tr></table></figure>\n\n<p>e.g.2</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"comment\">#两层简单神经网络（全连接）</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#定义输入和输出</span></span><br><span class=\"line\">x = tf.constant([[<span class=\"number\">0.7</span>,<span class=\"number\">0.5</span>]])</span><br><span class=\"line\">w1 = tf.Variable(tf.random_normal([<span class=\"number\">2</span>, <span class=\"number\">3</span>], stddev=<span class=\"number\">1</span>, seed=<span class=\"number\">1</span>))</span><br><span class=\"line\">w2 = tf.Variable(tf.random_normal([<span class=\"number\">3</span>, <span class=\"number\">1</span>], stddev=<span class=\"number\">1</span>, seed=<span class=\"number\">1</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#定义前向传播过程</span></span><br><span class=\"line\">a = tf.matmul(x, w1)</span><br><span class=\"line\">y = tf.matmul(a, w2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#用会话计算结果</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    init_op = tf.global_variables_initializer()</span><br><span class=\"line\">    sess.run(init_op)</span><br><span class=\"line\">    <span class=\"keyword\">print</span><span class=\"string\">&quot;y in tf3_3.py is:\\n&quot;</span>, sess.run(y)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>e.g.3</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\">x = tf.placeholder(tf.float32, shape=(<span class=\"literal\">None</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">w1= tf.Variable(tf.random_normal([<span class=\"number\">2</span>,<span class=\"number\">3</span>], stddev=<span class=\"number\">1</span>, seed=<span class=\"number\">1</span>))</span><br><span class=\"line\">w2= tf.Variable(tf.random_normal([<span class=\"number\">3</span>,<span class=\"number\">1</span>], stddev=<span class=\"number\">1</span>, seed=<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">a = tf.matmul(x, w1)</span><br><span class=\"line\">y = tf.matmul(a, w2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    init_op = tf.global_variables_initializer()</span><br><span class=\"line\">    sess.run(init_op)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">&quot;the result of tf3_5.py is:\\n&quot;</span>, sess.run(y, feed_dict=&#123;x: [[<span class=\"number\">0.7</span>,<span class=\"number\">0.5</span>],[<span class=\"number\">0.2</span>,<span class=\"number\">0.3</span>],[<span class=\"number\">0.3</span>, <span class=\"number\">0.4</span>],[<span class=\"number\">0.4</span>,<span class=\"number\">0.5</span>]]&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">&quot;w1:\\n&quot;</span>, sess.run(w1)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">&quot;w2:\\n&quot;</span>, sess.run(w2)</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"反向传播\"><a href=\"#反向传播\" class=\"headerlink\" title=\"反向传播\"></a>反向传播</h1><p>训练模型参数，在所有参数上用梯度下降，使NN模型在训练数据上的损失函数最小。</p>\n<ul>\n<li><p>损失函数（loss）：<code>预测值（y）</code>与<code>已知答案（y_）</code>的差距</p>\n</li>\n<li><p>均方误差MSE：<br>$$<br>MSE(y_,y)=\\frac{\\sum ^n <em>{i=1} (y-y\\</em>)^2}{n}<br>$$</p>\n<p>$$<br>loss = tf.refuce_mean(tf.square(y_-y))<br>$$</p>\n</li>\n</ul>\n<ul>\n<li><p>反向传播训练方法：以减小loss值为优化目标</p>\n</li>\n<li><p>学习率：决定参数每次更新的幅度。（recommand: 0.001)</p>\n</li>\n</ul>\n<p>e.g.:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">import</span>  numpy <span class=\"keyword\">as</span> np <span class=\"comment\">#python的科学计算模块</span></span><br><span class=\"line\">BATCH_SIZE = <span class=\"number\">8</span> <span class=\"comment\">#一次喂入神经网络多少组数据</span></span><br><span class=\"line\">seed = <span class=\"number\">23455</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#基于seed产生随机数</span></span><br><span class=\"line\">rng = np.random.RandomState(seed)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#随机数返回32行2列的矩阵 表示32组 体积和中路 作为输入数据集</span></span><br><span class=\"line\">X = rng.rand(<span class=\"number\">32</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#从X的32行2列的矩阵中 取出一行 判断如果和小于1 给Y赋值1，否则0.</span></span><br><span class=\"line\">Y = [[int(x0+x1 &lt; <span class=\"number\">1</span>)] <span class=\"keyword\">for</span> (x0, x1) <span class=\"keyword\">in</span> X] <span class=\"comment\">#是否为真</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">&quot;X:\\n&quot;</span>,X</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">&quot;Y:\\n&quot;</span>,Y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#定义神经网路的输入、参数和输出，，定义前向传播过程</span></span><br><span class=\"line\">x = tf.placeholder(tf.float32, shape=(<span class=\"literal\">None</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">y_= tf.placeholder(tf.float32, shape=(<span class=\"literal\">None</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">w1= tf.Variable(tf.random_normal([<span class=\"number\">2</span>,<span class=\"number\">3</span>], stddev=<span class=\"number\">1</span>, seed=<span class=\"number\">1</span>))</span><br><span class=\"line\">w2= tf.Variable(tf.random_normal([<span class=\"number\">3</span>,<span class=\"number\">1</span>], stddev=<span class=\"number\">1</span>, seed=<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">a=tf.matmul(x, w1) <span class=\"comment\">#矩阵乘法</span></span><br><span class=\"line\">y=tf.matmul(a, w2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#定义损失函数及反向传播方法</span></span><br><span class=\"line\">loss = tf.reduce_mean(tf.square(y-y_)) <span class=\"comment\">#均方误差</span></span><br><span class=\"line\">train_step = tf.train.GradientDescentOptimizer(<span class=\"number\">0.001</span>).minimize(loss) <span class=\"comment\">#梯度下降</span></span><br><span class=\"line\"><span class=\"comment\">#train_step = tf.train.MomentumOptimizer(0.001,0.9).minimize(loss)</span></span><br><span class=\"line\"><span class=\"comment\">#train_step = tf.train.AdamOptimizer(0.001).minimize(loss)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#生成会话，训练STEPS轮</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    init_op = tf.global_variables_initializer()</span><br><span class=\"line\">    sess.run(init_op)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">&quot;w1:\\n&quot;</span>, sess.run(w1)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">&quot;w2:\\n&quot;</span>, sess.run(w2)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">&quot;\\n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#训练模型</span></span><br><span class=\"line\">    STEPS = <span class=\"number\">3000</span> <span class=\"comment\">#训练3000轮</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(STEPS):</span><br><span class=\"line\">        start = (i*BATCH_SIZE) % <span class=\"number\">32</span></span><br><span class=\"line\">        end = start + BATCH_SIZE</span><br><span class=\"line\">        sess.run(train_step, feed_dict=&#123;x: X[start: end], y_:Y[start:end]&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i%<span class=\"number\">500</span> == <span class=\"number\">0</span>: <span class=\"comment\">#每500轮后打印loss</span></span><br><span class=\"line\">            total_loss = sess.run(loss, feed_dict=&#123;x: X, y_: Y&#125;)</span><br><span class=\"line\">            print(<span class=\"string\">&quot;After %d training step(s), loss on all data is %g&quot;</span> % (i, total_loss))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#输出训练后的参数取值</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">&quot;\\n&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">&quot;w1:\\n&quot;</span>, sess.run(w1)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">&quot;w2:\\n&quot;</span>, sess.run(w2)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"搭建神经网络的八股：\"><a href=\"#搭建神经网络的八股：\" class=\"headerlink\" title=\"搭建神经网络的八股：\"></a>搭建神经网络的八股：</h2><p>准备、前传、反传、迭代</p>\n<ul>\n<li>准备 import</li>\n<li>前向传播：定义输入、参数和输出. e.g.: x, y_, w1, w2, a, y</li>\n<li>反向传播：定义损失函数、反向传播方法. e.g.: loss, tran_step</li>\n<li>生成会话，训练STEPS轮</li>\n</ul>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>试着搭建一个神经网络，总结搭建八股</p>","more":"<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><p>基于tensorflow的NN：用<code>张量</code>表示数据，用<code>计算图</code>搭建神经网络，用<code>会话</code>执行计算图，优化线上的<code>权重</code>（参数），得到模型。</p>\n<ul>\n<li><p>张量（tensor）：多维数组（列表）</p>\n</li>\n<li><p>阶：张量的维数</p>\n<table>\n<thead>\n<tr>\n<th>维数</th>\n<th>阶</th>\n<th>名字</th>\n<th>列子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0-D</td>\n<td>0</td>\n<td>标量 scalar</td>\n<td>s=1 2 3</td>\n</tr>\n<tr>\n<td>1-D</td>\n<td>1</td>\n<td>向量 vector</td>\n<td>v=[1,2,3] 数组</td>\n</tr>\n<tr>\n<td>2-D</td>\n<td>2</td>\n<td>矩阵 matrix</td>\n<td>m=[[1,2,3],[4,5,6],[7,8,9]] 二维数组</td>\n</tr>\n<tr>\n<td>n-D</td>\n<td>n</td>\n<td>张量 tensor</td>\n<td>t=[[[…]]] n个 方括号有n个就是n阶张量</td>\n</tr>\n</tbody></table>\n<p>张量可以表示0阶到n阶数组</p>\n</li>\n<li><p>数据类型：tf.float32 t.int32 …</p>\n</li>\n</ul>\n<p>e.g.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\">a = tf.constant([<span class=\"number\">1.0</span>,<span class=\"number\">2.0</span>])</span><br><span class=\"line\">b = tf.constant([<span class=\"number\">3.0</span>,<span class=\"number\">4.0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">result = a + b</span><br><span class=\"line\"><span class=\"keyword\">print</span> result</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Tensor(<span class=\"string\">&quot;add:0&quot;</span>, shape=(<span class=\"number\">2</span>,),dtype=float32)</span><br><span class=\"line\">节点名：第<span class=\"number\">0</span>个输出 维度=一维数组长度<span class=\"number\">2</span>  数据类型 </span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"计算图\"><a href=\"#计算图\" class=\"headerlink\" title=\"计算图\"></a>计算图</h2><p>搭建神经网络的计算过程，<strong>只搭建，不运算</strong>。如序中所示。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\">x=tf.constant([[<span class=\"number\">1.0</span>,<span class=\"number\">2.0</span>]])</span><br><span class=\"line\">w=tf.constant([[<span class=\"number\">3.0</span>],[<span class=\"number\">4.0</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\">y=tf.matmul(x,w)</span><br><span class=\"line\"><span class=\"keyword\">print</span> y</span><br><span class=\"line\"></span><br><span class=\"line\">输出：Tensor(<span class=\"string\">&quot;matmul:0&quot;</span>,shape(<span class=\"number\">1</span>,<span class=\"number\">1</span>),dtype=float32)</span><br></pre></td></tr></table></figure>\n\n<p>如果，不清楚python矩阵，试试这个numpy模块的输出：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = np.arange(<span class=\"number\">15</span>).reshape(<span class=\"number\">3</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.shape</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"会话\"><a href=\"#会话\" class=\"headerlink\" title=\"会话\"></a>会话</h2><p>执行计算图中的节点运算</p>\n<blockquote>\n<p>with.tf.Session() as sess: print sess.run(y)</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\">x=tf.constant([[<span class=\"number\">1.0</span>,<span class=\"number\">2.0</span>]])</span><br><span class=\"line\">w=tf.constant([[<span class=\"number\">3.0</span>],[<span class=\"number\">4.0</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\">y=tf.matmul(x,w)</span><br><span class=\"line\"><span class=\"keyword\">print</span> y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\"><span class=\"keyword\">print</span> sess.run(y)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Tensor(<span class=\"string\">&quot;matmul:0&quot;</span>,shape(<span class=\"number\">1</span>,<span class=\"number\">1</span>),dtype=float32)</span><br><span class=\"line\">[[<span class=\"number\">11.</span>]]</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><p>即<code>权重W</code>，用变量表示，随机给初值。</p>\n<blockquote>\n<p>w = tf.Variable(tf.random_normal([2,3], stddev=2, mean=0, seed=1))</p>\n<p>​                                正态分布    产生2x3矩阵    标准差为2 均值为0  随机种子</p>\n</blockquote>\n<blockquote>\n<p>tf.truncated_normal()        tf.random_uniform()</p>\n<p>去掉过大偏离点的正态分布      平均分布</p>\n</blockquote>\n<p>tf.zeros 全0数组  tf.zeros([3,2],int32) 生产[[0,0],[0,0],[0,0]]</p>\n<p>tf.ones 全1数组  tf.ones([3,2],int32) 生成[[1,1],[1,1],[1,1]]</p>\n<p>tf.fill 全定值数组  tf.fill([3,2],6) 生成[[6,6],[6,6],[6,6]]</p>\n<p>tf.constant 直接给值  tf.constant([3,2,1]) 生成[3,2,1]</p>\n<h2 id=\"实现过程\"><a href=\"#实现过程\" class=\"headerlink\" title=\"实现过程\"></a>实现过程</h2><ol>\n<li>准备数据集，提取特征，作为输入喂给神经网络（Neural Network, NN)</li>\n<li>搭建NN结构，从输入到输出（先搭建计算图，再用会话执行）<code>NN向前传播算法：计算输出</code></li>\n<li>大量特征数据喂给NN，迭代优化NN参数 <code>NN反向传播算法：优化参数训练模型</code></li>\n<li>使用训练好的模型预测和分类</li>\n</ol>\n<p>1～3为循环的训练过程，4为使用过程</p>\n<p>e.g.; 生产一批零件，将体积x1和重量x2为特征输入NN，通过NN后输出一个数值。</p>\n<p>发现用线性代数的思想去理解传播过程、权重这些东西会好理解一些</p>\n<p>e.g.1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"comment\">#两层简单神经网络（全连接）</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#定义输入和输出</span></span><br><span class=\"line\">x = tf.constant([[<span class=\"number\">0.7</span>,<span class=\"number\">0.5</span>]])</span><br><span class=\"line\">w1 = tf.Variable(tf.random_normal([<span class=\"number\">2</span>,<span class=\"number\">3</span>],stddev=<span class=\"number\">1</span>, seed=<span class=\"number\">1</span>))</span><br><span class=\"line\">w2 = tf.Variable(tf.random_normal([<span class=\"number\">3</span>,<span class=\"number\">1</span>],stddev=<span class=\"number\">1</span>,seed=<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#定义前向传播过程</span></span><br><span class=\"line\">a = tf.matmul(x, w1)</span><br><span class=\"line\">y = tf.matmul(a, w2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#用会话计算结果</span></span><br><span class=\"line\">width tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    init_op = tf.global_variables_initializer()</span><br><span class=\"line\">    sess.run(init_op)</span><br><span class=\"line\">    <span class=\"keyword\">print</span><span class=\"string\">&quot;y in tf3_3.py is:\\n&quot;</span>, sess.run(y)</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y is:</span><br><span class=\"line\">[[3.0904665]]</span><br></pre></td></tr></table></figure>\n\n<p>e.g.2</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"comment\">#两层简单神经网络（全连接）</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#定义输入和输出</span></span><br><span class=\"line\">x = tf.constant([[<span class=\"number\">0.7</span>,<span class=\"number\">0.5</span>]])</span><br><span class=\"line\">w1 = tf.Variable(tf.random_normal([<span class=\"number\">2</span>, <span class=\"number\">3</span>], stddev=<span class=\"number\">1</span>, seed=<span class=\"number\">1</span>))</span><br><span class=\"line\">w2 = tf.Variable(tf.random_normal([<span class=\"number\">3</span>, <span class=\"number\">1</span>], stddev=<span class=\"number\">1</span>, seed=<span class=\"number\">1</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#定义前向传播过程</span></span><br><span class=\"line\">a = tf.matmul(x, w1)</span><br><span class=\"line\">y = tf.matmul(a, w2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#用会话计算结果</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    init_op = tf.global_variables_initializer()</span><br><span class=\"line\">    sess.run(init_op)</span><br><span class=\"line\">    <span class=\"keyword\">print</span><span class=\"string\">&quot;y in tf3_3.py is:\\n&quot;</span>, sess.run(y)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>e.g.3</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\">x = tf.placeholder(tf.float32, shape=(<span class=\"literal\">None</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">w1= tf.Variable(tf.random_normal([<span class=\"number\">2</span>,<span class=\"number\">3</span>], stddev=<span class=\"number\">1</span>, seed=<span class=\"number\">1</span>))</span><br><span class=\"line\">w2= tf.Variable(tf.random_normal([<span class=\"number\">3</span>,<span class=\"number\">1</span>], stddev=<span class=\"number\">1</span>, seed=<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">a = tf.matmul(x, w1)</span><br><span class=\"line\">y = tf.matmul(a, w2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    init_op = tf.global_variables_initializer()</span><br><span class=\"line\">    sess.run(init_op)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">&quot;the result of tf3_5.py is:\\n&quot;</span>, sess.run(y, feed_dict=&#123;x: [[<span class=\"number\">0.7</span>,<span class=\"number\">0.5</span>],[<span class=\"number\">0.2</span>,<span class=\"number\">0.3</span>],[<span class=\"number\">0.3</span>, <span class=\"number\">0.4</span>],[<span class=\"number\">0.4</span>,<span class=\"number\">0.5</span>]]&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">&quot;w1:\\n&quot;</span>, sess.run(w1)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">&quot;w2:\\n&quot;</span>, sess.run(w2)</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"反向传播\"><a href=\"#反向传播\" class=\"headerlink\" title=\"反向传播\"></a>反向传播</h1><p>训练模型参数，在所有参数上用梯度下降，使NN模型在训练数据上的损失函数最小。</p>\n<ul>\n<li><p>损失函数（loss）：<code>预测值（y）</code>与<code>已知答案（y_）</code>的差距</p>\n</li>\n<li><p>均方误差MSE：<br>$$<br>MSE(y_,y)=\\frac{\\sum ^n <em>{i=1} (y-y\\</em>)^2}{n}<br>$$</p>\n<p>$$<br>loss = tf.refuce_mean(tf.square(y_-y))<br>$$</p>\n</li>\n</ul>\n<ul>\n<li><p>反向传播训练方法：以减小loss值为优化目标</p>\n</li>\n<li><p>学习率：决定参数每次更新的幅度。（recommand: 0.001)</p>\n</li>\n</ul>\n<p>e.g.:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">import</span>  numpy <span class=\"keyword\">as</span> np <span class=\"comment\">#python的科学计算模块</span></span><br><span class=\"line\">BATCH_SIZE = <span class=\"number\">8</span> <span class=\"comment\">#一次喂入神经网络多少组数据</span></span><br><span class=\"line\">seed = <span class=\"number\">23455</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#基于seed产生随机数</span></span><br><span class=\"line\">rng = np.random.RandomState(seed)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#随机数返回32行2列的矩阵 表示32组 体积和中路 作为输入数据集</span></span><br><span class=\"line\">X = rng.rand(<span class=\"number\">32</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#从X的32行2列的矩阵中 取出一行 判断如果和小于1 给Y赋值1，否则0.</span></span><br><span class=\"line\">Y = [[int(x0+x1 &lt; <span class=\"number\">1</span>)] <span class=\"keyword\">for</span> (x0, x1) <span class=\"keyword\">in</span> X] <span class=\"comment\">#是否为真</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">&quot;X:\\n&quot;</span>,X</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">&quot;Y:\\n&quot;</span>,Y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#定义神经网路的输入、参数和输出，，定义前向传播过程</span></span><br><span class=\"line\">x = tf.placeholder(tf.float32, shape=(<span class=\"literal\">None</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">y_= tf.placeholder(tf.float32, shape=(<span class=\"literal\">None</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">w1= tf.Variable(tf.random_normal([<span class=\"number\">2</span>,<span class=\"number\">3</span>], stddev=<span class=\"number\">1</span>, seed=<span class=\"number\">1</span>))</span><br><span class=\"line\">w2= tf.Variable(tf.random_normal([<span class=\"number\">3</span>,<span class=\"number\">1</span>], stddev=<span class=\"number\">1</span>, seed=<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">a=tf.matmul(x, w1) <span class=\"comment\">#矩阵乘法</span></span><br><span class=\"line\">y=tf.matmul(a, w2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#定义损失函数及反向传播方法</span></span><br><span class=\"line\">loss = tf.reduce_mean(tf.square(y-y_)) <span class=\"comment\">#均方误差</span></span><br><span class=\"line\">train_step = tf.train.GradientDescentOptimizer(<span class=\"number\">0.001</span>).minimize(loss) <span class=\"comment\">#梯度下降</span></span><br><span class=\"line\"><span class=\"comment\">#train_step = tf.train.MomentumOptimizer(0.001,0.9).minimize(loss)</span></span><br><span class=\"line\"><span class=\"comment\">#train_step = tf.train.AdamOptimizer(0.001).minimize(loss)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#生成会话，训练STEPS轮</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    init_op = tf.global_variables_initializer()</span><br><span class=\"line\">    sess.run(init_op)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">&quot;w1:\\n&quot;</span>, sess.run(w1)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">&quot;w2:\\n&quot;</span>, sess.run(w2)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">&quot;\\n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#训练模型</span></span><br><span class=\"line\">    STEPS = <span class=\"number\">3000</span> <span class=\"comment\">#训练3000轮</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(STEPS):</span><br><span class=\"line\">        start = (i*BATCH_SIZE) % <span class=\"number\">32</span></span><br><span class=\"line\">        end = start + BATCH_SIZE</span><br><span class=\"line\">        sess.run(train_step, feed_dict=&#123;x: X[start: end], y_:Y[start:end]&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i%<span class=\"number\">500</span> == <span class=\"number\">0</span>: <span class=\"comment\">#每500轮后打印loss</span></span><br><span class=\"line\">            total_loss = sess.run(loss, feed_dict=&#123;x: X, y_: Y&#125;)</span><br><span class=\"line\">            print(<span class=\"string\">&quot;After %d training step(s), loss on all data is %g&quot;</span> % (i, total_loss))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#输出训练后的参数取值</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">&quot;\\n&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">&quot;w1:\\n&quot;</span>, sess.run(w1)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">&quot;w2:\\n&quot;</span>, sess.run(w2)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"搭建神经网络的八股：\"><a href=\"#搭建神经网络的八股：\" class=\"headerlink\" title=\"搭建神经网络的八股：\"></a>搭建神经网络的八股：</h2><p>准备、前传、反传、迭代</p>\n<ul>\n<li>准备 import</li>\n<li>前向传播：定义输入、参数和输出. e.g.: x, y_, w1, w2, a, y</li>\n<li>反向传播：定义损失函数、反向传播方法. e.g.: loss, tran_step</li>\n<li>生成会话，训练STEPS轮</li>\n</ul>"},{"title":"thymeleaf01","date":"2019-11-13T14:25:42.000Z","_content":"\nthymeleaf，一种新型模板引擎。参考资料：usingthymeleaf。\n\nreference: [project web site](https://www.thymeleaf.org)\n\n<!-- more -->\n\n# Standard Expression Syntax\n\n```java\npublic class ThymeleafProperties {\n    private static final Charset DEFAULT_ENCODING = Charset.forName(\"UTF-8\");\n    private static final MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(\"text/html\");\n    public static final String DEFAULT_PREFIX = \"classpath:/templates/\";\n    public static final String DEFAULT_SUFFIX = \".html\";\n```\n\n只要把html页面放在指定类路径下，thymeleaf就会自动渲染。\n\nnote：加了@Response注解的返回的是字符串，而不是页面。同理，如果使用@RestController会导致显示文字。\n\n名称空间：\n\n```xml\n<html xmlns:th=\"http://www.thymeleaf.org\">\n```\n\n## 使用\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta charset=\"UTF-8\"/>\n    <title>templates</title>\n</head>\n<body>\n<h2>hi, thymeleaf~</h2>\n<div th:text=\"${who}\">nice to meet u~</div>\n<div th:utext=\"${who}\"></div>\n<hr/>\n\n<h4 th:text=\"${consumer}\" th:each=\"consumer:${consumer}\"></h4>\n<hr/>\n<h4>\n    <span th:text=\"${consumer}\" th:each=\"consumer:${consumer}\"></span>\n</h4>\n</body>\n</html>\n```\n\n1. th:text 改变当前元素里面的文本内容\n2. th:insert 片段包含\n3. th:each 遍历\n4. th:if 条件判断\n5. th:object 声明变量\n6. th:attr 任意属性修改，支持prepend、append\n7. th:value 修改指定属性默认值\n8. th:text 修改标签体内容（utext，不转义特殊字符）\n9. th:fragment 声明片段\n\n## 表达式\n\n ```properties\nSimple expressions:\n    Variable Expressions: ${...} 获取变量值：OGNL\n    Selection Variable Expressions: *{...} 选择表达式，在功能上与dollar符号相同\n    Message Expressions: #{...}\n    Link URL Expressions: @{...}\n    Fragment Expressions: ~{...}\nLiterals: 字面量\n    Text literals: 'one text' , 'Another one!' ,…\n    Number literals: 0 , 34 , 3.0 , 12.3 ,…\n    Boolean literals: true , false\n    Null literal: null\n    Literal tokens: one , sometext , main ,…\nText operations: 文本操作\n    String concatenation: +\n    Literal substitutions: |The name is ${name}|\nArithmetic operations: 数学运算\n    Binary operators: + , - , * , / , %\n    Minus sign (unary operator): -\nBoolean operations: 布尔运算\n    Binary operators: and , or\n    Boolean negation (unary operator): ! , not\nComparisons and equality: 比较运算\n    Comparators: > , < , >= , <= ( gt , lt , ge , le )\n    Equality operators: == , != ( eq , ne )\nConditional operators: 条件运算\t\t\t\n    If-then: (if) ? (then)\n    If-then-else: (if) ? (then) : (else)\n    Default: (value) ?: (defaultvalue)\nSpecial tokens:\nPage 17 of 106\nNo-Operation: _\n ```\n\n\n\n### Variable Expressions\n\n${...} belongs to OGNL (Object-Graph Navigation Language)，more about OGNL, reference [it]( http://commons.apache.org/proper/commons-ognl/ ).\n\n### Selection Variable Expressions\n\n```html\n<div th:object=\"${session.user}\">\n\t<p>Name: <span th:text=\"*{firstName}\">Sebastian</span>.</p>\n\t<p>Surname: <span th:text=\"*{lastName}\">Pepper</span>.</p>\n\t<p>Nationality: <span th:text=\"*{nationality}\">Saturn</span>.</p>\n</div>\n```\n\n### Message Expressions\n\n主要用来取国际化信息。","source":"_posts/thymeleaf01.md","raw":"---\ntitle: thymeleaf01\ndate: 2019-11-13 22:25:42\ncategories: Utils\ntags:\n- springboot\n- thymeleaf\n---\n\nthymeleaf，一种新型模板引擎。参考资料：usingthymeleaf。\n\nreference: [project web site](https://www.thymeleaf.org)\n\n<!-- more -->\n\n# Standard Expression Syntax\n\n```java\npublic class ThymeleafProperties {\n    private static final Charset DEFAULT_ENCODING = Charset.forName(\"UTF-8\");\n    private static final MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(\"text/html\");\n    public static final String DEFAULT_PREFIX = \"classpath:/templates/\";\n    public static final String DEFAULT_SUFFIX = \".html\";\n```\n\n只要把html页面放在指定类路径下，thymeleaf就会自动渲染。\n\nnote：加了@Response注解的返回的是字符串，而不是页面。同理，如果使用@RestController会导致显示文字。\n\n名称空间：\n\n```xml\n<html xmlns:th=\"http://www.thymeleaf.org\">\n```\n\n## 使用\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta charset=\"UTF-8\"/>\n    <title>templates</title>\n</head>\n<body>\n<h2>hi, thymeleaf~</h2>\n<div th:text=\"${who}\">nice to meet u~</div>\n<div th:utext=\"${who}\"></div>\n<hr/>\n\n<h4 th:text=\"${consumer}\" th:each=\"consumer:${consumer}\"></h4>\n<hr/>\n<h4>\n    <span th:text=\"${consumer}\" th:each=\"consumer:${consumer}\"></span>\n</h4>\n</body>\n</html>\n```\n\n1. th:text 改变当前元素里面的文本内容\n2. th:insert 片段包含\n3. th:each 遍历\n4. th:if 条件判断\n5. th:object 声明变量\n6. th:attr 任意属性修改，支持prepend、append\n7. th:value 修改指定属性默认值\n8. th:text 修改标签体内容（utext，不转义特殊字符）\n9. th:fragment 声明片段\n\n## 表达式\n\n ```properties\nSimple expressions:\n    Variable Expressions: ${...} 获取变量值：OGNL\n    Selection Variable Expressions: *{...} 选择表达式，在功能上与dollar符号相同\n    Message Expressions: #{...}\n    Link URL Expressions: @{...}\n    Fragment Expressions: ~{...}\nLiterals: 字面量\n    Text literals: 'one text' , 'Another one!' ,…\n    Number literals: 0 , 34 , 3.0 , 12.3 ,…\n    Boolean literals: true , false\n    Null literal: null\n    Literal tokens: one , sometext , main ,…\nText operations: 文本操作\n    String concatenation: +\n    Literal substitutions: |The name is ${name}|\nArithmetic operations: 数学运算\n    Binary operators: + , - , * , / , %\n    Minus sign (unary operator): -\nBoolean operations: 布尔运算\n    Binary operators: and , or\n    Boolean negation (unary operator): ! , not\nComparisons and equality: 比较运算\n    Comparators: > , < , >= , <= ( gt , lt , ge , le )\n    Equality operators: == , != ( eq , ne )\nConditional operators: 条件运算\t\t\t\n    If-then: (if) ? (then)\n    If-then-else: (if) ? (then) : (else)\n    Default: (value) ?: (defaultvalue)\nSpecial tokens:\nPage 17 of 106\nNo-Operation: _\n ```\n\n\n\n### Variable Expressions\n\n${...} belongs to OGNL (Object-Graph Navigation Language)，more about OGNL, reference [it]( http://commons.apache.org/proper/commons-ognl/ ).\n\n### Selection Variable Expressions\n\n```html\n<div th:object=\"${session.user}\">\n\t<p>Name: <span th:text=\"*{firstName}\">Sebastian</span>.</p>\n\t<p>Surname: <span th:text=\"*{lastName}\">Pepper</span>.</p>\n\t<p>Nationality: <span th:text=\"*{nationality}\">Saturn</span>.</p>\n</div>\n```\n\n### Message Expressions\n\n主要用来取国际化信息。","slug":"thymeleaf01","published":1,"updated":"2020-07-19T17:29:13.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgdl003jbyihh74s2hil","content":"<p>thymeleaf，一种新型模板引擎。参考资料：usingthymeleaf。</p>\n<p>reference: <a href=\"https://www.thymeleaf.org/\">project web site</a></p>\n<a id=\"more\"></a>\n\n<h1 id=\"Standard-Expression-Syntax\"><a href=\"#Standard-Expression-Syntax\" class=\"headerlink\" title=\"Standard Expression Syntax\"></a>Standard Expression Syntax</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThymeleafProperties</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Charset DEFAULT_ENCODING = Charset.forName(<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(<span class=\"string\">&quot;text/html&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_PREFIX = <span class=\"string\">&quot;classpath:/templates/&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_SUFFIX = <span class=\"string\">&quot;.html&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>只要把html页面放在指定类路径下，thymeleaf就会自动渲染。</p>\n<p>note：加了@Response注解的返回的是字符串，而不是页面。同理，如果使用@RestController会导致显示文字。</p>\n<p>名称空间：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>templates<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>hi, thymeleaf~<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;who&#125;&quot;</span>&gt;</span>nice to meet u~<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:utext</span>=<span class=\"string\">&quot;$&#123;who&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;consumer&#125;&quot;</span> <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;consumer:$&#123;consumer&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;consumer&#125;&quot;</span> <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;consumer:$&#123;consumer&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>th:text 改变当前元素里面的文本内容</li>\n<li>th:insert 片段包含</li>\n<li>th:each 遍历</li>\n<li>th:if 条件判断</li>\n<li>th:object 声明变量</li>\n<li>th:attr 任意属性修改，支持prepend、append</li>\n<li>th:value 修改指定属性默认值</li>\n<li>th:text 修改标签体内容（utext，不转义特殊字符）</li>\n<li>th:fragment 声明片段</li>\n</ol>\n<h2 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h2> <figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Simple</span> <span class=\"string\">expressions:</span></span><br><span class=\"line\">    <span class=\"attr\">Variable</span> <span class=\"string\">Expressions: $&#123;...&#125; 获取变量值：OGNL</span></span><br><span class=\"line\">    <span class=\"attr\">Selection</span> <span class=\"string\">Variable Expressions: *&#123;...&#125; 选择表达式，在功能上与dollar符号相同</span></span><br><span class=\"line\">    <span class=\"attr\">Message</span> <span class=\"string\">Expressions: #&#123;...&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">Link</span> <span class=\"string\">URL Expressions: @&#123;...&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">Fragment</span> <span class=\"string\">Expressions: ~&#123;...&#125;</span></span><br><span class=\"line\"><span class=\"attr\">Literals</span>: <span class=\"string\">字面量</span></span><br><span class=\"line\">    <span class=\"attr\">Text</span> <span class=\"string\">literals: &#x27;one text&#x27; , &#x27;Another one!&#x27; ,…</span></span><br><span class=\"line\">    <span class=\"attr\">Number</span> <span class=\"string\">literals: 0 , 34 , 3.0 , 12.3 ,…</span></span><br><span class=\"line\">    <span class=\"attr\">Boolean</span> <span class=\"string\">literals: true , false</span></span><br><span class=\"line\">    <span class=\"attr\">Null</span> <span class=\"string\">literal: null</span></span><br><span class=\"line\">    <span class=\"attr\">Literal</span> <span class=\"string\">tokens: one , sometext , main ,…</span></span><br><span class=\"line\"><span class=\"attr\">Text</span> <span class=\"string\">operations: 文本操作</span></span><br><span class=\"line\">    <span class=\"attr\">String</span> <span class=\"string\">concatenation: +</span></span><br><span class=\"line\">    <span class=\"attr\">Literal</span> <span class=\"string\">substitutions: |The name is $&#123;name&#125;|</span></span><br><span class=\"line\"><span class=\"attr\">Arithmetic</span> <span class=\"string\">operations: 数学运算</span></span><br><span class=\"line\">    <span class=\"attr\">Binary</span> <span class=\"string\">operators: + , - , * , / , %</span></span><br><span class=\"line\">    <span class=\"attr\">Minus</span> <span class=\"string\">sign (unary operator): -</span></span><br><span class=\"line\"><span class=\"attr\">Boolean</span> <span class=\"string\">operations: 布尔运算</span></span><br><span class=\"line\">    <span class=\"attr\">Binary</span> <span class=\"string\">operators: and , or</span></span><br><span class=\"line\">    <span class=\"attr\">Boolean</span> <span class=\"string\">negation (unary operator): ! , not</span></span><br><span class=\"line\"><span class=\"attr\">Comparisons</span> <span class=\"string\">and equality: 比较运算</span></span><br><span class=\"line\">    <span class=\"attr\">Comparators</span>: <span class=\"string\">&gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span></span><br><span class=\"line\">    <span class=\"attr\">Equality</span> <span class=\"string\">operators: == , != ( eq , ne )</span></span><br><span class=\"line\"><span class=\"attr\">Conditional</span> <span class=\"string\">operators: 条件运算            </span></span><br><span class=\"line\">    <span class=\"meta\">If-then</span>: <span class=\"string\">(if) ? (then)</span></span><br><span class=\"line\">    <span class=\"meta\">If-then-else</span>: <span class=\"string\">(if) ? (then) : (else)</span></span><br><span class=\"line\">    <span class=\"attr\">Default</span>: <span class=\"string\">(value) ?: (defaultvalue)</span></span><br><span class=\"line\"><span class=\"attr\">Special</span> <span class=\"string\">tokens:</span></span><br><span class=\"line\"><span class=\"attr\">Page</span> <span class=\"string\">17 of 106</span></span><br><span class=\"line\"><span class=\"meta\">No-Operation</span>: <span class=\"string\">_</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Variable-Expressions\"><a href=\"#Variable-Expressions\" class=\"headerlink\" title=\"Variable Expressions\"></a>Variable Expressions</h3><p>${…} belongs to OGNL (Object-Graph Navigation Language)，more about OGNL, reference <a href=\"http://commons.apache.org/proper/commons-ognl/\">it</a>.</p>\n<h3 id=\"Selection-Variable-Expressions\"><a href=\"#Selection-Variable-Expressions\" class=\"headerlink\" title=\"Selection Variable Expressions\"></a>Selection Variable Expressions</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:object</span>=<span class=\"string\">&quot;$&#123;session.user&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Name: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;*&#123;firstName&#125;&quot;</span>&gt;</span>Sebastian<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Surname: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;*&#123;lastName&#125;&quot;</span>&gt;</span>Pepper<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Nationality: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;*&#123;nationality&#125;&quot;</span>&gt;</span>Saturn<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Message-Expressions\"><a href=\"#Message-Expressions\" class=\"headerlink\" title=\"Message Expressions\"></a>Message Expressions</h3><p>主要用来取国际化信息。</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>thymeleaf，一种新型模板引擎。参考资料：usingthymeleaf。</p>\n<p>reference: <a href=\"https://www.thymeleaf.org/\">project web site</a></p>","more":"<h1 id=\"Standard-Expression-Syntax\"><a href=\"#Standard-Expression-Syntax\" class=\"headerlink\" title=\"Standard Expression Syntax\"></a>Standard Expression Syntax</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThymeleafProperties</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Charset DEFAULT_ENCODING = Charset.forName(<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(<span class=\"string\">&quot;text/html&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_PREFIX = <span class=\"string\">&quot;classpath:/templates/&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_SUFFIX = <span class=\"string\">&quot;.html&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>只要把html页面放在指定类路径下，thymeleaf就会自动渲染。</p>\n<p>note：加了@Response注解的返回的是字符串，而不是页面。同理，如果使用@RestController会导致显示文字。</p>\n<p>名称空间：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>templates<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>hi, thymeleaf~<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;who&#125;&quot;</span>&gt;</span>nice to meet u~<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:utext</span>=<span class=\"string\">&quot;$&#123;who&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;consumer&#125;&quot;</span> <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;consumer:$&#123;consumer&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;consumer&#125;&quot;</span> <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;consumer:$&#123;consumer&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>th:text 改变当前元素里面的文本内容</li>\n<li>th:insert 片段包含</li>\n<li>th:each 遍历</li>\n<li>th:if 条件判断</li>\n<li>th:object 声明变量</li>\n<li>th:attr 任意属性修改，支持prepend、append</li>\n<li>th:value 修改指定属性默认值</li>\n<li>th:text 修改标签体内容（utext，不转义特殊字符）</li>\n<li>th:fragment 声明片段</li>\n</ol>\n<h2 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h2> <figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Simple</span> <span class=\"string\">expressions:</span></span><br><span class=\"line\">    <span class=\"attr\">Variable</span> <span class=\"string\">Expressions: $&#123;...&#125; 获取变量值：OGNL</span></span><br><span class=\"line\">    <span class=\"attr\">Selection</span> <span class=\"string\">Variable Expressions: *&#123;...&#125; 选择表达式，在功能上与dollar符号相同</span></span><br><span class=\"line\">    <span class=\"attr\">Message</span> <span class=\"string\">Expressions: #&#123;...&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">Link</span> <span class=\"string\">URL Expressions: @&#123;...&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">Fragment</span> <span class=\"string\">Expressions: ~&#123;...&#125;</span></span><br><span class=\"line\"><span class=\"attr\">Literals</span>: <span class=\"string\">字面量</span></span><br><span class=\"line\">    <span class=\"attr\">Text</span> <span class=\"string\">literals: &#x27;one text&#x27; , &#x27;Another one!&#x27; ,…</span></span><br><span class=\"line\">    <span class=\"attr\">Number</span> <span class=\"string\">literals: 0 , 34 , 3.0 , 12.3 ,…</span></span><br><span class=\"line\">    <span class=\"attr\">Boolean</span> <span class=\"string\">literals: true , false</span></span><br><span class=\"line\">    <span class=\"attr\">Null</span> <span class=\"string\">literal: null</span></span><br><span class=\"line\">    <span class=\"attr\">Literal</span> <span class=\"string\">tokens: one , sometext , main ,…</span></span><br><span class=\"line\"><span class=\"attr\">Text</span> <span class=\"string\">operations: 文本操作</span></span><br><span class=\"line\">    <span class=\"attr\">String</span> <span class=\"string\">concatenation: +</span></span><br><span class=\"line\">    <span class=\"attr\">Literal</span> <span class=\"string\">substitutions: |The name is $&#123;name&#125;|</span></span><br><span class=\"line\"><span class=\"attr\">Arithmetic</span> <span class=\"string\">operations: 数学运算</span></span><br><span class=\"line\">    <span class=\"attr\">Binary</span> <span class=\"string\">operators: + , - , * , / , %</span></span><br><span class=\"line\">    <span class=\"attr\">Minus</span> <span class=\"string\">sign (unary operator): -</span></span><br><span class=\"line\"><span class=\"attr\">Boolean</span> <span class=\"string\">operations: 布尔运算</span></span><br><span class=\"line\">    <span class=\"attr\">Binary</span> <span class=\"string\">operators: and , or</span></span><br><span class=\"line\">    <span class=\"attr\">Boolean</span> <span class=\"string\">negation (unary operator): ! , not</span></span><br><span class=\"line\"><span class=\"attr\">Comparisons</span> <span class=\"string\">and equality: 比较运算</span></span><br><span class=\"line\">    <span class=\"attr\">Comparators</span>: <span class=\"string\">&gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span></span><br><span class=\"line\">    <span class=\"attr\">Equality</span> <span class=\"string\">operators: == , != ( eq , ne )</span></span><br><span class=\"line\"><span class=\"attr\">Conditional</span> <span class=\"string\">operators: 条件运算            </span></span><br><span class=\"line\">    <span class=\"meta\">If-then</span>: <span class=\"string\">(if) ? (then)</span></span><br><span class=\"line\">    <span class=\"meta\">If-then-else</span>: <span class=\"string\">(if) ? (then) : (else)</span></span><br><span class=\"line\">    <span class=\"attr\">Default</span>: <span class=\"string\">(value) ?: (defaultvalue)</span></span><br><span class=\"line\"><span class=\"attr\">Special</span> <span class=\"string\">tokens:</span></span><br><span class=\"line\"><span class=\"attr\">Page</span> <span class=\"string\">17 of 106</span></span><br><span class=\"line\"><span class=\"meta\">No-Operation</span>: <span class=\"string\">_</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Variable-Expressions\"><a href=\"#Variable-Expressions\" class=\"headerlink\" title=\"Variable Expressions\"></a>Variable Expressions</h3><p>${…} belongs to OGNL (Object-Graph Navigation Language)，more about OGNL, reference <a href=\"http://commons.apache.org/proper/commons-ognl/\">it</a>.</p>\n<h3 id=\"Selection-Variable-Expressions\"><a href=\"#Selection-Variable-Expressions\" class=\"headerlink\" title=\"Selection Variable Expressions\"></a>Selection Variable Expressions</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:object</span>=<span class=\"string\">&quot;$&#123;session.user&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Name: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;*&#123;firstName&#125;&quot;</span>&gt;</span>Sebastian<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Surname: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;*&#123;lastName&#125;&quot;</span>&gt;</span>Pepper<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Nationality: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;*&#123;nationality&#125;&quot;</span>&gt;</span>Saturn<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Message-Expressions\"><a href=\"#Message-Expressions\" class=\"headerlink\" title=\"Message Expressions\"></a>Message Expressions</h3><p>主要用来取国际化信息。</p>"},{"title":"tree","date":"2020-02-22T05:51:52.000Z","_content":"\n# 序\n\n同之前的合集框架一样，树也是一种数据结构。不同的是，之前是线性结构，而树是层次结构。\n\n# 堆\n\n这里的堆指的是二叉堆，应用于堆排序。首先将所有的元素添加到一个堆上，然后**不断移除最大的元素**以获得一个排好序的线性表。\n\n## 属性\n\n形状：完全二叉树\n\n堆：每个结点大于或等于它的任意一个孩子\n\n### 完全二叉树\n\n如果一棵二叉树的每一层都是满的或者最后一层可以不满并且最后一层的叶子都是靠左放置的，那么这这棵二叉树就是完全的（complete）。\n\n# 二叉查找树(BST)\n\nBinary search tree, BST：对于树中的每一个结点，它的左子树中结点的值都小于该结点的值，而它的右子树结点的值都大于该结点的值。\n\n结点可以定义为一个类：\n\n```java\nClass TreeNode<E>{\n    protected E element;\n    protected TreeNode<E> left;\n    protected TreeNode<E> right;\n    \n    public TreeNode(E e){\n        element = e;\n    }\n}\n```\n\n\n\n## 遍历\n\nTree traversal，即访问树中每个结点一次且只有一次的过程。\n\n### 中、前、后序\n\ninorder, preorder, postorder traversal 都是**以中间结点为主观对象**（或者说是当做当前结点）来说的。中序就是中间结点放在中间，对于一个树来说，就是左中右。前序就是中左右。后序就是左右中。\n\n### 深度优先(depth-first)\n\n深度优先遍历法与前序遍历法相同。他们的一个应用就是打印一个结构性文档（如书的目录）。\n\n### 广度优先(breadth-frist)\n\n逐层访问树中的结点。首先访问根节点，然后从左往右访问根节点的所有子节点，再从左往右访问根节点的所有孙子结点，以此类推。\n\n## i.e.\n\n![Untitled.png](https://i.loli.net/2020/05/04/V32zlOcSEd1uJXh.png)\n\npreorder traversal\n\n> 60 55 45 57 59 100 67 107 101\n\ninorder traversal\n\n> 45 55 57 59 60 67 100 101 107\n\npostorder traversal\n\n> 45 59 57 55 67 101 107 100 60\n\ndepth-first\n\n> 60 55 45 57 59 100 67 107 101\n\nbeadth-first\n\n> 60 55 100 45 57 67 107 59 101\n\n\n\n# 应用：数据压缩\n\n霍夫曼编码：通过使用更少的比特对经常出现的字符编码来压缩数据。字符的编码是基于字符在文本中出现的次数使用二叉树来构建的，该树称为霍夫曼编码树。\n\nASCII码中每个字符都是8比特，如果一个文件100个字符，保存的话就要800比特。\n\n# AVL树\n\n二叉树的查找、插入和删除操作的时间依赖于树的高度，最坏情况下高度为O(n)，而如果树是**完全平衡的（完全二叉树）**，他的高度是O(logn)。可以保证一棵树完全平衡，但代价比较大。一个**妥协**的做法是保持一颗**良好平衡**的树——**每个结点的两个子树的高度基本一样**。(AVL树就是良好平衡的)\n\nAVL树中的插入和删除一个元素的过程与普通BST中的过程一样，不同的是插入或删除后必须进行重新平衡。\n\n在一棵AVL树中，每个结点的子树的高度差距为0或者1，可以得出树的最大高度。它于1962年被两名俄罗斯（应该是前苏联吧）科学家G.M.Adelson-Velsky和E.M.landis发明，也因此命名为AVL树。\n\n## balance factor(平衡因子)\n\n一个结点的平衡因子是它**右子树的高度减去左子树的高度**。如果一个结点的平衡因子为-1,0或者1，那么结点就是平衡的。-1表示左偏重（left-heavy），+1同理。\n\n## 重新平衡\n\n插入、删除后，如果树变得不平衡了，需要执行旋转操作来重新平衡。有4种可能的旋转：LL，RR，LR以及RL。\n\n一棵树的高度又两个决定因素，因为树有俩分支。于是就出现了上面的四种可能。\n\nRR: 根节点的平衡因子为+2，且右子树的平衡因子为+1或0.\n\nRL: 根节点的平衡因子为+2，且右子树的平衡因子为-1.\n\nLL: 根节点的平衡因子为-2， 且左子树的平衡因子为+1或0.\n\nLR: 根节点的平衡因子为-2，且左子树的平衡因子为-1.\n\n## 时间复杂度\n\n高度为O(log n)，所以时间复杂度也为O(log n)。\n\n# 2-4树\n\n也称为2-3-4树，他是一个**完全平衡**的BST，所有叶子节点都在同一个高度。在2-4树中，一个结点可能有1,2或者3个元素。在BST中一个结点只有一个元素，2-4树则不同，所以会比BST更短。\n\n# B树\n\n# 红黑树","source":"_posts/tree.md","raw":"---\ntitle: tree\ndate: 2020-02-22 13:51:52\ncategories: Java\ntags: datastructure\n---\n\n# 序\n\n同之前的合集框架一样，树也是一种数据结构。不同的是，之前是线性结构，而树是层次结构。\n\n# 堆\n\n这里的堆指的是二叉堆，应用于堆排序。首先将所有的元素添加到一个堆上，然后**不断移除最大的元素**以获得一个排好序的线性表。\n\n## 属性\n\n形状：完全二叉树\n\n堆：每个结点大于或等于它的任意一个孩子\n\n### 完全二叉树\n\n如果一棵二叉树的每一层都是满的或者最后一层可以不满并且最后一层的叶子都是靠左放置的，那么这这棵二叉树就是完全的（complete）。\n\n# 二叉查找树(BST)\n\nBinary search tree, BST：对于树中的每一个结点，它的左子树中结点的值都小于该结点的值，而它的右子树结点的值都大于该结点的值。\n\n结点可以定义为一个类：\n\n```java\nClass TreeNode<E>{\n    protected E element;\n    protected TreeNode<E> left;\n    protected TreeNode<E> right;\n    \n    public TreeNode(E e){\n        element = e;\n    }\n}\n```\n\n\n\n## 遍历\n\nTree traversal，即访问树中每个结点一次且只有一次的过程。\n\n### 中、前、后序\n\ninorder, preorder, postorder traversal 都是**以中间结点为主观对象**（或者说是当做当前结点）来说的。中序就是中间结点放在中间，对于一个树来说，就是左中右。前序就是中左右。后序就是左右中。\n\n### 深度优先(depth-first)\n\n深度优先遍历法与前序遍历法相同。他们的一个应用就是打印一个结构性文档（如书的目录）。\n\n### 广度优先(breadth-frist)\n\n逐层访问树中的结点。首先访问根节点，然后从左往右访问根节点的所有子节点，再从左往右访问根节点的所有孙子结点，以此类推。\n\n## i.e.\n\n![Untitled.png](https://i.loli.net/2020/05/04/V32zlOcSEd1uJXh.png)\n\npreorder traversal\n\n> 60 55 45 57 59 100 67 107 101\n\ninorder traversal\n\n> 45 55 57 59 60 67 100 101 107\n\npostorder traversal\n\n> 45 59 57 55 67 101 107 100 60\n\ndepth-first\n\n> 60 55 45 57 59 100 67 107 101\n\nbeadth-first\n\n> 60 55 100 45 57 67 107 59 101\n\n\n\n# 应用：数据压缩\n\n霍夫曼编码：通过使用更少的比特对经常出现的字符编码来压缩数据。字符的编码是基于字符在文本中出现的次数使用二叉树来构建的，该树称为霍夫曼编码树。\n\nASCII码中每个字符都是8比特，如果一个文件100个字符，保存的话就要800比特。\n\n# AVL树\n\n二叉树的查找、插入和删除操作的时间依赖于树的高度，最坏情况下高度为O(n)，而如果树是**完全平衡的（完全二叉树）**，他的高度是O(logn)。可以保证一棵树完全平衡，但代价比较大。一个**妥协**的做法是保持一颗**良好平衡**的树——**每个结点的两个子树的高度基本一样**。(AVL树就是良好平衡的)\n\nAVL树中的插入和删除一个元素的过程与普通BST中的过程一样，不同的是插入或删除后必须进行重新平衡。\n\n在一棵AVL树中，每个结点的子树的高度差距为0或者1，可以得出树的最大高度。它于1962年被两名俄罗斯（应该是前苏联吧）科学家G.M.Adelson-Velsky和E.M.landis发明，也因此命名为AVL树。\n\n## balance factor(平衡因子)\n\n一个结点的平衡因子是它**右子树的高度减去左子树的高度**。如果一个结点的平衡因子为-1,0或者1，那么结点就是平衡的。-1表示左偏重（left-heavy），+1同理。\n\n## 重新平衡\n\n插入、删除后，如果树变得不平衡了，需要执行旋转操作来重新平衡。有4种可能的旋转：LL，RR，LR以及RL。\n\n一棵树的高度又两个决定因素，因为树有俩分支。于是就出现了上面的四种可能。\n\nRR: 根节点的平衡因子为+2，且右子树的平衡因子为+1或0.\n\nRL: 根节点的平衡因子为+2，且右子树的平衡因子为-1.\n\nLL: 根节点的平衡因子为-2， 且左子树的平衡因子为+1或0.\n\nLR: 根节点的平衡因子为-2，且左子树的平衡因子为-1.\n\n## 时间复杂度\n\n高度为O(log n)，所以时间复杂度也为O(log n)。\n\n# 2-4树\n\n也称为2-3-4树，他是一个**完全平衡**的BST，所有叶子节点都在同一个高度。在2-4树中，一个结点可能有1,2或者3个元素。在BST中一个结点只有一个元素，2-4树则不同，所以会比BST更短。\n\n# B树\n\n# 红黑树","slug":"tree","published":1,"updated":"2020-08-15T11:23:55.507Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgdn003nbyihh913hr7i","content":"<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><p>同之前的合集框架一样，树也是一种数据结构。不同的是，之前是线性结构，而树是层次结构。</p>\n<h1 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h1><p>这里的堆指的是二叉堆，应用于堆排序。首先将所有的元素添加到一个堆上，然后<strong>不断移除最大的元素</strong>以获得一个排好序的线性表。</p>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><p>形状：完全二叉树</p>\n<p>堆：每个结点大于或等于它的任意一个孩子</p>\n<h3 id=\"完全二叉树\"><a href=\"#完全二叉树\" class=\"headerlink\" title=\"完全二叉树\"></a>完全二叉树</h3><p>如果一棵二叉树的每一层都是满的或者最后一层可以不满并且最后一层的叶子都是靠左放置的，那么这这棵二叉树就是完全的（complete）。</p>\n<h1 id=\"二叉查找树-BST\"><a href=\"#二叉查找树-BST\" class=\"headerlink\" title=\"二叉查找树(BST)\"></a>二叉查找树(BST)</h1><p>Binary search tree, BST：对于树中的每一个结点，它的左子树中结点的值都小于该结点的值，而它的右子树结点的值都大于该结点的值。</p>\n<p>结点可以定义为一个类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class TreeNode&lt;E&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> E element;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> TreeNode&lt;E&gt; left;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> TreeNode&lt;E&gt; right;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(E e)</span></span>&#123;</span><br><span class=\"line\">        element = e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h2><p>Tree traversal，即访问树中每个结点一次且只有一次的过程。</p>\n<h3 id=\"中、前、后序\"><a href=\"#中、前、后序\" class=\"headerlink\" title=\"中、前、后序\"></a>中、前、后序</h3><p>inorder, preorder, postorder traversal 都是<strong>以中间结点为主观对象</strong>（或者说是当做当前结点）来说的。中序就是中间结点放在中间，对于一个树来说，就是左中右。前序就是中左右。后序就是左右中。</p>\n<h3 id=\"深度优先-depth-first\"><a href=\"#深度优先-depth-first\" class=\"headerlink\" title=\"深度优先(depth-first)\"></a>深度优先(depth-first)</h3><p>深度优先遍历法与前序遍历法相同。他们的一个应用就是打印一个结构性文档（如书的目录）。</p>\n<h3 id=\"广度优先-breadth-frist\"><a href=\"#广度优先-breadth-frist\" class=\"headerlink\" title=\"广度优先(breadth-frist)\"></a>广度优先(breadth-frist)</h3><p>逐层访问树中的结点。首先访问根节点，然后从左往右访问根节点的所有子节点，再从左往右访问根节点的所有孙子结点，以此类推。</p>\n<h2 id=\"i-e\"><a href=\"#i-e\" class=\"headerlink\" title=\"i.e.\"></a>i.e.</h2><p><img src=\"https://i.loli.net/2020/05/04/V32zlOcSEd1uJXh.png\" alt=\"Untitled.png\"></p>\n<p>preorder traversal</p>\n<blockquote>\n<p>60 55 45 57 59 100 67 107 101</p>\n</blockquote>\n<p>inorder traversal</p>\n<blockquote>\n<p>45 55 57 59 60 67 100 101 107</p>\n</blockquote>\n<p>postorder traversal</p>\n<blockquote>\n<p>45 59 57 55 67 101 107 100 60</p>\n</blockquote>\n<p>depth-first</p>\n<blockquote>\n<p>60 55 45 57 59 100 67 107 101</p>\n</blockquote>\n<p>beadth-first</p>\n<blockquote>\n<p>60 55 100 45 57 67 107 59 101</p>\n</blockquote>\n<h1 id=\"应用：数据压缩\"><a href=\"#应用：数据压缩\" class=\"headerlink\" title=\"应用：数据压缩\"></a>应用：数据压缩</h1><p>霍夫曼编码：通过使用更少的比特对经常出现的字符编码来压缩数据。字符的编码是基于字符在文本中出现的次数使用二叉树来构建的，该树称为霍夫曼编码树。</p>\n<p>ASCII码中每个字符都是8比特，如果一个文件100个字符，保存的话就要800比特。</p>\n<h1 id=\"AVL树\"><a href=\"#AVL树\" class=\"headerlink\" title=\"AVL树\"></a>AVL树</h1><p>二叉树的查找、插入和删除操作的时间依赖于树的高度，最坏情况下高度为O(n)，而如果树是<strong>完全平衡的（完全二叉树）</strong>，他的高度是O(logn)。可以保证一棵树完全平衡，但代价比较大。一个<strong>妥协</strong>的做法是保持一颗<strong>良好平衡</strong>的树——<strong>每个结点的两个子树的高度基本一样</strong>。(AVL树就是良好平衡的)</p>\n<p>AVL树中的插入和删除一个元素的过程与普通BST中的过程一样，不同的是插入或删除后必须进行重新平衡。</p>\n<p>在一棵AVL树中，每个结点的子树的高度差距为0或者1，可以得出树的最大高度。它于1962年被两名俄罗斯（应该是前苏联吧）科学家G.M.Adelson-Velsky和E.M.landis发明，也因此命名为AVL树。</p>\n<h2 id=\"balance-factor-平衡因子\"><a href=\"#balance-factor-平衡因子\" class=\"headerlink\" title=\"balance factor(平衡因子)\"></a>balance factor(平衡因子)</h2><p>一个结点的平衡因子是它<strong>右子树的高度减去左子树的高度</strong>。如果一个结点的平衡因子为-1,0或者1，那么结点就是平衡的。-1表示左偏重（left-heavy），+1同理。</p>\n<h2 id=\"重新平衡\"><a href=\"#重新平衡\" class=\"headerlink\" title=\"重新平衡\"></a>重新平衡</h2><p>插入、删除后，如果树变得不平衡了，需要执行旋转操作来重新平衡。有4种可能的旋转：LL，RR，LR以及RL。</p>\n<p>一棵树的高度又两个决定因素，因为树有俩分支。于是就出现了上面的四种可能。</p>\n<p>RR: 根节点的平衡因子为+2，且右子树的平衡因子为+1或0.</p>\n<p>RL: 根节点的平衡因子为+2，且右子树的平衡因子为-1.</p>\n<p>LL: 根节点的平衡因子为-2， 且左子树的平衡因子为+1或0.</p>\n<p>LR: 根节点的平衡因子为-2，且左子树的平衡因子为-1.</p>\n<h2 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h2><p>高度为O(log n)，所以时间复杂度也为O(log n)。</p>\n<h1 id=\"2-4树\"><a href=\"#2-4树\" class=\"headerlink\" title=\"2-4树\"></a>2-4树</h1><p>也称为2-3-4树，他是一个<strong>完全平衡</strong>的BST，所有叶子节点都在同一个高度。在2-4树中，一个结点可能有1,2或者3个元素。在BST中一个结点只有一个元素，2-4树则不同，所以会比BST更短。</p>\n<h1 id=\"B树\"><a href=\"#B树\" class=\"headerlink\" title=\"B树\"></a>B树</h1><h1 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a>红黑树</h1>","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"","more":"<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><p>同之前的合集框架一样，树也是一种数据结构。不同的是，之前是线性结构，而树是层次结构。</p>\n<h1 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h1><p>这里的堆指的是二叉堆，应用于堆排序。首先将所有的元素添加到一个堆上，然后<strong>不断移除最大的元素</strong>以获得一个排好序的线性表。</p>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><p>形状：完全二叉树</p>\n<p>堆：每个结点大于或等于它的任意一个孩子</p>\n<h3 id=\"完全二叉树\"><a href=\"#完全二叉树\" class=\"headerlink\" title=\"完全二叉树\"></a>完全二叉树</h3><p>如果一棵二叉树的每一层都是满的或者最后一层可以不满并且最后一层的叶子都是靠左放置的，那么这这棵二叉树就是完全的（complete）。</p>\n<h1 id=\"二叉查找树-BST\"><a href=\"#二叉查找树-BST\" class=\"headerlink\" title=\"二叉查找树(BST)\"></a>二叉查找树(BST)</h1><p>Binary search tree, BST：对于树中的每一个结点，它的左子树中结点的值都小于该结点的值，而它的右子树结点的值都大于该结点的值。</p>\n<p>结点可以定义为一个类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class TreeNode&lt;E&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> E element;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> TreeNode&lt;E&gt; left;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> TreeNode&lt;E&gt; right;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(E e)</span></span>&#123;</span><br><span class=\"line\">        element = e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h2><p>Tree traversal，即访问树中每个结点一次且只有一次的过程。</p>\n<h3 id=\"中、前、后序\"><a href=\"#中、前、后序\" class=\"headerlink\" title=\"中、前、后序\"></a>中、前、后序</h3><p>inorder, preorder, postorder traversal 都是<strong>以中间结点为主观对象</strong>（或者说是当做当前结点）来说的。中序就是中间结点放在中间，对于一个树来说，就是左中右。前序就是中左右。后序就是左右中。</p>\n<h3 id=\"深度优先-depth-first\"><a href=\"#深度优先-depth-first\" class=\"headerlink\" title=\"深度优先(depth-first)\"></a>深度优先(depth-first)</h3><p>深度优先遍历法与前序遍历法相同。他们的一个应用就是打印一个结构性文档（如书的目录）。</p>\n<h3 id=\"广度优先-breadth-frist\"><a href=\"#广度优先-breadth-frist\" class=\"headerlink\" title=\"广度优先(breadth-frist)\"></a>广度优先(breadth-frist)</h3><p>逐层访问树中的结点。首先访问根节点，然后从左往右访问根节点的所有子节点，再从左往右访问根节点的所有孙子结点，以此类推。</p>\n<h2 id=\"i-e\"><a href=\"#i-e\" class=\"headerlink\" title=\"i.e.\"></a>i.e.</h2><p><img src=\"https://i.loli.net/2020/05/04/V32zlOcSEd1uJXh.png\" alt=\"Untitled.png\"></p>\n<p>preorder traversal</p>\n<blockquote>\n<p>60 55 45 57 59 100 67 107 101</p>\n</blockquote>\n<p>inorder traversal</p>\n<blockquote>\n<p>45 55 57 59 60 67 100 101 107</p>\n</blockquote>\n<p>postorder traversal</p>\n<blockquote>\n<p>45 59 57 55 67 101 107 100 60</p>\n</blockquote>\n<p>depth-first</p>\n<blockquote>\n<p>60 55 45 57 59 100 67 107 101</p>\n</blockquote>\n<p>beadth-first</p>\n<blockquote>\n<p>60 55 100 45 57 67 107 59 101</p>\n</blockquote>\n<h1 id=\"应用：数据压缩\"><a href=\"#应用：数据压缩\" class=\"headerlink\" title=\"应用：数据压缩\"></a>应用：数据压缩</h1><p>霍夫曼编码：通过使用更少的比特对经常出现的字符编码来压缩数据。字符的编码是基于字符在文本中出现的次数使用二叉树来构建的，该树称为霍夫曼编码树。</p>\n<p>ASCII码中每个字符都是8比特，如果一个文件100个字符，保存的话就要800比特。</p>\n<h1 id=\"AVL树\"><a href=\"#AVL树\" class=\"headerlink\" title=\"AVL树\"></a>AVL树</h1><p>二叉树的查找、插入和删除操作的时间依赖于树的高度，最坏情况下高度为O(n)，而如果树是<strong>完全平衡的（完全二叉树）</strong>，他的高度是O(logn)。可以保证一棵树完全平衡，但代价比较大。一个<strong>妥协</strong>的做法是保持一颗<strong>良好平衡</strong>的树——<strong>每个结点的两个子树的高度基本一样</strong>。(AVL树就是良好平衡的)</p>\n<p>AVL树中的插入和删除一个元素的过程与普通BST中的过程一样，不同的是插入或删除后必须进行重新平衡。</p>\n<p>在一棵AVL树中，每个结点的子树的高度差距为0或者1，可以得出树的最大高度。它于1962年被两名俄罗斯（应该是前苏联吧）科学家G.M.Adelson-Velsky和E.M.landis发明，也因此命名为AVL树。</p>\n<h2 id=\"balance-factor-平衡因子\"><a href=\"#balance-factor-平衡因子\" class=\"headerlink\" title=\"balance factor(平衡因子)\"></a>balance factor(平衡因子)</h2><p>一个结点的平衡因子是它<strong>右子树的高度减去左子树的高度</strong>。如果一个结点的平衡因子为-1,0或者1，那么结点就是平衡的。-1表示左偏重（left-heavy），+1同理。</p>\n<h2 id=\"重新平衡\"><a href=\"#重新平衡\" class=\"headerlink\" title=\"重新平衡\"></a>重新平衡</h2><p>插入、删除后，如果树变得不平衡了，需要执行旋转操作来重新平衡。有4种可能的旋转：LL，RR，LR以及RL。</p>\n<p>一棵树的高度又两个决定因素，因为树有俩分支。于是就出现了上面的四种可能。</p>\n<p>RR: 根节点的平衡因子为+2，且右子树的平衡因子为+1或0.</p>\n<p>RL: 根节点的平衡因子为+2，且右子树的平衡因子为-1.</p>\n<p>LL: 根节点的平衡因子为-2， 且左子树的平衡因子为+1或0.</p>\n<p>LR: 根节点的平衡因子为-2，且左子树的平衡因子为-1.</p>\n<h2 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h2><p>高度为O(log n)，所以时间复杂度也为O(log n)。</p>\n<h1 id=\"2-4树\"><a href=\"#2-4树\" class=\"headerlink\" title=\"2-4树\"></a>2-4树</h1><p>也称为2-3-4树，他是一个<strong>完全平衡</strong>的BST，所有叶子节点都在同一个高度。在2-4树中，一个结点可能有1,2或者3个元素。在BST中一个结点只有一个元素，2-4树则不同，所以会比BST更短。</p>\n<h1 id=\"B树\"><a href=\"#B树\" class=\"headerlink\" title=\"B树\"></a>B树</h1><h1 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a>红黑树</h1>"},{"title":"uml","date":"2020-01-12T15:14:16.000Z","_content":"\nThe **Unified Modeling Language(UML)** is a general-purpose, developmental, modeling language in the field of software engineering that is intended to provide a standard way to visualize the design of a system.\n\n<!-- more -->\n\n# 序\n\n主要说说UML中的关系(Class Relationships)\n\n[reference1](https://www.visual-paradigm.com/cn/guide/), [reference2](https://support.typora.io/Draw-Diagrams-With-Markdown/)\n\n## Class Relationships\n\nA class may be involved in one or more relationships with other classes.\n\n## Inheritance(or Generalization)\n\n- Represents an \"is-a\" relationship\n- An abstract class name is shown *in italics*\n- SubClass1 and SubClass2 are specializations of Super Class\n- **A solid line with a hollow arrowhead that point <u>from the child to the parent class</u>**\n\n```mermaid\nclassDiagram\nClass <|-- SubClass1\nClass <|-- SubClass2 \n```\n\n\n\n---\n\n## Simple Association\n\n- A structural link between two peer classes\n- There is an association between Class1 and Class2\n- **A solid line connecting two classes**\n\n```mermaid\nclassDiagram\nClass1 .. Class2\n```\n\n\n\n---\n\n## Aggregation\n\nA special type of association. It represents a \"part of\" relationship.\n\n- Class2 is part of Class1.\n- Many instances(denoted by the *) of Class2 can be associated with Class1\n- Objects of Class1 and Class2 have separate lifetimes\n- **A solid line with an unfilled diamond at the association end connected to the class of composite**\n\n```mermaid\nclassDiagram\nClass1 o-- Class2\n```\n\n---\n\n## Composition\n\nA special type of aggregation **where parts are destroyed when the whole is destroyed.**\n\n- Objects of Class2 live and die with Class1\n- Class2 cannot stand by itself\n- **A solid line with a filled diamond at the association connected to the class of composite**\n\n```mermaid\nclassDiagram\nClass1 *-- Class2\n```\n\n---\n\n## Dependency\n\n- Exists between two classes if the changes to the definition of one may cause changes to the other (but not the other way around)\n- Class1 depends on Class2\n- A dashed line with an open arrow\n\n```mermaid\nclassDiagram\nClass1 ..> Class2\n```\n\n\n\n","source":"_posts/uml.md","raw":"---\ntitle: uml\ndate: 2020-01-12 23:14:16\ncategories: Utils\ntags: utils\n---\n\nThe **Unified Modeling Language(UML)** is a general-purpose, developmental, modeling language in the field of software engineering that is intended to provide a standard way to visualize the design of a system.\n\n<!-- more -->\n\n# 序\n\n主要说说UML中的关系(Class Relationships)\n\n[reference1](https://www.visual-paradigm.com/cn/guide/), [reference2](https://support.typora.io/Draw-Diagrams-With-Markdown/)\n\n## Class Relationships\n\nA class may be involved in one or more relationships with other classes.\n\n## Inheritance(or Generalization)\n\n- Represents an \"is-a\" relationship\n- An abstract class name is shown *in italics*\n- SubClass1 and SubClass2 are specializations of Super Class\n- **A solid line with a hollow arrowhead that point <u>from the child to the parent class</u>**\n\n```mermaid\nclassDiagram\nClass <|-- SubClass1\nClass <|-- SubClass2 \n```\n\n\n\n---\n\n## Simple Association\n\n- A structural link between two peer classes\n- There is an association between Class1 and Class2\n- **A solid line connecting two classes**\n\n```mermaid\nclassDiagram\nClass1 .. Class2\n```\n\n\n\n---\n\n## Aggregation\n\nA special type of association. It represents a \"part of\" relationship.\n\n- Class2 is part of Class1.\n- Many instances(denoted by the *) of Class2 can be associated with Class1\n- Objects of Class1 and Class2 have separate lifetimes\n- **A solid line with an unfilled diamond at the association end connected to the class of composite**\n\n```mermaid\nclassDiagram\nClass1 o-- Class2\n```\n\n---\n\n## Composition\n\nA special type of aggregation **where parts are destroyed when the whole is destroyed.**\n\n- Objects of Class2 live and die with Class1\n- Class2 cannot stand by itself\n- **A solid line with a filled diamond at the association connected to the class of composite**\n\n```mermaid\nclassDiagram\nClass1 *-- Class2\n```\n\n---\n\n## Dependency\n\n- Exists between two classes if the changes to the definition of one may cause changes to the other (but not the other way around)\n- Class1 depends on Class2\n- A dashed line with an open arrow\n\n```mermaid\nclassDiagram\nClass1 ..> Class2\n```\n\n\n\n","slug":"uml","published":1,"updated":"2020-07-19T17:29:13.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgdo003qbyih8jdn9eiv","content":"<p>The <strong>Unified Modeling Language(UML)</strong> is a general-purpose, developmental, modeling language in the field of software engineering that is intended to provide a standard way to visualize the design of a system.</p>\n<a id=\"more\"></a>\n\n<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><p>主要说说UML中的关系(Class Relationships)</p>\n<p><a href=\"https://www.visual-paradigm.com/cn/guide/\">reference1</a>, <a href=\"https://support.typora.io/Draw-Diagrams-With-Markdown/\">reference2</a></p>\n<h2 id=\"Class-Relationships\"><a href=\"#Class-Relationships\" class=\"headerlink\" title=\"Class Relationships\"></a>Class Relationships</h2><p>A class may be involved in one or more relationships with other classes.</p>\n<h2 id=\"Inheritance-or-Generalization\"><a href=\"#Inheritance-or-Generalization\" class=\"headerlink\" title=\"Inheritance(or Generalization)\"></a>Inheritance(or Generalization)</h2><ul>\n<li>Represents an “is-a” relationship</li>\n<li>An abstract class name is shown <em>in italics</em></li>\n<li>SubClass1 and SubClass2 are specializations of Super Class</li>\n<li><strong>A solid line with a hollow arrowhead that point <u>from the child to the parent class</u></strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classDiagram</span><br><span class=\"line\">Class &lt;|-- SubClass1</span><br><span class=\"line\">Class &lt;|-- SubClass2 </span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h2 id=\"Simple-Association\"><a href=\"#Simple-Association\" class=\"headerlink\" title=\"Simple Association\"></a>Simple Association</h2><ul>\n<li>A structural link between two peer classes</li>\n<li>There is an association between Class1 and Class2</li>\n<li><strong>A solid line connecting two classes</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classDiagram</span><br><span class=\"line\">Class1 .. Class2</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h2 id=\"Aggregation\"><a href=\"#Aggregation\" class=\"headerlink\" title=\"Aggregation\"></a>Aggregation</h2><p>A special type of association. It represents a “part of” relationship.</p>\n<ul>\n<li>Class2 is part of Class1.</li>\n<li>Many instances(denoted by the *) of Class2 can be associated with Class1</li>\n<li>Objects of Class1 and Class2 have separate lifetimes</li>\n<li><strong>A solid line with an unfilled diamond at the association end connected to the class of composite</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classDiagram</span><br><span class=\"line\">Class1 o-- Class2</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"Composition\"><a href=\"#Composition\" class=\"headerlink\" title=\"Composition\"></a>Composition</h2><p>A special type of aggregation <strong>where parts are destroyed when the whole is destroyed.</strong></p>\n<ul>\n<li>Objects of Class2 live and die with Class1</li>\n<li>Class2 cannot stand by itself</li>\n<li><strong>A solid line with a filled diamond at the association connected to the class of composite</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classDiagram</span><br><span class=\"line\">Class1 *-- Class2</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"Dependency\"><a href=\"#Dependency\" class=\"headerlink\" title=\"Dependency\"></a>Dependency</h2><ul>\n<li>Exists between two classes if the changes to the definition of one may cause changes to the other (but not the other way around)</li>\n<li>Class1 depends on Class2</li>\n<li>A dashed line with an open arrow</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classDiagram</span><br><span class=\"line\">Class1 ..&gt; Class2</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>The <strong>Unified Modeling Language(UML)</strong> is a general-purpose, developmental, modeling language in the field of software engineering that is intended to provide a standard way to visualize the design of a system.</p>","more":"<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><p>主要说说UML中的关系(Class Relationships)</p>\n<p><a href=\"https://www.visual-paradigm.com/cn/guide/\">reference1</a>, <a href=\"https://support.typora.io/Draw-Diagrams-With-Markdown/\">reference2</a></p>\n<h2 id=\"Class-Relationships\"><a href=\"#Class-Relationships\" class=\"headerlink\" title=\"Class Relationships\"></a>Class Relationships</h2><p>A class may be involved in one or more relationships with other classes.</p>\n<h2 id=\"Inheritance-or-Generalization\"><a href=\"#Inheritance-or-Generalization\" class=\"headerlink\" title=\"Inheritance(or Generalization)\"></a>Inheritance(or Generalization)</h2><ul>\n<li>Represents an “is-a” relationship</li>\n<li>An abstract class name is shown <em>in italics</em></li>\n<li>SubClass1 and SubClass2 are specializations of Super Class</li>\n<li><strong>A solid line with a hollow arrowhead that point <u>from the child to the parent class</u></strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classDiagram</span><br><span class=\"line\">Class &lt;|-- SubClass1</span><br><span class=\"line\">Class &lt;|-- SubClass2 </span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h2 id=\"Simple-Association\"><a href=\"#Simple-Association\" class=\"headerlink\" title=\"Simple Association\"></a>Simple Association</h2><ul>\n<li>A structural link between two peer classes</li>\n<li>There is an association between Class1 and Class2</li>\n<li><strong>A solid line connecting two classes</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classDiagram</span><br><span class=\"line\">Class1 .. Class2</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h2 id=\"Aggregation\"><a href=\"#Aggregation\" class=\"headerlink\" title=\"Aggregation\"></a>Aggregation</h2><p>A special type of association. It represents a “part of” relationship.</p>\n<ul>\n<li>Class2 is part of Class1.</li>\n<li>Many instances(denoted by the *) of Class2 can be associated with Class1</li>\n<li>Objects of Class1 and Class2 have separate lifetimes</li>\n<li><strong>A solid line with an unfilled diamond at the association end connected to the class of composite</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classDiagram</span><br><span class=\"line\">Class1 o-- Class2</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"Composition\"><a href=\"#Composition\" class=\"headerlink\" title=\"Composition\"></a>Composition</h2><p>A special type of aggregation <strong>where parts are destroyed when the whole is destroyed.</strong></p>\n<ul>\n<li>Objects of Class2 live and die with Class1</li>\n<li>Class2 cannot stand by itself</li>\n<li><strong>A solid line with a filled diamond at the association connected to the class of composite</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classDiagram</span><br><span class=\"line\">Class1 *-- Class2</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"Dependency\"><a href=\"#Dependency\" class=\"headerlink\" title=\"Dependency\"></a>Dependency</h2><ul>\n<li>Exists between two classes if the changes to the definition of one may cause changes to the other (but not the other way around)</li>\n<li>Class1 depends on Class2</li>\n<li>A dashed line with an open arrow</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classDiagram</span><br><span class=\"line\">Class1 ..&gt; Class2</span><br></pre></td></tr></table></figure>"},{"title":"vim","date":"2020-01-05T13:38:32.000Z","_content":"\nsummary vim skills from vim official tutor\n\n<!-- more -->\n\n# Lesson 1, 2\n\n- to insert or append text type:\n\n  i\ttype inserted text: insert before the cursor\n\n  A\ttype appended text: append after the line\n\n- to delete the character at the cursor type: `x`\n\n- type `dw` to delete a word\n\n- type `d$` to delete to the end of the line\n- many commands that change are made from an operator and a motion, a short list of motions:\n  - w - until the start of the next word, EXCLUDING its first character.\n  - e - to the end of the current word, INCLUDING the last character.\n  - $ - to the end of the line, INCLUDING the last character.\n\n---\n\nLesson 2 SUMMARY\n\n1. To delete from the cursor up to the next word type: `dw`\n\n2. To delete from the cursor to the end of a line type: `d$`\n\n3. To delete a whole line type: `dd`\n\n4. To repeat a motion prepend it with a number: `2w`\n\n5. The format for a change command is:\n\n   ```markdown\n   \toperator [number] motion\n   where:\n   \toperation - is what to do, such as d for delete\n   \t[number] - is an optional count to repeat the motion\n   \tmotion - moves over the text to operate on such as w(word), $(to the end of line), etc.\n   \n   ```\n\n6. To move to the start of the line use a zero: 0\n\n7. To undo previous actions, type: u (lowercase u)\n\n   To undo all the changes on a line, type: U(capital U)q\n\n   To undo the undo's, type: CTRL-R(lowercase is ok)\n\n---\n\nLesson 3 SUMMARY\n\n1. To **put back text** that has just been deleted, type `p`(e.g., `dd` delete the aimed text and put it in the vim register).\n\n   This puts the deleted the text AFTER the cursor(if a line was deleted it will go on the line below the cursor)\n\n2. To **replace** the character under the cursor, type `r` and then the character you want to have there.\n\n3. The change operator allows you to change from the cursor to where the motion takes you.\n\n   eg. Type `ce` to change from the cursor to the end of the word, `c$` to change to the end of a line.\n\n4. The format for change is:\n\n   ```markdown\n   c  [number]  motion\n   ```\n\n---\n\nLesson 4 SUMMARY\n\nthis lesson is very helpful...\n\n1. `CTRL-G` displays your location in the file and the file status.\n\n   ​\t\t\t   `G` moves to the end of the file.\n\n   `number G` moves to that line number.\n\n   ​\t\t\t\t`gg` moves to the first line.\n\n2. Typing `/` followed by a phrase searches FORWARD for the phrase.\n\n   Typing `?` followed by a phrase searches BACKWARD for the phrase.\n\n   After a search type `n` to find the next occurrence int th e same direction or `N` to search in the opposite direction.\n\n   `CTRL-O` takes you back to older positions,  `CTRL-I` to newer positions.\n\n3. Typing `%` while the cursor is on a (, ), [, ], {, or } goes to its match.\n\n4. To substitute new for the first old in a line type `:s/old/new`\n\n   To substitute new for all \\'old's on a line type `:s/old/new/g`\n\n   To substitute phrases between two line #'s type `:s/#,#s/old/new/g`\n\n   To substitute all occurrences in the file type `:%s/old/new/g`\n\n   To ask for confirmation each time add \\'c' :`%s/old/new/gc`\n\n   note: 'g' means *global*\n\n   ---\n\n   ","source":"_posts/vim.md","raw":"---\ntitle: vim\ndate: 2020-01-05 21:38:32\ncategories: Utils\ntags: vim\n---\n\nsummary vim skills from vim official tutor\n\n<!-- more -->\n\n# Lesson 1, 2\n\n- to insert or append text type:\n\n  i\ttype inserted text: insert before the cursor\n\n  A\ttype appended text: append after the line\n\n- to delete the character at the cursor type: `x`\n\n- type `dw` to delete a word\n\n- type `d$` to delete to the end of the line\n- many commands that change are made from an operator and a motion, a short list of motions:\n  - w - until the start of the next word, EXCLUDING its first character.\n  - e - to the end of the current word, INCLUDING the last character.\n  - $ - to the end of the line, INCLUDING the last character.\n\n---\n\nLesson 2 SUMMARY\n\n1. To delete from the cursor up to the next word type: `dw`\n\n2. To delete from the cursor to the end of a line type: `d$`\n\n3. To delete a whole line type: `dd`\n\n4. To repeat a motion prepend it with a number: `2w`\n\n5. The format for a change command is:\n\n   ```markdown\n   \toperator [number] motion\n   where:\n   \toperation - is what to do, such as d for delete\n   \t[number] - is an optional count to repeat the motion\n   \tmotion - moves over the text to operate on such as w(word), $(to the end of line), etc.\n   \n   ```\n\n6. To move to the start of the line use a zero: 0\n\n7. To undo previous actions, type: u (lowercase u)\n\n   To undo all the changes on a line, type: U(capital U)q\n\n   To undo the undo's, type: CTRL-R(lowercase is ok)\n\n---\n\nLesson 3 SUMMARY\n\n1. To **put back text** that has just been deleted, type `p`(e.g., `dd` delete the aimed text and put it in the vim register).\n\n   This puts the deleted the text AFTER the cursor(if a line was deleted it will go on the line below the cursor)\n\n2. To **replace** the character under the cursor, type `r` and then the character you want to have there.\n\n3. The change operator allows you to change from the cursor to where the motion takes you.\n\n   eg. Type `ce` to change from the cursor to the end of the word, `c$` to change to the end of a line.\n\n4. The format for change is:\n\n   ```markdown\n   c  [number]  motion\n   ```\n\n---\n\nLesson 4 SUMMARY\n\nthis lesson is very helpful...\n\n1. `CTRL-G` displays your location in the file and the file status.\n\n   ​\t\t\t   `G` moves to the end of the file.\n\n   `number G` moves to that line number.\n\n   ​\t\t\t\t`gg` moves to the first line.\n\n2. Typing `/` followed by a phrase searches FORWARD for the phrase.\n\n   Typing `?` followed by a phrase searches BACKWARD for the phrase.\n\n   After a search type `n` to find the next occurrence int th e same direction or `N` to search in the opposite direction.\n\n   `CTRL-O` takes you back to older positions,  `CTRL-I` to newer positions.\n\n3. Typing `%` while the cursor is on a (, ), [, ], {, or } goes to its match.\n\n4. To substitute new for the first old in a line type `:s/old/new`\n\n   To substitute new for all \\'old's on a line type `:s/old/new/g`\n\n   To substitute phrases between two line #'s type `:s/#,#s/old/new/g`\n\n   To substitute all occurrences in the file type `:%s/old/new/g`\n\n   To ask for confirmation each time add \\'c' :`%s/old/new/gc`\n\n   note: 'g' means *global*\n\n   ---\n\n   ","slug":"vim","published":1,"updated":"2020-08-15T11:23:32.671Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgdp003tbyih2m9f9jux","content":"<p>summary vim skills from vim official tutor</p>\n<a id=\"more\"></a>\n\n<h1 id=\"Lesson-1-2\"><a href=\"#Lesson-1-2\" class=\"headerlink\" title=\"Lesson 1, 2\"></a>Lesson 1, 2</h1><ul>\n<li><p>to insert or append text type:</p>\n<p>i    type inserted text: insert before the cursor</p>\n<p>A    type appended text: append after the line</p>\n</li>\n<li><p>to delete the character at the cursor type: <code>x</code></p>\n</li>\n<li><p>type <code>dw</code> to delete a word</p>\n</li>\n<li><p>type <code>d$</code> to delete to the end of the line</p>\n</li>\n<li><p>many commands that change are made from an operator and a motion, a short list of motions:</p>\n<ul>\n<li>w - until the start of the next word, EXCLUDING its first character.</li>\n<li>e - to the end of the current word, INCLUDING the last character.</li>\n<li>$ - to the end of the line, INCLUDING the last character.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>Lesson 2 SUMMARY</p>\n<ol>\n<li><p>To delete from the cursor up to the next word type: <code>dw</code></p>\n</li>\n<li><p>To delete from the cursor to the end of a line type: <code>d$</code></p>\n</li>\n<li><p>To delete a whole line type: <code>dd</code></p>\n</li>\n<li><p>To repeat a motion prepend it with a number: <code>2w</code></p>\n</li>\n<li><p>The format for a change command is:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">    operator [number] motion</span></span><br><span class=\"line\"><span class=\"code\">where:</span></span><br><span class=\"line\"><span class=\"code\">    operation - is what to do, such as d for delete</span></span><br><span class=\"line\"><span class=\"code\">    [number] - is an optional count to repeat the motion</span></span><br><span class=\"line\"><span class=\"code\">    motion - moves over the text to operate on such as w(word), $(to the end of line), etc.</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>To move to the start of the line use a zero: 0</p>\n</li>\n<li><p>To undo previous actions, type: u (lowercase u)</p>\n<p>To undo all the changes on a line, type: U(capital U)q</p>\n<p>To undo the undo’s, type: CTRL-R(lowercase is ok)</p>\n</li>\n</ol>\n<hr>\n<p>Lesson 3 SUMMARY</p>\n<ol>\n<li><p>To <strong>put back text</strong> that has just been deleted, type <code>p</code>(e.g., <code>dd</code> delete the aimed text and put it in the vim register).</p>\n<p>This puts the deleted the text AFTER the cursor(if a line was deleted it will go on the line below the cursor)</p>\n</li>\n<li><p>To <strong>replace</strong> the character under the cursor, type <code>r</code> and then the character you want to have there.</p>\n</li>\n<li><p>The change operator allows you to change from the cursor to where the motion takes you.</p>\n<p>eg. Type <code>ce</code> to change from the cursor to the end of the word, <code>c$</code> to change to the end of a line.</p>\n</li>\n<li><p>The format for change is:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c  [number]  motion</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<hr>\n<p>Lesson 4 SUMMARY</p>\n<p>this lesson is very helpful…</p>\n<ol>\n<li><p><code>CTRL-G</code> displays your location in the file and the file status.</p>\n<p>​               <code>G</code> moves to the end of the file.</p>\n<p><code>number G</code> moves to that line number.</p>\n<p>​                <code>gg</code> moves to the first line.</p>\n</li>\n<li><p>Typing <code>/</code> followed by a phrase searches FORWARD for the phrase.</p>\n<p>Typing <code>?</code> followed by a phrase searches BACKWARD for the phrase.</p>\n<p>After a search type <code>n</code> to find the next occurrence int th e same direction or <code>N</code> to search in the opposite direction.</p>\n<p><code>CTRL-O</code> takes you back to older positions,  <code>CTRL-I</code> to newer positions.</p>\n</li>\n<li><p>Typing <code>%</code> while the cursor is on a (, ), [, ], {, or } goes to its match.</p>\n</li>\n<li><p>To substitute new for the first old in a line type <code>:s/old/new</code></p>\n<p>To substitute new for all &#39;old’s on a line type <code>:s/old/new/g</code></p>\n<p>To substitute phrases between two line #’s type <code>:s/#,#s/old/new/g</code></p>\n<p>To substitute all occurrences in the file type <code>:%s/old/new/g</code></p>\n<p>To ask for confirmation each time add &#39;c’ :<code>%s/old/new/gc</code></p>\n<p>note: ‘g’ means <em>global</em></p>\n<hr>\n</li>\n</ol>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>summary vim skills from vim official tutor</p>","more":"<h1 id=\"Lesson-1-2\"><a href=\"#Lesson-1-2\" class=\"headerlink\" title=\"Lesson 1, 2\"></a>Lesson 1, 2</h1><ul>\n<li><p>to insert or append text type:</p>\n<p>i    type inserted text: insert before the cursor</p>\n<p>A    type appended text: append after the line</p>\n</li>\n<li><p>to delete the character at the cursor type: <code>x</code></p>\n</li>\n<li><p>type <code>dw</code> to delete a word</p>\n</li>\n<li><p>type <code>d$</code> to delete to the end of the line</p>\n</li>\n<li><p>many commands that change are made from an operator and a motion, a short list of motions:</p>\n<ul>\n<li>w - until the start of the next word, EXCLUDING its first character.</li>\n<li>e - to the end of the current word, INCLUDING the last character.</li>\n<li>$ - to the end of the line, INCLUDING the last character.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>Lesson 2 SUMMARY</p>\n<ol>\n<li><p>To delete from the cursor up to the next word type: <code>dw</code></p>\n</li>\n<li><p>To delete from the cursor to the end of a line type: <code>d$</code></p>\n</li>\n<li><p>To delete a whole line type: <code>dd</code></p>\n</li>\n<li><p>To repeat a motion prepend it with a number: <code>2w</code></p>\n</li>\n<li><p>The format for a change command is:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">    operator [number] motion</span></span><br><span class=\"line\"><span class=\"code\">where:</span></span><br><span class=\"line\"><span class=\"code\">    operation - is what to do, such as d for delete</span></span><br><span class=\"line\"><span class=\"code\">    [number] - is an optional count to repeat the motion</span></span><br><span class=\"line\"><span class=\"code\">    motion - moves over the text to operate on such as w(word), $(to the end of line), etc.</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>To move to the start of the line use a zero: 0</p>\n</li>\n<li><p>To undo previous actions, type: u (lowercase u)</p>\n<p>To undo all the changes on a line, type: U(capital U)q</p>\n<p>To undo the undo’s, type: CTRL-R(lowercase is ok)</p>\n</li>\n</ol>\n<hr>\n<p>Lesson 3 SUMMARY</p>\n<ol>\n<li><p>To <strong>put back text</strong> that has just been deleted, type <code>p</code>(e.g., <code>dd</code> delete the aimed text and put it in the vim register).</p>\n<p>This puts the deleted the text AFTER the cursor(if a line was deleted it will go on the line below the cursor)</p>\n</li>\n<li><p>To <strong>replace</strong> the character under the cursor, type <code>r</code> and then the character you want to have there.</p>\n</li>\n<li><p>The change operator allows you to change from the cursor to where the motion takes you.</p>\n<p>eg. Type <code>ce</code> to change from the cursor to the end of the word, <code>c$</code> to change to the end of a line.</p>\n</li>\n<li><p>The format for change is:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c  [number]  motion</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<hr>\n<p>Lesson 4 SUMMARY</p>\n<p>this lesson is very helpful…</p>\n<ol>\n<li><p><code>CTRL-G</code> displays your location in the file and the file status.</p>\n<p>​               <code>G</code> moves to the end of the file.</p>\n<p><code>number G</code> moves to that line number.</p>\n<p>​                <code>gg</code> moves to the first line.</p>\n</li>\n<li><p>Typing <code>/</code> followed by a phrase searches FORWARD for the phrase.</p>\n<p>Typing <code>?</code> followed by a phrase searches BACKWARD for the phrase.</p>\n<p>After a search type <code>n</code> to find the next occurrence int th e same direction or <code>N</code> to search in the opposite direction.</p>\n<p><code>CTRL-O</code> takes you back to older positions,  <code>CTRL-I</code> to newer positions.</p>\n</li>\n<li><p>Typing <code>%</code> while the cursor is on a (, ), [, ], {, or } goes to its match.</p>\n</li>\n<li><p>To substitute new for the first old in a line type <code>:s/old/new</code></p>\n<p>To substitute new for all &#39;old’s on a line type <code>:s/old/new/g</code></p>\n<p>To substitute phrases between two line #’s type <code>:s/#,#s/old/new/g</code></p>\n<p>To substitute all occurrences in the file type <code>:%s/old/new/g</code></p>\n<p>To ask for confirmation each time add &#39;c’ :<code>%s/old/new/gc</code></p>\n<p>note: ‘g’ means <em>global</em></p>\n<hr>\n</li>\n</ol>"},{"title":"volatile","date":"2020-07-20T13:23:51.000Z","_content":"\n这个关键字用于将Java变量标记为`being stored in main memory`，意味着每次对volatile变量的读取都将从计算机内存中读取，而不是从CPU缓存中读取，并且对volatile变量的写入都将被写入主存而不是CPU缓存。\n\n<!--more-->\n\n# Visibility problems\n\n主要是多线程中的问题。线程在操作`非volatile`的变量时，出于性能原因，都会将变量从主存复制到CPU缓存中，如果计算机上有多个CPU，那么每个线程可能在不同的CPU上运行，每个线程可以将变量复制到不同的CPU缓存中。\n\n那么问题来了，对于`非volatile`的变量，无法保证Java虚拟机何时将数据从主存储器读取到CPU缓存中，或者何时将数据从CPU缓存写入到主存储器中，设想一种情况：多个线程访问一个共享对象，该对象包含一个计数器\n\n```java\npublic class ShareObject{\n    public int counter = 0;\n}\n```\n\n假设只有线程1会将计数器递增，同时线程1和线程2都会不时地访问它。\n\n如果counter不声明为`volatile`，就无法保证计数器的值从CPU缓存重写回主存，这就意味着主存的counter与CPU缓存的值可能不同！（JVM内存模型有没有）。这种因为没有被另一个线程回写到主存导致无法同步值的问题就叫做“Visibility problem”，**一个线程的更新对其他线程是不可见的**。\n\n# Visibility Guarantee\n\n关键字`volatile`的设定就是解决上面提到的可见性问题。通过声明counter变量为`volatile`的，所有对该变量更改都将立即回写到主存，同时所有对该变量的读操作也都会从主存中读取。下面是加了关键字`volatile`的例子：\n\n```java\npublic class ShareObject{\n    // 由于声明为volatile，因此更改变量对于其他线程的是可见的\n    public volatile int counter = 0 ;\n}\n```\n\n但是，目前仅是线程1更改，对线程2可见，要想线程1、2都更改，那么仅仅声明为`volatile`是不够的。\n\n## Full Visibility Guarantee\n\n实际上，关键字`volatile`的可见保证性超越了`volatile`变量本身。有点绕吧，可见保证性如下：\n\n- 如果线程A更改了`volatile`变量，并且线程B随后读取了它，则在写入`volatile`变量之前线程A可见的所有变量在线程B读取`volatile`变量后也将可见。\n\n- 如果线程A读取了一个`volatile`变量，则在读取那个变量时线程A可见的所有变量也将从主存中重新读取。\n\n看个代码例子：\n\n```java\npublic class MyClass{\n    private int years;\n    private int months;\n    private volatile int days;\n    \n    // 更改了三个变量，只有days是volatile的\n    public void update(int years, int months, int days){\n        this.years = year;\n        this.months = months;\n        this.days = days;    \n    }\n}\n```\n\n”Full Visibility Guarantee“意味着，当一个值被写入days，那么线程所有的可见的变量都会被写入主存，对于上面的例子来说，months和years也会被写入主存。读取他们的值时，可以这样：\n\n```java\npublic class MyClass{\n    private int years;\n    private int months;\n    private volatile int days;\n\n    public int totalDays(){\n        int total = this.days;\n        total += months * 30;\n        total += years * 365;\n        return total;   \n    }\n\n    public void update(int years, int months, int days){\n        this.years = years;\n        this.months = months;\n        this.days = days;\n    }\n}\n```\n\n着重观察*totalDays()*，他一开始会将`days`的值赋给变量`total` ,由于`days`的类型是`volatile`，所以，读取`days`的同时，其他变量（months、years）也都会从主存中读取，因此，这就是为什么可见保证性超过了`volatile`他本身，所以，对于本例甚至其他用到这个关键字的，都可以按照上面的顺序来保证读取到最新值（只给一个变量声明为`volatile`，读取时必须**最后**读取带有`volatile`属性的值）。\n\n# Instruction Reordering\n\n指令重排！！！出于性能原因，JVM和CPU是允许对程序中的指令进行重新排序，只要指令的语义含义保持不变即可。例如：\n\n```java\nint a = 1;\nint b = 2;\na++;\nb++;\n```\n\n这些指令可以重新排序为下列的顺序，且不会丢失原有程序的语义：\n\n```java\nint a  = 1;\na++;\nint b = 2;\nb++\n```\n\n然而，当变量属于`volatile`时，指令排序就需要小心了，看看下面的例子：\n\n```java\npublic class MyClass{\n    private int years;\n    private int months;\n    private volatile int days;\n    \n    public void update(int years, int months, int days){\n        this.years = years;\n        this.months = months;\n        this.days = days;\n    }\n}\n```\n\n如果JVM重排指令，像下面这样：\n\n```java\n    public void update(int years, int months, int days){\n        // 这里将days赋值动作放到了第一位\n        this.days = days;\n        this.years = years;\n        this.months = months;\n    }\n```\n\n当days的顺序变了，months和years的值就无法正确地展现给其他线程。接下来是如何解决这个问题。\n\n## Volatile Happens-Before Guarantee\n\n`volatile`关键字提供了一些“保证”，即不会去做的一些操作，以免出现意外。\n\n- 如果读/写其他变量出现在写`volatile变量`之前，那么就不能重排为出现在它之后。当然返回过是允许的。\n- 如果读/写其他变量出现在读`volatile变量`之后，那么就不能重排为出现在它之前。\n\n# Volatile is Not Always Enough\n\n很明显，在一开始counter的例子中存在这种情况，读取counter并赋值期间，存在多个线程的竞争状态，都赋值的话会覆盖彼此（往主存中），这时就得采用能保证`原子性`的操作了，如**syncronized**或者比并发包下的`lock`了。\n","source":"_posts/volatile.md","raw":"---\ntitle: volatile\ndate: 2020-07-20 21:23:51\ncategories: Java\ntags: lock\n---\n\n这个关键字用于将Java变量标记为`being stored in main memory`，意味着每次对volatile变量的读取都将从计算机内存中读取，而不是从CPU缓存中读取，并且对volatile变量的写入都将被写入主存而不是CPU缓存。\n\n<!--more-->\n\n# Visibility problems\n\n主要是多线程中的问题。线程在操作`非volatile`的变量时，出于性能原因，都会将变量从主存复制到CPU缓存中，如果计算机上有多个CPU，那么每个线程可能在不同的CPU上运行，每个线程可以将变量复制到不同的CPU缓存中。\n\n那么问题来了，对于`非volatile`的变量，无法保证Java虚拟机何时将数据从主存储器读取到CPU缓存中，或者何时将数据从CPU缓存写入到主存储器中，设想一种情况：多个线程访问一个共享对象，该对象包含一个计数器\n\n```java\npublic class ShareObject{\n    public int counter = 0;\n}\n```\n\n假设只有线程1会将计数器递增，同时线程1和线程2都会不时地访问它。\n\n如果counter不声明为`volatile`，就无法保证计数器的值从CPU缓存重写回主存，这就意味着主存的counter与CPU缓存的值可能不同！（JVM内存模型有没有）。这种因为没有被另一个线程回写到主存导致无法同步值的问题就叫做“Visibility problem”，**一个线程的更新对其他线程是不可见的**。\n\n# Visibility Guarantee\n\n关键字`volatile`的设定就是解决上面提到的可见性问题。通过声明counter变量为`volatile`的，所有对该变量更改都将立即回写到主存，同时所有对该变量的读操作也都会从主存中读取。下面是加了关键字`volatile`的例子：\n\n```java\npublic class ShareObject{\n    // 由于声明为volatile，因此更改变量对于其他线程的是可见的\n    public volatile int counter = 0 ;\n}\n```\n\n但是，目前仅是线程1更改，对线程2可见，要想线程1、2都更改，那么仅仅声明为`volatile`是不够的。\n\n## Full Visibility Guarantee\n\n实际上，关键字`volatile`的可见保证性超越了`volatile`变量本身。有点绕吧，可见保证性如下：\n\n- 如果线程A更改了`volatile`变量，并且线程B随后读取了它，则在写入`volatile`变量之前线程A可见的所有变量在线程B读取`volatile`变量后也将可见。\n\n- 如果线程A读取了一个`volatile`变量，则在读取那个变量时线程A可见的所有变量也将从主存中重新读取。\n\n看个代码例子：\n\n```java\npublic class MyClass{\n    private int years;\n    private int months;\n    private volatile int days;\n    \n    // 更改了三个变量，只有days是volatile的\n    public void update(int years, int months, int days){\n        this.years = year;\n        this.months = months;\n        this.days = days;    \n    }\n}\n```\n\n”Full Visibility Guarantee“意味着，当一个值被写入days，那么线程所有的可见的变量都会被写入主存，对于上面的例子来说，months和years也会被写入主存。读取他们的值时，可以这样：\n\n```java\npublic class MyClass{\n    private int years;\n    private int months;\n    private volatile int days;\n\n    public int totalDays(){\n        int total = this.days;\n        total += months * 30;\n        total += years * 365;\n        return total;   \n    }\n\n    public void update(int years, int months, int days){\n        this.years = years;\n        this.months = months;\n        this.days = days;\n    }\n}\n```\n\n着重观察*totalDays()*，他一开始会将`days`的值赋给变量`total` ,由于`days`的类型是`volatile`，所以，读取`days`的同时，其他变量（months、years）也都会从主存中读取，因此，这就是为什么可见保证性超过了`volatile`他本身，所以，对于本例甚至其他用到这个关键字的，都可以按照上面的顺序来保证读取到最新值（只给一个变量声明为`volatile`，读取时必须**最后**读取带有`volatile`属性的值）。\n\n# Instruction Reordering\n\n指令重排！！！出于性能原因，JVM和CPU是允许对程序中的指令进行重新排序，只要指令的语义含义保持不变即可。例如：\n\n```java\nint a = 1;\nint b = 2;\na++;\nb++;\n```\n\n这些指令可以重新排序为下列的顺序，且不会丢失原有程序的语义：\n\n```java\nint a  = 1;\na++;\nint b = 2;\nb++\n```\n\n然而，当变量属于`volatile`时，指令排序就需要小心了，看看下面的例子：\n\n```java\npublic class MyClass{\n    private int years;\n    private int months;\n    private volatile int days;\n    \n    public void update(int years, int months, int days){\n        this.years = years;\n        this.months = months;\n        this.days = days;\n    }\n}\n```\n\n如果JVM重排指令，像下面这样：\n\n```java\n    public void update(int years, int months, int days){\n        // 这里将days赋值动作放到了第一位\n        this.days = days;\n        this.years = years;\n        this.months = months;\n    }\n```\n\n当days的顺序变了，months和years的值就无法正确地展现给其他线程。接下来是如何解决这个问题。\n\n## Volatile Happens-Before Guarantee\n\n`volatile`关键字提供了一些“保证”，即不会去做的一些操作，以免出现意外。\n\n- 如果读/写其他变量出现在写`volatile变量`之前，那么就不能重排为出现在它之后。当然返回过是允许的。\n- 如果读/写其他变量出现在读`volatile变量`之后，那么就不能重排为出现在它之前。\n\n# Volatile is Not Always Enough\n\n很明显，在一开始counter的例子中存在这种情况，读取counter并赋值期间，存在多个线程的竞争状态，都赋值的话会覆盖彼此（往主存中），这时就得采用能保证`原子性`的操作了，如**syncronized**或者比并发包下的`lock`了。\n","slug":"volatile","published":1,"updated":"2020-07-20T13:26:07.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgdr003xbyih6sl4c0ju","content":"<p>这个关键字用于将Java变量标记为<code>being stored in main memory</code>，意味着每次对volatile变量的读取都将从计算机内存中读取，而不是从CPU缓存中读取，并且对volatile变量的写入都将被写入主存而不是CPU缓存。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"Visibility-problems\"><a href=\"#Visibility-problems\" class=\"headerlink\" title=\"Visibility problems\"></a>Visibility problems</h1><p>主要是多线程中的问题。线程在操作<code>非volatile</code>的变量时，出于性能原因，都会将变量从主存复制到CPU缓存中，如果计算机上有多个CPU，那么每个线程可能在不同的CPU上运行，每个线程可以将变量复制到不同的CPU缓存中。</p>\n<p>那么问题来了，对于<code>非volatile</code>的变量，无法保证Java虚拟机何时将数据从主存储器读取到CPU缓存中，或者何时将数据从CPU缓存写入到主存储器中，设想一种情况：多个线程访问一个共享对象，该对象包含一个计数器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShareObject</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>假设只有线程1会将计数器递增，同时线程1和线程2都会不时地访问它。</p>\n<p>如果counter不声明为<code>volatile</code>，就无法保证计数器的值从CPU缓存重写回主存，这就意味着主存的counter与CPU缓存的值可能不同！（JVM内存模型有没有）。这种因为没有被另一个线程回写到主存导致无法同步值的问题就叫做“Visibility problem”，<strong>一个线程的更新对其他线程是不可见的</strong>。</p>\n<h1 id=\"Visibility-Guarantee\"><a href=\"#Visibility-Guarantee\" class=\"headerlink\" title=\"Visibility Guarantee\"></a>Visibility Guarantee</h1><p>关键字<code>volatile</code>的设定就是解决上面提到的可见性问题。通过声明counter变量为<code>volatile</code>的，所有对该变量更改都将立即回写到主存，同时所有对该变量的读操作也都会从主存中读取。下面是加了关键字<code>volatile</code>的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShareObject</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 由于声明为volatile，因此更改变量对于其他线程的是可见的</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> counter = <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是，目前仅是线程1更改，对线程2可见，要想线程1、2都更改，那么仅仅声明为<code>volatile</code>是不够的。</p>\n<h2 id=\"Full-Visibility-Guarantee\"><a href=\"#Full-Visibility-Guarantee\" class=\"headerlink\" title=\"Full Visibility Guarantee\"></a>Full Visibility Guarantee</h2><p>实际上，关键字<code>volatile</code>的可见保证性超越了<code>volatile</code>变量本身。有点绕吧，可见保证性如下：</p>\n<ul>\n<li><p>如果线程A更改了<code>volatile</code>变量，并且线程B随后读取了它，则在写入<code>volatile</code>变量之前线程A可见的所有变量在线程B读取<code>volatile</code>变量后也将可见。</p>\n</li>\n<li><p>如果线程A读取了一个<code>volatile</code>变量，则在读取那个变量时线程A可见的所有变量也将从主存中重新读取。</p>\n</li>\n</ul>\n<p>看个代码例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> years;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> months;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> days;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 更改了三个变量，只有days是volatile的</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> years, <span class=\"keyword\">int</span> months, <span class=\"keyword\">int</span> days)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.years = year;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.months = months;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.days = days;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>”Full Visibility Guarantee“意味着，当一个值被写入days，那么线程所有的可见的变量都会被写入主存，对于上面的例子来说，months和years也会被写入主存。读取他们的值时，可以这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> years;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> months;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> days;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">totalDays</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> total = <span class=\"keyword\">this</span>.days;</span><br><span class=\"line\">        total += months * <span class=\"number\">30</span>;</span><br><span class=\"line\">        total += years * <span class=\"number\">365</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total;   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> years, <span class=\"keyword\">int</span> months, <span class=\"keyword\">int</span> days)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.years = years;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.months = months;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.days = days;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>着重观察<em>totalDays()<em>，他一开始会将<code>days</code>的值赋给变量<code>total</code> ,由于<code>days</code>的类型是<code>volatile</code>，所以，读取<code>days</code>的同时，其他变量（months、years）也都会从主存中读取，因此，这就是为什么可见保证性超过了<code>volatile</code>他本身，所以，对于本例甚至其他用到这个关键字的，都可以按照上面的顺序来保证读取到最新值（只给一个变量声明为<code>volatile</code>，读取时必须</em></em>最后**读取带有<code>volatile</code>属性的值）。</p>\n<h1 id=\"Instruction-Reordering\"><a href=\"#Instruction-Reordering\" class=\"headerlink\" title=\"Instruction Reordering\"></a>Instruction Reordering</h1><p>指令重排！！！出于性能原因，JVM和CPU是允许对程序中的指令进行重新排序，只要指令的语义含义保持不变即可。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">a++;</span><br><span class=\"line\">b++;</span><br></pre></td></tr></table></figure>\n\n<p>这些指令可以重新排序为下列的顺序，且不会丢失原有程序的语义：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a  = <span class=\"number\">1</span>;</span><br><span class=\"line\">a++;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">b++</span><br></pre></td></tr></table></figure>\n\n<p>然而，当变量属于<code>volatile</code>时，指令排序就需要小心了，看看下面的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> years;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> months;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> days;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> years, <span class=\"keyword\">int</span> months, <span class=\"keyword\">int</span> days)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.years = years;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.months = months;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.days = days;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果JVM重排指令，像下面这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> years, <span class=\"keyword\">int</span> months, <span class=\"keyword\">int</span> days)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里将days赋值动作放到了第一位</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.days = days;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.years = years;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.months = months;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当days的顺序变了，months和years的值就无法正确地展现给其他线程。接下来是如何解决这个问题。</p>\n<h2 id=\"Volatile-Happens-Before-Guarantee\"><a href=\"#Volatile-Happens-Before-Guarantee\" class=\"headerlink\" title=\"Volatile Happens-Before Guarantee\"></a>Volatile Happens-Before Guarantee</h2><p><code>volatile</code>关键字提供了一些“保证”，即不会去做的一些操作，以免出现意外。</p>\n<ul>\n<li>如果读/写其他变量出现在写<code>volatile变量</code>之前，那么就不能重排为出现在它之后。当然返回过是允许的。</li>\n<li>如果读/写其他变量出现在读<code>volatile变量</code>之后，那么就不能重排为出现在它之前。</li>\n</ul>\n<h1 id=\"Volatile-is-Not-Always-Enough\"><a href=\"#Volatile-is-Not-Always-Enough\" class=\"headerlink\" title=\"Volatile is Not Always Enough\"></a>Volatile is Not Always Enough</h1><p>很明显，在一开始counter的例子中存在这种情况，读取counter并赋值期间，存在多个线程的竞争状态，都赋值的话会覆盖彼此（往主存中），这时就得采用能保证<code>原子性</code>的操作了，如<strong>syncronized</strong>或者比并发包下的<code>lock</code>了。</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>这个关键字用于将Java变量标记为<code>being stored in main memory</code>，意味着每次对volatile变量的读取都将从计算机内存中读取，而不是从CPU缓存中读取，并且对volatile变量的写入都将被写入主存而不是CPU缓存。</p>","more":"<h1 id=\"Visibility-problems\"><a href=\"#Visibility-problems\" class=\"headerlink\" title=\"Visibility problems\"></a>Visibility problems</h1><p>主要是多线程中的问题。线程在操作<code>非volatile</code>的变量时，出于性能原因，都会将变量从主存复制到CPU缓存中，如果计算机上有多个CPU，那么每个线程可能在不同的CPU上运行，每个线程可以将变量复制到不同的CPU缓存中。</p>\n<p>那么问题来了，对于<code>非volatile</code>的变量，无法保证Java虚拟机何时将数据从主存储器读取到CPU缓存中，或者何时将数据从CPU缓存写入到主存储器中，设想一种情况：多个线程访问一个共享对象，该对象包含一个计数器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShareObject</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>假设只有线程1会将计数器递增，同时线程1和线程2都会不时地访问它。</p>\n<p>如果counter不声明为<code>volatile</code>，就无法保证计数器的值从CPU缓存重写回主存，这就意味着主存的counter与CPU缓存的值可能不同！（JVM内存模型有没有）。这种因为没有被另一个线程回写到主存导致无法同步值的问题就叫做“Visibility problem”，<strong>一个线程的更新对其他线程是不可见的</strong>。</p>\n<h1 id=\"Visibility-Guarantee\"><a href=\"#Visibility-Guarantee\" class=\"headerlink\" title=\"Visibility Guarantee\"></a>Visibility Guarantee</h1><p>关键字<code>volatile</code>的设定就是解决上面提到的可见性问题。通过声明counter变量为<code>volatile</code>的，所有对该变量更改都将立即回写到主存，同时所有对该变量的读操作也都会从主存中读取。下面是加了关键字<code>volatile</code>的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShareObject</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 由于声明为volatile，因此更改变量对于其他线程的是可见的</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> counter = <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是，目前仅是线程1更改，对线程2可见，要想线程1、2都更改，那么仅仅声明为<code>volatile</code>是不够的。</p>\n<h2 id=\"Full-Visibility-Guarantee\"><a href=\"#Full-Visibility-Guarantee\" class=\"headerlink\" title=\"Full Visibility Guarantee\"></a>Full Visibility Guarantee</h2><p>实际上，关键字<code>volatile</code>的可见保证性超越了<code>volatile</code>变量本身。有点绕吧，可见保证性如下：</p>\n<ul>\n<li><p>如果线程A更改了<code>volatile</code>变量，并且线程B随后读取了它，则在写入<code>volatile</code>变量之前线程A可见的所有变量在线程B读取<code>volatile</code>变量后也将可见。</p>\n</li>\n<li><p>如果线程A读取了一个<code>volatile</code>变量，则在读取那个变量时线程A可见的所有变量也将从主存中重新读取。</p>\n</li>\n</ul>\n<p>看个代码例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> years;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> months;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> days;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 更改了三个变量，只有days是volatile的</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> years, <span class=\"keyword\">int</span> months, <span class=\"keyword\">int</span> days)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.years = year;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.months = months;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.days = days;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>”Full Visibility Guarantee“意味着，当一个值被写入days，那么线程所有的可见的变量都会被写入主存，对于上面的例子来说，months和years也会被写入主存。读取他们的值时，可以这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> years;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> months;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> days;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">totalDays</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> total = <span class=\"keyword\">this</span>.days;</span><br><span class=\"line\">        total += months * <span class=\"number\">30</span>;</span><br><span class=\"line\">        total += years * <span class=\"number\">365</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total;   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> years, <span class=\"keyword\">int</span> months, <span class=\"keyword\">int</span> days)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.years = years;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.months = months;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.days = days;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>着重观察<em>totalDays()<em>，他一开始会将<code>days</code>的值赋给变量<code>total</code> ,由于<code>days</code>的类型是<code>volatile</code>，所以，读取<code>days</code>的同时，其他变量（months、years）也都会从主存中读取，因此，这就是为什么可见保证性超过了<code>volatile</code>他本身，所以，对于本例甚至其他用到这个关键字的，都可以按照上面的顺序来保证读取到最新值（只给一个变量声明为<code>volatile</code>，读取时必须</em></em>最后**读取带有<code>volatile</code>属性的值）。</p>\n<h1 id=\"Instruction-Reordering\"><a href=\"#Instruction-Reordering\" class=\"headerlink\" title=\"Instruction Reordering\"></a>Instruction Reordering</h1><p>指令重排！！！出于性能原因，JVM和CPU是允许对程序中的指令进行重新排序，只要指令的语义含义保持不变即可。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">a++;</span><br><span class=\"line\">b++;</span><br></pre></td></tr></table></figure>\n\n<p>这些指令可以重新排序为下列的顺序，且不会丢失原有程序的语义：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a  = <span class=\"number\">1</span>;</span><br><span class=\"line\">a++;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">b++</span><br></pre></td></tr></table></figure>\n\n<p>然而，当变量属于<code>volatile</code>时，指令排序就需要小心了，看看下面的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> years;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> months;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> days;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> years, <span class=\"keyword\">int</span> months, <span class=\"keyword\">int</span> days)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.years = years;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.months = months;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.days = days;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果JVM重排指令，像下面这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> years, <span class=\"keyword\">int</span> months, <span class=\"keyword\">int</span> days)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里将days赋值动作放到了第一位</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.days = days;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.years = years;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.months = months;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当days的顺序变了，months和years的值就无法正确地展现给其他线程。接下来是如何解决这个问题。</p>\n<h2 id=\"Volatile-Happens-Before-Guarantee\"><a href=\"#Volatile-Happens-Before-Guarantee\" class=\"headerlink\" title=\"Volatile Happens-Before Guarantee\"></a>Volatile Happens-Before Guarantee</h2><p><code>volatile</code>关键字提供了一些“保证”，即不会去做的一些操作，以免出现意外。</p>\n<ul>\n<li>如果读/写其他变量出现在写<code>volatile变量</code>之前，那么就不能重排为出现在它之后。当然返回过是允许的。</li>\n<li>如果读/写其他变量出现在读<code>volatile变量</code>之后，那么就不能重排为出现在它之前。</li>\n</ul>\n<h1 id=\"Volatile-is-Not-Always-Enough\"><a href=\"#Volatile-is-Not-Always-Enough\" class=\"headerlink\" title=\"Volatile is Not Always Enough\"></a>Volatile is Not Always Enough</h1><p>很明显，在一开始counter的例子中存在这种情况，读取counter并赋值期间，存在多个线程的竞争状态，都赋值的话会覆盖彼此（往主存中），这时就得采用能保证<code>原子性</code>的操作了，如<strong>syncronized</strong>或者比并发包下的<code>lock</code>了。</p>"},{"title":"vue01","date":"2020-01-17T04:55:47.000Z","_content":"\nvue learning... 渐进式JavaScript框架, [reference](https://cn.vuejs.org/v2/guide)\n\n<!-- more -->\n\n# 序\n\n渐进：声明式渲染->组件系统->客户端路由->集中式状态管理->项目构建\n\n# 使用\n\n### 原生JS：\n\n```js\n<div id=\"msg\"></div>\n<script type=\"text/javacript\">\n    var msg = 'Hello World';\n\tvar div = document.getElementById('msg');\n\tdiv.innerHTML = msg;\n</script>\n```\n\n---\n\n### jQuery：\n\n```javascript\n<div id=\"msg\"></div>\n<script type=\"text\"/javascript\" src=\"js/jquery.js\"></srcipt>\n<script type=\"text/javascript\">\n    var msg = 'Hello World';\n\t$('#msg').html(msg);\n</script>\n```\n\njQuery对原生进行封装。\n\n---\n\n### Vue.js:\n\n```javascript\n<div id=\"app\">\n    <div>{{msg}}</div>\n</div>\n<script type=\"text/javascript\" src=\"js/vue.js\"></script>\n<script type=\"text/javascript\">\n    new Vue({\n    \tel: '#app',\n    \tdata:{\n            msg: 'Hello world'\n        }\n})\n```\n\n#### 步骤：\n\n1. 需要提供标签用于填充数据\n2. 引入vue.js库文件\n3. 可以使用vue的语法做功能了\n4. 把vue提供的数据填充到标签里面\n\n不再涉及底层的DOM操作。\n\n#### 实例参数：\n\n- el：元素的挂载位置（一般是css选择器）\n- data：模型数据（值是一个对象）\n\n#### 差值表达式：\n\n- 将数据填充到html标签中\n- 差值表达式支持基本的计算操作（花括号中可是js运算）\n\n#### 编译：\n\nvue代码->vue框架->原生js代码\n\n---\n\n## 模板语法\n\n前端渲染：\n\n把数据填充到HTML标签中。\n\n- 原生js拼接字符串\n- 使用前段模板引擎\n- 使用vue特有的模板引擎\n\n语法概览：\n\n- 差值表达式\n- 指令\n- 事件绑定\n- 属性绑定\n- 样式绑定\n- 分支循环结构\n\n### 指令\n\n本质就是自定义属性，格式：以v-开始（比如：v-cloak）\n\n#### v-cloak\n\n- 差值表达式存在的问题：闪动\n- 使用该指令可以解决\n- 原理：先隐藏，替换好值之后再显示最终的值\n\n[reference](https://cn.vuejs.org/v2/api/#v-cloak)\n\n1. 提供样式\n2. 在差值表达式所在标签中添加v-cloak指令\n\n```javascript\n<style type=\"text/css\">\n    [v-cloak]{\n        display: none;\n    }\n</style>\n...\n<body>\n    <div id=\"app\">\n        <div v-cloak>{{msg}}</div>\n\t</div>\n</body>\n```\n\n#### v-text\n\n```javascript\n<div v-texxt='msg'><div>\n```\n\n效果跟差值表达式一样，但是没有差值表达式的闪动问题，用户体验更好。\n\n#### v-html\n\n填充HTML的片段。会解析。但是会有一定的危险性，容易导致`XSS`（跨站脚本攻击）。本网站内部数据可以使用，第三方的数据不可以用。\n\n```javascript\n<div v-html='msg1'></div>\n\ndata:{\n    msg1:'<h1>HTML</h1>'\n}\n```\n\n#### v-pre\n\n填充原始信息。例如：不解析花括号。跳过编译。\n\n```javascript\n<div v-pre>{{msgg}}</div>\n```\n\n#### 数据响应式\n\n- 如何理解\n  - html5中的响应式（屏幕尺寸变化导致样式的变化）\n  - 数据的响应式（数据的变化导致页面内容的变化）\n- 数据绑定：将数据填充到标签中\n- v-once：只编译一次，显示内容之后不再具有响应式功能\n\n响应式：f12后在控制台也可以修改数据，，例如：`vm.msg`，`vm.msg=123`。数据变化后页面也会跟着变化，数据驱动。\n\nv-once就是为了防止在控制台修改数据，这样可以提高性能。\n\n### 双向数据绑定\n\n双向：数据->页面，用户修改内容->影响模型数据\n\n#### v-model\n\n```js\n<div>\n    <input type=\"text\" v-model='msg'>\n</div>\n```\n\n#### MVVM\n\nM(model) : data中的数据，本质是plain javascript objects\n\nV(view) ： 视图，模板，本质是dom元素\n\nVM(View-Model)： 是两者的结合，控制能力。两者本不能直接交互，所以有了vue进封装（底层是DOM Listen, Data Bindings）。\n\n### 事件绑定\n\n#### v-on\n\n```js\n<input type='button' v-on:click='num++'/>\n\n<input type='button' @click='nunm++'/>\n```\n\n```js\n<div>{{num}}</div>\n<div>\n    <button v-on:click='num++'>click</button>\n</div>\n\ndata:{\n    num:0\n}\n```\n\n####  方法\n\n**methods**用来写方法，抽取“num++”放在方法中，增加可读性。\n\n```js\nmethods:{\n    handle: function(){\n        this.num++; //this means vue object vm.\n    }\n}\n```\n\n\n\n调用方式有两种\n\n- 直接绑定函数名称\n\n  ```js\n  <button v-on:click='say'>Hello</button>\n  ```\n\n  \n\n- 调用函数\n\n  ```js\n  <button v-on:click='say()'>Say hi</button>\n  ```\n\n  \n\n#### 事件函数传参\n\n普通参数和事件对象（event）\n\n```js\n<button v-on:click='say(\"hi\", $event)'>Say hi</button>\n```\n\n`$event`为固定写法。\n\n1. 如果事件直接绑定函数名称，那么会默认船体事件对象作为事件函数的第一个参数\n2. 如果事件绑定函数调用（没加括号），那么事件对象必须作为最后一个参数显示传递，并且事件对象的名称必须是`$event`。\n\n#### 事件修饰符\n\n- stop 阻止冒泡\n\n  ```js\n   <a v-on:click.stop=\"handle\">jump</a>\n  ```\n\n  \n\n- prevent 阻止默认行为\n\n  ```js\n  <a v-on:click.prevent=\"handle\">jump</a>\n  ```\n\n冒泡\n\n```js\n<div v-on:click='handle0'>\n    <button v-on:click='handle1'>click</button>\n</div>\n<div>\n    <a href=\"http://www.google.com\" v-on:click='handle2'>google</a>\n</div>\n\nmethods:{\n    handle0: function(){\n        this.num++;\n    },\n    handle1:function(event){\n        event.stopPropagation(); //traditional\n    },\n    handle2:function(event){\n        event.preventDefault();\n    }\n}\n```\n\n点击button后会冒泡，触发父元素的div中的`handle0`.\n\n传统的形式是`event.stopPropagation()`，在vue中可以使用`v-on:click.stop`。\n\n#### 按键修饰符\n\n用在键盘事件中进行过滤（指定），按键触发函数。\n\n- .enter\n\n  ```js\n  <input v-on:keyup.enter='submit'>\n  ```\n\n  \n\n- .delete\n\n  ```js\n  <input v-on:keyup.delete='handle'>\n  ```\n\n...\n\n#### 自定义按键修饰符\n\n```js\nVue.config.keyCodes.f1 = 112\n```\n\n```js\n<input type='text' v-on:keyup='handle'>\n\nmethods:{\n    handle:function(event){\n        console.log(event.keyCode)//利用keyCode自定义\n    }\n}\n\n<input type='text' v-on.keyup.65='handle'>\n    \n```\n\n\n\n### 计算器\n\n- 通过`v-model`指令实现数值之间的绑定\n- 给计算按钮绑定事件，实现计算逻辑\n- 将计算结果绑定对应位置\n\n```js\n <!DOCTYPE html>\n <html lang=\"en\">\n     <head>\n         <meta charset=\"UTF-8\">\n         <title>Document</title>\n     </head>\n     <body>\n         <div id=\"app\">\n             <h1>Simple Calculator</h1>\n             <div>\n                 <span>NUM A: </span>\n                 <span>\n                     <input type=\"text\" v-model='a'>\n                 </span>\n             </div>\n             <div>\n                 <span>NUM B: </span>\n                 <span>\n                     <input type=\"text\" v-model='b'>\n                 </span>\n             </div>\n             <div>\n                 <button v-on:click='handle'>CALCULATE</button>\n             </div>\n             <div>\n                 <span>SOLUTION:</span>\n                 <span v-text='result'></span>\n             </div>\n         </div>\n         <script type=\"text/javascript\" src=\"js/vue.js\"></script>\n         <script type=\"text/javascript\">\n             var vm = new Vue({\n                 el: '#app',\n                 data: {\n                     a: '',\n                     b: '',\n                     result: ''\n                 },\n                 methods: {\n                     handle: function(){\n \n                         this.result = parseInt(this.a) + parseInt(this.b);\n                     }\n                 }\n             });\n         </script>\n     </body>\n </html>\n```\n\n### 属性绑定\n\n#### v-bind\n\n```js\n<a v-bind:hreff='url'>jump</a>\n<a :href='url'>jump</a>\n```\n\n对比一下使用前后，\n\n使用前：\n\n```js\n<a href=\"www.google.com\">Google</a>\n```\n\n使用后：\n\n```js\n<a v-bind:href=\"url\">Google</a>\n\ndata:{\n    url: 'www.google.com'\n}\n```\n\n#### 双向绑定原理\n\nv-model的底层用到了`v-bind`.\n\n```js\n<input v-bind:value=\"msg\" v-on:input=\"msg=$event.target.value\">\n```\n\n```js\n<input type=\"text\" v-bind:value=\"msg\" v-on:input='handle'>\n    \ndata:{\n    msg: 'hello'\n},\nmethods: {\n    handle: function(event){\n        this.msg = event.target.value;\n    }\n}\n```\n\n\n\n### 样式绑定\n\n#### class样式处理\n\n对象语法：\n\n```js\n<div v-bind:class=\"{active: isActive}\"></div>\n```\n\n数组语法：\n\n```js\n<div v-bidn:class=\"[activeClass, errorClass]\"></div>\n```\n\n简化class绑定的值：\n\n```js\n<div v-bind:class='arrClasses'></div>\n\ndata:{\n    arrClasses:['active','error']\n}\n```\n\n```js\n<div v-bind:class='obejctClasses'></div>\n\ndata:{\n    objectClasses:{\n        active: true,\n        error: true\n    }\n}\nmethods: {\n    handle: function(){\n        this.objectClasses.error = false;\n    }\n}\n```\n\n全局定义的默认class会被保留，新绑定会和默认的结合在一起。\n\n#### style样式处理\n\n对象语法：\n\n```js\n<div v-bind:style=\"{color:activeColor, fontSize:fontsize}\"></div>\n```\n\n数组语法：\n\n```js\n<div v-bind:style=\"[basestyles, overridignstyles]\"></div>\n```\n\n### 分支结构\n\n- v-if 控制元素是否渲染到页面\n- v-else-if 同上\n- v-else 同上\n- v-show：控制元素样式是否显示 display:none。已经渲染到页面\n\n频繁的显示或隐藏：`v-show`\n\n### 循环结构\n\nv-for遍历数组\n\n```js\n<li v-for='item in list'>{{item}}</li>\n```\n\n```js\n<li v-for='(item, index) in list'>{{item}} + '---'+{{index}}</li>\n```\n\nkey来帮助Vue区分不同元素，从而提高性能。\n\n```js\n<li :key='item.id' v-for='(item, index) in list'>{{item}}+'--'+{{index}}</li>\n```\n\ne.g.\n\n```js\n<li v-for='item in frutits'>{{item}}</li>\n<li v-for='(item,index) in fruits'>{{item+'---'+index}}</li>\n\ndata:{\n    fruits:['apple','orange','banana']\n}\n```\n\n```js\n<li v-for='item in my fruits'>\n    <span>{{item.ename}}</span>\n\t<span>{{item.cname}}</span>\n</li>\n\ndata:{\n    myfrutis:[{\n        ename:'apple',\n        cname:'苹果'\n    }]\n}\n```\n\nv-for遍历对象：\n\n```js\n<div v-for='(value, key, index) in object'></div>\n```\n\n与`v-if`结合使用：\n\n```js\n<div v-if='value==12' v-for='(value, key, index) in object'></div>\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/vue01.md","raw":"---\ntitle: vue01\ndate: 2020-01-17 12:55:47\ncategories: Vue\ntags: vue\n---\n\nvue learning... 渐进式JavaScript框架, [reference](https://cn.vuejs.org/v2/guide)\n\n<!-- more -->\n\n# 序\n\n渐进：声明式渲染->组件系统->客户端路由->集中式状态管理->项目构建\n\n# 使用\n\n### 原生JS：\n\n```js\n<div id=\"msg\"></div>\n<script type=\"text/javacript\">\n    var msg = 'Hello World';\n\tvar div = document.getElementById('msg');\n\tdiv.innerHTML = msg;\n</script>\n```\n\n---\n\n### jQuery：\n\n```javascript\n<div id=\"msg\"></div>\n<script type=\"text\"/javascript\" src=\"js/jquery.js\"></srcipt>\n<script type=\"text/javascript\">\n    var msg = 'Hello World';\n\t$('#msg').html(msg);\n</script>\n```\n\njQuery对原生进行封装。\n\n---\n\n### Vue.js:\n\n```javascript\n<div id=\"app\">\n    <div>{{msg}}</div>\n</div>\n<script type=\"text/javascript\" src=\"js/vue.js\"></script>\n<script type=\"text/javascript\">\n    new Vue({\n    \tel: '#app',\n    \tdata:{\n            msg: 'Hello world'\n        }\n})\n```\n\n#### 步骤：\n\n1. 需要提供标签用于填充数据\n2. 引入vue.js库文件\n3. 可以使用vue的语法做功能了\n4. 把vue提供的数据填充到标签里面\n\n不再涉及底层的DOM操作。\n\n#### 实例参数：\n\n- el：元素的挂载位置（一般是css选择器）\n- data：模型数据（值是一个对象）\n\n#### 差值表达式：\n\n- 将数据填充到html标签中\n- 差值表达式支持基本的计算操作（花括号中可是js运算）\n\n#### 编译：\n\nvue代码->vue框架->原生js代码\n\n---\n\n## 模板语法\n\n前端渲染：\n\n把数据填充到HTML标签中。\n\n- 原生js拼接字符串\n- 使用前段模板引擎\n- 使用vue特有的模板引擎\n\n语法概览：\n\n- 差值表达式\n- 指令\n- 事件绑定\n- 属性绑定\n- 样式绑定\n- 分支循环结构\n\n### 指令\n\n本质就是自定义属性，格式：以v-开始（比如：v-cloak）\n\n#### v-cloak\n\n- 差值表达式存在的问题：闪动\n- 使用该指令可以解决\n- 原理：先隐藏，替换好值之后再显示最终的值\n\n[reference](https://cn.vuejs.org/v2/api/#v-cloak)\n\n1. 提供样式\n2. 在差值表达式所在标签中添加v-cloak指令\n\n```javascript\n<style type=\"text/css\">\n    [v-cloak]{\n        display: none;\n    }\n</style>\n...\n<body>\n    <div id=\"app\">\n        <div v-cloak>{{msg}}</div>\n\t</div>\n</body>\n```\n\n#### v-text\n\n```javascript\n<div v-texxt='msg'><div>\n```\n\n效果跟差值表达式一样，但是没有差值表达式的闪动问题，用户体验更好。\n\n#### v-html\n\n填充HTML的片段。会解析。但是会有一定的危险性，容易导致`XSS`（跨站脚本攻击）。本网站内部数据可以使用，第三方的数据不可以用。\n\n```javascript\n<div v-html='msg1'></div>\n\ndata:{\n    msg1:'<h1>HTML</h1>'\n}\n```\n\n#### v-pre\n\n填充原始信息。例如：不解析花括号。跳过编译。\n\n```javascript\n<div v-pre>{{msgg}}</div>\n```\n\n#### 数据响应式\n\n- 如何理解\n  - html5中的响应式（屏幕尺寸变化导致样式的变化）\n  - 数据的响应式（数据的变化导致页面内容的变化）\n- 数据绑定：将数据填充到标签中\n- v-once：只编译一次，显示内容之后不再具有响应式功能\n\n响应式：f12后在控制台也可以修改数据，，例如：`vm.msg`，`vm.msg=123`。数据变化后页面也会跟着变化，数据驱动。\n\nv-once就是为了防止在控制台修改数据，这样可以提高性能。\n\n### 双向数据绑定\n\n双向：数据->页面，用户修改内容->影响模型数据\n\n#### v-model\n\n```js\n<div>\n    <input type=\"text\" v-model='msg'>\n</div>\n```\n\n#### MVVM\n\nM(model) : data中的数据，本质是plain javascript objects\n\nV(view) ： 视图，模板，本质是dom元素\n\nVM(View-Model)： 是两者的结合，控制能力。两者本不能直接交互，所以有了vue进封装（底层是DOM Listen, Data Bindings）。\n\n### 事件绑定\n\n#### v-on\n\n```js\n<input type='button' v-on:click='num++'/>\n\n<input type='button' @click='nunm++'/>\n```\n\n```js\n<div>{{num}}</div>\n<div>\n    <button v-on:click='num++'>click</button>\n</div>\n\ndata:{\n    num:0\n}\n```\n\n####  方法\n\n**methods**用来写方法，抽取“num++”放在方法中，增加可读性。\n\n```js\nmethods:{\n    handle: function(){\n        this.num++; //this means vue object vm.\n    }\n}\n```\n\n\n\n调用方式有两种\n\n- 直接绑定函数名称\n\n  ```js\n  <button v-on:click='say'>Hello</button>\n  ```\n\n  \n\n- 调用函数\n\n  ```js\n  <button v-on:click='say()'>Say hi</button>\n  ```\n\n  \n\n#### 事件函数传参\n\n普通参数和事件对象（event）\n\n```js\n<button v-on:click='say(\"hi\", $event)'>Say hi</button>\n```\n\n`$event`为固定写法。\n\n1. 如果事件直接绑定函数名称，那么会默认船体事件对象作为事件函数的第一个参数\n2. 如果事件绑定函数调用（没加括号），那么事件对象必须作为最后一个参数显示传递，并且事件对象的名称必须是`$event`。\n\n#### 事件修饰符\n\n- stop 阻止冒泡\n\n  ```js\n   <a v-on:click.stop=\"handle\">jump</a>\n  ```\n\n  \n\n- prevent 阻止默认行为\n\n  ```js\n  <a v-on:click.prevent=\"handle\">jump</a>\n  ```\n\n冒泡\n\n```js\n<div v-on:click='handle0'>\n    <button v-on:click='handle1'>click</button>\n</div>\n<div>\n    <a href=\"http://www.google.com\" v-on:click='handle2'>google</a>\n</div>\n\nmethods:{\n    handle0: function(){\n        this.num++;\n    },\n    handle1:function(event){\n        event.stopPropagation(); //traditional\n    },\n    handle2:function(event){\n        event.preventDefault();\n    }\n}\n```\n\n点击button后会冒泡，触发父元素的div中的`handle0`.\n\n传统的形式是`event.stopPropagation()`，在vue中可以使用`v-on:click.stop`。\n\n#### 按键修饰符\n\n用在键盘事件中进行过滤（指定），按键触发函数。\n\n- .enter\n\n  ```js\n  <input v-on:keyup.enter='submit'>\n  ```\n\n  \n\n- .delete\n\n  ```js\n  <input v-on:keyup.delete='handle'>\n  ```\n\n...\n\n#### 自定义按键修饰符\n\n```js\nVue.config.keyCodes.f1 = 112\n```\n\n```js\n<input type='text' v-on:keyup='handle'>\n\nmethods:{\n    handle:function(event){\n        console.log(event.keyCode)//利用keyCode自定义\n    }\n}\n\n<input type='text' v-on.keyup.65='handle'>\n    \n```\n\n\n\n### 计算器\n\n- 通过`v-model`指令实现数值之间的绑定\n- 给计算按钮绑定事件，实现计算逻辑\n- 将计算结果绑定对应位置\n\n```js\n <!DOCTYPE html>\n <html lang=\"en\">\n     <head>\n         <meta charset=\"UTF-8\">\n         <title>Document</title>\n     </head>\n     <body>\n         <div id=\"app\">\n             <h1>Simple Calculator</h1>\n             <div>\n                 <span>NUM A: </span>\n                 <span>\n                     <input type=\"text\" v-model='a'>\n                 </span>\n             </div>\n             <div>\n                 <span>NUM B: </span>\n                 <span>\n                     <input type=\"text\" v-model='b'>\n                 </span>\n             </div>\n             <div>\n                 <button v-on:click='handle'>CALCULATE</button>\n             </div>\n             <div>\n                 <span>SOLUTION:</span>\n                 <span v-text='result'></span>\n             </div>\n         </div>\n         <script type=\"text/javascript\" src=\"js/vue.js\"></script>\n         <script type=\"text/javascript\">\n             var vm = new Vue({\n                 el: '#app',\n                 data: {\n                     a: '',\n                     b: '',\n                     result: ''\n                 },\n                 methods: {\n                     handle: function(){\n \n                         this.result = parseInt(this.a) + parseInt(this.b);\n                     }\n                 }\n             });\n         </script>\n     </body>\n </html>\n```\n\n### 属性绑定\n\n#### v-bind\n\n```js\n<a v-bind:hreff='url'>jump</a>\n<a :href='url'>jump</a>\n```\n\n对比一下使用前后，\n\n使用前：\n\n```js\n<a href=\"www.google.com\">Google</a>\n```\n\n使用后：\n\n```js\n<a v-bind:href=\"url\">Google</a>\n\ndata:{\n    url: 'www.google.com'\n}\n```\n\n#### 双向绑定原理\n\nv-model的底层用到了`v-bind`.\n\n```js\n<input v-bind:value=\"msg\" v-on:input=\"msg=$event.target.value\">\n```\n\n```js\n<input type=\"text\" v-bind:value=\"msg\" v-on:input='handle'>\n    \ndata:{\n    msg: 'hello'\n},\nmethods: {\n    handle: function(event){\n        this.msg = event.target.value;\n    }\n}\n```\n\n\n\n### 样式绑定\n\n#### class样式处理\n\n对象语法：\n\n```js\n<div v-bind:class=\"{active: isActive}\"></div>\n```\n\n数组语法：\n\n```js\n<div v-bidn:class=\"[activeClass, errorClass]\"></div>\n```\n\n简化class绑定的值：\n\n```js\n<div v-bind:class='arrClasses'></div>\n\ndata:{\n    arrClasses:['active','error']\n}\n```\n\n```js\n<div v-bind:class='obejctClasses'></div>\n\ndata:{\n    objectClasses:{\n        active: true,\n        error: true\n    }\n}\nmethods: {\n    handle: function(){\n        this.objectClasses.error = false;\n    }\n}\n```\n\n全局定义的默认class会被保留，新绑定会和默认的结合在一起。\n\n#### style样式处理\n\n对象语法：\n\n```js\n<div v-bind:style=\"{color:activeColor, fontSize:fontsize}\"></div>\n```\n\n数组语法：\n\n```js\n<div v-bind:style=\"[basestyles, overridignstyles]\"></div>\n```\n\n### 分支结构\n\n- v-if 控制元素是否渲染到页面\n- v-else-if 同上\n- v-else 同上\n- v-show：控制元素样式是否显示 display:none。已经渲染到页面\n\n频繁的显示或隐藏：`v-show`\n\n### 循环结构\n\nv-for遍历数组\n\n```js\n<li v-for='item in list'>{{item}}</li>\n```\n\n```js\n<li v-for='(item, index) in list'>{{item}} + '---'+{{index}}</li>\n```\n\nkey来帮助Vue区分不同元素，从而提高性能。\n\n```js\n<li :key='item.id' v-for='(item, index) in list'>{{item}}+'--'+{{index}}</li>\n```\n\ne.g.\n\n```js\n<li v-for='item in frutits'>{{item}}</li>\n<li v-for='(item,index) in fruits'>{{item+'---'+index}}</li>\n\ndata:{\n    fruits:['apple','orange','banana']\n}\n```\n\n```js\n<li v-for='item in my fruits'>\n    <span>{{item.ename}}</span>\n\t<span>{{item.cname}}</span>\n</li>\n\ndata:{\n    myfrutis:[{\n        ename:'apple',\n        cname:'苹果'\n    }]\n}\n```\n\nv-for遍历对象：\n\n```js\n<div v-for='(value, key, index) in object'></div>\n```\n\n与`v-if`结合使用：\n\n```js\n<div v-if='value==12' v-for='(value, key, index) in object'></div>\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"vue01","published":1,"updated":"2020-07-19T17:29:13.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgdu0040byihee681rji","content":"<p>vue learning… 渐进式JavaScript框架, <a href=\"https://cn.vuejs.org/v2/guide\">reference</a></p>\n<a id=\"more\"></a>\n\n<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><p>渐进：声明式渲染-&gt;组件系统-&gt;客户端路由-&gt;集中式状态管理-&gt;项目构建</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><h3 id=\"原生JS：\"><a href=\"#原生JS：\" class=\"headerlink\" title=\"原生JS：\"></a>原生JS：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">&quot;msg&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javacript&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> msg = <span class=\"string\">&#x27;Hello World&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;msg&#x27;</span>);</span><br><span class=\"line\">    div.innerHTML = msg;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"jQuery：\"><a href=\"#jQuery：\" class=\"headerlink\" title=\"jQuery：\"></a>jQuery：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">&quot;msg&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text&quot;</span>/javascript<span class=\"string\">&quot; src=&quot;</span>js/jquery.js<span class=\"string\">&quot;&gt;&lt;/srcipt&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;script type=&quot;</span>text/javascript<span class=\"string\">&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">    var msg = &#x27;Hello World&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">    $(&#x27;#msg&#x27;).html(msg);</span></span><br><span class=\"line\"><span class=\"string\">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>jQuery对原生进行封装。</p>\n<hr>\n<h3 id=\"Vue-js\"><a href=\"#Vue-js\" class=\"headerlink\" title=\"Vue.js:\"></a>Vue.js:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">&quot;app&quot;</span>&gt;</span><br><span class=\"line\">    &lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span> src=<span class=\"string\">&quot;js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">        data:&#123;</span><br><span class=\"line\">            msg: <span class=\"string\">&#x27;Hello world&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h4><ol>\n<li>需要提供标签用于填充数据</li>\n<li>引入vue.js库文件</li>\n<li>可以使用vue的语法做功能了</li>\n<li>把vue提供的数据填充到标签里面</li>\n</ol>\n<p>不再涉及底层的DOM操作。</p>\n<h4 id=\"实例参数：\"><a href=\"#实例参数：\" class=\"headerlink\" title=\"实例参数：\"></a>实例参数：</h4><ul>\n<li>el：元素的挂载位置（一般是css选择器）</li>\n<li>data：模型数据（值是一个对象）</li>\n</ul>\n<h4 id=\"差值表达式：\"><a href=\"#差值表达式：\" class=\"headerlink\" title=\"差值表达式：\"></a>差值表达式：</h4><ul>\n<li>将数据填充到html标签中</li>\n<li>差值表达式支持基本的计算操作（花括号中可是js运算）</li>\n</ul>\n<h4 id=\"编译：\"><a href=\"#编译：\" class=\"headerlink\" title=\"编译：\"></a>编译：</h4><p>vue代码-&gt;vue框架-&gt;原生js代码</p>\n<hr>\n<h2 id=\"模板语法\"><a href=\"#模板语法\" class=\"headerlink\" title=\"模板语法\"></a>模板语法</h2><p>前端渲染：</p>\n<p>把数据填充到HTML标签中。</p>\n<ul>\n<li>原生js拼接字符串</li>\n<li>使用前段模板引擎</li>\n<li>使用vue特有的模板引擎</li>\n</ul>\n<p>语法概览：</p>\n<ul>\n<li>差值表达式</li>\n<li>指令</li>\n<li>事件绑定</li>\n<li>属性绑定</li>\n<li>样式绑定</li>\n<li>分支循环结构</li>\n</ul>\n<h3 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h3><p>本质就是自定义属性，格式：以v-开始（比如：v-cloak）</p>\n<h4 id=\"v-cloak\"><a href=\"#v-cloak\" class=\"headerlink\" title=\"v-cloak\"></a>v-cloak</h4><ul>\n<li>差值表达式存在的问题：闪动</li>\n<li>使用该指令可以解决</li>\n<li>原理：先隐藏，替换好值之后再显示最终的值</li>\n</ul>\n<p><a href=\"https://cn.vuejs.org/v2/api/#v-cloak\">reference</a></p>\n<ol>\n<li>提供样式</li>\n<li>在差值表达式所在标签中添加v-cloak指令</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style type=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><br><span class=\"line\">    [v-cloak]&#123;</span><br><span class=\"line\">        display: none;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">&quot;app&quot;</span>&gt;</span><br><span class=\"line\">        &lt;div v-cloak&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"v-text\"><a href=\"#v-text\" class=\"headerlink\" title=\"v-text\"></a>v-text</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-texxt=<span class=\"string\">&#x27;msg&#x27;</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>效果跟差值表达式一样，但是没有差值表达式的闪动问题，用户体验更好。</p>\n<h4 id=\"v-html\"><a href=\"#v-html\" class=\"headerlink\" title=\"v-html\"></a>v-html</h4><p>填充HTML的片段。会解析。但是会有一定的危险性，容易导致<code>XSS</code>（跨站脚本攻击）。本网站内部数据可以使用，第三方的数据不可以用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-html=<span class=\"string\">&#x27;msg1&#x27;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data:&#123;</span><br><span class=\"line\">    msg1:<span class=\"string\">&#x27;&lt;h1&gt;HTML&lt;/h1&gt;&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"v-pre\"><a href=\"#v-pre\" class=\"headerlink\" title=\"v-pre\"></a>v-pre</h4><p>填充原始信息。例如：不解析花括号。跳过编译。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-pre&gt;&#123;&#123;msgg&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数据响应式\"><a href=\"#数据响应式\" class=\"headerlink\" title=\"数据响应式\"></a>数据响应式</h4><ul>\n<li>如何理解<ul>\n<li>html5中的响应式（屏幕尺寸变化导致样式的变化）</li>\n<li>数据的响应式（数据的变化导致页面内容的变化）</li>\n</ul>\n</li>\n<li>数据绑定：将数据填充到标签中</li>\n<li>v-once：只编译一次，显示内容之后不再具有响应式功能</li>\n</ul>\n<p>响应式：f12后在控制台也可以修改数据，，例如：<code>vm.msg</code>，<code>vm.msg=123</code>。数据变化后页面也会跟着变化，数据驱动。</p>\n<p>v-once就是为了防止在控制台修改数据，这样可以提高性能。</p>\n<h3 id=\"双向数据绑定\"><a href=\"#双向数据绑定\" class=\"headerlink\" title=\"双向数据绑定\"></a>双向数据绑定</h3><p>双向：数据-&gt;页面，用户修改内容-&gt;影响模型数据</p>\n<h4 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">&quot;text&quot;</span> v-model=<span class=\"string\">&#x27;msg&#x27;</span>&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MVVM\"><a href=\"#MVVM\" class=\"headerlink\" title=\"MVVM\"></a>MVVM</h4><p>M(model) : data中的数据，本质是plain javascript objects</p>\n<p>V(view) ： 视图，模板，本质是dom元素</p>\n<p>VM(View-Model)： 是两者的结合，控制能力。两者本不能直接交互，所以有了vue进封装（底层是DOM Listen, Data Bindings）。</p>\n<h3 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h3><h4 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a>v-on</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">&#x27;button&#x27;</span> v-on:click=<span class=\"string\">&#x27;num++&#x27;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input type=<span class=\"string\">&#x27;button&#x27;</span> @click=<span class=\"string\">&#x27;nunm++&#x27;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;&#123;&#123;num&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;button v-on:click=<span class=\"string\">&#x27;num++&#x27;</span>&gt;click&lt;/button&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data:&#123;</span><br><span class=\"line\">    num:<span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><p><strong>methods</strong>用来写方法，抽取“num++”放在方法中，增加可读性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    handle: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.num++; <span class=\"comment\">//this means vue object vm.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>调用方式有两种</p>\n<ul>\n<li><p>直接绑定函数名称</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button v-on:click=<span class=\"string\">&#x27;say&#x27;</span>&gt;Hello&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>调用函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button v-on:click=<span class=\"string\">&#x27;say()&#x27;</span>&gt;Say hi&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h4 id=\"事件函数传参\"><a href=\"#事件函数传参\" class=\"headerlink\" title=\"事件函数传参\"></a>事件函数传参</h4><p>普通参数和事件对象（event）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button v-on:click=<span class=\"string\">&#x27;say(&quot;hi&quot;, $event)&#x27;</span>&gt;Say hi&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>$event</code>为固定写法。</p>\n<ol>\n<li>如果事件直接绑定函数名称，那么会默认船体事件对象作为事件函数的第一个参数</li>\n<li>如果事件绑定函数调用（没加括号），那么事件对象必须作为最后一个参数显示传递，并且事件对象的名称必须是<code>$event</code>。</li>\n</ol>\n<h4 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h4><ul>\n<li><p>stop 阻止冒泡</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a v-on:click.stop=<span class=\"string\">&quot;handle&quot;</span>&gt;jump&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>prevent 阻止默认行为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a v-on:click.prevent=<span class=\"string\">&quot;handle&quot;</span>&gt;jump&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>冒泡</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-on:click=<span class=\"string\">&#x27;handle0&#x27;</span>&gt;</span><br><span class=\"line\">    &lt;button v-on:click=<span class=\"string\">&#x27;handle1&#x27;</span>&gt;click&lt;/button&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;a href=<span class=\"string\">&quot;http://www.google.com&quot;</span> v-on:click=<span class=\"string\">&#x27;handle2&#x27;</span>&gt;google&lt;/a&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    handle0: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.num++;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    handle1:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">        event.stopPropagation(); <span class=\"comment\">//traditional</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    handle2:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">        event.preventDefault();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>点击button后会冒泡，触发父元素的div中的<code>handle0</code>.</p>\n<p>传统的形式是<code>event.stopPropagation()</code>，在vue中可以使用<code>v-on:click.stop</code>。</p>\n<h4 id=\"按键修饰符\"><a href=\"#按键修饰符\" class=\"headerlink\" title=\"按键修饰符\"></a>按键修饰符</h4><p>用在键盘事件中进行过滤（指定），按键触发函数。</p>\n<ul>\n<li><p>.enter</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input v-on:keyup.enter=<span class=\"string\">&#x27;submit&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>.delete</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input v-on:keyup.delete=<span class=\"string\">&#x27;handle&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>…</p>\n<h4 id=\"自定义按键修饰符\"><a href=\"#自定义按键修饰符\" class=\"headerlink\" title=\"自定义按键修饰符\"></a>自定义按键修饰符</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.config.keyCodes.f1 = <span class=\"number\">112</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">&#x27;text&#x27;</span> v-on:keyup=<span class=\"string\">&#x27;handle&#x27;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    handle:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(event.keyCode)<span class=\"comment\">//利用keyCode自定义</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input type=<span class=\"string\">&#x27;text&#x27;</span> v-on.keyup<span class=\"number\">.65</span>=<span class=\"string\">&#x27;handle&#x27;</span>&gt;</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"计算器\"><a href=\"#计算器\" class=\"headerlink\" title=\"计算器\"></a>计算器</h3><ul>\n<li>通过<code>v-model</code>指令实现数值之间的绑定</li>\n<li>给计算按钮绑定事件，实现计算逻辑</li>\n<li>将计算结果绑定对应位置</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">&quot;en&quot;</span>&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta charset=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span><br><span class=\"line\">        &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;div id=<span class=\"string\">&quot;app&quot;</span>&gt;</span><br><span class=\"line\">            &lt;h1&gt;Simple Calculator&lt;/h1&gt;</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;span&gt;NUM A: &lt;/span&gt;</span><br><span class=\"line\">                &lt;span&gt;</span><br><span class=\"line\">                    &lt;input type=<span class=\"string\">&quot;text&quot;</span> v-model=<span class=\"string\">&#x27;a&#x27;</span>&gt;</span><br><span class=\"line\">                &lt;/span&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;span&gt;NUM B: &lt;/span&gt;</span><br><span class=\"line\">                &lt;span&gt;</span><br><span class=\"line\">                    &lt;input type=<span class=\"string\">&quot;text&quot;</span> v-model=<span class=\"string\">&#x27;b&#x27;</span>&gt;</span><br><span class=\"line\">                &lt;/span&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;button v-on:click=<span class=\"string\">&#x27;handle&#x27;</span>&gt;CALCULATE&lt;/button&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;span&gt;SOLUTION:&lt;/span&gt;</span><br><span class=\"line\">                &lt;span v-text=<span class=\"string\">&#x27;result&#x27;</span>&gt;&lt;/span&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span> src=<span class=\"string\">&quot;js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">        &lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">                el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">                data: &#123;</span><br><span class=\"line\">                    a: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">                    b: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">                    result: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                methods: &#123;</span><br><span class=\"line\">                    handle: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"built_in\">this</span>.result = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">this</span>.a) + <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">this</span>.b);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &lt;/script&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"属性绑定\"><a href=\"#属性绑定\" class=\"headerlink\" title=\"属性绑定\"></a>属性绑定</h3><h4 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a>v-bind</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a v-bind:hreff=<span class=\"string\">&#x27;url&#x27;</span>&gt;jump&lt;/a&gt;</span><br><span class=\"line\">&lt;a :href=<span class=\"string\">&#x27;url&#x27;</span>&gt;jump&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n\n<p>对比一下使用前后，</p>\n<p>使用前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=<span class=\"string\">&quot;www.google.com&quot;</span>&gt;Google&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n\n<p>使用后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a v-bind:href=<span class=\"string\">&quot;url&quot;</span>&gt;Google&lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data:&#123;</span><br><span class=\"line\">    url: <span class=\"string\">&#x27;www.google.com&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"双向绑定原理\"><a href=\"#双向绑定原理\" class=\"headerlink\" title=\"双向绑定原理\"></a>双向绑定原理</h4><p>v-model的底层用到了<code>v-bind</code>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input v-bind:value=<span class=\"string\">&quot;msg&quot;</span> v-on:input=<span class=\"string\">&quot;msg=$event.target.value&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">&quot;text&quot;</span> v-bind:value=<span class=\"string\">&quot;msg&quot;</span> v-on:input=<span class=\"string\">&#x27;handle&#x27;</span>&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">data:&#123;</span><br><span class=\"line\">    msg: <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    handle: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.msg = event.target.value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"样式绑定\"><a href=\"#样式绑定\" class=\"headerlink\" title=\"样式绑定\"></a>样式绑定</h3><h4 id=\"class样式处理\"><a href=\"#class样式处理\" class=\"headerlink\" title=\"class样式处理\"></a>class样式处理</h4><p>对象语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;&#123;active: isActive&#125;&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>数组语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-bidn:<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;[activeClass, errorClass]&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>简化class绑定的值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&#x27;arrClasses&#x27;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data:&#123;</span><br><span class=\"line\">    arrClasses:[<span class=\"string\">&#x27;active&#x27;</span>,<span class=\"string\">&#x27;error&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&#x27;obejctClasses&#x27;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data:&#123;</span><br><span class=\"line\">    objectClasses:&#123;</span><br><span class=\"line\">        active: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        error: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    handle: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.objectClasses.error = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>全局定义的默认class会被保留，新绑定会和默认的结合在一起。</p>\n<h4 id=\"style样式处理\"><a href=\"#style样式处理\" class=\"headerlink\" title=\"style样式处理\"></a>style样式处理</h4><p>对象语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:style=<span class=\"string\">&quot;&#123;color:activeColor, fontSize:fontsize&#125;&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>数组语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:style=<span class=\"string\">&quot;[basestyles, overridignstyles]&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分支结构\"><a href=\"#分支结构\" class=\"headerlink\" title=\"分支结构\"></a>分支结构</h3><ul>\n<li>v-if 控制元素是否渲染到页面</li>\n<li>v-else-if 同上</li>\n<li>v-else 同上</li>\n<li>v-show：控制元素样式是否显示 display:none。已经渲染到页面</li>\n</ul>\n<p>频繁的显示或隐藏：<code>v-show</code></p>\n<h3 id=\"循环结构\"><a href=\"#循环结构\" class=\"headerlink\" title=\"循环结构\"></a>循环结构</h3><p>v-for遍历数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li v-<span class=\"keyword\">for</span>=<span class=\"string\">&#x27;item in list&#x27;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li v-<span class=\"keyword\">for</span>=<span class=\"string\">&#x27;(item, index) in list&#x27;</span>&gt;&#123;&#123;item&#125;&#125; + <span class=\"string\">&#x27;---&#x27;</span>+&#123;&#123;index&#125;&#125;&lt;/li&gt;</span><br></pre></td></tr></table></figure>\n\n<p>key来帮助Vue区分不同元素，从而提高性能。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li :key=<span class=\"string\">&#x27;item.id&#x27;</span> v-<span class=\"keyword\">for</span>=<span class=\"string\">&#x27;(item, index) in list&#x27;</span>&gt;&#123;&#123;item&#125;&#125;+<span class=\"string\">&#x27;--&#x27;</span>+&#123;&#123;index&#125;&#125;&lt;/li&gt;</span><br></pre></td></tr></table></figure>\n\n<p>e.g.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li v-<span class=\"keyword\">for</span>=<span class=\"string\">&#x27;item in frutits&#x27;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class=\"line\">&lt;li v-<span class=\"keyword\">for</span>=<span class=\"string\">&#x27;(item,index) in fruits&#x27;</span>&gt;&#123;&#123;item+<span class=\"string\">&#x27;---&#x27;</span>+index&#125;&#125;&lt;/li&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data:&#123;</span><br><span class=\"line\">    fruits:[<span class=\"string\">&#x27;apple&#x27;</span>,<span class=\"string\">&#x27;orange&#x27;</span>,<span class=\"string\">&#x27;banana&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li v-<span class=\"keyword\">for</span>=<span class=\"string\">&#x27;item in my fruits&#x27;</span>&gt;</span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;item.ename&#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;item.cname&#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">&lt;/li&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data:&#123;</span><br><span class=\"line\">    myfrutis:[&#123;</span><br><span class=\"line\">        ename:<span class=\"string\">&#x27;apple&#x27;</span>,</span><br><span class=\"line\">        cname:<span class=\"string\">&#x27;苹果&#x27;</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>v-for遍历对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-<span class=\"keyword\">for</span>=<span class=\"string\">&#x27;(value, key, index) in object&#x27;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>与<code>v-if</code>结合使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-<span class=\"keyword\">if</span>=<span class=\"string\">&#x27;value==12&#x27;</span> v-<span class=\"keyword\">for</span>=<span class=\"string\">&#x27;(value, key, index) in object&#x27;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>vue learning… 渐进式JavaScript框架, <a href=\"https://cn.vuejs.org/v2/guide\">reference</a></p>","more":"<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><p>渐进：声明式渲染-&gt;组件系统-&gt;客户端路由-&gt;集中式状态管理-&gt;项目构建</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><h3 id=\"原生JS：\"><a href=\"#原生JS：\" class=\"headerlink\" title=\"原生JS：\"></a>原生JS：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">&quot;msg&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javacript&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> msg = <span class=\"string\">&#x27;Hello World&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;msg&#x27;</span>);</span><br><span class=\"line\">    div.innerHTML = msg;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"jQuery：\"><a href=\"#jQuery：\" class=\"headerlink\" title=\"jQuery：\"></a>jQuery：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">&quot;msg&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text&quot;</span>/javascript<span class=\"string\">&quot; src=&quot;</span>js/jquery.js<span class=\"string\">&quot;&gt;&lt;/srcipt&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;script type=&quot;</span>text/javascript<span class=\"string\">&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">    var msg = &#x27;Hello World&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">    $(&#x27;#msg&#x27;).html(msg);</span></span><br><span class=\"line\"><span class=\"string\">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>jQuery对原生进行封装。</p>\n<hr>\n<h3 id=\"Vue-js\"><a href=\"#Vue-js\" class=\"headerlink\" title=\"Vue.js:\"></a>Vue.js:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">&quot;app&quot;</span>&gt;</span><br><span class=\"line\">    &lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span> src=<span class=\"string\">&quot;js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">        data:&#123;</span><br><span class=\"line\">            msg: <span class=\"string\">&#x27;Hello world&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h4><ol>\n<li>需要提供标签用于填充数据</li>\n<li>引入vue.js库文件</li>\n<li>可以使用vue的语法做功能了</li>\n<li>把vue提供的数据填充到标签里面</li>\n</ol>\n<p>不再涉及底层的DOM操作。</p>\n<h4 id=\"实例参数：\"><a href=\"#实例参数：\" class=\"headerlink\" title=\"实例参数：\"></a>实例参数：</h4><ul>\n<li>el：元素的挂载位置（一般是css选择器）</li>\n<li>data：模型数据（值是一个对象）</li>\n</ul>\n<h4 id=\"差值表达式：\"><a href=\"#差值表达式：\" class=\"headerlink\" title=\"差值表达式：\"></a>差值表达式：</h4><ul>\n<li>将数据填充到html标签中</li>\n<li>差值表达式支持基本的计算操作（花括号中可是js运算）</li>\n</ul>\n<h4 id=\"编译：\"><a href=\"#编译：\" class=\"headerlink\" title=\"编译：\"></a>编译：</h4><p>vue代码-&gt;vue框架-&gt;原生js代码</p>\n<hr>\n<h2 id=\"模板语法\"><a href=\"#模板语法\" class=\"headerlink\" title=\"模板语法\"></a>模板语法</h2><p>前端渲染：</p>\n<p>把数据填充到HTML标签中。</p>\n<ul>\n<li>原生js拼接字符串</li>\n<li>使用前段模板引擎</li>\n<li>使用vue特有的模板引擎</li>\n</ul>\n<p>语法概览：</p>\n<ul>\n<li>差值表达式</li>\n<li>指令</li>\n<li>事件绑定</li>\n<li>属性绑定</li>\n<li>样式绑定</li>\n<li>分支循环结构</li>\n</ul>\n<h3 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h3><p>本质就是自定义属性，格式：以v-开始（比如：v-cloak）</p>\n<h4 id=\"v-cloak\"><a href=\"#v-cloak\" class=\"headerlink\" title=\"v-cloak\"></a>v-cloak</h4><ul>\n<li>差值表达式存在的问题：闪动</li>\n<li>使用该指令可以解决</li>\n<li>原理：先隐藏，替换好值之后再显示最终的值</li>\n</ul>\n<p><a href=\"https://cn.vuejs.org/v2/api/#v-cloak\">reference</a></p>\n<ol>\n<li>提供样式</li>\n<li>在差值表达式所在标签中添加v-cloak指令</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style type=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><br><span class=\"line\">    [v-cloak]&#123;</span><br><span class=\"line\">        display: none;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">&quot;app&quot;</span>&gt;</span><br><span class=\"line\">        &lt;div v-cloak&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"v-text\"><a href=\"#v-text\" class=\"headerlink\" title=\"v-text\"></a>v-text</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-texxt=<span class=\"string\">&#x27;msg&#x27;</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>效果跟差值表达式一样，但是没有差值表达式的闪动问题，用户体验更好。</p>\n<h4 id=\"v-html\"><a href=\"#v-html\" class=\"headerlink\" title=\"v-html\"></a>v-html</h4><p>填充HTML的片段。会解析。但是会有一定的危险性，容易导致<code>XSS</code>（跨站脚本攻击）。本网站内部数据可以使用，第三方的数据不可以用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-html=<span class=\"string\">&#x27;msg1&#x27;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data:&#123;</span><br><span class=\"line\">    msg1:<span class=\"string\">&#x27;&lt;h1&gt;HTML&lt;/h1&gt;&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"v-pre\"><a href=\"#v-pre\" class=\"headerlink\" title=\"v-pre\"></a>v-pre</h4><p>填充原始信息。例如：不解析花括号。跳过编译。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-pre&gt;&#123;&#123;msgg&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数据响应式\"><a href=\"#数据响应式\" class=\"headerlink\" title=\"数据响应式\"></a>数据响应式</h4><ul>\n<li>如何理解<ul>\n<li>html5中的响应式（屏幕尺寸变化导致样式的变化）</li>\n<li>数据的响应式（数据的变化导致页面内容的变化）</li>\n</ul>\n</li>\n<li>数据绑定：将数据填充到标签中</li>\n<li>v-once：只编译一次，显示内容之后不再具有响应式功能</li>\n</ul>\n<p>响应式：f12后在控制台也可以修改数据，，例如：<code>vm.msg</code>，<code>vm.msg=123</code>。数据变化后页面也会跟着变化，数据驱动。</p>\n<p>v-once就是为了防止在控制台修改数据，这样可以提高性能。</p>\n<h3 id=\"双向数据绑定\"><a href=\"#双向数据绑定\" class=\"headerlink\" title=\"双向数据绑定\"></a>双向数据绑定</h3><p>双向：数据-&gt;页面，用户修改内容-&gt;影响模型数据</p>\n<h4 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">&quot;text&quot;</span> v-model=<span class=\"string\">&#x27;msg&#x27;</span>&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MVVM\"><a href=\"#MVVM\" class=\"headerlink\" title=\"MVVM\"></a>MVVM</h4><p>M(model) : data中的数据，本质是plain javascript objects</p>\n<p>V(view) ： 视图，模板，本质是dom元素</p>\n<p>VM(View-Model)： 是两者的结合，控制能力。两者本不能直接交互，所以有了vue进封装（底层是DOM Listen, Data Bindings）。</p>\n<h3 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h3><h4 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a>v-on</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">&#x27;button&#x27;</span> v-on:click=<span class=\"string\">&#x27;num++&#x27;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input type=<span class=\"string\">&#x27;button&#x27;</span> @click=<span class=\"string\">&#x27;nunm++&#x27;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;&#123;&#123;num&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;button v-on:click=<span class=\"string\">&#x27;num++&#x27;</span>&gt;click&lt;/button&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data:&#123;</span><br><span class=\"line\">    num:<span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><p><strong>methods</strong>用来写方法，抽取“num++”放在方法中，增加可读性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    handle: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.num++; <span class=\"comment\">//this means vue object vm.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>调用方式有两种</p>\n<ul>\n<li><p>直接绑定函数名称</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button v-on:click=<span class=\"string\">&#x27;say&#x27;</span>&gt;Hello&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>调用函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button v-on:click=<span class=\"string\">&#x27;say()&#x27;</span>&gt;Say hi&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h4 id=\"事件函数传参\"><a href=\"#事件函数传参\" class=\"headerlink\" title=\"事件函数传参\"></a>事件函数传参</h4><p>普通参数和事件对象（event）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button v-on:click=<span class=\"string\">&#x27;say(&quot;hi&quot;, $event)&#x27;</span>&gt;Say hi&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>$event</code>为固定写法。</p>\n<ol>\n<li>如果事件直接绑定函数名称，那么会默认船体事件对象作为事件函数的第一个参数</li>\n<li>如果事件绑定函数调用（没加括号），那么事件对象必须作为最后一个参数显示传递，并且事件对象的名称必须是<code>$event</code>。</li>\n</ol>\n<h4 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h4><ul>\n<li><p>stop 阻止冒泡</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a v-on:click.stop=<span class=\"string\">&quot;handle&quot;</span>&gt;jump&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>prevent 阻止默认行为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a v-on:click.prevent=<span class=\"string\">&quot;handle&quot;</span>&gt;jump&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>冒泡</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-on:click=<span class=\"string\">&#x27;handle0&#x27;</span>&gt;</span><br><span class=\"line\">    &lt;button v-on:click=<span class=\"string\">&#x27;handle1&#x27;</span>&gt;click&lt;/button&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;a href=<span class=\"string\">&quot;http://www.google.com&quot;</span> v-on:click=<span class=\"string\">&#x27;handle2&#x27;</span>&gt;google&lt;/a&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    handle0: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.num++;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    handle1:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">        event.stopPropagation(); <span class=\"comment\">//traditional</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    handle2:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">        event.preventDefault();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>点击button后会冒泡，触发父元素的div中的<code>handle0</code>.</p>\n<p>传统的形式是<code>event.stopPropagation()</code>，在vue中可以使用<code>v-on:click.stop</code>。</p>\n<h4 id=\"按键修饰符\"><a href=\"#按键修饰符\" class=\"headerlink\" title=\"按键修饰符\"></a>按键修饰符</h4><p>用在键盘事件中进行过滤（指定），按键触发函数。</p>\n<ul>\n<li><p>.enter</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input v-on:keyup.enter=<span class=\"string\">&#x27;submit&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>.delete</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input v-on:keyup.delete=<span class=\"string\">&#x27;handle&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>…</p>\n<h4 id=\"自定义按键修饰符\"><a href=\"#自定义按键修饰符\" class=\"headerlink\" title=\"自定义按键修饰符\"></a>自定义按键修饰符</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.config.keyCodes.f1 = <span class=\"number\">112</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">&#x27;text&#x27;</span> v-on:keyup=<span class=\"string\">&#x27;handle&#x27;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    handle:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(event.keyCode)<span class=\"comment\">//利用keyCode自定义</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input type=<span class=\"string\">&#x27;text&#x27;</span> v-on.keyup<span class=\"number\">.65</span>=<span class=\"string\">&#x27;handle&#x27;</span>&gt;</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"计算器\"><a href=\"#计算器\" class=\"headerlink\" title=\"计算器\"></a>计算器</h3><ul>\n<li>通过<code>v-model</code>指令实现数值之间的绑定</li>\n<li>给计算按钮绑定事件，实现计算逻辑</li>\n<li>将计算结果绑定对应位置</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">&quot;en&quot;</span>&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta charset=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span><br><span class=\"line\">        &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;div id=<span class=\"string\">&quot;app&quot;</span>&gt;</span><br><span class=\"line\">            &lt;h1&gt;Simple Calculator&lt;/h1&gt;</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;span&gt;NUM A: &lt;/span&gt;</span><br><span class=\"line\">                &lt;span&gt;</span><br><span class=\"line\">                    &lt;input type=<span class=\"string\">&quot;text&quot;</span> v-model=<span class=\"string\">&#x27;a&#x27;</span>&gt;</span><br><span class=\"line\">                &lt;/span&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;span&gt;NUM B: &lt;/span&gt;</span><br><span class=\"line\">                &lt;span&gt;</span><br><span class=\"line\">                    &lt;input type=<span class=\"string\">&quot;text&quot;</span> v-model=<span class=\"string\">&#x27;b&#x27;</span>&gt;</span><br><span class=\"line\">                &lt;/span&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;button v-on:click=<span class=\"string\">&#x27;handle&#x27;</span>&gt;CALCULATE&lt;/button&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;span&gt;SOLUTION:&lt;/span&gt;</span><br><span class=\"line\">                &lt;span v-text=<span class=\"string\">&#x27;result&#x27;</span>&gt;&lt;/span&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span> src=<span class=\"string\">&quot;js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">        &lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">                el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">                data: &#123;</span><br><span class=\"line\">                    a: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">                    b: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">                    result: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                methods: &#123;</span><br><span class=\"line\">                    handle: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"built_in\">this</span>.result = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">this</span>.a) + <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">this</span>.b);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &lt;/script&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"属性绑定\"><a href=\"#属性绑定\" class=\"headerlink\" title=\"属性绑定\"></a>属性绑定</h3><h4 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a>v-bind</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a v-bind:hreff=<span class=\"string\">&#x27;url&#x27;</span>&gt;jump&lt;/a&gt;</span><br><span class=\"line\">&lt;a :href=<span class=\"string\">&#x27;url&#x27;</span>&gt;jump&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n\n<p>对比一下使用前后，</p>\n<p>使用前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=<span class=\"string\">&quot;www.google.com&quot;</span>&gt;Google&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n\n<p>使用后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a v-bind:href=<span class=\"string\">&quot;url&quot;</span>&gt;Google&lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data:&#123;</span><br><span class=\"line\">    url: <span class=\"string\">&#x27;www.google.com&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"双向绑定原理\"><a href=\"#双向绑定原理\" class=\"headerlink\" title=\"双向绑定原理\"></a>双向绑定原理</h4><p>v-model的底层用到了<code>v-bind</code>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input v-bind:value=<span class=\"string\">&quot;msg&quot;</span> v-on:input=<span class=\"string\">&quot;msg=$event.target.value&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">&quot;text&quot;</span> v-bind:value=<span class=\"string\">&quot;msg&quot;</span> v-on:input=<span class=\"string\">&#x27;handle&#x27;</span>&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">data:&#123;</span><br><span class=\"line\">    msg: <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    handle: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.msg = event.target.value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"样式绑定\"><a href=\"#样式绑定\" class=\"headerlink\" title=\"样式绑定\"></a>样式绑定</h3><h4 id=\"class样式处理\"><a href=\"#class样式处理\" class=\"headerlink\" title=\"class样式处理\"></a>class样式处理</h4><p>对象语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;&#123;active: isActive&#125;&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>数组语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-bidn:<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;[activeClass, errorClass]&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>简化class绑定的值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&#x27;arrClasses&#x27;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data:&#123;</span><br><span class=\"line\">    arrClasses:[<span class=\"string\">&#x27;active&#x27;</span>,<span class=\"string\">&#x27;error&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&#x27;obejctClasses&#x27;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data:&#123;</span><br><span class=\"line\">    objectClasses:&#123;</span><br><span class=\"line\">        active: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        error: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    handle: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.objectClasses.error = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>全局定义的默认class会被保留，新绑定会和默认的结合在一起。</p>\n<h4 id=\"style样式处理\"><a href=\"#style样式处理\" class=\"headerlink\" title=\"style样式处理\"></a>style样式处理</h4><p>对象语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:style=<span class=\"string\">&quot;&#123;color:activeColor, fontSize:fontsize&#125;&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>数组语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:style=<span class=\"string\">&quot;[basestyles, overridignstyles]&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分支结构\"><a href=\"#分支结构\" class=\"headerlink\" title=\"分支结构\"></a>分支结构</h3><ul>\n<li>v-if 控制元素是否渲染到页面</li>\n<li>v-else-if 同上</li>\n<li>v-else 同上</li>\n<li>v-show：控制元素样式是否显示 display:none。已经渲染到页面</li>\n</ul>\n<p>频繁的显示或隐藏：<code>v-show</code></p>\n<h3 id=\"循环结构\"><a href=\"#循环结构\" class=\"headerlink\" title=\"循环结构\"></a>循环结构</h3><p>v-for遍历数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li v-<span class=\"keyword\">for</span>=<span class=\"string\">&#x27;item in list&#x27;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li v-<span class=\"keyword\">for</span>=<span class=\"string\">&#x27;(item, index) in list&#x27;</span>&gt;&#123;&#123;item&#125;&#125; + <span class=\"string\">&#x27;---&#x27;</span>+&#123;&#123;index&#125;&#125;&lt;/li&gt;</span><br></pre></td></tr></table></figure>\n\n<p>key来帮助Vue区分不同元素，从而提高性能。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li :key=<span class=\"string\">&#x27;item.id&#x27;</span> v-<span class=\"keyword\">for</span>=<span class=\"string\">&#x27;(item, index) in list&#x27;</span>&gt;&#123;&#123;item&#125;&#125;+<span class=\"string\">&#x27;--&#x27;</span>+&#123;&#123;index&#125;&#125;&lt;/li&gt;</span><br></pre></td></tr></table></figure>\n\n<p>e.g.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li v-<span class=\"keyword\">for</span>=<span class=\"string\">&#x27;item in frutits&#x27;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class=\"line\">&lt;li v-<span class=\"keyword\">for</span>=<span class=\"string\">&#x27;(item,index) in fruits&#x27;</span>&gt;&#123;&#123;item+<span class=\"string\">&#x27;---&#x27;</span>+index&#125;&#125;&lt;/li&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data:&#123;</span><br><span class=\"line\">    fruits:[<span class=\"string\">&#x27;apple&#x27;</span>,<span class=\"string\">&#x27;orange&#x27;</span>,<span class=\"string\">&#x27;banana&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li v-<span class=\"keyword\">for</span>=<span class=\"string\">&#x27;item in my fruits&#x27;</span>&gt;</span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;item.ename&#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;item.cname&#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">&lt;/li&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data:&#123;</span><br><span class=\"line\">    myfrutis:[&#123;</span><br><span class=\"line\">        ename:<span class=\"string\">&#x27;apple&#x27;</span>,</span><br><span class=\"line\">        cname:<span class=\"string\">&#x27;苹果&#x27;</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>v-for遍历对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-<span class=\"keyword\">for</span>=<span class=\"string\">&#x27;(value, key, index) in object&#x27;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>与<code>v-if</code>结合使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-<span class=\"keyword\">if</span>=<span class=\"string\">&#x27;value==12&#x27;</span> v-<span class=\"keyword\">for</span>=<span class=\"string\">&#x27;(value, key, index) in object&#x27;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>"},{"title":"vue02","date":"2020-01-17T15:21:24.000Z","_content":"\nvue常用特性\n\n<!-- more -->\n\n# 序\n\n- 表单操作\n- 自定义指令\n- 计算属性\n- 过滤器\n- 侦听器\n- 生命周期 \n\n# 表单操作\n\n用户交互的时候用到表单操作。\n\n### 基于vue的表单操作\n\n- input单行文本\n- textarea多行文本\n- select下拉多选\n- radio单选框\n- checkbox多选框\n\n### 表单域修饰符\n\n- number: 转化为数值\n- trim: 去掉开始和结尾的空格\n- lazy: 将input事件切换为change事件\n\n```js\n<input v-model.number=\"age\" type=\"number\">\n```\n\nlazy使用场景：注册时校验用户名是否被注册过，当失去焦点时开始检测。\n\n### 自定义指令\n\n```js\n<input type=\"text\" v-focus>\n\nVue.directive('focus',{\n    inserted: funciton(el){\n    el.focus();\n}\n})\n```\n\n### 计算属性\n\n表达式的计算逻辑可能会比较复杂，使用计算属性可以使模板内容更加简洁。\n\n```js\n<div>{{reverseString}}\ndata:{\n    msg:'hello'\n},\ncomputed:{\n    reverseString: function(){\n        return this.msg.split('').reverse().join('');\n    }\n}\n```\n\n与方法的区别：缓存上的差异，方法不存在缓存。对于**同样的数据**，多次访问只用到一次的结果，而方法会执行两次。\n\n### 侦听器\n\n和计算属性类似，数据变化会通知侦听器绑定的方法。\n\n应用场景：异步或开交较大的操作。\n\n```js\nwatch:{\n    fisrName:function(val){\n        this.fullName = val + this.lastName;\n    },\n     lastName:function(vla){\n         this.fullName = this.firstName + val;\n     }\n}\n```\n\n#### 应用场景：验证用户名是否可用。\n\n- 通过`v-model`实现数据绑定\n- 需要提供提示信息\n- 需要侦听器监输入信息的变化\n- 需要修改触发的事件\n\n```js\n<body>\n    <div id=\"app\">\n        <div>\n            <span>username: </span>\n            <span>\n                <input type=\"text\" v-model.lazy='username'>\n            </span>\n            <span>{{tip}}</span>\n        </div>\n    </div>\n    <script type=\"text/javascript\" src=\"js/vue.js\"></script>\n    <script type=\"text/javascript\">\n\n        var vm = new Vue({\n            el: '#app',\n            data: {\n                username:'',\n                tip:''\n            },\n            methods:{\n                checkName:function(username){\n                    //接口调用，用定时任务的方式模拟接口调用\n                    var that = this;\n                    setTimeout(function(){\n                        if(username == 'admin'){\n                            that.tip = 'change it';\n                        }else{\n                            that.tip = 'ok';\n                        }\n                    },2000);\n                }\n            },\n            watch:{\n                username:function(val){//当数据变化时会触发\n                    //调用后台验证\n                    this.checkName(val);\n                    this.tip = 'checking...';\n                }\n            }\n        })\n    </script>\n</body>\n```\n\n### 过滤器\n\n#### 自定义过滤器（全局）\n\n```js\nVue.filter('filterName'function(value){\n    //logic...\n})\n```\n\n局部过滤器\n\n```js\nfilters:{\n    capitalize:function(){\n        ...\n    }\n}\n```\n\n使用\n\n```html\n<div>{{msg|upper}}</div>\n<div>{{msg|upper|lower}}</div> <!-- 级联 -->\n<div v-bind:id=\"id|formatId\"></div>\n```\n\n\n\n#### 带参数过滤器\n\n```js\nVue.filter('format',function(value, arg1){\n    \n})\n```\n\n使用\n\n```html\n<div>\n    {{date | format('yyyy-MM-dd')}}\n</div>\n```\n\n### 声明周期\n\n- 挂载\n- 更新\n- 销毁\n\n### 修改响应式数据\n\n```js\nVue.set(vm.items, indexOfItem, newValue)\n```\n\n```js\nvm.$set(vm.items, indexOfItem, newValue)\n```\n\n参数一表示要处理的数组名称，参数二表示要处理的数组索引，参数三表示要处理的数组的值。\n\n### library\n\n#### 变异方法\n\npush(), pop(), shift(), unshift(), splice(), sort(), reverse()\n\n#### 替换数组（生成新的数组）\n\nfilter(), concat(), slice()\n\n```js\nthis.list = this.list.slice(0,2)\n```\n\n#### 图书列表\n\n- 静态列效果\n- 基于数据实现模板效果\n- 处理每行的操作按钮\n\n#### 添加图书\n\n- 实现表单的静态效果\n- 添加图书表单域数据绑定\n- 添加按钮事件绑定\n- 实现添加业务逻辑\n\n#### 修改图书\n\n- 修改信息填充到表单\n- 修改后重新提交表单\n- 重用添加和修改的方法\n\n#### 常用特性应用\n\n- 过滤器（格式化日期）\n- 自定义指令（获取表单焦点）\n- 计算属性（统计图书数量）\n- 侦听器（验证图书存在性）\n- 生命周期（图书数据处理）  \n\n\n\n# library.html\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    <style type=\"text/css\">\n        .grid {\n            margin: auto;\n            width: 500px;\n            text-align: center;\n        }\n\n        .grid table {\n            width: 100%;\n            border-collapse: collapse;\n        }\n\n        .grid th,td {\n            padding: 10;\n            border: 1px dashed rgb(224, 182, 105);\n            height: 35px;\n            line-height: 35px;\n        }\n\n        .grid th {\n            background-color: rgb(255, 207, 117);\n        }\n\n        .grid .book {\n            padding-bottom: 10px;\n            padding-top: 5px;\n            background-color: rgb(236, 192, 111);\n        }\n        .grid .total{\n            height: 30px;\n            line-height: 30px;\n            border-top: 1px solid rgb(173, 139, 69);\n            background-color: rgb(196, 153, 75);\n        }\n    </style>\n</head>\n\n<body>\n    <div id=\"app\">\n        <div class=\"grid\">\n            <div>\n                <h1>图书管理</h1>\n                <div class=\"book\">\n                    <div>\n                        <label for=\"id\">\n                            编号:\n                        </label>\n                        <input type=\"text\" id=\"id\" v-model='id' :disabled='flag' v-focus>\n                        <label for=\"name\">\n                            名称:\n                        </label>\n                        <input type=\"text\" id=\"name\" v-model='name'>\n                        <button @click='handle' :disabled='isSubmit'>提交</button>\n                    </div>\n                </div>\n            </div>\n            <div class=\"total\">\n                <span>图书数量：</span>\n                <span>{{total}}</span>\n            </div>\n            <table>\n                <thead>\n                    <tr>\n                        <th>编号</th>\n                        <th>名称</th>\n                        <th>时间</th>\n                        <th>操作</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr :key='item.id' v-for='item in books'>\n                        <td>{{item.id}}</td>\n                        <td>{{item.name}}</td>\n                        <td>{{item.date}}</td>\n                        <td>\n                            <a href=\"\" @click.prevent='modify(item)'>修改</a>\n                            <span>|</span>\n                            <a href=\"\" @click.prevent='del(item)'>删除</a>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n    <script type=\"text/javascript\" src=\"js/vue.js\"></script>\n    <script type=\"text/javascript\">\n\n        Vue.directive('focus',{\n            inserted: function(el){\n                el.focus();\n            }\n        })\n        var vm = new Vue({\n            el: '#app',\n            data: {\n                isSubmit: false,\n                flag: false,\n                id: '',\n                name: '',\n                books: []\n            },\n            methods: {\n                handle: function () {\n                    var book = {};\n                    if (!this.flag) {\n                        book.id = this.id;\n                        book.name = this.name;\n\n                        book.date = '',\n                        this.books.push(book);\n                    } else {\n                        this.books.some((item) => {\n                            if (item.id == this.id) {\n                                item.name = this.name;\n                                return true;\n                            }\n                        }),\n                        this.flag = true;\n                    }\n                    this.id = '',\n                    this.name = ''\n\n                },\n                modify: function (itemin) {\n                    // this.id = books.id;\n                    // this.name = books.name\n                    this.flag = true;\n                    var book = this.books.filter(function (item) {\n                        return item.id == itemin.id\n                    })\n                    this.id = book[0].id;\n                    this.name = book[0].name;\n                },\n                del:function(itemin){\n                    // //查找索引\n                    // var index = this.books.findIndex(function(item){\n                    //     return item.id == itemin.id;\n                    // });\n                    // //删除\n                    // this.books.splice(index, 1);\n                    //method2 也可已通过filter来实现\n                    this.books = this.books.filter(function(item){\n                        return item.id != itemin.id;\n                    })\n\n                    this.id = '',\n                    this.name = '',\n                    this.flag = false;\n                }\n            },\n            computed:{\n                total:function(){\n                    return this.books.length;\n                }\n            },\n            watch:{\n                name: function(val){\n                    var flag = this.books.some(function(item){\n                        return item.name == val;\n                    });\n                    \n                    if(flag){\n                        this.isSubmit = true;\n                    }else{\n                        this.isSubmit = false;\n                    }\n                }\n            },\n            mounted: function(){\n                //一般用于获取后台数据，然后把数据填充到模板\n                var data = [{\n                    id: 1,\n                    name: '三国演义',\n                    date: ''\n                }, {\n                    id: 2,\n                    name: '水浒传',\n                    date: ''\n                }, {\n                    id: 3,\n                    name: '红楼梦',\n                    date: ''\n                }, {\n                    id: 4,\n                    name: '西游记',\n                    date: ''\n                }];\n                this.books = data;\n            }\n        })\n    </script>\n</body>\n\n</html>\n```\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/vue02.md","raw":"---\ntitle: vue02\ndate: 2020-01-17 23:21:24\ncategories: Vue\ntags: vue\n---\n\nvue常用特性\n\n<!-- more -->\n\n# 序\n\n- 表单操作\n- 自定义指令\n- 计算属性\n- 过滤器\n- 侦听器\n- 生命周期 \n\n# 表单操作\n\n用户交互的时候用到表单操作。\n\n### 基于vue的表单操作\n\n- input单行文本\n- textarea多行文本\n- select下拉多选\n- radio单选框\n- checkbox多选框\n\n### 表单域修饰符\n\n- number: 转化为数值\n- trim: 去掉开始和结尾的空格\n- lazy: 将input事件切换为change事件\n\n```js\n<input v-model.number=\"age\" type=\"number\">\n```\n\nlazy使用场景：注册时校验用户名是否被注册过，当失去焦点时开始检测。\n\n### 自定义指令\n\n```js\n<input type=\"text\" v-focus>\n\nVue.directive('focus',{\n    inserted: funciton(el){\n    el.focus();\n}\n})\n```\n\n### 计算属性\n\n表达式的计算逻辑可能会比较复杂，使用计算属性可以使模板内容更加简洁。\n\n```js\n<div>{{reverseString}}\ndata:{\n    msg:'hello'\n},\ncomputed:{\n    reverseString: function(){\n        return this.msg.split('').reverse().join('');\n    }\n}\n```\n\n与方法的区别：缓存上的差异，方法不存在缓存。对于**同样的数据**，多次访问只用到一次的结果，而方法会执行两次。\n\n### 侦听器\n\n和计算属性类似，数据变化会通知侦听器绑定的方法。\n\n应用场景：异步或开交较大的操作。\n\n```js\nwatch:{\n    fisrName:function(val){\n        this.fullName = val + this.lastName;\n    },\n     lastName:function(vla){\n         this.fullName = this.firstName + val;\n     }\n}\n```\n\n#### 应用场景：验证用户名是否可用。\n\n- 通过`v-model`实现数据绑定\n- 需要提供提示信息\n- 需要侦听器监输入信息的变化\n- 需要修改触发的事件\n\n```js\n<body>\n    <div id=\"app\">\n        <div>\n            <span>username: </span>\n            <span>\n                <input type=\"text\" v-model.lazy='username'>\n            </span>\n            <span>{{tip}}</span>\n        </div>\n    </div>\n    <script type=\"text/javascript\" src=\"js/vue.js\"></script>\n    <script type=\"text/javascript\">\n\n        var vm = new Vue({\n            el: '#app',\n            data: {\n                username:'',\n                tip:''\n            },\n            methods:{\n                checkName:function(username){\n                    //接口调用，用定时任务的方式模拟接口调用\n                    var that = this;\n                    setTimeout(function(){\n                        if(username == 'admin'){\n                            that.tip = 'change it';\n                        }else{\n                            that.tip = 'ok';\n                        }\n                    },2000);\n                }\n            },\n            watch:{\n                username:function(val){//当数据变化时会触发\n                    //调用后台验证\n                    this.checkName(val);\n                    this.tip = 'checking...';\n                }\n            }\n        })\n    </script>\n</body>\n```\n\n### 过滤器\n\n#### 自定义过滤器（全局）\n\n```js\nVue.filter('filterName'function(value){\n    //logic...\n})\n```\n\n局部过滤器\n\n```js\nfilters:{\n    capitalize:function(){\n        ...\n    }\n}\n```\n\n使用\n\n```html\n<div>{{msg|upper}}</div>\n<div>{{msg|upper|lower}}</div> <!-- 级联 -->\n<div v-bind:id=\"id|formatId\"></div>\n```\n\n\n\n#### 带参数过滤器\n\n```js\nVue.filter('format',function(value, arg1){\n    \n})\n```\n\n使用\n\n```html\n<div>\n    {{date | format('yyyy-MM-dd')}}\n</div>\n```\n\n### 声明周期\n\n- 挂载\n- 更新\n- 销毁\n\n### 修改响应式数据\n\n```js\nVue.set(vm.items, indexOfItem, newValue)\n```\n\n```js\nvm.$set(vm.items, indexOfItem, newValue)\n```\n\n参数一表示要处理的数组名称，参数二表示要处理的数组索引，参数三表示要处理的数组的值。\n\n### library\n\n#### 变异方法\n\npush(), pop(), shift(), unshift(), splice(), sort(), reverse()\n\n#### 替换数组（生成新的数组）\n\nfilter(), concat(), slice()\n\n```js\nthis.list = this.list.slice(0,2)\n```\n\n#### 图书列表\n\n- 静态列效果\n- 基于数据实现模板效果\n- 处理每行的操作按钮\n\n#### 添加图书\n\n- 实现表单的静态效果\n- 添加图书表单域数据绑定\n- 添加按钮事件绑定\n- 实现添加业务逻辑\n\n#### 修改图书\n\n- 修改信息填充到表单\n- 修改后重新提交表单\n- 重用添加和修改的方法\n\n#### 常用特性应用\n\n- 过滤器（格式化日期）\n- 自定义指令（获取表单焦点）\n- 计算属性（统计图书数量）\n- 侦听器（验证图书存在性）\n- 生命周期（图书数据处理）  \n\n\n\n# library.html\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    <style type=\"text/css\">\n        .grid {\n            margin: auto;\n            width: 500px;\n            text-align: center;\n        }\n\n        .grid table {\n            width: 100%;\n            border-collapse: collapse;\n        }\n\n        .grid th,td {\n            padding: 10;\n            border: 1px dashed rgb(224, 182, 105);\n            height: 35px;\n            line-height: 35px;\n        }\n\n        .grid th {\n            background-color: rgb(255, 207, 117);\n        }\n\n        .grid .book {\n            padding-bottom: 10px;\n            padding-top: 5px;\n            background-color: rgb(236, 192, 111);\n        }\n        .grid .total{\n            height: 30px;\n            line-height: 30px;\n            border-top: 1px solid rgb(173, 139, 69);\n            background-color: rgb(196, 153, 75);\n        }\n    </style>\n</head>\n\n<body>\n    <div id=\"app\">\n        <div class=\"grid\">\n            <div>\n                <h1>图书管理</h1>\n                <div class=\"book\">\n                    <div>\n                        <label for=\"id\">\n                            编号:\n                        </label>\n                        <input type=\"text\" id=\"id\" v-model='id' :disabled='flag' v-focus>\n                        <label for=\"name\">\n                            名称:\n                        </label>\n                        <input type=\"text\" id=\"name\" v-model='name'>\n                        <button @click='handle' :disabled='isSubmit'>提交</button>\n                    </div>\n                </div>\n            </div>\n            <div class=\"total\">\n                <span>图书数量：</span>\n                <span>{{total}}</span>\n            </div>\n            <table>\n                <thead>\n                    <tr>\n                        <th>编号</th>\n                        <th>名称</th>\n                        <th>时间</th>\n                        <th>操作</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr :key='item.id' v-for='item in books'>\n                        <td>{{item.id}}</td>\n                        <td>{{item.name}}</td>\n                        <td>{{item.date}}</td>\n                        <td>\n                            <a href=\"\" @click.prevent='modify(item)'>修改</a>\n                            <span>|</span>\n                            <a href=\"\" @click.prevent='del(item)'>删除</a>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n    <script type=\"text/javascript\" src=\"js/vue.js\"></script>\n    <script type=\"text/javascript\">\n\n        Vue.directive('focus',{\n            inserted: function(el){\n                el.focus();\n            }\n        })\n        var vm = new Vue({\n            el: '#app',\n            data: {\n                isSubmit: false,\n                flag: false,\n                id: '',\n                name: '',\n                books: []\n            },\n            methods: {\n                handle: function () {\n                    var book = {};\n                    if (!this.flag) {\n                        book.id = this.id;\n                        book.name = this.name;\n\n                        book.date = '',\n                        this.books.push(book);\n                    } else {\n                        this.books.some((item) => {\n                            if (item.id == this.id) {\n                                item.name = this.name;\n                                return true;\n                            }\n                        }),\n                        this.flag = true;\n                    }\n                    this.id = '',\n                    this.name = ''\n\n                },\n                modify: function (itemin) {\n                    // this.id = books.id;\n                    // this.name = books.name\n                    this.flag = true;\n                    var book = this.books.filter(function (item) {\n                        return item.id == itemin.id\n                    })\n                    this.id = book[0].id;\n                    this.name = book[0].name;\n                },\n                del:function(itemin){\n                    // //查找索引\n                    // var index = this.books.findIndex(function(item){\n                    //     return item.id == itemin.id;\n                    // });\n                    // //删除\n                    // this.books.splice(index, 1);\n                    //method2 也可已通过filter来实现\n                    this.books = this.books.filter(function(item){\n                        return item.id != itemin.id;\n                    })\n\n                    this.id = '',\n                    this.name = '',\n                    this.flag = false;\n                }\n            },\n            computed:{\n                total:function(){\n                    return this.books.length;\n                }\n            },\n            watch:{\n                name: function(val){\n                    var flag = this.books.some(function(item){\n                        return item.name == val;\n                    });\n                    \n                    if(flag){\n                        this.isSubmit = true;\n                    }else{\n                        this.isSubmit = false;\n                    }\n                }\n            },\n            mounted: function(){\n                //一般用于获取后台数据，然后把数据填充到模板\n                var data = [{\n                    id: 1,\n                    name: '三国演义',\n                    date: ''\n                }, {\n                    id: 2,\n                    name: '水浒传',\n                    date: ''\n                }, {\n                    id: 3,\n                    name: '红楼梦',\n                    date: ''\n                }, {\n                    id: 4,\n                    name: '西游记',\n                    date: ''\n                }];\n                this.books = data;\n            }\n        })\n    </script>\n</body>\n\n</html>\n```\n\n\n\n\n\n\n\n\n\n\n\n","slug":"vue02","published":1,"updated":"2020-07-19T17:29:13.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgdv0042byih8jvahtwi","content":"<p>vue常用特性</p>\n<a id=\"more\"></a>\n\n<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><ul>\n<li>表单操作</li>\n<li>自定义指令</li>\n<li>计算属性</li>\n<li>过滤器</li>\n<li>侦听器</li>\n<li>生命周期 </li>\n</ul>\n<h1 id=\"表单操作\"><a href=\"#表单操作\" class=\"headerlink\" title=\"表单操作\"></a>表单操作</h1><p>用户交互的时候用到表单操作。</p>\n<h3 id=\"基于vue的表单操作\"><a href=\"#基于vue的表单操作\" class=\"headerlink\" title=\"基于vue的表单操作\"></a>基于vue的表单操作</h3><ul>\n<li>input单行文本</li>\n<li>textarea多行文本</li>\n<li>select下拉多选</li>\n<li>radio单选框</li>\n<li>checkbox多选框</li>\n</ul>\n<h3 id=\"表单域修饰符\"><a href=\"#表单域修饰符\" class=\"headerlink\" title=\"表单域修饰符\"></a>表单域修饰符</h3><ul>\n<li>number: 转化为数值</li>\n<li>trim: 去掉开始和结尾的空格</li>\n<li>lazy: 将input事件切换为change事件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input v-model.number=<span class=\"string\">&quot;age&quot;</span> type=<span class=\"string\">&quot;number&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>lazy使用场景：注册时校验用户名是否被注册过，当失去焦点时开始检测。</p>\n<h3 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">&quot;text&quot;</span> v-focus&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.directive(<span class=\"string\">&#x27;focus&#x27;</span>,&#123;</span><br><span class=\"line\">    inserted: funciton(el)&#123;</span><br><span class=\"line\">    el.focus();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h3><p>表达式的计算逻辑可能会比较复杂，使用计算属性可以使模板内容更加简洁。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;&#123;&#123;reverseString&#125;&#125;</span><br><span class=\"line\">data:&#123;</span><br><span class=\"line\">    msg:<span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">    reverseString: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.msg.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>与方法的区别：缓存上的差异，方法不存在缓存。对于<strong>同样的数据</strong>，多次访问只用到一次的结果，而方法会执行两次。</p>\n<h3 id=\"侦听器\"><a href=\"#侦听器\" class=\"headerlink\" title=\"侦听器\"></a>侦听器</h3><p>和计算属性类似，数据变化会通知侦听器绑定的方法。</p>\n<p>应用场景：异步或开交较大的操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch:&#123;</span><br><span class=\"line\">    fisrName:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.fullName = val + <span class=\"built_in\">this</span>.lastName;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">     lastName:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">vla</span>)</span>&#123;</span><br><span class=\"line\">         <span class=\"built_in\">this</span>.fullName = <span class=\"built_in\">this</span>.firstName + val;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"应用场景：验证用户名是否可用。\"><a href=\"#应用场景：验证用户名是否可用。\" class=\"headerlink\" title=\"应用场景：验证用户名是否可用。\"></a>应用场景：验证用户名是否可用。</h4><ul>\n<li>通过<code>v-model</code>实现数据绑定</li>\n<li>需要提供提示信息</li>\n<li>需要侦听器监输入信息的变化</li>\n<li>需要修改触发的事件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">&quot;app&quot;</span>&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;span&gt;username: &lt;/span&gt;</span><br><span class=\"line\">            &lt;span&gt;</span><br><span class=\"line\">                &lt;input type=<span class=\"string\">&quot;text&quot;</span> v-model.lazy=<span class=\"string\">&#x27;username&#x27;</span>&gt;</span><br><span class=\"line\">            &lt;/span&gt;</span><br><span class=\"line\">            &lt;span&gt;&#123;&#123;tip&#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span> src=<span class=\"string\">&quot;js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">            el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">            data: &#123;</span><br><span class=\"line\">                username:<span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">                tip:<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            methods:&#123;</span><br><span class=\"line\">                checkName:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">username</span>)</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//接口调用，用定时任务的方式模拟接口调用</span></span><br><span class=\"line\">                    <span class=\"keyword\">var</span> that = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">                    <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(username == <span class=\"string\">&#x27;admin&#x27;</span>)&#123;</span><br><span class=\"line\">                            that.tip = <span class=\"string\">&#x27;change it&#x27;</span>;</span><br><span class=\"line\">                        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                            that.tip = <span class=\"string\">&#x27;ok&#x27;</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;,<span class=\"number\">2000</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            watch:&#123;</span><br><span class=\"line\">                username:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;<span class=\"comment\">//当数据变化时会触发</span></span><br><span class=\"line\">                    <span class=\"comment\">//调用后台验证</span></span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.checkName(val);</span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.tip = <span class=\"string\">&#x27;checking...&#x27;</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h3><h4 id=\"自定义过滤器（全局）\"><a href=\"#自定义过滤器（全局）\" class=\"headerlink\" title=\"自定义过滤器（全局）\"></a>自定义过滤器（全局）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.filter(<span class=\"string\">&#x27;filterName&#x27;</span><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//logic...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>局部过滤器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filters:&#123;</span><br><span class=\"line\">    capitalize:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;msg|upper&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;msg|upper|lower&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> <span class=\"comment\">&lt;!-- 级联 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">&quot;id|formatId&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"带参数过滤器\"><a href=\"#带参数过滤器\" class=\"headerlink\" title=\"带参数过滤器\"></a>带参数过滤器</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.filter(<span class=\"string\">&#x27;format&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, arg1</span>)</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;date | format(&#x27;yyyy-MM-dd&#x27;)&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"声明周期\"><a href=\"#声明周期\" class=\"headerlink\" title=\"声明周期\"></a>声明周期</h3><ul>\n<li>挂载</li>\n<li>更新</li>\n<li>销毁</li>\n</ul>\n<h3 id=\"修改响应式数据\"><a href=\"#修改响应式数据\" class=\"headerlink\" title=\"修改响应式数据\"></a>修改响应式数据</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.set(vm.items, indexOfItem, newValue)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vm.$set(vm.items, indexOfItem, newValue)</span><br></pre></td></tr></table></figure>\n\n<p>参数一表示要处理的数组名称，参数二表示要处理的数组索引，参数三表示要处理的数组的值。</p>\n<h3 id=\"library\"><a href=\"#library\" class=\"headerlink\" title=\"library\"></a>library</h3><h4 id=\"变异方法\"><a href=\"#变异方法\" class=\"headerlink\" title=\"变异方法\"></a>变异方法</h4><p>push(), pop(), shift(), unshift(), splice(), sort(), reverse()</p>\n<h4 id=\"替换数组（生成新的数组）\"><a href=\"#替换数组（生成新的数组）\" class=\"headerlink\" title=\"替换数组（生成新的数组）\"></a>替换数组（生成新的数组）</h4><p>filter(), concat(), slice()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.list = <span class=\"built_in\">this</span>.list.slice(<span class=\"number\">0</span>,<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"图书列表\"><a href=\"#图书列表\" class=\"headerlink\" title=\"图书列表\"></a>图书列表</h4><ul>\n<li>静态列效果</li>\n<li>基于数据实现模板效果</li>\n<li>处理每行的操作按钮</li>\n</ul>\n<h4 id=\"添加图书\"><a href=\"#添加图书\" class=\"headerlink\" title=\"添加图书\"></a>添加图书</h4><ul>\n<li>实现表单的静态效果</li>\n<li>添加图书表单域数据绑定</li>\n<li>添加按钮事件绑定</li>\n<li>实现添加业务逻辑</li>\n</ul>\n<h4 id=\"修改图书\"><a href=\"#修改图书\" class=\"headerlink\" title=\"修改图书\"></a>修改图书</h4><ul>\n<li>修改信息填充到表单</li>\n<li>修改后重新提交表单</li>\n<li>重用添加和修改的方法</li>\n</ul>\n<h4 id=\"常用特性应用\"><a href=\"#常用特性应用\" class=\"headerlink\" title=\"常用特性应用\"></a>常用特性应用</h4><ul>\n<li>过滤器（格式化日期）</li>\n<li>自定义指令（获取表单焦点）</li>\n<li>计算属性（统计图书数量）</li>\n<li>侦听器（验证图书存在性）</li>\n<li>生命周期（图书数据处理）  </li>\n</ul>\n<h1 id=\"library-html\"><a href=\"#library-html\" class=\"headerlink\" title=\"library.html\"></a>library.html</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">&quot;en&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">    &lt;style type=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><br><span class=\"line\">        .grid &#123;</span><br><span class=\"line\">            margin: auto;</span><br><span class=\"line\">            width: <span class=\"number\">500</span>px;</span><br><span class=\"line\">            text-align: center;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .grid table &#123;</span><br><span class=\"line\">            width: <span class=\"number\">100</span>%;</span><br><span class=\"line\">            border-collapse: collapse;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .grid th,td &#123;</span><br><span class=\"line\">            padding: <span class=\"number\">10</span>;</span><br><span class=\"line\">            border: <span class=\"number\">1</span>px dashed rgb(<span class=\"number\">224</span>, <span class=\"number\">182</span>, <span class=\"number\">105</span>);</span><br><span class=\"line\">            height: <span class=\"number\">35</span>px;</span><br><span class=\"line\">            line-height: <span class=\"number\">35</span>px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .grid th &#123;</span><br><span class=\"line\">            background-color: rgb(<span class=\"number\">255</span>, <span class=\"number\">207</span>, <span class=\"number\">117</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .grid .book &#123;</span><br><span class=\"line\">            padding-bottom: <span class=\"number\">10</span>px;</span><br><span class=\"line\">            padding-top: <span class=\"number\">5</span>px;</span><br><span class=\"line\">            background-color: rgb(<span class=\"number\">236</span>, <span class=\"number\">192</span>, <span class=\"number\">111</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .grid .total&#123;</span><br><span class=\"line\">            height: <span class=\"number\">30</span>px;</span><br><span class=\"line\">            line-height: <span class=\"number\">30</span>px;</span><br><span class=\"line\">            border-top: <span class=\"number\">1</span>px solid rgb(<span class=\"number\">173</span>, <span class=\"number\">139</span>, <span class=\"number\">69</span>);</span><br><span class=\"line\">            background-color: rgb(<span class=\"number\">196</span>, <span class=\"number\">153</span>, <span class=\"number\">75</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">&quot;app&quot;</span>&gt;</span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;grid&quot;</span>&gt;</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;h1&gt;图书管理&lt;/h1&gt;</span><br><span class=\"line\">                &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;book&quot;</span>&gt;</span><br><span class=\"line\">                    &lt;div&gt;</span><br><span class=\"line\">                        &lt;label <span class=\"keyword\">for</span>=<span class=\"string\">&quot;id&quot;</span>&gt;</span><br><span class=\"line\">                            编号:</span><br><span class=\"line\">                        &lt;/label&gt;</span><br><span class=\"line\">                        &lt;input type=<span class=\"string\">&quot;text&quot;</span> id=<span class=\"string\">&quot;id&quot;</span> v-model=<span class=\"string\">&#x27;id&#x27;</span> :disabled=<span class=\"string\">&#x27;flag&#x27;</span> v-focus&gt;</span><br><span class=\"line\">                        &lt;label <span class=\"keyword\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span><br><span class=\"line\">                            名称:</span><br><span class=\"line\">                        &lt;/label&gt;</span><br><span class=\"line\">                        &lt;input type=<span class=\"string\">&quot;text&quot;</span> id=<span class=\"string\">&quot;name&quot;</span> v-model=<span class=\"string\">&#x27;name&#x27;</span>&gt;</span><br><span class=\"line\">                        &lt;button @click=<span class=\"string\">&#x27;handle&#x27;</span> :disabled=<span class=\"string\">&#x27;isSubmit&#x27;</span>&gt;提交&lt;/button&gt;</span><br><span class=\"line\">                    &lt;/div&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;total&quot;</span>&gt;</span><br><span class=\"line\">                &lt;span&gt;图书数量：&lt;/span&gt;</span><br><span class=\"line\">                &lt;span&gt;&#123;&#123;total&#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            &lt;table&gt;</span><br><span class=\"line\">                &lt;thead&gt;</span><br><span class=\"line\">                    &lt;tr&gt;</span><br><span class=\"line\">                        &lt;th&gt;编号&lt;/th&gt;</span><br><span class=\"line\">                        &lt;th&gt;名称&lt;/th&gt;</span><br><span class=\"line\">                        &lt;th&gt;时间&lt;/th&gt;</span><br><span class=\"line\">                        &lt;th&gt;操作&lt;/th&gt;</span><br><span class=\"line\">                    &lt;/tr&gt;</span><br><span class=\"line\">                &lt;/thead&gt;</span><br><span class=\"line\">                &lt;tbody&gt;</span><br><span class=\"line\">                    &lt;tr :key=<span class=\"string\">&#x27;item.id&#x27;</span> v-<span class=\"keyword\">for</span>=<span class=\"string\">&#x27;item in books&#x27;</span>&gt;</span><br><span class=\"line\">                        &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">                        &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">                        &lt;td&gt;&#123;&#123;item.date&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">                        &lt;td&gt;</span><br><span class=\"line\">                            &lt;a href=<span class=\"string\">&quot;&quot;</span> @click.prevent=<span class=\"string\">&#x27;modify(item)&#x27;</span>&gt;修改&lt;/a&gt;</span><br><span class=\"line\">                            &lt;span&gt;|&lt;/span&gt;</span><br><span class=\"line\">                            &lt;a href=<span class=\"string\">&quot;&quot;</span> @click.prevent=<span class=\"string\">&#x27;del(item)&#x27;</span>&gt;删除&lt;/a&gt;</span><br><span class=\"line\">                        &lt;/td&gt;</span><br><span class=\"line\">                    &lt;/tr&gt;</span><br><span class=\"line\">                &lt;/tbody&gt;</span><br><span class=\"line\">            &lt;/table&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span> src=<span class=\"string\">&quot;js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        Vue.directive(<span class=\"string\">&#x27;focus&#x27;</span>,&#123;</span><br><span class=\"line\">            inserted: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el</span>)</span>&#123;</span><br><span class=\"line\">                el.focus();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">            el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">            data: &#123;</span><br><span class=\"line\">                isSubmit: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                flag: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                id: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">                name: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">                books: []</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            methods: &#123;</span><br><span class=\"line\">                handle: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> book = &#123;&#125;;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.flag) &#123;</span><br><span class=\"line\">                        book.id = <span class=\"built_in\">this</span>.id;</span><br><span class=\"line\">                        book.name = <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\"></span><br><span class=\"line\">                        book.date = <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">                        <span class=\"built_in\">this</span>.books.push(book);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">this</span>.books.some(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (item.id == <span class=\"built_in\">this</span>.id) &#123;</span><br><span class=\"line\">                                item.name = <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">                                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;),</span><br><span class=\"line\">                        <span class=\"built_in\">this</span>.flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.id = <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                modify: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">itemin</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// this.id = books.id;</span></span><br><span class=\"line\">                    <span class=\"comment\">// this.name = books.name</span></span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> book = <span class=\"built_in\">this</span>.books.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> item.id == itemin.id</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.id = book[<span class=\"number\">0</span>].id;</span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.name = book[<span class=\"number\">0</span>].name;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                del:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">itemin</span>)</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// //查找索引</span></span><br><span class=\"line\">                    <span class=\"comment\">// var index = this.books.findIndex(function(item)&#123;</span></span><br><span class=\"line\">                    <span class=\"comment\">//     return item.id == itemin.id;</span></span><br><span class=\"line\">                    <span class=\"comment\">// &#125;);</span></span><br><span class=\"line\">                    <span class=\"comment\">// //删除</span></span><br><span class=\"line\">                    <span class=\"comment\">// this.books.splice(index, 1);</span></span><br><span class=\"line\">                    <span class=\"comment\">//method2 也可已通过filter来实现</span></span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.books = <span class=\"built_in\">this</span>.books.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> item.id != itemin.id;</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.id = <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            computed:&#123;</span><br><span class=\"line\">                total:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.books.length;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            watch:&#123;</span><br><span class=\"line\">                name: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> flag = <span class=\"built_in\">this</span>.books.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> item.name == val;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">                        <span class=\"built_in\">this</span>.isSubmit = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        <span class=\"built_in\">this</span>.isSubmit = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            mounted: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//一般用于获取后台数据，然后把数据填充到模板</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> data = [&#123;</span><br><span class=\"line\">                    id: <span class=\"number\">1</span>,</span><br><span class=\"line\">                    name: <span class=\"string\">&#x27;三国演义&#x27;</span>,</span><br><span class=\"line\">                    date: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">                &#125;, &#123;</span><br><span class=\"line\">                    id: <span class=\"number\">2</span>,</span><br><span class=\"line\">                    name: <span class=\"string\">&#x27;水浒传&#x27;</span>,</span><br><span class=\"line\">                    date: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">                &#125;, &#123;</span><br><span class=\"line\">                    id: <span class=\"number\">3</span>,</span><br><span class=\"line\">                    name: <span class=\"string\">&#x27;红楼梦&#x27;</span>,</span><br><span class=\"line\">                    date: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">                &#125;, &#123;</span><br><span class=\"line\">                    id: <span class=\"number\">4</span>,</span><br><span class=\"line\">                    name: <span class=\"string\">&#x27;西游记&#x27;</span>,</span><br><span class=\"line\">                    date: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">                &#125;];</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.books = data;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>vue常用特性</p>","more":"<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><ul>\n<li>表单操作</li>\n<li>自定义指令</li>\n<li>计算属性</li>\n<li>过滤器</li>\n<li>侦听器</li>\n<li>生命周期 </li>\n</ul>\n<h1 id=\"表单操作\"><a href=\"#表单操作\" class=\"headerlink\" title=\"表单操作\"></a>表单操作</h1><p>用户交互的时候用到表单操作。</p>\n<h3 id=\"基于vue的表单操作\"><a href=\"#基于vue的表单操作\" class=\"headerlink\" title=\"基于vue的表单操作\"></a>基于vue的表单操作</h3><ul>\n<li>input单行文本</li>\n<li>textarea多行文本</li>\n<li>select下拉多选</li>\n<li>radio单选框</li>\n<li>checkbox多选框</li>\n</ul>\n<h3 id=\"表单域修饰符\"><a href=\"#表单域修饰符\" class=\"headerlink\" title=\"表单域修饰符\"></a>表单域修饰符</h3><ul>\n<li>number: 转化为数值</li>\n<li>trim: 去掉开始和结尾的空格</li>\n<li>lazy: 将input事件切换为change事件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input v-model.number=<span class=\"string\">&quot;age&quot;</span> type=<span class=\"string\">&quot;number&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>lazy使用场景：注册时校验用户名是否被注册过，当失去焦点时开始检测。</p>\n<h3 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">&quot;text&quot;</span> v-focus&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.directive(<span class=\"string\">&#x27;focus&#x27;</span>,&#123;</span><br><span class=\"line\">    inserted: funciton(el)&#123;</span><br><span class=\"line\">    el.focus();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h3><p>表达式的计算逻辑可能会比较复杂，使用计算属性可以使模板内容更加简洁。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;&#123;&#123;reverseString&#125;&#125;</span><br><span class=\"line\">data:&#123;</span><br><span class=\"line\">    msg:<span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">    reverseString: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.msg.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>与方法的区别：缓存上的差异，方法不存在缓存。对于<strong>同样的数据</strong>，多次访问只用到一次的结果，而方法会执行两次。</p>\n<h3 id=\"侦听器\"><a href=\"#侦听器\" class=\"headerlink\" title=\"侦听器\"></a>侦听器</h3><p>和计算属性类似，数据变化会通知侦听器绑定的方法。</p>\n<p>应用场景：异步或开交较大的操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch:&#123;</span><br><span class=\"line\">    fisrName:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.fullName = val + <span class=\"built_in\">this</span>.lastName;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">     lastName:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">vla</span>)</span>&#123;</span><br><span class=\"line\">         <span class=\"built_in\">this</span>.fullName = <span class=\"built_in\">this</span>.firstName + val;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"应用场景：验证用户名是否可用。\"><a href=\"#应用场景：验证用户名是否可用。\" class=\"headerlink\" title=\"应用场景：验证用户名是否可用。\"></a>应用场景：验证用户名是否可用。</h4><ul>\n<li>通过<code>v-model</code>实现数据绑定</li>\n<li>需要提供提示信息</li>\n<li>需要侦听器监输入信息的变化</li>\n<li>需要修改触发的事件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">&quot;app&quot;</span>&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;span&gt;username: &lt;/span&gt;</span><br><span class=\"line\">            &lt;span&gt;</span><br><span class=\"line\">                &lt;input type=<span class=\"string\">&quot;text&quot;</span> v-model.lazy=<span class=\"string\">&#x27;username&#x27;</span>&gt;</span><br><span class=\"line\">            &lt;/span&gt;</span><br><span class=\"line\">            &lt;span&gt;&#123;&#123;tip&#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span> src=<span class=\"string\">&quot;js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">            el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">            data: &#123;</span><br><span class=\"line\">                username:<span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">                tip:<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            methods:&#123;</span><br><span class=\"line\">                checkName:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">username</span>)</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//接口调用，用定时任务的方式模拟接口调用</span></span><br><span class=\"line\">                    <span class=\"keyword\">var</span> that = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">                    <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(username == <span class=\"string\">&#x27;admin&#x27;</span>)&#123;</span><br><span class=\"line\">                            that.tip = <span class=\"string\">&#x27;change it&#x27;</span>;</span><br><span class=\"line\">                        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                            that.tip = <span class=\"string\">&#x27;ok&#x27;</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;,<span class=\"number\">2000</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            watch:&#123;</span><br><span class=\"line\">                username:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;<span class=\"comment\">//当数据变化时会触发</span></span><br><span class=\"line\">                    <span class=\"comment\">//调用后台验证</span></span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.checkName(val);</span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.tip = <span class=\"string\">&#x27;checking...&#x27;</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h3><h4 id=\"自定义过滤器（全局）\"><a href=\"#自定义过滤器（全局）\" class=\"headerlink\" title=\"自定义过滤器（全局）\"></a>自定义过滤器（全局）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.filter(<span class=\"string\">&#x27;filterName&#x27;</span><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//logic...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>局部过滤器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filters:&#123;</span><br><span class=\"line\">    capitalize:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;msg|upper&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;msg|upper|lower&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> <span class=\"comment\">&lt;!-- 级联 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">&quot;id|formatId&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"带参数过滤器\"><a href=\"#带参数过滤器\" class=\"headerlink\" title=\"带参数过滤器\"></a>带参数过滤器</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.filter(<span class=\"string\">&#x27;format&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, arg1</span>)</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;date | format(&#x27;yyyy-MM-dd&#x27;)&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"声明周期\"><a href=\"#声明周期\" class=\"headerlink\" title=\"声明周期\"></a>声明周期</h3><ul>\n<li>挂载</li>\n<li>更新</li>\n<li>销毁</li>\n</ul>\n<h3 id=\"修改响应式数据\"><a href=\"#修改响应式数据\" class=\"headerlink\" title=\"修改响应式数据\"></a>修改响应式数据</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.set(vm.items, indexOfItem, newValue)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vm.$set(vm.items, indexOfItem, newValue)</span><br></pre></td></tr></table></figure>\n\n<p>参数一表示要处理的数组名称，参数二表示要处理的数组索引，参数三表示要处理的数组的值。</p>\n<h3 id=\"library\"><a href=\"#library\" class=\"headerlink\" title=\"library\"></a>library</h3><h4 id=\"变异方法\"><a href=\"#变异方法\" class=\"headerlink\" title=\"变异方法\"></a>变异方法</h4><p>push(), pop(), shift(), unshift(), splice(), sort(), reverse()</p>\n<h4 id=\"替换数组（生成新的数组）\"><a href=\"#替换数组（生成新的数组）\" class=\"headerlink\" title=\"替换数组（生成新的数组）\"></a>替换数组（生成新的数组）</h4><p>filter(), concat(), slice()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.list = <span class=\"built_in\">this</span>.list.slice(<span class=\"number\">0</span>,<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"图书列表\"><a href=\"#图书列表\" class=\"headerlink\" title=\"图书列表\"></a>图书列表</h4><ul>\n<li>静态列效果</li>\n<li>基于数据实现模板效果</li>\n<li>处理每行的操作按钮</li>\n</ul>\n<h4 id=\"添加图书\"><a href=\"#添加图书\" class=\"headerlink\" title=\"添加图书\"></a>添加图书</h4><ul>\n<li>实现表单的静态效果</li>\n<li>添加图书表单域数据绑定</li>\n<li>添加按钮事件绑定</li>\n<li>实现添加业务逻辑</li>\n</ul>\n<h4 id=\"修改图书\"><a href=\"#修改图书\" class=\"headerlink\" title=\"修改图书\"></a>修改图书</h4><ul>\n<li>修改信息填充到表单</li>\n<li>修改后重新提交表单</li>\n<li>重用添加和修改的方法</li>\n</ul>\n<h4 id=\"常用特性应用\"><a href=\"#常用特性应用\" class=\"headerlink\" title=\"常用特性应用\"></a>常用特性应用</h4><ul>\n<li>过滤器（格式化日期）</li>\n<li>自定义指令（获取表单焦点）</li>\n<li>计算属性（统计图书数量）</li>\n<li>侦听器（验证图书存在性）</li>\n<li>生命周期（图书数据处理）  </li>\n</ul>\n<h1 id=\"library-html\"><a href=\"#library-html\" class=\"headerlink\" title=\"library.html\"></a>library.html</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">&quot;en&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">    &lt;style type=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><br><span class=\"line\">        .grid &#123;</span><br><span class=\"line\">            margin: auto;</span><br><span class=\"line\">            width: <span class=\"number\">500</span>px;</span><br><span class=\"line\">            text-align: center;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .grid table &#123;</span><br><span class=\"line\">            width: <span class=\"number\">100</span>%;</span><br><span class=\"line\">            border-collapse: collapse;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .grid th,td &#123;</span><br><span class=\"line\">            padding: <span class=\"number\">10</span>;</span><br><span class=\"line\">            border: <span class=\"number\">1</span>px dashed rgb(<span class=\"number\">224</span>, <span class=\"number\">182</span>, <span class=\"number\">105</span>);</span><br><span class=\"line\">            height: <span class=\"number\">35</span>px;</span><br><span class=\"line\">            line-height: <span class=\"number\">35</span>px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .grid th &#123;</span><br><span class=\"line\">            background-color: rgb(<span class=\"number\">255</span>, <span class=\"number\">207</span>, <span class=\"number\">117</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .grid .book &#123;</span><br><span class=\"line\">            padding-bottom: <span class=\"number\">10</span>px;</span><br><span class=\"line\">            padding-top: <span class=\"number\">5</span>px;</span><br><span class=\"line\">            background-color: rgb(<span class=\"number\">236</span>, <span class=\"number\">192</span>, <span class=\"number\">111</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .grid .total&#123;</span><br><span class=\"line\">            height: <span class=\"number\">30</span>px;</span><br><span class=\"line\">            line-height: <span class=\"number\">30</span>px;</span><br><span class=\"line\">            border-top: <span class=\"number\">1</span>px solid rgb(<span class=\"number\">173</span>, <span class=\"number\">139</span>, <span class=\"number\">69</span>);</span><br><span class=\"line\">            background-color: rgb(<span class=\"number\">196</span>, <span class=\"number\">153</span>, <span class=\"number\">75</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">&quot;app&quot;</span>&gt;</span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;grid&quot;</span>&gt;</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;h1&gt;图书管理&lt;/h1&gt;</span><br><span class=\"line\">                &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;book&quot;</span>&gt;</span><br><span class=\"line\">                    &lt;div&gt;</span><br><span class=\"line\">                        &lt;label <span class=\"keyword\">for</span>=<span class=\"string\">&quot;id&quot;</span>&gt;</span><br><span class=\"line\">                            编号:</span><br><span class=\"line\">                        &lt;/label&gt;</span><br><span class=\"line\">                        &lt;input type=<span class=\"string\">&quot;text&quot;</span> id=<span class=\"string\">&quot;id&quot;</span> v-model=<span class=\"string\">&#x27;id&#x27;</span> :disabled=<span class=\"string\">&#x27;flag&#x27;</span> v-focus&gt;</span><br><span class=\"line\">                        &lt;label <span class=\"keyword\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span><br><span class=\"line\">                            名称:</span><br><span class=\"line\">                        &lt;/label&gt;</span><br><span class=\"line\">                        &lt;input type=<span class=\"string\">&quot;text&quot;</span> id=<span class=\"string\">&quot;name&quot;</span> v-model=<span class=\"string\">&#x27;name&#x27;</span>&gt;</span><br><span class=\"line\">                        &lt;button @click=<span class=\"string\">&#x27;handle&#x27;</span> :disabled=<span class=\"string\">&#x27;isSubmit&#x27;</span>&gt;提交&lt;/button&gt;</span><br><span class=\"line\">                    &lt;/div&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;total&quot;</span>&gt;</span><br><span class=\"line\">                &lt;span&gt;图书数量：&lt;/span&gt;</span><br><span class=\"line\">                &lt;span&gt;&#123;&#123;total&#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            &lt;table&gt;</span><br><span class=\"line\">                &lt;thead&gt;</span><br><span class=\"line\">                    &lt;tr&gt;</span><br><span class=\"line\">                        &lt;th&gt;编号&lt;/th&gt;</span><br><span class=\"line\">                        &lt;th&gt;名称&lt;/th&gt;</span><br><span class=\"line\">                        &lt;th&gt;时间&lt;/th&gt;</span><br><span class=\"line\">                        &lt;th&gt;操作&lt;/th&gt;</span><br><span class=\"line\">                    &lt;/tr&gt;</span><br><span class=\"line\">                &lt;/thead&gt;</span><br><span class=\"line\">                &lt;tbody&gt;</span><br><span class=\"line\">                    &lt;tr :key=<span class=\"string\">&#x27;item.id&#x27;</span> v-<span class=\"keyword\">for</span>=<span class=\"string\">&#x27;item in books&#x27;</span>&gt;</span><br><span class=\"line\">                        &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">                        &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">                        &lt;td&gt;&#123;&#123;item.date&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">                        &lt;td&gt;</span><br><span class=\"line\">                            &lt;a href=<span class=\"string\">&quot;&quot;</span> @click.prevent=<span class=\"string\">&#x27;modify(item)&#x27;</span>&gt;修改&lt;/a&gt;</span><br><span class=\"line\">                            &lt;span&gt;|&lt;/span&gt;</span><br><span class=\"line\">                            &lt;a href=<span class=\"string\">&quot;&quot;</span> @click.prevent=<span class=\"string\">&#x27;del(item)&#x27;</span>&gt;删除&lt;/a&gt;</span><br><span class=\"line\">                        &lt;/td&gt;</span><br><span class=\"line\">                    &lt;/tr&gt;</span><br><span class=\"line\">                &lt;/tbody&gt;</span><br><span class=\"line\">            &lt;/table&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span> src=<span class=\"string\">&quot;js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        Vue.directive(<span class=\"string\">&#x27;focus&#x27;</span>,&#123;</span><br><span class=\"line\">            inserted: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el</span>)</span>&#123;</span><br><span class=\"line\">                el.focus();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">            el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">            data: &#123;</span><br><span class=\"line\">                isSubmit: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                flag: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                id: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">                name: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">                books: []</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            methods: &#123;</span><br><span class=\"line\">                handle: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> book = &#123;&#125;;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.flag) &#123;</span><br><span class=\"line\">                        book.id = <span class=\"built_in\">this</span>.id;</span><br><span class=\"line\">                        book.name = <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\"></span><br><span class=\"line\">                        book.date = <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">                        <span class=\"built_in\">this</span>.books.push(book);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">this</span>.books.some(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (item.id == <span class=\"built_in\">this</span>.id) &#123;</span><br><span class=\"line\">                                item.name = <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">                                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;),</span><br><span class=\"line\">                        <span class=\"built_in\">this</span>.flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.id = <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                modify: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">itemin</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// this.id = books.id;</span></span><br><span class=\"line\">                    <span class=\"comment\">// this.name = books.name</span></span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> book = <span class=\"built_in\">this</span>.books.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> item.id == itemin.id</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.id = book[<span class=\"number\">0</span>].id;</span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.name = book[<span class=\"number\">0</span>].name;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                del:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">itemin</span>)</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// //查找索引</span></span><br><span class=\"line\">                    <span class=\"comment\">// var index = this.books.findIndex(function(item)&#123;</span></span><br><span class=\"line\">                    <span class=\"comment\">//     return item.id == itemin.id;</span></span><br><span class=\"line\">                    <span class=\"comment\">// &#125;);</span></span><br><span class=\"line\">                    <span class=\"comment\">// //删除</span></span><br><span class=\"line\">                    <span class=\"comment\">// this.books.splice(index, 1);</span></span><br><span class=\"line\">                    <span class=\"comment\">//method2 也可已通过filter来实现</span></span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.books = <span class=\"built_in\">this</span>.books.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> item.id != itemin.id;</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.id = <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            computed:&#123;</span><br><span class=\"line\">                total:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.books.length;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            watch:&#123;</span><br><span class=\"line\">                name: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> flag = <span class=\"built_in\">this</span>.books.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> item.name == val;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">                        <span class=\"built_in\">this</span>.isSubmit = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        <span class=\"built_in\">this</span>.isSubmit = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            mounted: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//一般用于获取后台数据，然后把数据填充到模板</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> data = [&#123;</span><br><span class=\"line\">                    id: <span class=\"number\">1</span>,</span><br><span class=\"line\">                    name: <span class=\"string\">&#x27;三国演义&#x27;</span>,</span><br><span class=\"line\">                    date: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">                &#125;, &#123;</span><br><span class=\"line\">                    id: <span class=\"number\">2</span>,</span><br><span class=\"line\">                    name: <span class=\"string\">&#x27;水浒传&#x27;</span>,</span><br><span class=\"line\">                    date: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">                &#125;, &#123;</span><br><span class=\"line\">                    id: <span class=\"number\">3</span>,</span><br><span class=\"line\">                    name: <span class=\"string\">&#x27;红楼梦&#x27;</span>,</span><br><span class=\"line\">                    date: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">                &#125;, &#123;</span><br><span class=\"line\">                    id: <span class=\"number\">4</span>,</span><br><span class=\"line\">                    name: <span class=\"string\">&#x27;西游记&#x27;</span>,</span><br><span class=\"line\">                    date: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">                &#125;];</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.books = data;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>"},{"title":"vue03","date":"2020-01-18T13:18:36.000Z","_content":"\nvue组件化开发\n\n<!-- more -->\n\n# 序\n\n- 组件化开发思想\n- 组件的注册方式\n- 组件的数据交互方式\n- 组件插槽的用法\n- Vue调试工具的用法\n- 组件的方式实现业务功能\n\n# 组件化开发思想\n\n- 标准\n- 分治\n- 重用\n- 组合\n\n写的代码要尽可能多的重用。\n\n## 组件化规范\n\nWeb Components: 通过创建封装好功能的定制元素解决重用问题。但是目前还没有被浏览器广泛支持。vue实现了它的部分规范。\n\n## 组件注册\n\n#### 全局组件注册语法\n\n```js\nVue.component(component_name,{\n    data: component_data,\n    template: template_content\n})\n```\n\ne.g.\n\n```ls\n//定义一个名为button-counter的新组件\nVue.component('button-counter',{\ndata: function(){\n\treuturn{\n\t\tcount; 0\n\t}\n},\ntemplate: '<button v-on:click=\"count++\">clicked{{count}}times.</button>'\n})\n```\n\n使用\n\n```js\n<div id=\"app\">\n    <button-counter></button-counter>\n</div>\n```\n\n- 组件可以重复用，且数据是独立的。\n- data是函数\n- 组件模板内容必须是单个根元素，可以是`模板字符串`。\n  - 模板字符串：增强可读性(反引号内，可以换行)\n- 如果使用驼峰式命名组件，在使用时只能在`字符串模板`中使用，在普通的标签模板中，必须使用`短横线`的方式。\n\n#### 局部组件注册\n\n```js\nnew Vue({\n    el: '#app'\n    components:{\n    'component-a': componentA,\n    'component-b': componentB,\n}\n})\n```\n\ne.g.\n\n```js\n<hello-tom></hello-tom>\n\nvar HelloTom = {\n    data:function(){\n        retrun {\n            msg: 'HelloTom'\n        }\n    },\n    template:'<div>{{msg}}</div>'\n}\n\nvar vm = new Vue({\n    el: '#app',\n    data:{\n        \n    },\n    components: {\n        'hello-tom': HelloTom\n    }\n})\n```\n\n- 局部定义的组件只能在它的父组件中使用。（如果定义了全组组件，不能在其中使用）\n\n### DEVTOOLS\n\n[Vue插件](https://github.com/vuejs/vue-devtools)，帮助查看复杂组件之间的关系。\n\n## 组件间数据交互\n\n组件间的关系：父子，兄弟。\n\n组件内部通过props接收传递过来的值\n\n```js\nVue.component(\"menu-item\",{\n    props: ['title'],\n    template: '<div>{{title}}</div>'\n})\n```\n\n### 父组件通过属性将值传递给子组件\n\n```js\n<menu-item title='data from father'></menu-item>\n<menu-item :title=\"title\"></menu-item>\n```\n\n\n\nprops传递数据原则：单向数据流。\n\n### 子组件向福组件传值\n\n通过自定义事件向父组件传递信息\n\n```js\n<button v-on:click='$emit(\"enlarge-text\")'>enlarge text</button>\n```\n\n```js\n<button v-on:click='$emit(\"enlarge-text\",0.1)'>enlarge text</button>\n```\n\n\n\n父组件监听子组件的事件\n\n```js\n<menu-item v-on:enlarge-text='fontsize += 0.1'></menu-item>\n```\n\n```js\n<menu-item v-on:enlarge-text='fontsize += $event'></menu-item>\n```\n\n### 兄弟组件间传值\n\n单独的事件中心管理组件间的通信\n\n```js\nvar eventHub = new Vue()\n```\n\n监听事件与销毁\n\n```js\neventHub.$on('add-todo',addTodo)\neventHub.$off('add-todo')\n```\n\n触发事件\n\n```js\neventHub.$emit('add-todo',id)\n```\n\n## 组件插槽\n\n### 基本用法\n\n```js\nVue.component('alert-box',{\n    template:`\n\t\t<div class=\"demo-alert-box\">\n\t\t\t<strong>Error!</strong>\n\t\t\t<slot></slot>\n\t\t</div>`\n})\n```\n\n### 插槽内容\n\n```js\n<alert-box>Something bad happened.</alert-box>\n```\n\n```js\n<body>\n    <div id=\"app\">\n        <alert-box>it's a bug</alert-box>\n        <alert-box>sythntax mistakes</alert-box>\n        <alert-box></alert-box>\n    </div>\n    <script type=\"text/javascript\" src=\"js/vue.js\"></script>\n    <script type=\"text/javascript\">\n\n        Vue.component('alert-box',{\n            template:`\n                <div>\n                    <strong>ERROR: </strong>\n                    <slot>defautl mistakes</slot>\n                </div>\n            `\n        })\n        var vm = new Vue({\n            el: '#app',\n            data:{\n\n            }\n        });\n    </script>\n    \n</body>\n```\n\n### 具名插槽\n\n#### 插槽定义\n\n```js\n<div class=\"container\">\n    <header>\n    \t<slot name=\"header\"></slot>\n\t</header>\n\t<main>\n            <slot></slot>\n\t</main>\n\t<footer>\n            <slot name=\"footer\"></slot>\n\t</footer>\n</div>\n```\n\n#### 插槽内容\n\n```js\n<base-layout>\n    <h1 slot=\"header\">title content</h1>\n\t<p>main content 1</p>\n\t<p>main content 2</p>\n\t<p slot=\"footer\">bottom content</p>\n</base-layout>\n```\n\n### 作用域插槽\n\n应用场景：父组件对子组件的内容进行加工处理\n\n#### 插槽定义\n\n```js\n<ul>\n    <li v-for=\"item in list\" v-bind:key=\"item.id\">\n        <slot v-bind:item=\"item\">\n            {{item.name}}\n         </slot>\n\t</li>\n</ul>\n```\n\n#### 加工处理\n\n ```js\n<fruit-list :list='list'>\n            <template slot-scope='slotProps'>\n                <strong class='current' v-if='slotProps.item.id == 2'>{{slotProps.item.name}}</strong>\n            </template>\n        </fruit-list>\n ```\n\n\n\n# 购物车\n\n组件化方式实现业务需求\n\n根据业务功能进行组件化划分\n\n- 标题（展示文本）\n- 列表（展示、数量变更、删除）\n- 结算（计算商品总额）\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/vue03.md","raw":"---\ntitle: vue03\ndate: 2020-01-18 21:18:36\ncategories: Vue\ntags: vue\n---\n\nvue组件化开发\n\n<!-- more -->\n\n# 序\n\n- 组件化开发思想\n- 组件的注册方式\n- 组件的数据交互方式\n- 组件插槽的用法\n- Vue调试工具的用法\n- 组件的方式实现业务功能\n\n# 组件化开发思想\n\n- 标准\n- 分治\n- 重用\n- 组合\n\n写的代码要尽可能多的重用。\n\n## 组件化规范\n\nWeb Components: 通过创建封装好功能的定制元素解决重用问题。但是目前还没有被浏览器广泛支持。vue实现了它的部分规范。\n\n## 组件注册\n\n#### 全局组件注册语法\n\n```js\nVue.component(component_name,{\n    data: component_data,\n    template: template_content\n})\n```\n\ne.g.\n\n```ls\n//定义一个名为button-counter的新组件\nVue.component('button-counter',{\ndata: function(){\n\treuturn{\n\t\tcount; 0\n\t}\n},\ntemplate: '<button v-on:click=\"count++\">clicked{{count}}times.</button>'\n})\n```\n\n使用\n\n```js\n<div id=\"app\">\n    <button-counter></button-counter>\n</div>\n```\n\n- 组件可以重复用，且数据是独立的。\n- data是函数\n- 组件模板内容必须是单个根元素，可以是`模板字符串`。\n  - 模板字符串：增强可读性(反引号内，可以换行)\n- 如果使用驼峰式命名组件，在使用时只能在`字符串模板`中使用，在普通的标签模板中，必须使用`短横线`的方式。\n\n#### 局部组件注册\n\n```js\nnew Vue({\n    el: '#app'\n    components:{\n    'component-a': componentA,\n    'component-b': componentB,\n}\n})\n```\n\ne.g.\n\n```js\n<hello-tom></hello-tom>\n\nvar HelloTom = {\n    data:function(){\n        retrun {\n            msg: 'HelloTom'\n        }\n    },\n    template:'<div>{{msg}}</div>'\n}\n\nvar vm = new Vue({\n    el: '#app',\n    data:{\n        \n    },\n    components: {\n        'hello-tom': HelloTom\n    }\n})\n```\n\n- 局部定义的组件只能在它的父组件中使用。（如果定义了全组组件，不能在其中使用）\n\n### DEVTOOLS\n\n[Vue插件](https://github.com/vuejs/vue-devtools)，帮助查看复杂组件之间的关系。\n\n## 组件间数据交互\n\n组件间的关系：父子，兄弟。\n\n组件内部通过props接收传递过来的值\n\n```js\nVue.component(\"menu-item\",{\n    props: ['title'],\n    template: '<div>{{title}}</div>'\n})\n```\n\n### 父组件通过属性将值传递给子组件\n\n```js\n<menu-item title='data from father'></menu-item>\n<menu-item :title=\"title\"></menu-item>\n```\n\n\n\nprops传递数据原则：单向数据流。\n\n### 子组件向福组件传值\n\n通过自定义事件向父组件传递信息\n\n```js\n<button v-on:click='$emit(\"enlarge-text\")'>enlarge text</button>\n```\n\n```js\n<button v-on:click='$emit(\"enlarge-text\",0.1)'>enlarge text</button>\n```\n\n\n\n父组件监听子组件的事件\n\n```js\n<menu-item v-on:enlarge-text='fontsize += 0.1'></menu-item>\n```\n\n```js\n<menu-item v-on:enlarge-text='fontsize += $event'></menu-item>\n```\n\n### 兄弟组件间传值\n\n单独的事件中心管理组件间的通信\n\n```js\nvar eventHub = new Vue()\n```\n\n监听事件与销毁\n\n```js\neventHub.$on('add-todo',addTodo)\neventHub.$off('add-todo')\n```\n\n触发事件\n\n```js\neventHub.$emit('add-todo',id)\n```\n\n## 组件插槽\n\n### 基本用法\n\n```js\nVue.component('alert-box',{\n    template:`\n\t\t<div class=\"demo-alert-box\">\n\t\t\t<strong>Error!</strong>\n\t\t\t<slot></slot>\n\t\t</div>`\n})\n```\n\n### 插槽内容\n\n```js\n<alert-box>Something bad happened.</alert-box>\n```\n\n```js\n<body>\n    <div id=\"app\">\n        <alert-box>it's a bug</alert-box>\n        <alert-box>sythntax mistakes</alert-box>\n        <alert-box></alert-box>\n    </div>\n    <script type=\"text/javascript\" src=\"js/vue.js\"></script>\n    <script type=\"text/javascript\">\n\n        Vue.component('alert-box',{\n            template:`\n                <div>\n                    <strong>ERROR: </strong>\n                    <slot>defautl mistakes</slot>\n                </div>\n            `\n        })\n        var vm = new Vue({\n            el: '#app',\n            data:{\n\n            }\n        });\n    </script>\n    \n</body>\n```\n\n### 具名插槽\n\n#### 插槽定义\n\n```js\n<div class=\"container\">\n    <header>\n    \t<slot name=\"header\"></slot>\n\t</header>\n\t<main>\n            <slot></slot>\n\t</main>\n\t<footer>\n            <slot name=\"footer\"></slot>\n\t</footer>\n</div>\n```\n\n#### 插槽内容\n\n```js\n<base-layout>\n    <h1 slot=\"header\">title content</h1>\n\t<p>main content 1</p>\n\t<p>main content 2</p>\n\t<p slot=\"footer\">bottom content</p>\n</base-layout>\n```\n\n### 作用域插槽\n\n应用场景：父组件对子组件的内容进行加工处理\n\n#### 插槽定义\n\n```js\n<ul>\n    <li v-for=\"item in list\" v-bind:key=\"item.id\">\n        <slot v-bind:item=\"item\">\n            {{item.name}}\n         </slot>\n\t</li>\n</ul>\n```\n\n#### 加工处理\n\n ```js\n<fruit-list :list='list'>\n            <template slot-scope='slotProps'>\n                <strong class='current' v-if='slotProps.item.id == 2'>{{slotProps.item.name}}</strong>\n            </template>\n        </fruit-list>\n ```\n\n\n\n# 购物车\n\n组件化方式实现业务需求\n\n根据业务功能进行组件化划分\n\n- 标题（展示文本）\n- 列表（展示、数量变更、删除）\n- 结算（计算商品总额）\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"vue03","published":1,"updated":"2020-07-19T17:29:13.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgdx0046byih2r5y0qa4","content":"<p>vue组件化开发</p>\n<a id=\"more\"></a>\n\n<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><ul>\n<li>组件化开发思想</li>\n<li>组件的注册方式</li>\n<li>组件的数据交互方式</li>\n<li>组件插槽的用法</li>\n<li>Vue调试工具的用法</li>\n<li>组件的方式实现业务功能</li>\n</ul>\n<h1 id=\"组件化开发思想\"><a href=\"#组件化开发思想\" class=\"headerlink\" title=\"组件化开发思想\"></a>组件化开发思想</h1><ul>\n<li>标准</li>\n<li>分治</li>\n<li>重用</li>\n<li>组合</li>\n</ul>\n<p>写的代码要尽可能多的重用。</p>\n<h2 id=\"组件化规范\"><a href=\"#组件化规范\" class=\"headerlink\" title=\"组件化规范\"></a>组件化规范</h2><p>Web Components: 通过创建封装好功能的定制元素解决重用问题。但是目前还没有被浏览器广泛支持。vue实现了它的部分规范。</p>\n<h2 id=\"组件注册\"><a href=\"#组件注册\" class=\"headerlink\" title=\"组件注册\"></a>组件注册</h2><h4 id=\"全局组件注册语法\"><a href=\"#全局组件注册语法\" class=\"headerlink\" title=\"全局组件注册语法\"></a>全局组件注册语法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(component_name,&#123;</span><br><span class=\"line\">    data: component_data,</span><br><span class=\"line\">    template: template_content</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>e.g.</p>\n<figure class=\"highlight ls\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//定义一个名为button-counter的新组件</span></span><br><span class=\"line\"><span class=\"regexp\">Vue.component(&#x27;button-counter&#x27;,&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">data: function()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    reuturn&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        count; 0</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">template: &#x27;&lt;button v-on:click=&quot;count++&quot;&gt;clicked&#123;&#123;count&#125;&#125;times.&lt;/button&gt;&#x27;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;)</span></span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">&quot;app&quot;</span>&gt;</span><br><span class=\"line\">    &lt;button-counter&gt;&lt;/button-counter&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>组件可以重复用，且数据是独立的。</li>\n<li>data是函数</li>\n<li>组件模板内容必须是单个根元素，可以是<code>模板字符串</code>。<ul>\n<li>模板字符串：增强可读性(反引号内，可以换行)</li>\n</ul>\n</li>\n<li>如果使用驼峰式命名组件，在使用时只能在<code>字符串模板</code>中使用，在普通的标签模板中，必须使用<code>短横线</code>的方式。</li>\n</ul>\n<h4 id=\"局部组件注册\"><a href=\"#局部组件注册\" class=\"headerlink\" title=\"局部组件注册\"></a>局部组件注册</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">&#x27;#app&#x27;</span></span><br><span class=\"line\">    components:&#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;component-a&#x27;</span>: componentA,</span><br><span class=\"line\">    <span class=\"string\">&#x27;component-b&#x27;</span>: componentB,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>e.g.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;hello-tom&gt;&lt;/hello-tom&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> HelloTom = &#123;</span><br><span class=\"line\">    data:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        retrun &#123;</span><br><span class=\"line\">            msg: <span class=\"string\">&#x27;HelloTom&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    template:<span class=\"string\">&#x27;&lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;hello-tom&#x27;</span>: HelloTom</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>局部定义的组件只能在它的父组件中使用。（如果定义了全组组件，不能在其中使用）</li>\n</ul>\n<h3 id=\"DEVTOOLS\"><a href=\"#DEVTOOLS\" class=\"headerlink\" title=\"DEVTOOLS\"></a>DEVTOOLS</h3><p><a href=\"https://github.com/vuejs/vue-devtools\">Vue插件</a>，帮助查看复杂组件之间的关系。</p>\n<h2 id=\"组件间数据交互\"><a href=\"#组件间数据交互\" class=\"headerlink\" title=\"组件间数据交互\"></a>组件间数据交互</h2><p>组件间的关系：父子，兄弟。</p>\n<p>组件内部通过props接收传递过来的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&quot;menu-item&quot;</span>,&#123;</span><br><span class=\"line\">    props: [<span class=\"string\">&#x27;title&#x27;</span>],</span><br><span class=\"line\">    template: <span class=\"string\">&#x27;&lt;div&gt;&#123;&#123;title&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"父组件通过属性将值传递给子组件\"><a href=\"#父组件通过属性将值传递给子组件\" class=\"headerlink\" title=\"父组件通过属性将值传递给子组件\"></a>父组件通过属性将值传递给子组件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;menu-item title=<span class=\"string\">&#x27;data from father&#x27;</span>&gt;&lt;/menu-item&gt;</span><br><span class=\"line\">&lt;menu-item :title=<span class=\"string\">&quot;title&quot;</span>&gt;&lt;/menu-item&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>props传递数据原则：单向数据流。</p>\n<h3 id=\"子组件向福组件传值\"><a href=\"#子组件向福组件传值\" class=\"headerlink\" title=\"子组件向福组件传值\"></a>子组件向福组件传值</h3><p>通过自定义事件向父组件传递信息</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button v-on:click=<span class=\"string\">&#x27;$emit(&quot;enlarge-text&quot;)&#x27;</span>&gt;enlarge text&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button v-on:click=<span class=\"string\">&#x27;$emit(&quot;enlarge-text&quot;,0.1)&#x27;</span>&gt;enlarge text&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>父组件监听子组件的事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;menu-item v-on:enlarge-text=<span class=\"string\">&#x27;fontsize += 0.1&#x27;</span>&gt;&lt;/menu-item&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;menu-item v-on:enlarge-text=<span class=\"string\">&#x27;fontsize += $event&#x27;</span>&gt;&lt;/menu-item&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"兄弟组件间传值\"><a href=\"#兄弟组件间传值\" class=\"headerlink\" title=\"兄弟组件间传值\"></a>兄弟组件间传值</h3><p>单独的事件中心管理组件间的通信</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> eventHub = <span class=\"keyword\">new</span> Vue()</span><br></pre></td></tr></table></figure>\n\n<p>监听事件与销毁</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eventHub.$on(<span class=\"string\">&#x27;add-todo&#x27;</span>,addTodo)</span><br><span class=\"line\">eventHub.$off(<span class=\"string\">&#x27;add-todo&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>触发事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eventHub.$emit(<span class=\"string\">&#x27;add-todo&#x27;</span>,id)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"组件插槽\"><a href=\"#组件插槽\" class=\"headerlink\" title=\"组件插槽\"></a>组件插槽</h2><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;alert-box&#x27;</span>,&#123;</span><br><span class=\"line\">    template:<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div class=&quot;demo-alert-box&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;strong&gt;Error!&lt;/strong&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/div&gt;`</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"插槽内容\"><a href=\"#插槽内容\" class=\"headerlink\" title=\"插槽内容\"></a>插槽内容</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;alert-box&gt;Something bad happened.&lt;/alert-box&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">&quot;app&quot;</span>&gt;</span><br><span class=\"line\">        &lt;alert-box&gt;it<span class=\"string\">&#x27;s a bug&lt;/alert-box&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;alert-box&gt;sythntax mistakes&lt;/alert-box&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;alert-box&gt;&lt;/alert-box&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;script type=&quot;text/javascript&quot; src=&quot;js/vue.js&quot;&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;script type=&quot;text/javascript&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        Vue.component(&#x27;</span>alert-box<span class=\"string\">&#x27;,&#123;</span></span><br><span class=\"line\"><span class=\"string\">            template:`</span></span><br><span class=\"line\"><span class=\"string\">                &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;strong&gt;ERROR: &lt;/strong&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;slot&gt;defautl mistakes&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">            `</span></span><br><span class=\"line\"><span class=\"string\">        &#125;)</span></span><br><span class=\"line\"><span class=\"string\">        var vm = new Vue(&#123;</span></span><br><span class=\"line\">            el: &#x27;#app&#x27;,</span><br><span class=\"line\">            data:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"具名插槽\"><a href=\"#具名插槽\" class=\"headerlink\" title=\"具名插槽\"></a>具名插槽</h3><h4 id=\"插槽定义\"><a href=\"#插槽定义\" class=\"headerlink\" title=\"插槽定义\"></a>插槽定义</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span><br><span class=\"line\">    &lt;header&gt;</span><br><span class=\"line\">        &lt;slot name=<span class=\"string\">&quot;header&quot;</span>&gt;&lt;/slot&gt;</span><br><span class=\"line\">    &lt;/header&gt;</span><br><span class=\"line\">    &lt;main&gt;</span><br><span class=\"line\">            &lt;slot&gt;&lt;/slot&gt;</span><br><span class=\"line\">    &lt;/main&gt;</span><br><span class=\"line\">    &lt;footer&gt;</span><br><span class=\"line\">            &lt;slot name=<span class=\"string\">&quot;footer&quot;</span>&gt;&lt;/slot&gt;</span><br><span class=\"line\">    &lt;/footer&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"插槽内容-1\"><a href=\"#插槽内容-1\" class=\"headerlink\" title=\"插槽内容\"></a>插槽内容</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;base-layout&gt;</span><br><span class=\"line\">    &lt;h1 slot=<span class=\"string\">&quot;header&quot;</span>&gt;title content&lt;/h1&gt;</span><br><span class=\"line\">    &lt;p&gt;main content <span class=\"number\">1</span>&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;main content <span class=\"number\">2</span>&lt;/p&gt;</span><br><span class=\"line\">    &lt;p slot=<span class=\"string\">&quot;footer&quot;</span>&gt;bottom content&lt;/p&gt;</span><br><span class=\"line\">&lt;/base-layout&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"作用域插槽\"><a href=\"#作用域插槽\" class=\"headerlink\" title=\"作用域插槽\"></a>作用域插槽</h3><p>应用场景：父组件对子组件的内容进行加工处理</p>\n<h4 id=\"插槽定义-1\"><a href=\"#插槽定义-1\" class=\"headerlink\" title=\"插槽定义\"></a>插槽定义</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    &lt;li v-<span class=\"keyword\">for</span>=<span class=\"string\">&quot;item in list&quot;</span> v-bind:key=<span class=\"string\">&quot;item.id&quot;</span>&gt;</span><br><span class=\"line\">        &lt;slot v-bind:item=<span class=\"string\">&quot;item&quot;</span>&gt;</span><br><span class=\"line\">            &#123;&#123;item.name&#125;&#125;</span><br><span class=\"line\">         &lt;/slot&gt;</span><br><span class=\"line\">    &lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"加工处理\"><a href=\"#加工处理\" class=\"headerlink\" title=\"加工处理\"></a>加工处理</h4> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;fruit-list :list=<span class=\"string\">&#x27;list&#x27;</span>&gt;</span><br><span class=\"line\">            &lt;template slot-scope=<span class=\"string\">&#x27;slotProps&#x27;</span>&gt;</span><br><span class=\"line\">                &lt;strong <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&#x27;current&#x27;</span> v-<span class=\"keyword\">if</span>=<span class=\"string\">&#x27;slotProps.item.id == 2&#x27;</span>&gt;&#123;&#123;slotProps.item.name&#125;&#125;&lt;/strong&gt;</span><br><span class=\"line\">            &lt;/template&gt;</span><br><span class=\"line\">        &lt;/fruit-list&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"购物车\"><a href=\"#购物车\" class=\"headerlink\" title=\"购物车\"></a>购物车</h1><p>组件化方式实现业务需求</p>\n<p>根据业务功能进行组件化划分</p>\n<ul>\n<li>标题（展示文本）</li>\n<li>列表（展示、数量变更、删除）</li>\n<li>结算（计算商品总额）</li>\n</ul>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>vue组件化开发</p>","more":"<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><ul>\n<li>组件化开发思想</li>\n<li>组件的注册方式</li>\n<li>组件的数据交互方式</li>\n<li>组件插槽的用法</li>\n<li>Vue调试工具的用法</li>\n<li>组件的方式实现业务功能</li>\n</ul>\n<h1 id=\"组件化开发思想\"><a href=\"#组件化开发思想\" class=\"headerlink\" title=\"组件化开发思想\"></a>组件化开发思想</h1><ul>\n<li>标准</li>\n<li>分治</li>\n<li>重用</li>\n<li>组合</li>\n</ul>\n<p>写的代码要尽可能多的重用。</p>\n<h2 id=\"组件化规范\"><a href=\"#组件化规范\" class=\"headerlink\" title=\"组件化规范\"></a>组件化规范</h2><p>Web Components: 通过创建封装好功能的定制元素解决重用问题。但是目前还没有被浏览器广泛支持。vue实现了它的部分规范。</p>\n<h2 id=\"组件注册\"><a href=\"#组件注册\" class=\"headerlink\" title=\"组件注册\"></a>组件注册</h2><h4 id=\"全局组件注册语法\"><a href=\"#全局组件注册语法\" class=\"headerlink\" title=\"全局组件注册语法\"></a>全局组件注册语法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(component_name,&#123;</span><br><span class=\"line\">    data: component_data,</span><br><span class=\"line\">    template: template_content</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>e.g.</p>\n<figure class=\"highlight ls\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//定义一个名为button-counter的新组件</span></span><br><span class=\"line\"><span class=\"regexp\">Vue.component(&#x27;button-counter&#x27;,&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">data: function()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    reuturn&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        count; 0</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">template: &#x27;&lt;button v-on:click=&quot;count++&quot;&gt;clicked&#123;&#123;count&#125;&#125;times.&lt;/button&gt;&#x27;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;)</span></span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">&quot;app&quot;</span>&gt;</span><br><span class=\"line\">    &lt;button-counter&gt;&lt;/button-counter&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>组件可以重复用，且数据是独立的。</li>\n<li>data是函数</li>\n<li>组件模板内容必须是单个根元素，可以是<code>模板字符串</code>。<ul>\n<li>模板字符串：增强可读性(反引号内，可以换行)</li>\n</ul>\n</li>\n<li>如果使用驼峰式命名组件，在使用时只能在<code>字符串模板</code>中使用，在普通的标签模板中，必须使用<code>短横线</code>的方式。</li>\n</ul>\n<h4 id=\"局部组件注册\"><a href=\"#局部组件注册\" class=\"headerlink\" title=\"局部组件注册\"></a>局部组件注册</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">&#x27;#app&#x27;</span></span><br><span class=\"line\">    components:&#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;component-a&#x27;</span>: componentA,</span><br><span class=\"line\">    <span class=\"string\">&#x27;component-b&#x27;</span>: componentB,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>e.g.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;hello-tom&gt;&lt;/hello-tom&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> HelloTom = &#123;</span><br><span class=\"line\">    data:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        retrun &#123;</span><br><span class=\"line\">            msg: <span class=\"string\">&#x27;HelloTom&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    template:<span class=\"string\">&#x27;&lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;hello-tom&#x27;</span>: HelloTom</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>局部定义的组件只能在它的父组件中使用。（如果定义了全组组件，不能在其中使用）</li>\n</ul>\n<h3 id=\"DEVTOOLS\"><a href=\"#DEVTOOLS\" class=\"headerlink\" title=\"DEVTOOLS\"></a>DEVTOOLS</h3><p><a href=\"https://github.com/vuejs/vue-devtools\">Vue插件</a>，帮助查看复杂组件之间的关系。</p>\n<h2 id=\"组件间数据交互\"><a href=\"#组件间数据交互\" class=\"headerlink\" title=\"组件间数据交互\"></a>组件间数据交互</h2><p>组件间的关系：父子，兄弟。</p>\n<p>组件内部通过props接收传递过来的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&quot;menu-item&quot;</span>,&#123;</span><br><span class=\"line\">    props: [<span class=\"string\">&#x27;title&#x27;</span>],</span><br><span class=\"line\">    template: <span class=\"string\">&#x27;&lt;div&gt;&#123;&#123;title&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"父组件通过属性将值传递给子组件\"><a href=\"#父组件通过属性将值传递给子组件\" class=\"headerlink\" title=\"父组件通过属性将值传递给子组件\"></a>父组件通过属性将值传递给子组件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;menu-item title=<span class=\"string\">&#x27;data from father&#x27;</span>&gt;&lt;/menu-item&gt;</span><br><span class=\"line\">&lt;menu-item :title=<span class=\"string\">&quot;title&quot;</span>&gt;&lt;/menu-item&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>props传递数据原则：单向数据流。</p>\n<h3 id=\"子组件向福组件传值\"><a href=\"#子组件向福组件传值\" class=\"headerlink\" title=\"子组件向福组件传值\"></a>子组件向福组件传值</h3><p>通过自定义事件向父组件传递信息</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button v-on:click=<span class=\"string\">&#x27;$emit(&quot;enlarge-text&quot;)&#x27;</span>&gt;enlarge text&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button v-on:click=<span class=\"string\">&#x27;$emit(&quot;enlarge-text&quot;,0.1)&#x27;</span>&gt;enlarge text&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>父组件监听子组件的事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;menu-item v-on:enlarge-text=<span class=\"string\">&#x27;fontsize += 0.1&#x27;</span>&gt;&lt;/menu-item&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;menu-item v-on:enlarge-text=<span class=\"string\">&#x27;fontsize += $event&#x27;</span>&gt;&lt;/menu-item&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"兄弟组件间传值\"><a href=\"#兄弟组件间传值\" class=\"headerlink\" title=\"兄弟组件间传值\"></a>兄弟组件间传值</h3><p>单独的事件中心管理组件间的通信</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> eventHub = <span class=\"keyword\">new</span> Vue()</span><br></pre></td></tr></table></figure>\n\n<p>监听事件与销毁</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eventHub.$on(<span class=\"string\">&#x27;add-todo&#x27;</span>,addTodo)</span><br><span class=\"line\">eventHub.$off(<span class=\"string\">&#x27;add-todo&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>触发事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eventHub.$emit(<span class=\"string\">&#x27;add-todo&#x27;</span>,id)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"组件插槽\"><a href=\"#组件插槽\" class=\"headerlink\" title=\"组件插槽\"></a>组件插槽</h2><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;alert-box&#x27;</span>,&#123;</span><br><span class=\"line\">    template:<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div class=&quot;demo-alert-box&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;strong&gt;Error!&lt;/strong&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/div&gt;`</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"插槽内容\"><a href=\"#插槽内容\" class=\"headerlink\" title=\"插槽内容\"></a>插槽内容</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;alert-box&gt;Something bad happened.&lt;/alert-box&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">&quot;app&quot;</span>&gt;</span><br><span class=\"line\">        &lt;alert-box&gt;it<span class=\"string\">&#x27;s a bug&lt;/alert-box&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;alert-box&gt;sythntax mistakes&lt;/alert-box&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;alert-box&gt;&lt;/alert-box&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;script type=&quot;text/javascript&quot; src=&quot;js/vue.js&quot;&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;script type=&quot;text/javascript&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        Vue.component(&#x27;</span>alert-box<span class=\"string\">&#x27;,&#123;</span></span><br><span class=\"line\"><span class=\"string\">            template:`</span></span><br><span class=\"line\"><span class=\"string\">                &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;strong&gt;ERROR: &lt;/strong&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;slot&gt;defautl mistakes&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">            `</span></span><br><span class=\"line\"><span class=\"string\">        &#125;)</span></span><br><span class=\"line\"><span class=\"string\">        var vm = new Vue(&#123;</span></span><br><span class=\"line\">            el: &#x27;#app&#x27;,</span><br><span class=\"line\">            data:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"具名插槽\"><a href=\"#具名插槽\" class=\"headerlink\" title=\"具名插槽\"></a>具名插槽</h3><h4 id=\"插槽定义\"><a href=\"#插槽定义\" class=\"headerlink\" title=\"插槽定义\"></a>插槽定义</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span><br><span class=\"line\">    &lt;header&gt;</span><br><span class=\"line\">        &lt;slot name=<span class=\"string\">&quot;header&quot;</span>&gt;&lt;/slot&gt;</span><br><span class=\"line\">    &lt;/header&gt;</span><br><span class=\"line\">    &lt;main&gt;</span><br><span class=\"line\">            &lt;slot&gt;&lt;/slot&gt;</span><br><span class=\"line\">    &lt;/main&gt;</span><br><span class=\"line\">    &lt;footer&gt;</span><br><span class=\"line\">            &lt;slot name=<span class=\"string\">&quot;footer&quot;</span>&gt;&lt;/slot&gt;</span><br><span class=\"line\">    &lt;/footer&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"插槽内容-1\"><a href=\"#插槽内容-1\" class=\"headerlink\" title=\"插槽内容\"></a>插槽内容</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;base-layout&gt;</span><br><span class=\"line\">    &lt;h1 slot=<span class=\"string\">&quot;header&quot;</span>&gt;title content&lt;/h1&gt;</span><br><span class=\"line\">    &lt;p&gt;main content <span class=\"number\">1</span>&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;main content <span class=\"number\">2</span>&lt;/p&gt;</span><br><span class=\"line\">    &lt;p slot=<span class=\"string\">&quot;footer&quot;</span>&gt;bottom content&lt;/p&gt;</span><br><span class=\"line\">&lt;/base-layout&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"作用域插槽\"><a href=\"#作用域插槽\" class=\"headerlink\" title=\"作用域插槽\"></a>作用域插槽</h3><p>应用场景：父组件对子组件的内容进行加工处理</p>\n<h4 id=\"插槽定义-1\"><a href=\"#插槽定义-1\" class=\"headerlink\" title=\"插槽定义\"></a>插槽定义</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    &lt;li v-<span class=\"keyword\">for</span>=<span class=\"string\">&quot;item in list&quot;</span> v-bind:key=<span class=\"string\">&quot;item.id&quot;</span>&gt;</span><br><span class=\"line\">        &lt;slot v-bind:item=<span class=\"string\">&quot;item&quot;</span>&gt;</span><br><span class=\"line\">            &#123;&#123;item.name&#125;&#125;</span><br><span class=\"line\">         &lt;/slot&gt;</span><br><span class=\"line\">    &lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"加工处理\"><a href=\"#加工处理\" class=\"headerlink\" title=\"加工处理\"></a>加工处理</h4> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;fruit-list :list=<span class=\"string\">&#x27;list&#x27;</span>&gt;</span><br><span class=\"line\">            &lt;template slot-scope=<span class=\"string\">&#x27;slotProps&#x27;</span>&gt;</span><br><span class=\"line\">                &lt;strong <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&#x27;current&#x27;</span> v-<span class=\"keyword\">if</span>=<span class=\"string\">&#x27;slotProps.item.id == 2&#x27;</span>&gt;&#123;&#123;slotProps.item.name&#125;&#125;&lt;/strong&gt;</span><br><span class=\"line\">            &lt;/template&gt;</span><br><span class=\"line\">        &lt;/fruit-list&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"购物车\"><a href=\"#购物车\" class=\"headerlink\" title=\"购物车\"></a>购物车</h1><p>组件化方式实现业务需求</p>\n<p>根据业务功能进行组件化划分</p>\n<ul>\n<li>标题（展示文本）</li>\n<li>列表（展示、数量变更、删除）</li>\n<li>结算（计算商品总额）</li>\n</ul>"},{"title":"vue04","date":"2020-01-19T07:07:46.000Z","_content":"\nvue的与后端交互。\n\n<!-- more -->\n\n# 序\n\n- 前后端交互模式\n- promise用法\n- 接口调用-fech用法\n- 接口调用-axios用法\n- 接口与调用-async/await用法\n\n# 接口调用方式\n\n原生：\n\n- ajax\n- 基于jQuery的ajax\n\nnew：\n\n- fetch\n- axios\n\n## resful形式的url\n\nhttp请求方式\n\n- GET 查询\n- POST 添加\n- PUT 修改\n- DELETE 删除\n\n符合规则的url\n\n- http://www.hello.com/books GET, POST\n- http://www.hello.com/books/1284 PUT, DELTE\n\nnote: 传统的url传送数据依赖JSON，与请求方式无关。\n\n## Promise\n\n异步编程的一种解决方案，语法上来讲，，promise是一个对象，可以获取异步操作的消息。[official site](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Promise)\n\n优点：\n\n- 避免多层异步调用嵌套问题（**回调地狱**）\n- promise对象提供了简洁的api\n\n### 基本用法\n\n- 实例化Promise对象，构造函数中传递函数，用于处理异步任务\n- `resolve`和`reject`两个参数用于处理成功和失败两种情况，并通过p.then获取处理结果\n\n```js\nvar p = new Promise(function(resolve, reject){\n    //invoke resovle() when success\n    //inovke reject() when fail\n});\np.then(function(ret){\n    //get info from resolve\n}, function(ret){\n    //get info from reject\n});\n```\n\n### 常用api\n\n#### api方法\n\n- p.then() 得到异步任务的正确结果\n- p.catch() 获取异常信息\n- p.finally() 成功与否都会执行\n\n```js\nqueryData()\n.then(function(data){\n    console.log(data);;\n})\n.catch(function(data){\n    console.logg(data);\n})\n.finally(function(){\n    cosnole.log('finished');\n})\n```\n\n#### 对象方法\n\n- promise.all() 并发处理多个异步任务，所有任务都完成才能得到结果\n- promise.race() 并发处理多个任务，只要有一个任务完成救就能得到结果\n\n```js\nPromise.all([p1,p2,p3]).then((result)=>{\n    console.log(result)\n})\n\nPromise.race([p1, p2, p3]).then((result) => {\n    console.log(result)\n})\n```\n\n## fetch\n\n传统ajax的升级版，基于promise来实现。\n\n###  语法\n\n```js\nfetch(url).then(fn2)\n\t\t  .then(fn3)\n\t\t  ...\n          .cathc(fn)\n```\n\n```js\nfetch('/abc').then(data=>{\n    return data.text();\n}).then(ret=>{\n    //final data\n    console.log(ret);\n})\n```\n\n**note**: text()方法属于fetch API的一部分，它返回一个promise实例对象，用于获取后台返回的数据。\n\n### 常用配置选项\n\n- method(String): Http request, defautl *GET*\n- body(String): Http reqeust parameters\n- header(Object): Http request header, defualt {}\n\n```js\nfetch('/abc', {\n    method: 'get'\n}).then(data=>{\n    return data.text();\n}).then(ret=>{\n    console.log(ret);\n})\n```\n\n#### GET/DELTE\n\n- tranditional:\n\n```js\nfetch('/abc?id=123').then(data=>{\n    return data.text();\n}).then(ret=>{\n    console.log(ret);\n})\n```\n\n- restful:\n\n```js\nfetch('/abc/123',{\n    method: 'get'\n}).then(data=>{\n    return data.text();\n}).then(ret=>{\n    console.log(ret);\n})\n```\n\n\n\n#### POST/PUT\n\n```js\nfetch('/books/,{\n      method: 'post',\n      //body: 'uname=list&pwd=123',\n      body: JOSN.stringify({\n      \tuname: 'lisa',\n      \tpwd: '123'\n      })\n      headers:{\n      \t//'Content-Type': 'application/x-www-form-urlencoded',\n          'Content-Type':'application/json'\n      }\n      }).then(data=>{\n          return data.text();\n      }).then(ret=>{\n          console.log(ret);\n      })\n```\n\n\n\n### 响应数据格式\n\n- text(): 将返回体处理成字符串类型\n- json(): 返回结果和JSON.parse(responseText)一样\n\n\n\n## axios\n\nreferece [official site](https://github.com/axios/axios)\n\n特点：\n\n- 支持浏览器和node.js\n- 支持promise\n- 能拦截请求和响应\n- 自动转换JSON数据\n\n### 基本用法\n\n```js\naxios.get('/data')\n\t.then(ret=>{\n    console.log(ret.data)\n})\n```\n\n使用前需要引入\n\n```js\n<script type=\"text/ajvascript\" src=\"js/axios.js\"></script>\n```\n\n### 常用API\n\n#### GET/DELETE\n\n- 通过url传参\n- 通过params传参\n\n```js\naxios.get('/data?id=123')\n\t.then(ret=>{\n    coonsole.log(ret.data)\n})\n```\n\n```js\naxios.get('/data/24')\n\t.then(ret=>{\n    console.log(ret.data)\n})\n```\n\n```js\naxios.get('/data',{\n    params:{\n        id:123\n    }\n})\n.then(ret=>{\n    console.log(ret.data)\n})\n```\n\n\n\n#### POST/PUT\n\n- 通过选项传递参数（默认传递的是json格式的数据）\n\n```js\naxios.post('/data',{\n    uname: 'tom',\n    pwd: 123\n}).then(ret=>{\n    console.log(ret.data)\n})\n```\n\n- 通过URLSearchParams传递参数\n\n```js\nconst params = new URLSearchParams();\nparams.append('param1','value1');\nparams.append('param2', 'value2');\naxios.post('/api/test', params).then(ret=>{\n    console.log(ret.data)\n})\n```\n\n### 响应结果\n\n- data(json形式)\n- headers\n- status\n- statusText\n\n### 全局配置\n\n- axios.default.timeout = 3000;//ms, 超时时间\n- axios.default.baseURL = \"http://localhost:3000/app\";//默认地址的前部分\n- axios.default.headers[ 'mytoken' ] = \"adf1844934nadfnaodn02\"; //设置请求头\n\n```html\n<body>\n    axios.default.baseURL = 'http://localhost:3000/';\n    ...\n</body>\n```\n\n\n\n### 拦截器\n\n#### 请求拦截器\n\n在请求发出去之前设置一些信息\n\n```js\naxios.interceptors.request.use(function(config){\n    return config;\n}. function(err){\n                               \n})\n```\n\n#### 响应拦截器\n\n在获取数据之前对数据做一些加工处理\n\n```js\naxios.interceptors.response.use(function(res){\n    return res;\n}, function(err){\n    \n})\n```\n\n## async/await\n\nES7引入的新语法，可以更加方便的进行异步操作。\n\nasync关键字用于函数上，await关键字用于async函数中。\n\n```js\nasync function queryData(id){\n    const ret = await axios.get('/data');\n    return ret;\n}\n\nqueryData.then(ret=>{\n    console.log(ret)\n})\n```\n\n#### 处理多个异步\n\n```js\nasync function queryData(){\n    var ino = await axios.get('async1');\n    var ret = await axios.get('async2' + info.data);\n    return ret.data;\n}\n\nqueryData().then(function(data){\n    console.log(data)\n})\n```\n\n","source":"_posts/vue04.md","raw":"---\ntitle: vue04\ndate: 2020-01-19 15:07:46\ncategories: Vue\ntags: vue\n---\n\nvue的与后端交互。\n\n<!-- more -->\n\n# 序\n\n- 前后端交互模式\n- promise用法\n- 接口调用-fech用法\n- 接口调用-axios用法\n- 接口与调用-async/await用法\n\n# 接口调用方式\n\n原生：\n\n- ajax\n- 基于jQuery的ajax\n\nnew：\n\n- fetch\n- axios\n\n## resful形式的url\n\nhttp请求方式\n\n- GET 查询\n- POST 添加\n- PUT 修改\n- DELETE 删除\n\n符合规则的url\n\n- http://www.hello.com/books GET, POST\n- http://www.hello.com/books/1284 PUT, DELTE\n\nnote: 传统的url传送数据依赖JSON，与请求方式无关。\n\n## Promise\n\n异步编程的一种解决方案，语法上来讲，，promise是一个对象，可以获取异步操作的消息。[official site](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Promise)\n\n优点：\n\n- 避免多层异步调用嵌套问题（**回调地狱**）\n- promise对象提供了简洁的api\n\n### 基本用法\n\n- 实例化Promise对象，构造函数中传递函数，用于处理异步任务\n- `resolve`和`reject`两个参数用于处理成功和失败两种情况，并通过p.then获取处理结果\n\n```js\nvar p = new Promise(function(resolve, reject){\n    //invoke resovle() when success\n    //inovke reject() when fail\n});\np.then(function(ret){\n    //get info from resolve\n}, function(ret){\n    //get info from reject\n});\n```\n\n### 常用api\n\n#### api方法\n\n- p.then() 得到异步任务的正确结果\n- p.catch() 获取异常信息\n- p.finally() 成功与否都会执行\n\n```js\nqueryData()\n.then(function(data){\n    console.log(data);;\n})\n.catch(function(data){\n    console.logg(data);\n})\n.finally(function(){\n    cosnole.log('finished');\n})\n```\n\n#### 对象方法\n\n- promise.all() 并发处理多个异步任务，所有任务都完成才能得到结果\n- promise.race() 并发处理多个任务，只要有一个任务完成救就能得到结果\n\n```js\nPromise.all([p1,p2,p3]).then((result)=>{\n    console.log(result)\n})\n\nPromise.race([p1, p2, p3]).then((result) => {\n    console.log(result)\n})\n```\n\n## fetch\n\n传统ajax的升级版，基于promise来实现。\n\n###  语法\n\n```js\nfetch(url).then(fn2)\n\t\t  .then(fn3)\n\t\t  ...\n          .cathc(fn)\n```\n\n```js\nfetch('/abc').then(data=>{\n    return data.text();\n}).then(ret=>{\n    //final data\n    console.log(ret);\n})\n```\n\n**note**: text()方法属于fetch API的一部分，它返回一个promise实例对象，用于获取后台返回的数据。\n\n### 常用配置选项\n\n- method(String): Http request, defautl *GET*\n- body(String): Http reqeust parameters\n- header(Object): Http request header, defualt {}\n\n```js\nfetch('/abc', {\n    method: 'get'\n}).then(data=>{\n    return data.text();\n}).then(ret=>{\n    console.log(ret);\n})\n```\n\n#### GET/DELTE\n\n- tranditional:\n\n```js\nfetch('/abc?id=123').then(data=>{\n    return data.text();\n}).then(ret=>{\n    console.log(ret);\n})\n```\n\n- restful:\n\n```js\nfetch('/abc/123',{\n    method: 'get'\n}).then(data=>{\n    return data.text();\n}).then(ret=>{\n    console.log(ret);\n})\n```\n\n\n\n#### POST/PUT\n\n```js\nfetch('/books/,{\n      method: 'post',\n      //body: 'uname=list&pwd=123',\n      body: JOSN.stringify({\n      \tuname: 'lisa',\n      \tpwd: '123'\n      })\n      headers:{\n      \t//'Content-Type': 'application/x-www-form-urlencoded',\n          'Content-Type':'application/json'\n      }\n      }).then(data=>{\n          return data.text();\n      }).then(ret=>{\n          console.log(ret);\n      })\n```\n\n\n\n### 响应数据格式\n\n- text(): 将返回体处理成字符串类型\n- json(): 返回结果和JSON.parse(responseText)一样\n\n\n\n## axios\n\nreferece [official site](https://github.com/axios/axios)\n\n特点：\n\n- 支持浏览器和node.js\n- 支持promise\n- 能拦截请求和响应\n- 自动转换JSON数据\n\n### 基本用法\n\n```js\naxios.get('/data')\n\t.then(ret=>{\n    console.log(ret.data)\n})\n```\n\n使用前需要引入\n\n```js\n<script type=\"text/ajvascript\" src=\"js/axios.js\"></script>\n```\n\n### 常用API\n\n#### GET/DELETE\n\n- 通过url传参\n- 通过params传参\n\n```js\naxios.get('/data?id=123')\n\t.then(ret=>{\n    coonsole.log(ret.data)\n})\n```\n\n```js\naxios.get('/data/24')\n\t.then(ret=>{\n    console.log(ret.data)\n})\n```\n\n```js\naxios.get('/data',{\n    params:{\n        id:123\n    }\n})\n.then(ret=>{\n    console.log(ret.data)\n})\n```\n\n\n\n#### POST/PUT\n\n- 通过选项传递参数（默认传递的是json格式的数据）\n\n```js\naxios.post('/data',{\n    uname: 'tom',\n    pwd: 123\n}).then(ret=>{\n    console.log(ret.data)\n})\n```\n\n- 通过URLSearchParams传递参数\n\n```js\nconst params = new URLSearchParams();\nparams.append('param1','value1');\nparams.append('param2', 'value2');\naxios.post('/api/test', params).then(ret=>{\n    console.log(ret.data)\n})\n```\n\n### 响应结果\n\n- data(json形式)\n- headers\n- status\n- statusText\n\n### 全局配置\n\n- axios.default.timeout = 3000;//ms, 超时时间\n- axios.default.baseURL = \"http://localhost:3000/app\";//默认地址的前部分\n- axios.default.headers[ 'mytoken' ] = \"adf1844934nadfnaodn02\"; //设置请求头\n\n```html\n<body>\n    axios.default.baseURL = 'http://localhost:3000/';\n    ...\n</body>\n```\n\n\n\n### 拦截器\n\n#### 请求拦截器\n\n在请求发出去之前设置一些信息\n\n```js\naxios.interceptors.request.use(function(config){\n    return config;\n}. function(err){\n                               \n})\n```\n\n#### 响应拦截器\n\n在获取数据之前对数据做一些加工处理\n\n```js\naxios.interceptors.response.use(function(res){\n    return res;\n}, function(err){\n    \n})\n```\n\n## async/await\n\nES7引入的新语法，可以更加方便的进行异步操作。\n\nasync关键字用于函数上，await关键字用于async函数中。\n\n```js\nasync function queryData(id){\n    const ret = await axios.get('/data');\n    return ret;\n}\n\nqueryData.then(ret=>{\n    console.log(ret)\n})\n```\n\n#### 处理多个异步\n\n```js\nasync function queryData(){\n    var ino = await axios.get('async1');\n    var ret = await axios.get('async2' + info.data);\n    return ret.data;\n}\n\nqueryData().then(function(data){\n    console.log(data)\n})\n```\n\n","slug":"vue04","published":1,"updated":"2020-07-19T17:29:13.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgdy0049byih5n60acnv","content":"<p>vue的与后端交互。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><ul>\n<li>前后端交互模式</li>\n<li>promise用法</li>\n<li>接口调用-fech用法</li>\n<li>接口调用-axios用法</li>\n<li>接口与调用-async/await用法</li>\n</ul>\n<h1 id=\"接口调用方式\"><a href=\"#接口调用方式\" class=\"headerlink\" title=\"接口调用方式\"></a>接口调用方式</h1><p>原生：</p>\n<ul>\n<li>ajax</li>\n<li>基于jQuery的ajax</li>\n</ul>\n<p>new：</p>\n<ul>\n<li>fetch</li>\n<li>axios</li>\n</ul>\n<h2 id=\"resful形式的url\"><a href=\"#resful形式的url\" class=\"headerlink\" title=\"resful形式的url\"></a>resful形式的url</h2><p>http请求方式</p>\n<ul>\n<li>GET 查询</li>\n<li>POST 添加</li>\n<li>PUT 修改</li>\n<li>DELETE 删除</li>\n</ul>\n<p>符合规则的url</p>\n<ul>\n<li><a href=\"http://www.hello.com/books\">http://www.hello.com/books</a> GET, POST</li>\n<li><a href=\"http://www.hello.com/books/1284\">http://www.hello.com/books/1284</a> PUT, DELTE</li>\n</ul>\n<p>note: 传统的url传送数据依赖JSON，与请求方式无关。</p>\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><p>异步编程的一种解决方案，语法上来讲，，promise是一个对象，可以获取异步操作的消息。<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Promise\">official site</a></p>\n<p>优点：</p>\n<ul>\n<li>避免多层异步调用嵌套问题（<strong>回调地狱</strong>）</li>\n<li>promise对象提供了简洁的api</li>\n</ul>\n<h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><ul>\n<li>实例化Promise对象，构造函数中传递函数，用于处理异步任务</li>\n<li><code>resolve</code>和<code>reject</code>两个参数用于处理成功和失败两种情况，并通过p.then获取处理结果</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//invoke resovle() when success</span></span><br><span class=\"line\">    <span class=\"comment\">//inovke reject() when fail</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ret</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//get info from resolve</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ret</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//get info from reject</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用api\"><a href=\"#常用api\" class=\"headerlink\" title=\"常用api\"></a>常用api</h3><h4 id=\"api方法\"><a href=\"#api方法\" class=\"headerlink\" title=\"api方法\"></a>api方法</h4><ul>\n<li>p.then() 得到异步任务的正确结果</li>\n<li>p.catch() 获取异常信息</li>\n<li>p.finally() 成功与否都会执行</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryData()</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.logg(data);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.finally(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cosnole.log(<span class=\"string\">&#x27;finished&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"对象方法\"><a href=\"#对象方法\" class=\"headerlink\" title=\"对象方法\"></a>对象方法</h4><ul>\n<li>promise.all() 并发处理多个异步任务，所有任务都完成才能得到结果</li>\n<li>promise.race() 并发处理多个任务，只要有一个任务完成救就能得到结果</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all([p1,p2,p3]).then(<span class=\"function\">(<span class=\"params\">result</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([p1, p2, p3]).then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fetch\"><a href=\"#fetch\" class=\"headerlink\" title=\"fetch\"></a>fetch</h2><p>传统ajax的升级版，基于promise来实现。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(url).then(fn2)</span><br><span class=\"line\">          .then(fn3)</span><br><span class=\"line\">          ...</span><br><span class=\"line\">          .cathc(fn)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">&#x27;/abc&#x27;</span>).then(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data.text();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">ret</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//final data</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ret);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>note</strong>: text()方法属于fetch API的一部分，它返回一个promise实例对象，用于获取后台返回的数据。</p>\n<h3 id=\"常用配置选项\"><a href=\"#常用配置选项\" class=\"headerlink\" title=\"常用配置选项\"></a>常用配置选项</h3><ul>\n<li>method(String): Http request, defautl <em>GET</em></li>\n<li>body(String): Http reqeust parameters</li>\n<li>header(Object): Http request header, defualt {}</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">&#x27;/abc&#x27;</span>, &#123;</span><br><span class=\"line\">    method: <span class=\"string\">&#x27;get&#x27;</span></span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data.text();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">ret</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ret);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"GET-DELTE\"><a href=\"#GET-DELTE\" class=\"headerlink\" title=\"GET/DELTE\"></a>GET/DELTE</h4><ul>\n<li>tranditional:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">&#x27;/abc?id=123&#x27;</span>).then(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data.text();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">ret</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ret);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>restful:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">&#x27;/abc/123&#x27;</span>,&#123;</span><br><span class=\"line\">    method: <span class=\"string\">&#x27;get&#x27;</span></span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data.text();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">ret</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ret);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"POST-PUT\"><a href=\"#POST-PUT\" class=\"headerlink\" title=\"POST/PUT\"></a>POST/PUT</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">&#x27;/books/,&#123;</span></span><br><span class=\"line\"><span class=\"string\">      method: &#x27;</span>post<span class=\"string\">&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">      //body: &#x27;</span>uname=list&amp;pwd=<span class=\"number\">123</span><span class=\"string\">&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">      body: JOSN.stringify(&#123;</span></span><br><span class=\"line\"><span class=\"string\">          uname: &#x27;</span>lisa<span class=\"string\">&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">          pwd: &#x27;</span><span class=\"number\">123</span><span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">      &#125;)</span></span><br><span class=\"line\"><span class=\"string\">      headers:&#123;</span></span><br><span class=\"line\"><span class=\"string\">          //&#x27;</span>Content-Type<span class=\"string\">&#x27;: &#x27;</span>application/x-www-form-urlencoded<span class=\"string\">&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">          &#x27;</span>Content-Type<span class=\"string\">&#x27;:&#x27;</span>application/json<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\">      &#125;).then(data=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"string\">          return data.text();</span></span><br><span class=\"line\"><span class=\"string\">      &#125;).then(ret=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"string\">          console.log(ret);</span></span><br><span class=\"line\"><span class=\"string\">      &#125;)</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"响应数据格式\"><a href=\"#响应数据格式\" class=\"headerlink\" title=\"响应数据格式\"></a>响应数据格式</h3><ul>\n<li>text(): 将返回体处理成字符串类型</li>\n<li>json(): 返回结果和JSON.parse(responseText)一样</li>\n</ul>\n<h2 id=\"axios\"><a href=\"#axios\" class=\"headerlink\" title=\"axios\"></a>axios</h2><p>referece <a href=\"https://github.com/axios/axios\">official site</a></p>\n<p>特点：</p>\n<ul>\n<li>支持浏览器和node.js</li>\n<li>支持promise</li>\n<li>能拦截请求和响应</li>\n<li>自动转换JSON数据</li>\n</ul>\n<h3 id=\"基本用法-1\"><a href=\"#基本用法-1\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.get(<span class=\"string\">&#x27;/data&#x27;</span>)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">ret</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ret.data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>使用前需要引入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/ajvascript&quot;</span> src=<span class=\"string\">&quot;js/axios.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用API\"><a href=\"#常用API\" class=\"headerlink\" title=\"常用API\"></a>常用API</h3><h4 id=\"GET-DELETE\"><a href=\"#GET-DELETE\" class=\"headerlink\" title=\"GET/DELETE\"></a>GET/DELETE</h4><ul>\n<li>通过url传参</li>\n<li>通过params传参</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.get(<span class=\"string\">&#x27;/data?id=123&#x27;</span>)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">ret</span>=&gt;</span>&#123;</span><br><span class=\"line\">    coonsole.log(ret.data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.get(<span class=\"string\">&#x27;/data/24&#x27;</span>)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">ret</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ret.data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.get(<span class=\"string\">&#x27;/data&#x27;</span>,&#123;</span><br><span class=\"line\">    params:&#123;</span><br><span class=\"line\">        id:<span class=\"number\">123</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">ret</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ret.data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"POST-PUT-1\"><a href=\"#POST-PUT-1\" class=\"headerlink\" title=\"POST/PUT\"></a>POST/PUT</h4><ul>\n<li>通过选项传递参数（默认传递的是json格式的数据）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.post(<span class=\"string\">&#x27;/data&#x27;</span>,&#123;</span><br><span class=\"line\">    uname: <span class=\"string\">&#x27;tom&#x27;</span>,</span><br><span class=\"line\">    pwd: <span class=\"number\">123</span></span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">ret</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ret.data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过URLSearchParams传递参数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> params = <span class=\"keyword\">new</span> URLSearchParams();</span><br><span class=\"line\">params.append(<span class=\"string\">&#x27;param1&#x27;</span>,<span class=\"string\">&#x27;value1&#x27;</span>);</span><br><span class=\"line\">params.append(<span class=\"string\">&#x27;param2&#x27;</span>, <span class=\"string\">&#x27;value2&#x27;</span>);</span><br><span class=\"line\">axios.post(<span class=\"string\">&#x27;/api/test&#x27;</span>, params).then(<span class=\"function\"><span class=\"params\">ret</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ret.data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"响应结果\"><a href=\"#响应结果\" class=\"headerlink\" title=\"响应结果\"></a>响应结果</h3><ul>\n<li>data(json形式)</li>\n<li>headers</li>\n<li>status</li>\n<li>statusText</li>\n</ul>\n<h3 id=\"全局配置\"><a href=\"#全局配置\" class=\"headerlink\" title=\"全局配置\"></a>全局配置</h3><ul>\n<li>axios.default.timeout = 3000;//ms, 超时时间</li>\n<li>axios.default.baseURL = “<a href=\"http://localhost:3000/app&quot;;//%E9%BB%98%E8%AE%A4%E5%9C%B0%E5%9D%80%E7%9A%84%E5%89%8D%E9%83%A8%E5%88%86\">http://localhost:3000/app&quot;;//默认地址的前部分</a></li>\n<li>axios.default.headers[ ‘mytoken’ ] = “adf1844934nadfnaodn02”; //设置请求头</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    axios.default.baseURL = &#x27;http://localhost:3000/&#x27;;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h3><h4 id=\"请求拦截器\"><a href=\"#请求拦截器\" class=\"headerlink\" title=\"请求拦截器\"></a>请求拦截器</h4><p>在请求发出去之前设置一些信息</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.interceptors.request.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">&#125;. function(err)&#123;</span><br><span class=\"line\">                               </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"响应拦截器\"><a href=\"#响应拦截器\" class=\"headerlink\" title=\"响应拦截器\"></a>响应拦截器</h4><p>在获取数据之前对数据做一些加工处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.interceptors.response.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async/await\"></a>async/await</h2><p>ES7引入的新语法，可以更加方便的进行异步操作。</p>\n<p>async关键字用于函数上，await关键字用于async函数中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queryData</span>(<span class=\"params\">id</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ret = <span class=\"keyword\">await</span> axios.get(<span class=\"string\">&#x27;/data&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">queryData.then(<span class=\"function\"><span class=\"params\">ret</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ret)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"处理多个异步\"><a href=\"#处理多个异步\" class=\"headerlink\" title=\"处理多个异步\"></a>处理多个异步</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queryData</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ino = <span class=\"keyword\">await</span> axios.get(<span class=\"string\">&#x27;async1&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret = <span class=\"keyword\">await</span> axios.get(<span class=\"string\">&#x27;async2&#x27;</span> + info.data);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret.data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">queryData().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>vue的与后端交互。</p>","more":"<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><ul>\n<li>前后端交互模式</li>\n<li>promise用法</li>\n<li>接口调用-fech用法</li>\n<li>接口调用-axios用法</li>\n<li>接口与调用-async/await用法</li>\n</ul>\n<h1 id=\"接口调用方式\"><a href=\"#接口调用方式\" class=\"headerlink\" title=\"接口调用方式\"></a>接口调用方式</h1><p>原生：</p>\n<ul>\n<li>ajax</li>\n<li>基于jQuery的ajax</li>\n</ul>\n<p>new：</p>\n<ul>\n<li>fetch</li>\n<li>axios</li>\n</ul>\n<h2 id=\"resful形式的url\"><a href=\"#resful形式的url\" class=\"headerlink\" title=\"resful形式的url\"></a>resful形式的url</h2><p>http请求方式</p>\n<ul>\n<li>GET 查询</li>\n<li>POST 添加</li>\n<li>PUT 修改</li>\n<li>DELETE 删除</li>\n</ul>\n<p>符合规则的url</p>\n<ul>\n<li><a href=\"http://www.hello.com/books\">http://www.hello.com/books</a> GET, POST</li>\n<li><a href=\"http://www.hello.com/books/1284\">http://www.hello.com/books/1284</a> PUT, DELTE</li>\n</ul>\n<p>note: 传统的url传送数据依赖JSON，与请求方式无关。</p>\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><p>异步编程的一种解决方案，语法上来讲，，promise是一个对象，可以获取异步操作的消息。<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Promise\">official site</a></p>\n<p>优点：</p>\n<ul>\n<li>避免多层异步调用嵌套问题（<strong>回调地狱</strong>）</li>\n<li>promise对象提供了简洁的api</li>\n</ul>\n<h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><ul>\n<li>实例化Promise对象，构造函数中传递函数，用于处理异步任务</li>\n<li><code>resolve</code>和<code>reject</code>两个参数用于处理成功和失败两种情况，并通过p.then获取处理结果</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//invoke resovle() when success</span></span><br><span class=\"line\">    <span class=\"comment\">//inovke reject() when fail</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ret</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//get info from resolve</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ret</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//get info from reject</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用api\"><a href=\"#常用api\" class=\"headerlink\" title=\"常用api\"></a>常用api</h3><h4 id=\"api方法\"><a href=\"#api方法\" class=\"headerlink\" title=\"api方法\"></a>api方法</h4><ul>\n<li>p.then() 得到异步任务的正确结果</li>\n<li>p.catch() 获取异常信息</li>\n<li>p.finally() 成功与否都会执行</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryData()</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.logg(data);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.finally(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cosnole.log(<span class=\"string\">&#x27;finished&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"对象方法\"><a href=\"#对象方法\" class=\"headerlink\" title=\"对象方法\"></a>对象方法</h4><ul>\n<li>promise.all() 并发处理多个异步任务，所有任务都完成才能得到结果</li>\n<li>promise.race() 并发处理多个任务，只要有一个任务完成救就能得到结果</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all([p1,p2,p3]).then(<span class=\"function\">(<span class=\"params\">result</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([p1, p2, p3]).then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fetch\"><a href=\"#fetch\" class=\"headerlink\" title=\"fetch\"></a>fetch</h2><p>传统ajax的升级版，基于promise来实现。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(url).then(fn2)</span><br><span class=\"line\">          .then(fn3)</span><br><span class=\"line\">          ...</span><br><span class=\"line\">          .cathc(fn)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">&#x27;/abc&#x27;</span>).then(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data.text();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">ret</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//final data</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ret);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>note</strong>: text()方法属于fetch API的一部分，它返回一个promise实例对象，用于获取后台返回的数据。</p>\n<h3 id=\"常用配置选项\"><a href=\"#常用配置选项\" class=\"headerlink\" title=\"常用配置选项\"></a>常用配置选项</h3><ul>\n<li>method(String): Http request, defautl <em>GET</em></li>\n<li>body(String): Http reqeust parameters</li>\n<li>header(Object): Http request header, defualt {}</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">&#x27;/abc&#x27;</span>, &#123;</span><br><span class=\"line\">    method: <span class=\"string\">&#x27;get&#x27;</span></span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data.text();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">ret</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ret);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"GET-DELTE\"><a href=\"#GET-DELTE\" class=\"headerlink\" title=\"GET/DELTE\"></a>GET/DELTE</h4><ul>\n<li>tranditional:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">&#x27;/abc?id=123&#x27;</span>).then(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data.text();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">ret</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ret);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>restful:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">&#x27;/abc/123&#x27;</span>,&#123;</span><br><span class=\"line\">    method: <span class=\"string\">&#x27;get&#x27;</span></span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data.text();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">ret</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ret);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"POST-PUT\"><a href=\"#POST-PUT\" class=\"headerlink\" title=\"POST/PUT\"></a>POST/PUT</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">&#x27;/books/,&#123;</span></span><br><span class=\"line\"><span class=\"string\">      method: &#x27;</span>post<span class=\"string\">&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">      //body: &#x27;</span>uname=list&amp;pwd=<span class=\"number\">123</span><span class=\"string\">&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">      body: JOSN.stringify(&#123;</span></span><br><span class=\"line\"><span class=\"string\">          uname: &#x27;</span>lisa<span class=\"string\">&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">          pwd: &#x27;</span><span class=\"number\">123</span><span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">      &#125;)</span></span><br><span class=\"line\"><span class=\"string\">      headers:&#123;</span></span><br><span class=\"line\"><span class=\"string\">          //&#x27;</span>Content-Type<span class=\"string\">&#x27;: &#x27;</span>application/x-www-form-urlencoded<span class=\"string\">&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">          &#x27;</span>Content-Type<span class=\"string\">&#x27;:&#x27;</span>application/json<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\">      &#125;).then(data=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"string\">          return data.text();</span></span><br><span class=\"line\"><span class=\"string\">      &#125;).then(ret=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"string\">          console.log(ret);</span></span><br><span class=\"line\"><span class=\"string\">      &#125;)</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"响应数据格式\"><a href=\"#响应数据格式\" class=\"headerlink\" title=\"响应数据格式\"></a>响应数据格式</h3><ul>\n<li>text(): 将返回体处理成字符串类型</li>\n<li>json(): 返回结果和JSON.parse(responseText)一样</li>\n</ul>\n<h2 id=\"axios\"><a href=\"#axios\" class=\"headerlink\" title=\"axios\"></a>axios</h2><p>referece <a href=\"https://github.com/axios/axios\">official site</a></p>\n<p>特点：</p>\n<ul>\n<li>支持浏览器和node.js</li>\n<li>支持promise</li>\n<li>能拦截请求和响应</li>\n<li>自动转换JSON数据</li>\n</ul>\n<h3 id=\"基本用法-1\"><a href=\"#基本用法-1\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.get(<span class=\"string\">&#x27;/data&#x27;</span>)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">ret</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ret.data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>使用前需要引入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/ajvascript&quot;</span> src=<span class=\"string\">&quot;js/axios.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用API\"><a href=\"#常用API\" class=\"headerlink\" title=\"常用API\"></a>常用API</h3><h4 id=\"GET-DELETE\"><a href=\"#GET-DELETE\" class=\"headerlink\" title=\"GET/DELETE\"></a>GET/DELETE</h4><ul>\n<li>通过url传参</li>\n<li>通过params传参</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.get(<span class=\"string\">&#x27;/data?id=123&#x27;</span>)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">ret</span>=&gt;</span>&#123;</span><br><span class=\"line\">    coonsole.log(ret.data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.get(<span class=\"string\">&#x27;/data/24&#x27;</span>)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">ret</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ret.data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.get(<span class=\"string\">&#x27;/data&#x27;</span>,&#123;</span><br><span class=\"line\">    params:&#123;</span><br><span class=\"line\">        id:<span class=\"number\">123</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">ret</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ret.data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"POST-PUT-1\"><a href=\"#POST-PUT-1\" class=\"headerlink\" title=\"POST/PUT\"></a>POST/PUT</h4><ul>\n<li>通过选项传递参数（默认传递的是json格式的数据）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.post(<span class=\"string\">&#x27;/data&#x27;</span>,&#123;</span><br><span class=\"line\">    uname: <span class=\"string\">&#x27;tom&#x27;</span>,</span><br><span class=\"line\">    pwd: <span class=\"number\">123</span></span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">ret</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ret.data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过URLSearchParams传递参数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> params = <span class=\"keyword\">new</span> URLSearchParams();</span><br><span class=\"line\">params.append(<span class=\"string\">&#x27;param1&#x27;</span>,<span class=\"string\">&#x27;value1&#x27;</span>);</span><br><span class=\"line\">params.append(<span class=\"string\">&#x27;param2&#x27;</span>, <span class=\"string\">&#x27;value2&#x27;</span>);</span><br><span class=\"line\">axios.post(<span class=\"string\">&#x27;/api/test&#x27;</span>, params).then(<span class=\"function\"><span class=\"params\">ret</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ret.data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"响应结果\"><a href=\"#响应结果\" class=\"headerlink\" title=\"响应结果\"></a>响应结果</h3><ul>\n<li>data(json形式)</li>\n<li>headers</li>\n<li>status</li>\n<li>statusText</li>\n</ul>\n<h3 id=\"全局配置\"><a href=\"#全局配置\" class=\"headerlink\" title=\"全局配置\"></a>全局配置</h3><ul>\n<li>axios.default.timeout = 3000;//ms, 超时时间</li>\n<li>axios.default.baseURL = “<a href=\"http://localhost:3000/app&quot;;//%E9%BB%98%E8%AE%A4%E5%9C%B0%E5%9D%80%E7%9A%84%E5%89%8D%E9%83%A8%E5%88%86\">http://localhost:3000/app&quot;;//默认地址的前部分</a></li>\n<li>axios.default.headers[ ‘mytoken’ ] = “adf1844934nadfnaodn02”; //设置请求头</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    axios.default.baseURL = &#x27;http://localhost:3000/&#x27;;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h3><h4 id=\"请求拦截器\"><a href=\"#请求拦截器\" class=\"headerlink\" title=\"请求拦截器\"></a>请求拦截器</h4><p>在请求发出去之前设置一些信息</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.interceptors.request.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">&#125;. function(err)&#123;</span><br><span class=\"line\">                               </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"响应拦截器\"><a href=\"#响应拦截器\" class=\"headerlink\" title=\"响应拦截器\"></a>响应拦截器</h4><p>在获取数据之前对数据做一些加工处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.interceptors.response.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async/await\"></a>async/await</h2><p>ES7引入的新语法，可以更加方便的进行异步操作。</p>\n<p>async关键字用于函数上，await关键字用于async函数中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queryData</span>(<span class=\"params\">id</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ret = <span class=\"keyword\">await</span> axios.get(<span class=\"string\">&#x27;/data&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">queryData.then(<span class=\"function\"><span class=\"params\">ret</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ret)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"处理多个异步\"><a href=\"#处理多个异步\" class=\"headerlink\" title=\"处理多个异步\"></a>处理多个异步</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queryData</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ino = <span class=\"keyword\">await</span> axios.get(<span class=\"string\">&#x27;async1&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret = <span class=\"keyword\">await</span> axios.get(<span class=\"string\">&#x27;async2&#x27;</span> + info.data);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret.data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">queryData().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>"},{"title":"vue05","date":"2020-01-19T09:40:11.000Z","_content":"\nvue路由\n\n<!-- more -->\n\n# 序\n\n- 路由概念\n- vue-router基本使用\n- 嵌套路由\n- 动态路由匹配\n- 命名路由\n- 编程式导航\n\n# 基本概念\n\n前端路由，后端路由\n\n## 后端路由\n\nURL请求地址与服务器资源之间的对应关系\n\n早期都是用后端路由\n\n- 后端渲染（存在性能问题）\n\n于是有了`ajax`技术来实现前端页面的局部刷新，但不能实现也页面的前进、后退（不能保存用户的状态），于是又有了SPA（Single Page Application)单页面应用程序：整个网站只有一个页面，内容变化通过ajax局部更新实现，同时支持浏览器地址栏的前进和后退操作。\n\n- SPA的核心技术点就是`前端路由`。\n- 核心原理之一：基于URL地址的hash（hash的变化会导致浏览器记录访问历史的变化，但是不会触发新的url请求）\n\n## 前端路由\n\n- 根据不同的用户事件，现实不同的页面内容\n- 本质是用户事件与事件函数之间的对关系","source":"_posts/vue05.md","raw":"---\ntitle: vue05\ndate: 2020-01-19 17:40:11\ncategories: Vue\ntags: vue\n---\n\nvue路由\n\n<!-- more -->\n\n# 序\n\n- 路由概念\n- vue-router基本使用\n- 嵌套路由\n- 动态路由匹配\n- 命名路由\n- 编程式导航\n\n# 基本概念\n\n前端路由，后端路由\n\n## 后端路由\n\nURL请求地址与服务器资源之间的对应关系\n\n早期都是用后端路由\n\n- 后端渲染（存在性能问题）\n\n于是有了`ajax`技术来实现前端页面的局部刷新，但不能实现也页面的前进、后退（不能保存用户的状态），于是又有了SPA（Single Page Application)单页面应用程序：整个网站只有一个页面，内容变化通过ajax局部更新实现，同时支持浏览器地址栏的前进和后退操作。\n\n- SPA的核心技术点就是`前端路由`。\n- 核心原理之一：基于URL地址的hash（hash的变化会导致浏览器记录访问历史的变化，但是不会触发新的url请求）\n\n## 前端路由\n\n- 根据不同的用户事件，现实不同的页面内容\n- 本质是用户事件与事件函数之间的对关系","slug":"vue05","published":1,"updated":"2020-07-19T17:29:13.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smge2004dbyihhz3d8c7o","content":"<p>vue路由</p>\n<a id=\"more\"></a>\n\n<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><ul>\n<li>路由概念</li>\n<li>vue-router基本使用</li>\n<li>嵌套路由</li>\n<li>动态路由匹配</li>\n<li>命名路由</li>\n<li>编程式导航</li>\n</ul>\n<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><p>前端路由，后端路由</p>\n<h2 id=\"后端路由\"><a href=\"#后端路由\" class=\"headerlink\" title=\"后端路由\"></a>后端路由</h2><p>URL请求地址与服务器资源之间的对应关系</p>\n<p>早期都是用后端路由</p>\n<ul>\n<li>后端渲染（存在性能问题）</li>\n</ul>\n<p>于是有了<code>ajax</code>技术来实现前端页面的局部刷新，但不能实现也页面的前进、后退（不能保存用户的状态），于是又有了SPA（Single Page Application)单页面应用程序：整个网站只有一个页面，内容变化通过ajax局部更新实现，同时支持浏览器地址栏的前进和后退操作。</p>\n<ul>\n<li>SPA的核心技术点就是<code>前端路由</code>。</li>\n<li>核心原理之一：基于URL地址的hash（hash的变化会导致浏览器记录访问历史的变化，但是不会触发新的url请求）</li>\n</ul>\n<h2 id=\"前端路由\"><a href=\"#前端路由\" class=\"headerlink\" title=\"前端路由\"></a>前端路由</h2><ul>\n<li>根据不同的用户事件，现实不同的页面内容</li>\n<li>本质是用户事件与事件函数之间的对关系</li>\n</ul>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>vue路由</p>","more":"<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><ul>\n<li>路由概念</li>\n<li>vue-router基本使用</li>\n<li>嵌套路由</li>\n<li>动态路由匹配</li>\n<li>命名路由</li>\n<li>编程式导航</li>\n</ul>\n<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><p>前端路由，后端路由</p>\n<h2 id=\"后端路由\"><a href=\"#后端路由\" class=\"headerlink\" title=\"后端路由\"></a>后端路由</h2><p>URL请求地址与服务器资源之间的对应关系</p>\n<p>早期都是用后端路由</p>\n<ul>\n<li>后端渲染（存在性能问题）</li>\n</ul>\n<p>于是有了<code>ajax</code>技术来实现前端页面的局部刷新，但不能实现也页面的前进、后退（不能保存用户的状态），于是又有了SPA（Single Page Application)单页面应用程序：整个网站只有一个页面，内容变化通过ajax局部更新实现，同时支持浏览器地址栏的前进和后退操作。</p>\n<ul>\n<li>SPA的核心技术点就是<code>前端路由</code>。</li>\n<li>核心原理之一：基于URL地址的hash（hash的变化会导致浏览器记录访问历史的变化，但是不会触发新的url请求）</li>\n</ul>\n<h2 id=\"前端路由\"><a href=\"#前端路由\" class=\"headerlink\" title=\"前端路由\"></a>前端路由</h2><ul>\n<li>根据不同的用户事件，现实不同的页面内容</li>\n<li>本质是用户事件与事件函数之间的对关系</li>\n</ul>"},{"title":"vue06","date":"2020-01-19T10:20:17.000Z","_content":"\nvue工程化\n\n<!-- more -->\n\n# 序\n\n- 模块化规范\n- webpack\n- vue单文件组件\n- vue脚手架\n- element-ui\n\n# 模块化\n\n- 传统模式\n\n  多个js文件存在**命名冲突**，**文件依赖**等问题\n\n- 模块化\n\n  把单独的一个功能封装到一个模块（文件）中，模块之间互相隔离，但是可以通过特定的接口公开内部成员，也可以依赖别的模块。方便代码重用，提升开发效率，便于后期维护。\n\n## 浏览器模块化规范\n\nAMD， CMD\n\n## 服务器端模块化规范\n\nCommonJS\n\n## ES6模块化规范\n\n大一统。浏览器与服务器端通用。\n\n- 每个js文件都是一个独立的模块\n- 导入模块成员使用import关键字\n- 暴露模块成员使用export关键字\n\n### babel\n\nnode.js对es6的支持不是很好，需要第三方插件来转化。\n\nbabel：语法转化工具，可以把高级的有兼容性的转化为低级的没有兼容器的代码。\n\n# webpack\n\n前端项目构建工具（打包工具）。\n\n# vue单文件组件\n\n后缀，`.vue`，构成：\n\n- template 组件的模板区域\n\n- script 业务逻辑区域\n\n- style 样式区域\n\n  ```html\n  <style scoped></style>\n  <!--防止与其他组件起冲突-->\n  ```\n\n```html\n<template>\n\t<div>\n        <h1>\n            这是app根组件\n        </h1>\n    </div>\n</template>\n<script>\nexport default{\n    data(){\n        return {};\n    },\n    methods:{}\n}\n</script>\n<style scoped>\n    h1{\n        color: red;\n    }\n</style>\n```\n\n\n\n\n\n","source":"_posts/vue06.md","raw":"---\ntitle: vue06\ndate: 2020-01-19 18:20:17\ncategories: Vue\ntags: vue\n---\n\nvue工程化\n\n<!-- more -->\n\n# 序\n\n- 模块化规范\n- webpack\n- vue单文件组件\n- vue脚手架\n- element-ui\n\n# 模块化\n\n- 传统模式\n\n  多个js文件存在**命名冲突**，**文件依赖**等问题\n\n- 模块化\n\n  把单独的一个功能封装到一个模块（文件）中，模块之间互相隔离，但是可以通过特定的接口公开内部成员，也可以依赖别的模块。方便代码重用，提升开发效率，便于后期维护。\n\n## 浏览器模块化规范\n\nAMD， CMD\n\n## 服务器端模块化规范\n\nCommonJS\n\n## ES6模块化规范\n\n大一统。浏览器与服务器端通用。\n\n- 每个js文件都是一个独立的模块\n- 导入模块成员使用import关键字\n- 暴露模块成员使用export关键字\n\n### babel\n\nnode.js对es6的支持不是很好，需要第三方插件来转化。\n\nbabel：语法转化工具，可以把高级的有兼容性的转化为低级的没有兼容器的代码。\n\n# webpack\n\n前端项目构建工具（打包工具）。\n\n# vue单文件组件\n\n后缀，`.vue`，构成：\n\n- template 组件的模板区域\n\n- script 业务逻辑区域\n\n- style 样式区域\n\n  ```html\n  <style scoped></style>\n  <!--防止与其他组件起冲突-->\n  ```\n\n```html\n<template>\n\t<div>\n        <h1>\n            这是app根组件\n        </h1>\n    </div>\n</template>\n<script>\nexport default{\n    data(){\n        return {};\n    },\n    methods:{}\n}\n</script>\n<style scoped>\n    h1{\n        color: red;\n    }\n</style>\n```\n\n\n\n\n\n","slug":"vue06","published":1,"updated":"2020-07-19T17:29:13.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smge3004hbyih0h6nf64g","content":"<p>vue工程化</p>\n<a id=\"more\"></a>\n\n<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><ul>\n<li>模块化规范</li>\n<li>webpack</li>\n<li>vue单文件组件</li>\n<li>vue脚手架</li>\n<li>element-ui</li>\n</ul>\n<h1 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h1><ul>\n<li><p>传统模式</p>\n<p>多个js文件存在<strong>命名冲突</strong>，<strong>文件依赖</strong>等问题</p>\n</li>\n<li><p>模块化</p>\n<p>把单独的一个功能封装到一个模块（文件）中，模块之间互相隔离，但是可以通过特定的接口公开内部成员，也可以依赖别的模块。方便代码重用，提升开发效率，便于后期维护。</p>\n</li>\n</ul>\n<h2 id=\"浏览器模块化规范\"><a href=\"#浏览器模块化规范\" class=\"headerlink\" title=\"浏览器模块化规范\"></a>浏览器模块化规范</h2><p>AMD， CMD</p>\n<h2 id=\"服务器端模块化规范\"><a href=\"#服务器端模块化规范\" class=\"headerlink\" title=\"服务器端模块化规范\"></a>服务器端模块化规范</h2><p>CommonJS</p>\n<h2 id=\"ES6模块化规范\"><a href=\"#ES6模块化规范\" class=\"headerlink\" title=\"ES6模块化规范\"></a>ES6模块化规范</h2><p>大一统。浏览器与服务器端通用。</p>\n<ul>\n<li>每个js文件都是一个独立的模块</li>\n<li>导入模块成员使用import关键字</li>\n<li>暴露模块成员使用export关键字</li>\n</ul>\n<h3 id=\"babel\"><a href=\"#babel\" class=\"headerlink\" title=\"babel\"></a>babel</h3><p>node.js对es6的支持不是很好，需要第三方插件来转化。</p>\n<p>babel：语法转化工具，可以把高级的有兼容性的转化为低级的没有兼容器的代码。</p>\n<h1 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h1><p>前端项目构建工具（打包工具）。</p>\n<h1 id=\"vue单文件组件\"><a href=\"#vue单文件组件\" class=\"headerlink\" title=\"vue单文件组件\"></a>vue单文件组件</h1><p>后缀，<code>.vue</code>，构成：</p>\n<ul>\n<li><p>template 组件的模板区域</p>\n</li>\n<li><p>script 业务逻辑区域</p>\n</li>\n<li><p>style 样式区域</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--防止与其他组件起冲突--&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">            这是app根组件</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>&#123;</span></span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> &#123;&#125;;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span></span><br><span class=\"line\">    h1&#123;</span><br><span class=\"line\">        color: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>vue工程化</p>","more":"<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><ul>\n<li>模块化规范</li>\n<li>webpack</li>\n<li>vue单文件组件</li>\n<li>vue脚手架</li>\n<li>element-ui</li>\n</ul>\n<h1 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h1><ul>\n<li><p>传统模式</p>\n<p>多个js文件存在<strong>命名冲突</strong>，<strong>文件依赖</strong>等问题</p>\n</li>\n<li><p>模块化</p>\n<p>把单独的一个功能封装到一个模块（文件）中，模块之间互相隔离，但是可以通过特定的接口公开内部成员，也可以依赖别的模块。方便代码重用，提升开发效率，便于后期维护。</p>\n</li>\n</ul>\n<h2 id=\"浏览器模块化规范\"><a href=\"#浏览器模块化规范\" class=\"headerlink\" title=\"浏览器模块化规范\"></a>浏览器模块化规范</h2><p>AMD， CMD</p>\n<h2 id=\"服务器端模块化规范\"><a href=\"#服务器端模块化规范\" class=\"headerlink\" title=\"服务器端模块化规范\"></a>服务器端模块化规范</h2><p>CommonJS</p>\n<h2 id=\"ES6模块化规范\"><a href=\"#ES6模块化规范\" class=\"headerlink\" title=\"ES6模块化规范\"></a>ES6模块化规范</h2><p>大一统。浏览器与服务器端通用。</p>\n<ul>\n<li>每个js文件都是一个独立的模块</li>\n<li>导入模块成员使用import关键字</li>\n<li>暴露模块成员使用export关键字</li>\n</ul>\n<h3 id=\"babel\"><a href=\"#babel\" class=\"headerlink\" title=\"babel\"></a>babel</h3><p>node.js对es6的支持不是很好，需要第三方插件来转化。</p>\n<p>babel：语法转化工具，可以把高级的有兼容性的转化为低级的没有兼容器的代码。</p>\n<h1 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h1><p>前端项目构建工具（打包工具）。</p>\n<h1 id=\"vue单文件组件\"><a href=\"#vue单文件组件\" class=\"headerlink\" title=\"vue单文件组件\"></a>vue单文件组件</h1><p>后缀，<code>.vue</code>，构成：</p>\n<ul>\n<li><p>template 组件的模板区域</p>\n</li>\n<li><p>script 业务逻辑区域</p>\n</li>\n<li><p>style 样式区域</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--防止与其他组件起冲突--&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">            这是app根组件</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>&#123;</span></span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> &#123;&#125;;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span></span><br><span class=\"line\">    h1&#123;</span><br><span class=\"line\">        color: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"mq","date":"2020-07-20T13:04:40.000Z","_content":"\nmq的出现是大势所趋，也一定是为了解决某方面的问题，从这里入手，可以综合的了解所有mq的异同。\n\n<!--more-->\n\n# MQ的引入\n\n模拟几个场景：\n\n1. `学生模块`和`老师模块`。功能：学生向老师抛出问题，老师反馈给学生答案。老师一次只能给一个学生解答问题，这样一来学生数量很多的话就会给后续等待的学生到成堵塞、浪费资源。同时，众多的学生与老师之间形成了耦合。\n\n   解决方式：引入`班长模块`，学生将问题都抛给班长（需要定义格式），班长不做解答，只做问题的记录，这样学生将问题抛出后不用等待。班长收集问题后，将问题给老师模块，老师依次解答。这样解决了学生与老师之间的耦合，也避免了众多学生的等待浪费。\n\n2. `系统A`需要发送数据给其他系统，已经完成了给B、C发送的功能，发送给每个系统的数据可能有差异，因此发送前会对数据进行组装。\n\n   上线后又新增了一个需求，`D`也要接收`A`的数据，__此时就需要修改A系统，让他感知到D的存在__，这时就暴露出一个问题：每接入一个下游系统，都需要对`A`进行改造，开发、联调效率低，耦合严重，增加`A`的负担。\n\n## 好处\n\n- 解决耦合  当新的模块接进来时，可以做到代码改动最小\n\n- 异步模型  “早上下单，下午收货“，提升整体系统的吞吐能力\n\n- 削峰  相当于流量缓冲池，可以让后端系统按照自身吞吐能力进行消费，不被冲跨\n\n# 订阅模式\n\n| 比较项目   | Topic模式队列                                                | Queue模式队列                                                |\n| ---------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 工作模式   | ”订阅-发布“模式，如果当前没有订阅者，消息将会被丢弃，如果有多个订阅者，都会被分发。 | ”负载均衡“模式。如果当前没有消费者，消息也不会被丢弃。如果有多个消费者，那么消息也只会发送给其中一个消费者（轮寻着发）。一对一（端对端）。 |\n| 有无状态   | 无状态                                                       | Queue数据默认会在mq服务器上以文件形式保存                    |\n| 传递完整性 | 如果没有订阅者，消息会被丢弃。不完整。                       | 消息不会丢弃                                                 |\n| 处理效率   | 由于消息要按照订阅者的数量进行复制，所以处理性能会随着订阅者的增加而明显降低，并且还要结合不同消息协议、自身的性能差异 | 由于一条信息只发送给一个消费者，所以性能与消费者数量无关。但是不同消息协议的具体性能也是有差异的 |\n\n# JMS\n\nJava消息服务，Java Message Service，JavaEE中的一套规范，指的是两个应用程序之间进行异步通信的API，它为标准消息协议i和消息服务提供了一组通用接口，包括创建、发送、读取消息等，用于支持Java应用程序开发。\n\n实现JMS接口和规范的消息中间件，即我们的MQ服务器。\n\n## MESSAGE\n\nJMS message的组成：消息头 + 消息体 + 消息属性\n\n### 消息头\n\n记录常用的\n\n- JMSDestination 消息发送的目的地，Queue或Topic\n\n- JMSDeliveryMode 持久或非持久（消息的持久化）。持久话能让数据更可靠，即JMS出现故障的话数据也不会丢失，会在服务器恢复之后再次传递。\n\n- JMSExpiration 过期时间，过期时间之后消息还没被发出去，就清除\n\n- JMSPriority 优先级，0-4普通，5-9加急，不严格按照顺序，但加急一定高于普通\n\n- JMSMessgeID 唯一ID，判断是否重复消费，幂等性\n\n### 消息体\n\n封装具体消息数据，5种格式。（使用频率高）\n\n- TextMessage 普通字符串消息 （使用频率高）\n\n- MapMessage map类型消息，key为String类型，值为Java基本数据类型\n\n- BytesMessage 二进制数组消息\n\n- StreamMessage 流\n\n- ObjectMessage 可序列化的Java对象\n\n发送和接受的消息类型必须一致。\n\n### 消息属性\n\n如果需要除消息头字段以外的值，那么可以使用消息属性。\n\n```java\nTextMessage tm = session.createTextMessage(\"wa wa\");\ntm.setStringProperty(\"c01\",\"vip\"); // 增加属性\n\n\nTextMessage tms = (TextMessage) messge;\nSystem.out.println(tms.getStringProperty(\"c01\")); // 接收\n```\n\n# 可靠性\n\nMQ挂了，消息的持久话和丢失的情况如何？一般有**三个特征**来保障：持久化、事务、签收，其中**事务偏生产者，签收偏消费者**。此外对于对于宕机，还有**多节点集群**。\n\n## 持久化 PERSISTENT\n\n参考redis的持久化（有rdb和aof），消息也有类似的辅助。\n\n### QUEUE\n\n#### 参数设置\n\n1. 非持久 服务器宕机，消息不存在\n\n   > messaegeProducer.setDeliveryMode(DeliveryMode.*NON_PRESISTENT*);\n\n2. 持久化 服务器宕机后消息依然存在\n\n   > messageProducer.setDelieveryMode(DeliveryMode._PRESISTENT_);\n\n#### 模拟场景\n\n非持久化时，当发布者在队列发布了消息，之后将activeMQ服务器重启，MQ服务器中的消息会丢失。\n\n持久化时，上述操作后，数据依然存在。\n\n在队列中，如果**不显示标注持久**，**默认持久化**，因为可靠性是优先考虑的因素。\n\n持久、事物、签收\n\n### TOPIC\n\n对于topic，先启动订阅再启动生产，否则没有意义（没人订阅，发送的消息都是废消息）。持久化topic类似于订阅号：\n\n1. 先运行一次消费者，等于向MQ注册\n\n2. 然后再运行生产者发送信息\n\n3. 消费者一定会收到订阅消息。不在线的话下次连接时会接收。\n\n## 事务 TRANSACTION\n\n数据库的事务、ACID、隔离级别\n\n```java\n// 创建session的第一个参数即 事务是否开启\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n```\n\n### 生产者\n\n- false 关闭事务，只要执行`send`就进入到队列中\n\n- true 开启事物，先执行`send`再执行`commit`，消息才被真正提交到队列中。\n\n对于事物的true，为何多此一举？保证事务的高可用、容错性，可以回滚。\n\n```java\ntry{\n    // ok session.commit;\n}catch (Exception e){\n    // error\n    session.rollback();\n}finally{\n    if(null != session){\n        session.close();\n    }\n}\n```\n\n### 消费者\n\n创建session时将事务改为`true`，同样需要`commit`，否则事务会被重复消费。\n\n## 签收 ACKNOWLEDGE\n\n分为事务和非事务两种情况\n\n#### 非事务\n\n```java\n// 创建session的第个参数即 签收类型\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n```\n\n- 自动签收（默认）   **AUTO_ACKNOWLEDGE**  （使用频率高）\n\n- 手动签收 **CLIENT_ACKNOWLEDGE** （使用频率高）\n\n- 允许重复消息 **DUPS_OK_ACKNOWLEDGE**\n\n手动签收时需要手动标记，否则会造成重复消费：\n\n```java\nTextMessage tm = (TextMessage)messageConsumer.receive(4000L);\nif(null != tm){\n    tm.acknowledge();\n}else{\n    break;\n}\n// ...\n```\n\n### 事务\n\n```java\n// 创建session的第个参数即 签收类型\nSession session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);\n```\n\n有事务就需要`commit`。\n\n## 点对点\n\n基于队列，生产者发消息到队列，消费者从队列接收消息，队列的存在使得消息的**异步传输**成为可能。类比平时的即时通讯工具。\n\n- 如果在**Session**关闭时有部分消息已被收到但还没有签收（**acknowledge**)，那当消费者下次连接到同样的队列时，消息会被再次接收。（不会丢失）\n\n- 队列可以长久地保存消息直到消费者收到消息。**消费者不需要因为再次担心消息丢失而时刻和队列保持激活的连接状态**，充分体现了异步传输模式的优势。\n\n## 发布订阅\n\nJMS Pub/Sub模型。定义了如何向一个内容节点发布和订阅消息，这些节点被称作**topic**，主题可以被认为是消息的传输中介，publisher发布消息到主题，subscribe从主题订阅消息。主题使得publisher和subscribe保持互相独立，不需要接触即可保证消息的传送。\n\n### 非持久\n\n对于非持久订阅，只有当客户端处于激活状态，也就是和MQ保持连接状态才能收到发送到某个主题的消息。如果消费者处于离线状态，生产者发生发送的主题消息将会丢失作废，消费者永远不会收到。所以消费者要先注册才能接受到发布。\n\n### 持久化\n\n客户端先向MQ注册一个自己的身份ID识别号，当这个客户端处于离线时，生产者会为这个ID保存所有发送到主题的消息，当客户再次连接到MQ时，MQ会根据消费者的ID得到所有当自己处于离线时发送到主题的消息（即 可以恢复、派送未签收的消息）。\n\n# BROKER\n\n集群、配置时会用到。\n\n相当于一个ActiveMQ服务器**实例**，实现了用代码的形式启动ActiveMQ将MQ嵌入到Java代码中，以便随时用随时启动（用的时候再启动，这样节省资源、保证可靠性）。\n\n之前会在linux服务器上启动，而在这里，是将MQ装在了代码里，MQ是一个实例。  类比springboot内嵌tomcat.\n\n## 消息发送模式\n\nActiveMQ支持同步、异步两种发送的模式将消息发送到broker，模式的选择对发送延时有巨大影响，使用异步发送可以显著的提高发送的性能。\n\n`ActiveMQ默认使用异步发送的模式`，**同步发送有两种情况**：1. 是明确指定使用同步发送。2. 在未使用事务的情况下发送持久化的消息。第二种情况是特别要注意的，每次发送都会阻塞producer直到broker返回一个确认，表示消息已经被安全地持久化到磁盘，确认机制提供了消息安全的保障，同时阻塞客户端带来了很大的延时。\n\n异步发送可以最大化producer端的发送效率，适合发送消息比较密集的情况下使用，提升producer性能的情况下，也有一定的弊端，就是消耗较多client端内存同时，也会导致broker端性能消耗增加（不停地发消息，能不累么）；此外，它也不能保证消息100%地发送成功，需要容忍消息丢失的可能。很多高性能的应用，`允许在失败的情况下有少量的数据丢失`。\n\n# ACTIVEMQ的传输协议\n\nQ: 默认的61616端口如何更改？生产上的链接协议如何配置的，使用tcp么？\n\n调优：使用NIO传输协议\n\n支持的通讯协议：TCP, NIO, UDP, SSL, VM……（对于java，主要使用前两个）\n\n| 协议   | 描述                                |\n| ------ | ----------------------------------- |\n| TCP    | 默认的协议，性能相对可以            |\n| NIO    | 基于TCP协议之上的，进行了扩展和优化 |\n| HTP(s) | 基于HTTP(s)                         |\n\n## NIO\n\n要换为NIO，需要修改`activemq.xml`配置文件。\n\n```xml\n<broker>\n    ...\n        <transportConnectors>\n            <transportConnector name=\"nio\" uri=\"nio://192.168.111.136\"/>\n        </transportConnectors>\n    ...\n</broker>\n```\n\n在消费者、生产者修改代码，指定传输协议：\n\n```java\npublic stati final String ACTIVEMQ_URL = \"nio://192.168.111.136\";\n\n\npublic static void main(String[] args){\n    ActiveMQConnectionFactory af = new ActiveMQConnectionFactory(ACTIVEMQ_URL);\n    ......\n}\n```\n\n### 增强\n\nQ: uri以”nio“开头，表示这个端口使用以TCP协议为基础的NIO网络IO模型，但是这样的设置方式，只能使这个端口支持`openwire（TCP）`，如何让这个端口支持NIO，又支持多个协议呢？\n\n默认是`BIO+TCP`，目前是`NIO+TCP`，那么如何做到`NIO+TCP/Mqtt/stomp`。\n\nA: 开启多协议支持，用`auto`关键字，[reference](https://activemq.apache.org/auto)。\n\n```xml\n<transportConnector name=\"auto\" uri=\"auto://localhost:5761\"/>\n```\n\n**note:** 在activeMQ后台配置面板的`Network`可以查看开启的网络协议。\n\n# ACTIVEMQ的存储和可持久化\n\n对于上面的提到的节点（事务、持久、签收），他们都是MQ自带的，不能保证自身故障时的持久，这里提到的可持久化的目的是将数据保存在另外一台机器做备份，达到物理隔离，完成高可用。所以为了避免意外宕机后丢失信息，需要做到重启后可以恢复消息队列，消息系统一般都会`采用持久化机制`（所有MQ都会这样）：在发送者将消息发送出去后，消息中心首先将消息存储到本地数据文件、内存数据库或者远程数据库等，再试图将消息发送给接收者，成功则将消息从存储中删除，失败i则继续尝试发送；如果是重启，消息中心启动后首先检查指定的存储位置，如果有未发送成功的消息，则需要把消息发送出去。\n\n主要介绍两个DB：`KahaDB`, `LevelDB`, `JDBC`\n\nQ: AMQ持久化机制\n\n## KahaDB\n\n基于日志文件，从ActiveMQ5.4开始作为默认的持久化插件（相当于Redis的aof），记录做了哪些操作。\n\n在配置文件中，有：\n\n```xml\n<persistenceAdapter>\n    <kahaDB directory=\"${activemq.data}/kahadb\"/>\n</persistenceAdpter>\n```\n\n### 存储原理\n\nreference [here](https:/activemq.apache.org/kahadb)\n\n可用于任何场合，提高了性能和恢复能力。消息存储使用一个**事务日志**和一个**索引文件**（存储所有地址）。\n\nKahadb在消息保存目录中只有4类文件和一个lock：db-1.log, db.data, db.free, db.redo, lock. （4个文件1把锁）\n\n#### db\\<Number\\>.log\n\n存储消息到预定义大小的数据记录文件中，Number初始为1，。当数据文件已满时，一个新的文件会随之创建。当不再有引用到数据文件中的任何消息时，文件会被删除或归档（自我空间清理）。\n\n#### db.data\n\n包含了持久化的`BTree索引`，索引了消息数据记录中的消息，它是消息的索引文件，本质上是B-Tree，使用B-Tree作为索引指向`db-\\<Number>.log`里面存储的消息。\n\n#### db.free\n\n当前`db.data`文件里哪些页面是空闲的，文件具体内容是所有空闲页的**ID**. 类比linux的bash命令`free`。\n\n#### db.redo\n\n用来进行消息恢复，如果KahaDB消息存储在强制退出后启动，用于恢复BTree索引。\n\n#### lock\n\n相当于mysql中的悲观锁。表示当前获得kahadb读写权限的broker。\n\n## JDBC\n\n主要。将数据放入mysql/oracle中，这是对于长时间持久化存储，推荐用jdbc，特别是带了Journal的。缺点是有点慢。kahaDB是将服务器做本地数据库，JDBC是将他放入另外一个磁盘（类似云盘），相对来说更安全。\n\n## LevelDB\n\n## JDBC Message store with ActiveMQ Journal\n\n主要。\n\n# Q&A\n\n1. 引入消息队列后该如何保证其高可用性\n\n2. 异步投递Async Sends\n\n3. 延迟投递和定时投递\n\n4. 分发策略\n\n5. ActiveMQ消费重试机制\n\n6. 死信队列\n\n7. 如何保证消息不被重复消费呢？谈谈幂等性问题\n\n## 高可用\n\nzookeeper + (replicated-leveldb-store)的主从集群，起码非单机版，是集群的。\n\n## 异步投递\n\n如何确认发送成功？ \n\n在消息发送完后接收回调。\n\n```java\nActiveMQConnectionFacotry acf = new ActiveMQConnectionFactory(URL);\n// 设置为异步发送消息\nacf.setUseAsyncSend(true);\nActiveMQMessageProducer amp = (ActiveMQMessageProducer)session.createProducer(queue);\n...\nTextMessage message = session.createTextMessage();\n// 未message设置属性\nmessage.setJMSMessageID(UUID.randomUUID().toString());\n\n// 使用带有回调的send方法来发送\namp.send(message, new AsyncCallback(){\n    @Override\n    public void onSucces(){\n\n        System.out.println(message.getJMSmessageID+\" succeed\")\n    }\n    @Override\n    public void onException(JMSException exception){\n        // 拿到属性来确认发送失败的消息\n        System.out.println(message.getJMSmessageID+\" fail\")\n    }\n})\n```\n\n## 延迟投递和定时投递\n\n参考[官网说明](http://activemq.apache.org/delay-and-schedule-message-delivery.html)\n\n| Property name          | type   | description        |\n| ---------------------- | ------ | ------------------ |\n| AMQ\\_SCHEDULED\\_DELAY  | long   | 延迟投递的时间     |\n| AMQ\\_SCHEDULED\\_PERIOD | long   | 重复投递的时间间隔 |\n| AMQ\\_SCHEDULED\\_REPEAT | int    | 重复投递次数       |\n| AMQ\\_SCHEDULED\\_CRON   | String | Cron表达式         |\n\n在`activemq.xml`中配置*schedulerSupport*属性为*true*且Java代码中封装的辅助消息类型为*ScheduledMessage*即可。\n\n```java\nlong delay = 3 * 1000; //延迟投递的时间，每3秒\nlong period = 4 * 1000;\nint repeat = 5;\n\nTextMessage message = session.createTextMessage();\nmessage.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, delay);\nmessage.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD, delay);\nmessage.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT, delay);\n\nmessageProducer.send(mesage);\n...\n```\n\n## ActiveMQ消费重试机制\n\n- 哪些情况会引起消息重发？\n\n- 消息重发时间间隔和重发次数\n\n- 有毒消息Posion ACK\n\nreference [here](activemq.apache.org/redelivery-policy)\n\n重发：在设置事务后没有进行提交（commit），消息就会被重复消费，这时会触发重发机制，默认被重复消费6次后MQ会把这个消息放入DLQ（Dead Letter Queue）死信队列供开发查看，不会再被消费。\n\n## 如何保证消息不被重复消费（幂等性）\n\n**note**: 何时会重复消费？网络延迟造成MQ重试，进而重复消费。\n\n- 如果是做数据库的插入操作，可以给消息做一个唯一主键，重复消费时会导致主键冲突\n\n- 使用第三方服务来做消费记录。以redis为例，给消息分配一个**全局id**，只要消费过该消息，将\\<id, message\\>以K-V形式写入redis，消费者消费前先去redis中查询有没有消费记录即可。","source":"_posts/mq.md","raw":"---\ntitle: mq\ndate: 2020-07-20 21:04:40\ncategories: MiddleWare\ntags: activemq\n---\n\nmq的出现是大势所趋，也一定是为了解决某方面的问题，从这里入手，可以综合的了解所有mq的异同。\n\n<!--more-->\n\n# MQ的引入\n\n模拟几个场景：\n\n1. `学生模块`和`老师模块`。功能：学生向老师抛出问题，老师反馈给学生答案。老师一次只能给一个学生解答问题，这样一来学生数量很多的话就会给后续等待的学生到成堵塞、浪费资源。同时，众多的学生与老师之间形成了耦合。\n\n   解决方式：引入`班长模块`，学生将问题都抛给班长（需要定义格式），班长不做解答，只做问题的记录，这样学生将问题抛出后不用等待。班长收集问题后，将问题给老师模块，老师依次解答。这样解决了学生与老师之间的耦合，也避免了众多学生的等待浪费。\n\n2. `系统A`需要发送数据给其他系统，已经完成了给B、C发送的功能，发送给每个系统的数据可能有差异，因此发送前会对数据进行组装。\n\n   上线后又新增了一个需求，`D`也要接收`A`的数据，__此时就需要修改A系统，让他感知到D的存在__，这时就暴露出一个问题：每接入一个下游系统，都需要对`A`进行改造，开发、联调效率低，耦合严重，增加`A`的负担。\n\n## 好处\n\n- 解决耦合  当新的模块接进来时，可以做到代码改动最小\n\n- 异步模型  “早上下单，下午收货“，提升整体系统的吞吐能力\n\n- 削峰  相当于流量缓冲池，可以让后端系统按照自身吞吐能力进行消费，不被冲跨\n\n# 订阅模式\n\n| 比较项目   | Topic模式队列                                                | Queue模式队列                                                |\n| ---------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 工作模式   | ”订阅-发布“模式，如果当前没有订阅者，消息将会被丢弃，如果有多个订阅者，都会被分发。 | ”负载均衡“模式。如果当前没有消费者，消息也不会被丢弃。如果有多个消费者，那么消息也只会发送给其中一个消费者（轮寻着发）。一对一（端对端）。 |\n| 有无状态   | 无状态                                                       | Queue数据默认会在mq服务器上以文件形式保存                    |\n| 传递完整性 | 如果没有订阅者，消息会被丢弃。不完整。                       | 消息不会丢弃                                                 |\n| 处理效率   | 由于消息要按照订阅者的数量进行复制，所以处理性能会随着订阅者的增加而明显降低，并且还要结合不同消息协议、自身的性能差异 | 由于一条信息只发送给一个消费者，所以性能与消费者数量无关。但是不同消息协议的具体性能也是有差异的 |\n\n# JMS\n\nJava消息服务，Java Message Service，JavaEE中的一套规范，指的是两个应用程序之间进行异步通信的API，它为标准消息协议i和消息服务提供了一组通用接口，包括创建、发送、读取消息等，用于支持Java应用程序开发。\n\n实现JMS接口和规范的消息中间件，即我们的MQ服务器。\n\n## MESSAGE\n\nJMS message的组成：消息头 + 消息体 + 消息属性\n\n### 消息头\n\n记录常用的\n\n- JMSDestination 消息发送的目的地，Queue或Topic\n\n- JMSDeliveryMode 持久或非持久（消息的持久化）。持久话能让数据更可靠，即JMS出现故障的话数据也不会丢失，会在服务器恢复之后再次传递。\n\n- JMSExpiration 过期时间，过期时间之后消息还没被发出去，就清除\n\n- JMSPriority 优先级，0-4普通，5-9加急，不严格按照顺序，但加急一定高于普通\n\n- JMSMessgeID 唯一ID，判断是否重复消费，幂等性\n\n### 消息体\n\n封装具体消息数据，5种格式。（使用频率高）\n\n- TextMessage 普通字符串消息 （使用频率高）\n\n- MapMessage map类型消息，key为String类型，值为Java基本数据类型\n\n- BytesMessage 二进制数组消息\n\n- StreamMessage 流\n\n- ObjectMessage 可序列化的Java对象\n\n发送和接受的消息类型必须一致。\n\n### 消息属性\n\n如果需要除消息头字段以外的值，那么可以使用消息属性。\n\n```java\nTextMessage tm = session.createTextMessage(\"wa wa\");\ntm.setStringProperty(\"c01\",\"vip\"); // 增加属性\n\n\nTextMessage tms = (TextMessage) messge;\nSystem.out.println(tms.getStringProperty(\"c01\")); // 接收\n```\n\n# 可靠性\n\nMQ挂了，消息的持久话和丢失的情况如何？一般有**三个特征**来保障：持久化、事务、签收，其中**事务偏生产者，签收偏消费者**。此外对于对于宕机，还有**多节点集群**。\n\n## 持久化 PERSISTENT\n\n参考redis的持久化（有rdb和aof），消息也有类似的辅助。\n\n### QUEUE\n\n#### 参数设置\n\n1. 非持久 服务器宕机，消息不存在\n\n   > messaegeProducer.setDeliveryMode(DeliveryMode.*NON_PRESISTENT*);\n\n2. 持久化 服务器宕机后消息依然存在\n\n   > messageProducer.setDelieveryMode(DeliveryMode._PRESISTENT_);\n\n#### 模拟场景\n\n非持久化时，当发布者在队列发布了消息，之后将activeMQ服务器重启，MQ服务器中的消息会丢失。\n\n持久化时，上述操作后，数据依然存在。\n\n在队列中，如果**不显示标注持久**，**默认持久化**，因为可靠性是优先考虑的因素。\n\n持久、事物、签收\n\n### TOPIC\n\n对于topic，先启动订阅再启动生产，否则没有意义（没人订阅，发送的消息都是废消息）。持久化topic类似于订阅号：\n\n1. 先运行一次消费者，等于向MQ注册\n\n2. 然后再运行生产者发送信息\n\n3. 消费者一定会收到订阅消息。不在线的话下次连接时会接收。\n\n## 事务 TRANSACTION\n\n数据库的事务、ACID、隔离级别\n\n```java\n// 创建session的第一个参数即 事务是否开启\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n```\n\n### 生产者\n\n- false 关闭事务，只要执行`send`就进入到队列中\n\n- true 开启事物，先执行`send`再执行`commit`，消息才被真正提交到队列中。\n\n对于事物的true，为何多此一举？保证事务的高可用、容错性，可以回滚。\n\n```java\ntry{\n    // ok session.commit;\n}catch (Exception e){\n    // error\n    session.rollback();\n}finally{\n    if(null != session){\n        session.close();\n    }\n}\n```\n\n### 消费者\n\n创建session时将事务改为`true`，同样需要`commit`，否则事务会被重复消费。\n\n## 签收 ACKNOWLEDGE\n\n分为事务和非事务两种情况\n\n#### 非事务\n\n```java\n// 创建session的第个参数即 签收类型\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n```\n\n- 自动签收（默认）   **AUTO_ACKNOWLEDGE**  （使用频率高）\n\n- 手动签收 **CLIENT_ACKNOWLEDGE** （使用频率高）\n\n- 允许重复消息 **DUPS_OK_ACKNOWLEDGE**\n\n手动签收时需要手动标记，否则会造成重复消费：\n\n```java\nTextMessage tm = (TextMessage)messageConsumer.receive(4000L);\nif(null != tm){\n    tm.acknowledge();\n}else{\n    break;\n}\n// ...\n```\n\n### 事务\n\n```java\n// 创建session的第个参数即 签收类型\nSession session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);\n```\n\n有事务就需要`commit`。\n\n## 点对点\n\n基于队列，生产者发消息到队列，消费者从队列接收消息，队列的存在使得消息的**异步传输**成为可能。类比平时的即时通讯工具。\n\n- 如果在**Session**关闭时有部分消息已被收到但还没有签收（**acknowledge**)，那当消费者下次连接到同样的队列时，消息会被再次接收。（不会丢失）\n\n- 队列可以长久地保存消息直到消费者收到消息。**消费者不需要因为再次担心消息丢失而时刻和队列保持激活的连接状态**，充分体现了异步传输模式的优势。\n\n## 发布订阅\n\nJMS Pub/Sub模型。定义了如何向一个内容节点发布和订阅消息，这些节点被称作**topic**，主题可以被认为是消息的传输中介，publisher发布消息到主题，subscribe从主题订阅消息。主题使得publisher和subscribe保持互相独立，不需要接触即可保证消息的传送。\n\n### 非持久\n\n对于非持久订阅，只有当客户端处于激活状态，也就是和MQ保持连接状态才能收到发送到某个主题的消息。如果消费者处于离线状态，生产者发生发送的主题消息将会丢失作废，消费者永远不会收到。所以消费者要先注册才能接受到发布。\n\n### 持久化\n\n客户端先向MQ注册一个自己的身份ID识别号，当这个客户端处于离线时，生产者会为这个ID保存所有发送到主题的消息，当客户再次连接到MQ时，MQ会根据消费者的ID得到所有当自己处于离线时发送到主题的消息（即 可以恢复、派送未签收的消息）。\n\n# BROKER\n\n集群、配置时会用到。\n\n相当于一个ActiveMQ服务器**实例**，实现了用代码的形式启动ActiveMQ将MQ嵌入到Java代码中，以便随时用随时启动（用的时候再启动，这样节省资源、保证可靠性）。\n\n之前会在linux服务器上启动，而在这里，是将MQ装在了代码里，MQ是一个实例。  类比springboot内嵌tomcat.\n\n## 消息发送模式\n\nActiveMQ支持同步、异步两种发送的模式将消息发送到broker，模式的选择对发送延时有巨大影响，使用异步发送可以显著的提高发送的性能。\n\n`ActiveMQ默认使用异步发送的模式`，**同步发送有两种情况**：1. 是明确指定使用同步发送。2. 在未使用事务的情况下发送持久化的消息。第二种情况是特别要注意的，每次发送都会阻塞producer直到broker返回一个确认，表示消息已经被安全地持久化到磁盘，确认机制提供了消息安全的保障，同时阻塞客户端带来了很大的延时。\n\n异步发送可以最大化producer端的发送效率，适合发送消息比较密集的情况下使用，提升producer性能的情况下，也有一定的弊端，就是消耗较多client端内存同时，也会导致broker端性能消耗增加（不停地发消息，能不累么）；此外，它也不能保证消息100%地发送成功，需要容忍消息丢失的可能。很多高性能的应用，`允许在失败的情况下有少量的数据丢失`。\n\n# ACTIVEMQ的传输协议\n\nQ: 默认的61616端口如何更改？生产上的链接协议如何配置的，使用tcp么？\n\n调优：使用NIO传输协议\n\n支持的通讯协议：TCP, NIO, UDP, SSL, VM……（对于java，主要使用前两个）\n\n| 协议   | 描述                                |\n| ------ | ----------------------------------- |\n| TCP    | 默认的协议，性能相对可以            |\n| NIO    | 基于TCP协议之上的，进行了扩展和优化 |\n| HTP(s) | 基于HTTP(s)                         |\n\n## NIO\n\n要换为NIO，需要修改`activemq.xml`配置文件。\n\n```xml\n<broker>\n    ...\n        <transportConnectors>\n            <transportConnector name=\"nio\" uri=\"nio://192.168.111.136\"/>\n        </transportConnectors>\n    ...\n</broker>\n```\n\n在消费者、生产者修改代码，指定传输协议：\n\n```java\npublic stati final String ACTIVEMQ_URL = \"nio://192.168.111.136\";\n\n\npublic static void main(String[] args){\n    ActiveMQConnectionFactory af = new ActiveMQConnectionFactory(ACTIVEMQ_URL);\n    ......\n}\n```\n\n### 增强\n\nQ: uri以”nio“开头，表示这个端口使用以TCP协议为基础的NIO网络IO模型，但是这样的设置方式，只能使这个端口支持`openwire（TCP）`，如何让这个端口支持NIO，又支持多个协议呢？\n\n默认是`BIO+TCP`，目前是`NIO+TCP`，那么如何做到`NIO+TCP/Mqtt/stomp`。\n\nA: 开启多协议支持，用`auto`关键字，[reference](https://activemq.apache.org/auto)。\n\n```xml\n<transportConnector name=\"auto\" uri=\"auto://localhost:5761\"/>\n```\n\n**note:** 在activeMQ后台配置面板的`Network`可以查看开启的网络协议。\n\n# ACTIVEMQ的存储和可持久化\n\n对于上面的提到的节点（事务、持久、签收），他们都是MQ自带的，不能保证自身故障时的持久，这里提到的可持久化的目的是将数据保存在另外一台机器做备份，达到物理隔离，完成高可用。所以为了避免意外宕机后丢失信息，需要做到重启后可以恢复消息队列，消息系统一般都会`采用持久化机制`（所有MQ都会这样）：在发送者将消息发送出去后，消息中心首先将消息存储到本地数据文件、内存数据库或者远程数据库等，再试图将消息发送给接收者，成功则将消息从存储中删除，失败i则继续尝试发送；如果是重启，消息中心启动后首先检查指定的存储位置，如果有未发送成功的消息，则需要把消息发送出去。\n\n主要介绍两个DB：`KahaDB`, `LevelDB`, `JDBC`\n\nQ: AMQ持久化机制\n\n## KahaDB\n\n基于日志文件，从ActiveMQ5.4开始作为默认的持久化插件（相当于Redis的aof），记录做了哪些操作。\n\n在配置文件中，有：\n\n```xml\n<persistenceAdapter>\n    <kahaDB directory=\"${activemq.data}/kahadb\"/>\n</persistenceAdpter>\n```\n\n### 存储原理\n\nreference [here](https:/activemq.apache.org/kahadb)\n\n可用于任何场合，提高了性能和恢复能力。消息存储使用一个**事务日志**和一个**索引文件**（存储所有地址）。\n\nKahadb在消息保存目录中只有4类文件和一个lock：db-1.log, db.data, db.free, db.redo, lock. （4个文件1把锁）\n\n#### db\\<Number\\>.log\n\n存储消息到预定义大小的数据记录文件中，Number初始为1，。当数据文件已满时，一个新的文件会随之创建。当不再有引用到数据文件中的任何消息时，文件会被删除或归档（自我空间清理）。\n\n#### db.data\n\n包含了持久化的`BTree索引`，索引了消息数据记录中的消息，它是消息的索引文件，本质上是B-Tree，使用B-Tree作为索引指向`db-\\<Number>.log`里面存储的消息。\n\n#### db.free\n\n当前`db.data`文件里哪些页面是空闲的，文件具体内容是所有空闲页的**ID**. 类比linux的bash命令`free`。\n\n#### db.redo\n\n用来进行消息恢复，如果KahaDB消息存储在强制退出后启动，用于恢复BTree索引。\n\n#### lock\n\n相当于mysql中的悲观锁。表示当前获得kahadb读写权限的broker。\n\n## JDBC\n\n主要。将数据放入mysql/oracle中，这是对于长时间持久化存储，推荐用jdbc，特别是带了Journal的。缺点是有点慢。kahaDB是将服务器做本地数据库，JDBC是将他放入另外一个磁盘（类似云盘），相对来说更安全。\n\n## LevelDB\n\n## JDBC Message store with ActiveMQ Journal\n\n主要。\n\n# Q&A\n\n1. 引入消息队列后该如何保证其高可用性\n\n2. 异步投递Async Sends\n\n3. 延迟投递和定时投递\n\n4. 分发策略\n\n5. ActiveMQ消费重试机制\n\n6. 死信队列\n\n7. 如何保证消息不被重复消费呢？谈谈幂等性问题\n\n## 高可用\n\nzookeeper + (replicated-leveldb-store)的主从集群，起码非单机版，是集群的。\n\n## 异步投递\n\n如何确认发送成功？ \n\n在消息发送完后接收回调。\n\n```java\nActiveMQConnectionFacotry acf = new ActiveMQConnectionFactory(URL);\n// 设置为异步发送消息\nacf.setUseAsyncSend(true);\nActiveMQMessageProducer amp = (ActiveMQMessageProducer)session.createProducer(queue);\n...\nTextMessage message = session.createTextMessage();\n// 未message设置属性\nmessage.setJMSMessageID(UUID.randomUUID().toString());\n\n// 使用带有回调的send方法来发送\namp.send(message, new AsyncCallback(){\n    @Override\n    public void onSucces(){\n\n        System.out.println(message.getJMSmessageID+\" succeed\")\n    }\n    @Override\n    public void onException(JMSException exception){\n        // 拿到属性来确认发送失败的消息\n        System.out.println(message.getJMSmessageID+\" fail\")\n    }\n})\n```\n\n## 延迟投递和定时投递\n\n参考[官网说明](http://activemq.apache.org/delay-and-schedule-message-delivery.html)\n\n| Property name          | type   | description        |\n| ---------------------- | ------ | ------------------ |\n| AMQ\\_SCHEDULED\\_DELAY  | long   | 延迟投递的时间     |\n| AMQ\\_SCHEDULED\\_PERIOD | long   | 重复投递的时间间隔 |\n| AMQ\\_SCHEDULED\\_REPEAT | int    | 重复投递次数       |\n| AMQ\\_SCHEDULED\\_CRON   | String | Cron表达式         |\n\n在`activemq.xml`中配置*schedulerSupport*属性为*true*且Java代码中封装的辅助消息类型为*ScheduledMessage*即可。\n\n```java\nlong delay = 3 * 1000; //延迟投递的时间，每3秒\nlong period = 4 * 1000;\nint repeat = 5;\n\nTextMessage message = session.createTextMessage();\nmessage.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, delay);\nmessage.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD, delay);\nmessage.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT, delay);\n\nmessageProducer.send(mesage);\n...\n```\n\n## ActiveMQ消费重试机制\n\n- 哪些情况会引起消息重发？\n\n- 消息重发时间间隔和重发次数\n\n- 有毒消息Posion ACK\n\nreference [here](activemq.apache.org/redelivery-policy)\n\n重发：在设置事务后没有进行提交（commit），消息就会被重复消费，这时会触发重发机制，默认被重复消费6次后MQ会把这个消息放入DLQ（Dead Letter Queue）死信队列供开发查看，不会再被消费。\n\n## 如何保证消息不被重复消费（幂等性）\n\n**note**: 何时会重复消费？网络延迟造成MQ重试，进而重复消费。\n\n- 如果是做数据库的插入操作，可以给消息做一个唯一主键，重复消费时会导致主键冲突\n\n- 使用第三方服务来做消费记录。以redis为例，给消息分配一个**全局id**，只要消费过该消息，将\\<id, message\\>以K-V形式写入redis，消费者消费前先去redis中查询有没有消费记录即可。","slug":"mq","published":1,"updated":"2020-08-16T05:24:15.951Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke6smgf3006sbyihc3bw92md","content":"<p>mq的出现是大势所趋，也一定是为了解决某方面的问题，从这里入手，可以综合的了解所有mq的异同。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"MQ的引入\"><a href=\"#MQ的引入\" class=\"headerlink\" title=\"MQ的引入\"></a>MQ的引入</h1><p>模拟几个场景：</p>\n<ol>\n<li><p><code>学生模块</code>和<code>老师模块</code>。功能：学生向老师抛出问题，老师反馈给学生答案。老师一次只能给一个学生解答问题，这样一来学生数量很多的话就会给后续等待的学生到成堵塞、浪费资源。同时，众多的学生与老师之间形成了耦合。</p>\n<p>解决方式：引入<code>班长模块</code>，学生将问题都抛给班长（需要定义格式），班长不做解答，只做问题的记录，这样学生将问题抛出后不用等待。班长收集问题后，将问题给老师模块，老师依次解答。这样解决了学生与老师之间的耦合，也避免了众多学生的等待浪费。</p>\n</li>\n<li><p><code>系统A</code>需要发送数据给其他系统，已经完成了给B、C发送的功能，发送给每个系统的数据可能有差异，因此发送前会对数据进行组装。</p>\n<p>上线后又新增了一个需求，<code>D</code>也要接收<code>A</code>的数据，__此时就需要修改A系统，让他感知到D的存在__，这时就暴露出一个问题：每接入一个下游系统，都需要对<code>A</code>进行改造，开发、联调效率低，耦合严重，增加<code>A</code>的负担。</p>\n</li>\n</ol>\n<h2 id=\"好处\"><a href=\"#好处\" class=\"headerlink\" title=\"好处\"></a>好处</h2><ul>\n<li><p>解决耦合  当新的模块接进来时，可以做到代码改动最小</p>\n</li>\n<li><p>异步模型  “早上下单，下午收货“，提升整体系统的吞吐能力</p>\n</li>\n<li><p>削峰  相当于流量缓冲池，可以让后端系统按照自身吞吐能力进行消费，不被冲跨</p>\n</li>\n</ul>\n<h1 id=\"订阅模式\"><a href=\"#订阅模式\" class=\"headerlink\" title=\"订阅模式\"></a>订阅模式</h1><table>\n<thead>\n<tr>\n<th>比较项目</th>\n<th>Topic模式队列</th>\n<th>Queue模式队列</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>工作模式</td>\n<td>”订阅-发布“模式，如果当前没有订阅者，消息将会被丢弃，如果有多个订阅者，都会被分发。</td>\n<td>”负载均衡“模式。如果当前没有消费者，消息也不会被丢弃。如果有多个消费者，那么消息也只会发送给其中一个消费者（轮寻着发）。一对一（端对端）。</td>\n</tr>\n<tr>\n<td>有无状态</td>\n<td>无状态</td>\n<td>Queue数据默认会在mq服务器上以文件形式保存</td>\n</tr>\n<tr>\n<td>传递完整性</td>\n<td>如果没有订阅者，消息会被丢弃。不完整。</td>\n<td>消息不会丢弃</td>\n</tr>\n<tr>\n<td>处理效率</td>\n<td>由于消息要按照订阅者的数量进行复制，所以处理性能会随着订阅者的增加而明显降低，并且还要结合不同消息协议、自身的性能差异</td>\n<td>由于一条信息只发送给一个消费者，所以性能与消费者数量无关。但是不同消息协议的具体性能也是有差异的</td>\n</tr>\n</tbody></table>\n<h1 id=\"JMS\"><a href=\"#JMS\" class=\"headerlink\" title=\"JMS\"></a>JMS</h1><p>Java消息服务，Java Message Service，JavaEE中的一套规范，指的是两个应用程序之间进行异步通信的API，它为标准消息协议i和消息服务提供了一组通用接口，包括创建、发送、读取消息等，用于支持Java应用程序开发。</p>\n<p>实现JMS接口和规范的消息中间件，即我们的MQ服务器。</p>\n<h2 id=\"MESSAGE\"><a href=\"#MESSAGE\" class=\"headerlink\" title=\"MESSAGE\"></a>MESSAGE</h2><p>JMS message的组成：消息头 + 消息体 + 消息属性</p>\n<h3 id=\"消息头\"><a href=\"#消息头\" class=\"headerlink\" title=\"消息头\"></a>消息头</h3><p>记录常用的</p>\n<ul>\n<li><p>JMSDestination 消息发送的目的地，Queue或Topic</p>\n</li>\n<li><p>JMSDeliveryMode 持久或非持久（消息的持久化）。持久话能让数据更可靠，即JMS出现故障的话数据也不会丢失，会在服务器恢复之后再次传递。</p>\n</li>\n<li><p>JMSExpiration 过期时间，过期时间之后消息还没被发出去，就清除</p>\n</li>\n<li><p>JMSPriority 优先级，0-4普通，5-9加急，不严格按照顺序，但加急一定高于普通</p>\n</li>\n<li><p>JMSMessgeID 唯一ID，判断是否重复消费，幂等性</p>\n</li>\n</ul>\n<h3 id=\"消息体\"><a href=\"#消息体\" class=\"headerlink\" title=\"消息体\"></a>消息体</h3><p>封装具体消息数据，5种格式。（使用频率高）</p>\n<ul>\n<li><p>TextMessage 普通字符串消息 （使用频率高）</p>\n</li>\n<li><p>MapMessage map类型消息，key为String类型，值为Java基本数据类型</p>\n</li>\n<li><p>BytesMessage 二进制数组消息</p>\n</li>\n<li><p>StreamMessage 流</p>\n</li>\n<li><p>ObjectMessage 可序列化的Java对象</p>\n</li>\n</ul>\n<p>发送和接受的消息类型必须一致。</p>\n<h3 id=\"消息属性\"><a href=\"#消息属性\" class=\"headerlink\" title=\"消息属性\"></a>消息属性</h3><p>如果需要除消息头字段以外的值，那么可以使用消息属性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TextMessage tm = session.createTextMessage(<span class=\"string\">&quot;wa wa&quot;</span>);</span><br><span class=\"line\">tm.setStringProperty(<span class=\"string\">&quot;c01&quot;</span>,<span class=\"string\">&quot;vip&quot;</span>); <span class=\"comment\">// 增加属性</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">TextMessage tms = (TextMessage) messge;</span><br><span class=\"line\">System.out.println(tms.getStringProperty(<span class=\"string\">&quot;c01&quot;</span>)); <span class=\"comment\">// 接收</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"可靠性\"><a href=\"#可靠性\" class=\"headerlink\" title=\"可靠性\"></a>可靠性</h1><p>MQ挂了，消息的持久话和丢失的情况如何？一般有<strong>三个特征</strong>来保障：持久化、事务、签收，其中<strong>事务偏生产者，签收偏消费者</strong>。此外对于对于宕机，还有<strong>多节点集群</strong>。</p>\n<h2 id=\"持久化-PERSISTENT\"><a href=\"#持久化-PERSISTENT\" class=\"headerlink\" title=\"持久化 PERSISTENT\"></a>持久化 PERSISTENT</h2><p>参考redis的持久化（有rdb和aof），消息也有类似的辅助。</p>\n<h3 id=\"QUEUE\"><a href=\"#QUEUE\" class=\"headerlink\" title=\"QUEUE\"></a>QUEUE</h3><h4 id=\"参数设置\"><a href=\"#参数设置\" class=\"headerlink\" title=\"参数设置\"></a>参数设置</h4><ol>\n<li><p>非持久 服务器宕机，消息不存在</p>\n<blockquote>\n<p>messaegeProducer.setDeliveryMode(DeliveryMode.<em>NON_PRESISTENT</em>);</p>\n</blockquote>\n</li>\n<li><p>持久化 服务器宕机后消息依然存在</p>\n<blockquote>\n<p>messageProducer.setDelieveryMode(DeliveryMode.<em>PRESISTENT</em>);</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"模拟场景\"><a href=\"#模拟场景\" class=\"headerlink\" title=\"模拟场景\"></a>模拟场景</h4><p>非持久化时，当发布者在队列发布了消息，之后将activeMQ服务器重启，MQ服务器中的消息会丢失。</p>\n<p>持久化时，上述操作后，数据依然存在。</p>\n<p>在队列中，如果<strong>不显示标注持久</strong>，<strong>默认持久化</strong>，因为可靠性是优先考虑的因素。</p>\n<p>持久、事物、签收</p>\n<h3 id=\"TOPIC\"><a href=\"#TOPIC\" class=\"headerlink\" title=\"TOPIC\"></a>TOPIC</h3><p>对于topic，先启动订阅再启动生产，否则没有意义（没人订阅，发送的消息都是废消息）。持久化topic类似于订阅号：</p>\n<ol>\n<li><p>先运行一次消费者，等于向MQ注册</p>\n</li>\n<li><p>然后再运行生产者发送信息</p>\n</li>\n<li><p>消费者一定会收到订阅消息。不在线的话下次连接时会接收。</p>\n</li>\n</ol>\n<h2 id=\"事务-TRANSACTION\"><a href=\"#事务-TRANSACTION\" class=\"headerlink\" title=\"事务 TRANSACTION\"></a>事务 TRANSACTION</h2><p>数据库的事务、ACID、隔离级别</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建session的第一个参数即 事务是否开启</span></span><br><span class=\"line\">Session session = connection.createSession(<span class=\"keyword\">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生产者\"><a href=\"#生产者\" class=\"headerlink\" title=\"生产者\"></a>生产者</h3><ul>\n<li><p>false 关闭事务，只要执行<code>send</code>就进入到队列中</p>\n</li>\n<li><p>true 开启事物，先执行<code>send</code>再执行<code>commit</code>，消息才被真正提交到队列中。</p>\n</li>\n</ul>\n<p>对于事物的true，为何多此一举？保证事务的高可用、容错性，可以回滚。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ok session.commit;</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// error</span></span><br><span class=\"line\">    session.rollback();</span><br><span class=\"line\">&#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> != session)&#123;</span><br><span class=\"line\">        session.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"消费者\"><a href=\"#消费者\" class=\"headerlink\" title=\"消费者\"></a>消费者</h3><p>创建session时将事务改为<code>true</code>，同样需要<code>commit</code>，否则事务会被重复消费。</p>\n<h2 id=\"签收-ACKNOWLEDGE\"><a href=\"#签收-ACKNOWLEDGE\" class=\"headerlink\" title=\"签收 ACKNOWLEDGE\"></a>签收 ACKNOWLEDGE</h2><p>分为事务和非事务两种情况</p>\n<h4 id=\"非事务\"><a href=\"#非事务\" class=\"headerlink\" title=\"非事务\"></a>非事务</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建session的第个参数即 签收类型</span></span><br><span class=\"line\">Session session = connection.createSession(<span class=\"keyword\">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>自动签收（默认）   <strong>AUTO_ACKNOWLEDGE</strong>  （使用频率高）</p>\n</li>\n<li><p>手动签收 <strong>CLIENT_ACKNOWLEDGE</strong> （使用频率高）</p>\n</li>\n<li><p>允许重复消息 <strong>DUPS_OK_ACKNOWLEDGE</strong></p>\n</li>\n</ul>\n<p>手动签收时需要手动标记，否则会造成重复消费：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TextMessage tm = (TextMessage)messageConsumer.receive(<span class=\"number\">4000L</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> != tm)&#123;</span><br><span class=\"line\">    tm.acknowledge();</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建session的第个参数即 签收类型</span></span><br><span class=\"line\">Session session = connection.createSession(<span class=\"keyword\">true</span>, Session.AUTO_ACKNOWLEDGE);</span><br></pre></td></tr></table></figure>\n\n<p>有事务就需要<code>commit</code>。</p>\n<h2 id=\"点对点\"><a href=\"#点对点\" class=\"headerlink\" title=\"点对点\"></a>点对点</h2><p>基于队列，生产者发消息到队列，消费者从队列接收消息，队列的存在使得消息的<strong>异步传输</strong>成为可能。类比平时的即时通讯工具。</p>\n<ul>\n<li><p>如果在<strong>Session</strong>关闭时有部分消息已被收到但还没有签收（<strong>acknowledge</strong>)，那当消费者下次连接到同样的队列时，消息会被再次接收。（不会丢失）</p>\n</li>\n<li><p>队列可以长久地保存消息直到消费者收到消息。<strong>消费者不需要因为再次担心消息丢失而时刻和队列保持激活的连接状态</strong>，充分体现了异步传输模式的优势。</p>\n</li>\n</ul>\n<h2 id=\"发布订阅\"><a href=\"#发布订阅\" class=\"headerlink\" title=\"发布订阅\"></a>发布订阅</h2><p>JMS Pub/Sub模型。定义了如何向一个内容节点发布和订阅消息，这些节点被称作<strong>topic</strong>，主题可以被认为是消息的传输中介，publisher发布消息到主题，subscribe从主题订阅消息。主题使得publisher和subscribe保持互相独立，不需要接触即可保证消息的传送。</p>\n<h3 id=\"非持久\"><a href=\"#非持久\" class=\"headerlink\" title=\"非持久\"></a>非持久</h3><p>对于非持久订阅，只有当客户端处于激活状态，也就是和MQ保持连接状态才能收到发送到某个主题的消息。如果消费者处于离线状态，生产者发生发送的主题消息将会丢失作废，消费者永远不会收到。所以消费者要先注册才能接受到发布。</p>\n<h3 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h3><p>客户端先向MQ注册一个自己的身份ID识别号，当这个客户端处于离线时，生产者会为这个ID保存所有发送到主题的消息，当客户再次连接到MQ时，MQ会根据消费者的ID得到所有当自己处于离线时发送到主题的消息（即 可以恢复、派送未签收的消息）。</p>\n<h1 id=\"BROKER\"><a href=\"#BROKER\" class=\"headerlink\" title=\"BROKER\"></a>BROKER</h1><p>集群、配置时会用到。</p>\n<p>相当于一个ActiveMQ服务器<strong>实例</strong>，实现了用代码的形式启动ActiveMQ将MQ嵌入到Java代码中，以便随时用随时启动（用的时候再启动，这样节省资源、保证可靠性）。</p>\n<p>之前会在linux服务器上启动，而在这里，是将MQ装在了代码里，MQ是一个实例。  类比springboot内嵌tomcat.</p>\n<h2 id=\"消息发送模式\"><a href=\"#消息发送模式\" class=\"headerlink\" title=\"消息发送模式\"></a>消息发送模式</h2><p>ActiveMQ支持同步、异步两种发送的模式将消息发送到broker，模式的选择对发送延时有巨大影响，使用异步发送可以显著的提高发送的性能。</p>\n<p><code>ActiveMQ默认使用异步发送的模式</code>，<strong>同步发送有两种情况</strong>：1. 是明确指定使用同步发送。2. 在未使用事务的情况下发送持久化的消息。第二种情况是特别要注意的，每次发送都会阻塞producer直到broker返回一个确认，表示消息已经被安全地持久化到磁盘，确认机制提供了消息安全的保障，同时阻塞客户端带来了很大的延时。</p>\n<p>异步发送可以最大化producer端的发送效率，适合发送消息比较密集的情况下使用，提升producer性能的情况下，也有一定的弊端，就是消耗较多client端内存同时，也会导致broker端性能消耗增加（不停地发消息，能不累么）；此外，它也不能保证消息100%地发送成功，需要容忍消息丢失的可能。很多高性能的应用，<code>允许在失败的情况下有少量的数据丢失</code>。</p>\n<h1 id=\"ACTIVEMQ的传输协议\"><a href=\"#ACTIVEMQ的传输协议\" class=\"headerlink\" title=\"ACTIVEMQ的传输协议\"></a>ACTIVEMQ的传输协议</h1><p>Q: 默认的61616端口如何更改？生产上的链接协议如何配置的，使用tcp么？</p>\n<p>调优：使用NIO传输协议</p>\n<p>支持的通讯协议：TCP, NIO, UDP, SSL, VM……（对于java，主要使用前两个）</p>\n<table>\n<thead>\n<tr>\n<th>协议</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>TCP</td>\n<td>默认的协议，性能相对可以</td>\n</tr>\n<tr>\n<td>NIO</td>\n<td>基于TCP协议之上的，进行了扩展和优化</td>\n</tr>\n<tr>\n<td>HTP(s)</td>\n<td>基于HTTP(s)</td>\n</tr>\n</tbody></table>\n<h2 id=\"NIO\"><a href=\"#NIO\" class=\"headerlink\" title=\"NIO\"></a>NIO</h2><p>要换为NIO，需要修改<code>activemq.xml</code>配置文件。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">broker</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">transportConnectors</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">transportConnector</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;nio&quot;</span> <span class=\"attr\">uri</span>=<span class=\"string\">&quot;nio://192.168.111.136&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">transportConnectors</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">broker</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在消费者、生产者修改代码，指定传输协议：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> stati <span class=\"keyword\">final</span> String ACTIVEMQ_URL = <span class=\"string\">&quot;nio://192.168.111.136&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    ActiveMQConnectionFactory af = <span class=\"keyword\">new</span> ActiveMQConnectionFactory(ACTIVEMQ_URL);</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"增强\"><a href=\"#增强\" class=\"headerlink\" title=\"增强\"></a>增强</h3><p>Q: uri以”nio“开头，表示这个端口使用以TCP协议为基础的NIO网络IO模型，但是这样的设置方式，只能使这个端口支持<code>openwire（TCP）</code>，如何让这个端口支持NIO，又支持多个协议呢？</p>\n<p>默认是<code>BIO+TCP</code>，目前是<code>NIO+TCP</code>，那么如何做到<code>NIO+TCP/Mqtt/stomp</code>。</p>\n<p>A: 开启多协议支持，用<code>auto</code>关键字，<a href=\"https://activemq.apache.org/auto\">reference</a>。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transportConnector</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;auto&quot;</span> <span class=\"attr\">uri</span>=<span class=\"string\">&quot;auto://localhost:5761&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>note:</strong> 在activeMQ后台配置面板的<code>Network</code>可以查看开启的网络协议。</p>\n<h1 id=\"ACTIVEMQ的存储和可持久化\"><a href=\"#ACTIVEMQ的存储和可持久化\" class=\"headerlink\" title=\"ACTIVEMQ的存储和可持久化\"></a>ACTIVEMQ的存储和可持久化</h1><p>对于上面的提到的节点（事务、持久、签收），他们都是MQ自带的，不能保证自身故障时的持久，这里提到的可持久化的目的是将数据保存在另外一台机器做备份，达到物理隔离，完成高可用。所以为了避免意外宕机后丢失信息，需要做到重启后可以恢复消息队列，消息系统一般都会<code>采用持久化机制</code>（所有MQ都会这样）：在发送者将消息发送出去后，消息中心首先将消息存储到本地数据文件、内存数据库或者远程数据库等，再试图将消息发送给接收者，成功则将消息从存储中删除，失败i则继续尝试发送；如果是重启，消息中心启动后首先检查指定的存储位置，如果有未发送成功的消息，则需要把消息发送出去。</p>\n<p>主要介绍两个DB：<code>KahaDB</code>, <code>LevelDB</code>, <code>JDBC</code></p>\n<p>Q: AMQ持久化机制</p>\n<h2 id=\"KahaDB\"><a href=\"#KahaDB\" class=\"headerlink\" title=\"KahaDB\"></a>KahaDB</h2><p>基于日志文件，从ActiveMQ5.4开始作为默认的持久化插件（相当于Redis的aof），记录做了哪些操作。</p>\n<p>在配置文件中，有：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">persistenceAdapter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">kahaDB</span> <span class=\"attr\">directory</span>=<span class=\"string\">&quot;$&#123;activemq.data&#125;/kahadb&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">persistenceAdpter</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"存储原理\"><a href=\"#存储原理\" class=\"headerlink\" title=\"存储原理\"></a>存储原理</h3><p>reference <a href=\"https://activemq.apache.org/kahadb\">here</a></p>\n<p>可用于任何场合，提高了性能和恢复能力。消息存储使用一个<strong>事务日志</strong>和一个<strong>索引文件</strong>（存储所有地址）。</p>\n<p>Kahadb在消息保存目录中只有4类文件和一个lock：db-1.log, db.data, db.free, db.redo, lock. （4个文件1把锁）</p>\n<h4 id=\"db-lt-Number-gt-log\"><a href=\"#db-lt-Number-gt-log\" class=\"headerlink\" title=\"db&lt;Number&gt;.log\"></a>db&lt;Number&gt;.log</h4><p>存储消息到预定义大小的数据记录文件中，Number初始为1，。当数据文件已满时，一个新的文件会随之创建。当不再有引用到数据文件中的任何消息时，文件会被删除或归档（自我空间清理）。</p>\n<h4 id=\"db-data\"><a href=\"#db-data\" class=\"headerlink\" title=\"db.data\"></a>db.data</h4><p>包含了持久化的<code>BTree索引</code>，索引了消息数据记录中的消息，它是消息的索引文件，本质上是B-Tree，使用B-Tree作为索引指向<code>db-\\&lt;Number&gt;.log</code>里面存储的消息。</p>\n<h4 id=\"db-free\"><a href=\"#db-free\" class=\"headerlink\" title=\"db.free\"></a>db.free</h4><p>当前<code>db.data</code>文件里哪些页面是空闲的，文件具体内容是所有空闲页的<strong>ID</strong>. 类比linux的bash命令<code>free</code>。</p>\n<h4 id=\"db-redo\"><a href=\"#db-redo\" class=\"headerlink\" title=\"db.redo\"></a>db.redo</h4><p>用来进行消息恢复，如果KahaDB消息存储在强制退出后启动，用于恢复BTree索引。</p>\n<h4 id=\"lock\"><a href=\"#lock\" class=\"headerlink\" title=\"lock\"></a>lock</h4><p>相当于mysql中的悲观锁。表示当前获得kahadb读写权限的broker。</p>\n<h2 id=\"JDBC\"><a href=\"#JDBC\" class=\"headerlink\" title=\"JDBC\"></a>JDBC</h2><p>主要。将数据放入mysql/oracle中，这是对于长时间持久化存储，推荐用jdbc，特别是带了Journal的。缺点是有点慢。kahaDB是将服务器做本地数据库，JDBC是将他放入另外一个磁盘（类似云盘），相对来说更安全。</p>\n<h2 id=\"LevelDB\"><a href=\"#LevelDB\" class=\"headerlink\" title=\"LevelDB\"></a>LevelDB</h2><h2 id=\"JDBC-Message-store-with-ActiveMQ-Journal\"><a href=\"#JDBC-Message-store-with-ActiveMQ-Journal\" class=\"headerlink\" title=\"JDBC Message store with ActiveMQ Journal\"></a>JDBC Message store with ActiveMQ Journal</h2><p>主要。</p>\n<h1 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h1><ol>\n<li><p>引入消息队列后该如何保证其高可用性</p>\n</li>\n<li><p>异步投递Async Sends</p>\n</li>\n<li><p>延迟投递和定时投递</p>\n</li>\n<li><p>分发策略</p>\n</li>\n<li><p>ActiveMQ消费重试机制</p>\n</li>\n<li><p>死信队列</p>\n</li>\n<li><p>如何保证消息不被重复消费呢？谈谈幂等性问题</p>\n</li>\n</ol>\n<h2 id=\"高可用\"><a href=\"#高可用\" class=\"headerlink\" title=\"高可用\"></a>高可用</h2><p>zookeeper + (replicated-leveldb-store)的主从集群，起码非单机版，是集群的。</p>\n<h2 id=\"异步投递\"><a href=\"#异步投递\" class=\"headerlink\" title=\"异步投递\"></a>异步投递</h2><p>如何确认发送成功？ </p>\n<p>在消息发送完后接收回调。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ActiveMQConnectionFacotry acf = <span class=\"keyword\">new</span> ActiveMQConnectionFactory(URL);</span><br><span class=\"line\"><span class=\"comment\">// 设置为异步发送消息</span></span><br><span class=\"line\">acf.setUseAsyncSend(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">ActiveMQMessageProducer amp = (ActiveMQMessageProducer)session.createProducer(queue);</span><br><span class=\"line\">...</span><br><span class=\"line\">TextMessage message = session.createTextMessage();</span><br><span class=\"line\"><span class=\"comment\">// 未message设置属性</span></span><br><span class=\"line\">message.setJMSMessageID(UUID.randomUUID().toString());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用带有回调的send方法来发送</span></span><br><span class=\"line\">amp.send(message, <span class=\"keyword\">new</span> AsyncCallback()&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSucces</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(message.getJMSmessageID+<span class=\"string\">&quot; succeed&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onException</span><span class=\"params\">(JMSException exception)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 拿到属性来确认发送失败的消息</span></span><br><span class=\"line\">        System.out.println(message.getJMSmessageID+<span class=\"string\">&quot; fail&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"延迟投递和定时投递\"><a href=\"#延迟投递和定时投递\" class=\"headerlink\" title=\"延迟投递和定时投递\"></a>延迟投递和定时投递</h2><p>参考<a href=\"http://activemq.apache.org/delay-and-schedule-message-delivery.html\">官网说明</a></p>\n<table>\n<thead>\n<tr>\n<th>Property name</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>AMQ_SCHEDULED_DELAY</td>\n<td>long</td>\n<td>延迟投递的时间</td>\n</tr>\n<tr>\n<td>AMQ_SCHEDULED_PERIOD</td>\n<td>long</td>\n<td>重复投递的时间间隔</td>\n</tr>\n<tr>\n<td>AMQ_SCHEDULED_REPEAT</td>\n<td>int</td>\n<td>重复投递次数</td>\n</tr>\n<tr>\n<td>AMQ_SCHEDULED_CRON</td>\n<td>String</td>\n<td>Cron表达式</td>\n</tr>\n</tbody></table>\n<p>在<code>activemq.xml</code>中配置<em>schedulerSupport</em>属性为<em>true</em>且Java代码中封装的辅助消息类型为<em>ScheduledMessage</em>即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">long</span> delay = <span class=\"number\">3</span> * <span class=\"number\">1000</span>; <span class=\"comment\">//延迟投递的时间，每3秒</span></span><br><span class=\"line\"><span class=\"keyword\">long</span> period = <span class=\"number\">4</span> * <span class=\"number\">1000</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> repeat = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">TextMessage message = session.createTextMessage();</span><br><span class=\"line\">message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, delay);</span><br><span class=\"line\">message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD, delay);</span><br><span class=\"line\">message.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT, delay);</span><br><span class=\"line\"></span><br><span class=\"line\">messageProducer.send(mesage);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ActiveMQ消费重试机制\"><a href=\"#ActiveMQ消费重试机制\" class=\"headerlink\" title=\"ActiveMQ消费重试机制\"></a>ActiveMQ消费重试机制</h2><ul>\n<li><p>哪些情况会引起消息重发？</p>\n</li>\n<li><p>消息重发时间间隔和重发次数</p>\n</li>\n<li><p>有毒消息Posion ACK</p>\n</li>\n</ul>\n<p>reference <a href=\"activemq.apache.org/redelivery-policy\">here</a></p>\n<p>重发：在设置事务后没有进行提交（commit），消息就会被重复消费，这时会触发重发机制，默认被重复消费6次后MQ会把这个消息放入DLQ（Dead Letter Queue）死信队列供开发查看，不会再被消费。</p>\n<h2 id=\"如何保证消息不被重复消费（幂等性）\"><a href=\"#如何保证消息不被重复消费（幂等性）\" class=\"headerlink\" title=\"如何保证消息不被重复消费（幂等性）\"></a>如何保证消息不被重复消费（幂等性）</h2><p><strong>note</strong>: 何时会重复消费？网络延迟造成MQ重试，进而重复消费。</p>\n<ul>\n<li><p>如果是做数据库的插入操作，可以给消息做一个唯一主键，重复消费时会导致主键冲突</p>\n</li>\n<li><p>使用第三方服务来做消费记录。以redis为例，给消息分配一个<strong>全局id</strong>，只要消费过该消息，将&lt;id, message&gt;以K-V形式写入redis，消费者消费前先去redis中查询有没有消费记录即可。</p>\n</li>\n</ul>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>mq的出现是大势所趋，也一定是为了解决某方面的问题，从这里入手，可以综合的了解所有mq的异同。</p>","more":"<h1 id=\"MQ的引入\"><a href=\"#MQ的引入\" class=\"headerlink\" title=\"MQ的引入\"></a>MQ的引入</h1><p>模拟几个场景：</p>\n<ol>\n<li><p><code>学生模块</code>和<code>老师模块</code>。功能：学生向老师抛出问题，老师反馈给学生答案。老师一次只能给一个学生解答问题，这样一来学生数量很多的话就会给后续等待的学生到成堵塞、浪费资源。同时，众多的学生与老师之间形成了耦合。</p>\n<p>解决方式：引入<code>班长模块</code>，学生将问题都抛给班长（需要定义格式），班长不做解答，只做问题的记录，这样学生将问题抛出后不用等待。班长收集问题后，将问题给老师模块，老师依次解答。这样解决了学生与老师之间的耦合，也避免了众多学生的等待浪费。</p>\n</li>\n<li><p><code>系统A</code>需要发送数据给其他系统，已经完成了给B、C发送的功能，发送给每个系统的数据可能有差异，因此发送前会对数据进行组装。</p>\n<p>上线后又新增了一个需求，<code>D</code>也要接收<code>A</code>的数据，__此时就需要修改A系统，让他感知到D的存在__，这时就暴露出一个问题：每接入一个下游系统，都需要对<code>A</code>进行改造，开发、联调效率低，耦合严重，增加<code>A</code>的负担。</p>\n</li>\n</ol>\n<h2 id=\"好处\"><a href=\"#好处\" class=\"headerlink\" title=\"好处\"></a>好处</h2><ul>\n<li><p>解决耦合  当新的模块接进来时，可以做到代码改动最小</p>\n</li>\n<li><p>异步模型  “早上下单，下午收货“，提升整体系统的吞吐能力</p>\n</li>\n<li><p>削峰  相当于流量缓冲池，可以让后端系统按照自身吞吐能力进行消费，不被冲跨</p>\n</li>\n</ul>\n<h1 id=\"订阅模式\"><a href=\"#订阅模式\" class=\"headerlink\" title=\"订阅模式\"></a>订阅模式</h1><table>\n<thead>\n<tr>\n<th>比较项目</th>\n<th>Topic模式队列</th>\n<th>Queue模式队列</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>工作模式</td>\n<td>”订阅-发布“模式，如果当前没有订阅者，消息将会被丢弃，如果有多个订阅者，都会被分发。</td>\n<td>”负载均衡“模式。如果当前没有消费者，消息也不会被丢弃。如果有多个消费者，那么消息也只会发送给其中一个消费者（轮寻着发）。一对一（端对端）。</td>\n</tr>\n<tr>\n<td>有无状态</td>\n<td>无状态</td>\n<td>Queue数据默认会在mq服务器上以文件形式保存</td>\n</tr>\n<tr>\n<td>传递完整性</td>\n<td>如果没有订阅者，消息会被丢弃。不完整。</td>\n<td>消息不会丢弃</td>\n</tr>\n<tr>\n<td>处理效率</td>\n<td>由于消息要按照订阅者的数量进行复制，所以处理性能会随着订阅者的增加而明显降低，并且还要结合不同消息协议、自身的性能差异</td>\n<td>由于一条信息只发送给一个消费者，所以性能与消费者数量无关。但是不同消息协议的具体性能也是有差异的</td>\n</tr>\n</tbody></table>\n<h1 id=\"JMS\"><a href=\"#JMS\" class=\"headerlink\" title=\"JMS\"></a>JMS</h1><p>Java消息服务，Java Message Service，JavaEE中的一套规范，指的是两个应用程序之间进行异步通信的API，它为标准消息协议i和消息服务提供了一组通用接口，包括创建、发送、读取消息等，用于支持Java应用程序开发。</p>\n<p>实现JMS接口和规范的消息中间件，即我们的MQ服务器。</p>\n<h2 id=\"MESSAGE\"><a href=\"#MESSAGE\" class=\"headerlink\" title=\"MESSAGE\"></a>MESSAGE</h2><p>JMS message的组成：消息头 + 消息体 + 消息属性</p>\n<h3 id=\"消息头\"><a href=\"#消息头\" class=\"headerlink\" title=\"消息头\"></a>消息头</h3><p>记录常用的</p>\n<ul>\n<li><p>JMSDestination 消息发送的目的地，Queue或Topic</p>\n</li>\n<li><p>JMSDeliveryMode 持久或非持久（消息的持久化）。持久话能让数据更可靠，即JMS出现故障的话数据也不会丢失，会在服务器恢复之后再次传递。</p>\n</li>\n<li><p>JMSExpiration 过期时间，过期时间之后消息还没被发出去，就清除</p>\n</li>\n<li><p>JMSPriority 优先级，0-4普通，5-9加急，不严格按照顺序，但加急一定高于普通</p>\n</li>\n<li><p>JMSMessgeID 唯一ID，判断是否重复消费，幂等性</p>\n</li>\n</ul>\n<h3 id=\"消息体\"><a href=\"#消息体\" class=\"headerlink\" title=\"消息体\"></a>消息体</h3><p>封装具体消息数据，5种格式。（使用频率高）</p>\n<ul>\n<li><p>TextMessage 普通字符串消息 （使用频率高）</p>\n</li>\n<li><p>MapMessage map类型消息，key为String类型，值为Java基本数据类型</p>\n</li>\n<li><p>BytesMessage 二进制数组消息</p>\n</li>\n<li><p>StreamMessage 流</p>\n</li>\n<li><p>ObjectMessage 可序列化的Java对象</p>\n</li>\n</ul>\n<p>发送和接受的消息类型必须一致。</p>\n<h3 id=\"消息属性\"><a href=\"#消息属性\" class=\"headerlink\" title=\"消息属性\"></a>消息属性</h3><p>如果需要除消息头字段以外的值，那么可以使用消息属性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TextMessage tm = session.createTextMessage(<span class=\"string\">&quot;wa wa&quot;</span>);</span><br><span class=\"line\">tm.setStringProperty(<span class=\"string\">&quot;c01&quot;</span>,<span class=\"string\">&quot;vip&quot;</span>); <span class=\"comment\">// 增加属性</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">TextMessage tms = (TextMessage) messge;</span><br><span class=\"line\">System.out.println(tms.getStringProperty(<span class=\"string\">&quot;c01&quot;</span>)); <span class=\"comment\">// 接收</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"可靠性\"><a href=\"#可靠性\" class=\"headerlink\" title=\"可靠性\"></a>可靠性</h1><p>MQ挂了，消息的持久话和丢失的情况如何？一般有<strong>三个特征</strong>来保障：持久化、事务、签收，其中<strong>事务偏生产者，签收偏消费者</strong>。此外对于对于宕机，还有<strong>多节点集群</strong>。</p>\n<h2 id=\"持久化-PERSISTENT\"><a href=\"#持久化-PERSISTENT\" class=\"headerlink\" title=\"持久化 PERSISTENT\"></a>持久化 PERSISTENT</h2><p>参考redis的持久化（有rdb和aof），消息也有类似的辅助。</p>\n<h3 id=\"QUEUE\"><a href=\"#QUEUE\" class=\"headerlink\" title=\"QUEUE\"></a>QUEUE</h3><h4 id=\"参数设置\"><a href=\"#参数设置\" class=\"headerlink\" title=\"参数设置\"></a>参数设置</h4><ol>\n<li><p>非持久 服务器宕机，消息不存在</p>\n<blockquote>\n<p>messaegeProducer.setDeliveryMode(DeliveryMode.<em>NON_PRESISTENT</em>);</p>\n</blockquote>\n</li>\n<li><p>持久化 服务器宕机后消息依然存在</p>\n<blockquote>\n<p>messageProducer.setDelieveryMode(DeliveryMode.<em>PRESISTENT</em>);</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"模拟场景\"><a href=\"#模拟场景\" class=\"headerlink\" title=\"模拟场景\"></a>模拟场景</h4><p>非持久化时，当发布者在队列发布了消息，之后将activeMQ服务器重启，MQ服务器中的消息会丢失。</p>\n<p>持久化时，上述操作后，数据依然存在。</p>\n<p>在队列中，如果<strong>不显示标注持久</strong>，<strong>默认持久化</strong>，因为可靠性是优先考虑的因素。</p>\n<p>持久、事物、签收</p>\n<h3 id=\"TOPIC\"><a href=\"#TOPIC\" class=\"headerlink\" title=\"TOPIC\"></a>TOPIC</h3><p>对于topic，先启动订阅再启动生产，否则没有意义（没人订阅，发送的消息都是废消息）。持久化topic类似于订阅号：</p>\n<ol>\n<li><p>先运行一次消费者，等于向MQ注册</p>\n</li>\n<li><p>然后再运行生产者发送信息</p>\n</li>\n<li><p>消费者一定会收到订阅消息。不在线的话下次连接时会接收。</p>\n</li>\n</ol>\n<h2 id=\"事务-TRANSACTION\"><a href=\"#事务-TRANSACTION\" class=\"headerlink\" title=\"事务 TRANSACTION\"></a>事务 TRANSACTION</h2><p>数据库的事务、ACID、隔离级别</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建session的第一个参数即 事务是否开启</span></span><br><span class=\"line\">Session session = connection.createSession(<span class=\"keyword\">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生产者\"><a href=\"#生产者\" class=\"headerlink\" title=\"生产者\"></a>生产者</h3><ul>\n<li><p>false 关闭事务，只要执行<code>send</code>就进入到队列中</p>\n</li>\n<li><p>true 开启事物，先执行<code>send</code>再执行<code>commit</code>，消息才被真正提交到队列中。</p>\n</li>\n</ul>\n<p>对于事物的true，为何多此一举？保证事务的高可用、容错性，可以回滚。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ok session.commit;</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// error</span></span><br><span class=\"line\">    session.rollback();</span><br><span class=\"line\">&#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> != session)&#123;</span><br><span class=\"line\">        session.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"消费者\"><a href=\"#消费者\" class=\"headerlink\" title=\"消费者\"></a>消费者</h3><p>创建session时将事务改为<code>true</code>，同样需要<code>commit</code>，否则事务会被重复消费。</p>\n<h2 id=\"签收-ACKNOWLEDGE\"><a href=\"#签收-ACKNOWLEDGE\" class=\"headerlink\" title=\"签收 ACKNOWLEDGE\"></a>签收 ACKNOWLEDGE</h2><p>分为事务和非事务两种情况</p>\n<h4 id=\"非事务\"><a href=\"#非事务\" class=\"headerlink\" title=\"非事务\"></a>非事务</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建session的第个参数即 签收类型</span></span><br><span class=\"line\">Session session = connection.createSession(<span class=\"keyword\">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>自动签收（默认）   <strong>AUTO_ACKNOWLEDGE</strong>  （使用频率高）</p>\n</li>\n<li><p>手动签收 <strong>CLIENT_ACKNOWLEDGE</strong> （使用频率高）</p>\n</li>\n<li><p>允许重复消息 <strong>DUPS_OK_ACKNOWLEDGE</strong></p>\n</li>\n</ul>\n<p>手动签收时需要手动标记，否则会造成重复消费：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TextMessage tm = (TextMessage)messageConsumer.receive(<span class=\"number\">4000L</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> != tm)&#123;</span><br><span class=\"line\">    tm.acknowledge();</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建session的第个参数即 签收类型</span></span><br><span class=\"line\">Session session = connection.createSession(<span class=\"keyword\">true</span>, Session.AUTO_ACKNOWLEDGE);</span><br></pre></td></tr></table></figure>\n\n<p>有事务就需要<code>commit</code>。</p>\n<h2 id=\"点对点\"><a href=\"#点对点\" class=\"headerlink\" title=\"点对点\"></a>点对点</h2><p>基于队列，生产者发消息到队列，消费者从队列接收消息，队列的存在使得消息的<strong>异步传输</strong>成为可能。类比平时的即时通讯工具。</p>\n<ul>\n<li><p>如果在<strong>Session</strong>关闭时有部分消息已被收到但还没有签收（<strong>acknowledge</strong>)，那当消费者下次连接到同样的队列时，消息会被再次接收。（不会丢失）</p>\n</li>\n<li><p>队列可以长久地保存消息直到消费者收到消息。<strong>消费者不需要因为再次担心消息丢失而时刻和队列保持激活的连接状态</strong>，充分体现了异步传输模式的优势。</p>\n</li>\n</ul>\n<h2 id=\"发布订阅\"><a href=\"#发布订阅\" class=\"headerlink\" title=\"发布订阅\"></a>发布订阅</h2><p>JMS Pub/Sub模型。定义了如何向一个内容节点发布和订阅消息，这些节点被称作<strong>topic</strong>，主题可以被认为是消息的传输中介，publisher发布消息到主题，subscribe从主题订阅消息。主题使得publisher和subscribe保持互相独立，不需要接触即可保证消息的传送。</p>\n<h3 id=\"非持久\"><a href=\"#非持久\" class=\"headerlink\" title=\"非持久\"></a>非持久</h3><p>对于非持久订阅，只有当客户端处于激活状态，也就是和MQ保持连接状态才能收到发送到某个主题的消息。如果消费者处于离线状态，生产者发生发送的主题消息将会丢失作废，消费者永远不会收到。所以消费者要先注册才能接受到发布。</p>\n<h3 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h3><p>客户端先向MQ注册一个自己的身份ID识别号，当这个客户端处于离线时，生产者会为这个ID保存所有发送到主题的消息，当客户再次连接到MQ时，MQ会根据消费者的ID得到所有当自己处于离线时发送到主题的消息（即 可以恢复、派送未签收的消息）。</p>\n<h1 id=\"BROKER\"><a href=\"#BROKER\" class=\"headerlink\" title=\"BROKER\"></a>BROKER</h1><p>集群、配置时会用到。</p>\n<p>相当于一个ActiveMQ服务器<strong>实例</strong>，实现了用代码的形式启动ActiveMQ将MQ嵌入到Java代码中，以便随时用随时启动（用的时候再启动，这样节省资源、保证可靠性）。</p>\n<p>之前会在linux服务器上启动，而在这里，是将MQ装在了代码里，MQ是一个实例。  类比springboot内嵌tomcat.</p>\n<h2 id=\"消息发送模式\"><a href=\"#消息发送模式\" class=\"headerlink\" title=\"消息发送模式\"></a>消息发送模式</h2><p>ActiveMQ支持同步、异步两种发送的模式将消息发送到broker，模式的选择对发送延时有巨大影响，使用异步发送可以显著的提高发送的性能。</p>\n<p><code>ActiveMQ默认使用异步发送的模式</code>，<strong>同步发送有两种情况</strong>：1. 是明确指定使用同步发送。2. 在未使用事务的情况下发送持久化的消息。第二种情况是特别要注意的，每次发送都会阻塞producer直到broker返回一个确认，表示消息已经被安全地持久化到磁盘，确认机制提供了消息安全的保障，同时阻塞客户端带来了很大的延时。</p>\n<p>异步发送可以最大化producer端的发送效率，适合发送消息比较密集的情况下使用，提升producer性能的情况下，也有一定的弊端，就是消耗较多client端内存同时，也会导致broker端性能消耗增加（不停地发消息，能不累么）；此外，它也不能保证消息100%地发送成功，需要容忍消息丢失的可能。很多高性能的应用，<code>允许在失败的情况下有少量的数据丢失</code>。</p>\n<h1 id=\"ACTIVEMQ的传输协议\"><a href=\"#ACTIVEMQ的传输协议\" class=\"headerlink\" title=\"ACTIVEMQ的传输协议\"></a>ACTIVEMQ的传输协议</h1><p>Q: 默认的61616端口如何更改？生产上的链接协议如何配置的，使用tcp么？</p>\n<p>调优：使用NIO传输协议</p>\n<p>支持的通讯协议：TCP, NIO, UDP, SSL, VM……（对于java，主要使用前两个）</p>\n<table>\n<thead>\n<tr>\n<th>协议</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>TCP</td>\n<td>默认的协议，性能相对可以</td>\n</tr>\n<tr>\n<td>NIO</td>\n<td>基于TCP协议之上的，进行了扩展和优化</td>\n</tr>\n<tr>\n<td>HTP(s)</td>\n<td>基于HTTP(s)</td>\n</tr>\n</tbody></table>\n<h2 id=\"NIO\"><a href=\"#NIO\" class=\"headerlink\" title=\"NIO\"></a>NIO</h2><p>要换为NIO，需要修改<code>activemq.xml</code>配置文件。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">broker</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">transportConnectors</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">transportConnector</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;nio&quot;</span> <span class=\"attr\">uri</span>=<span class=\"string\">&quot;nio://192.168.111.136&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">transportConnectors</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">broker</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在消费者、生产者修改代码，指定传输协议：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> stati <span class=\"keyword\">final</span> String ACTIVEMQ_URL = <span class=\"string\">&quot;nio://192.168.111.136&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    ActiveMQConnectionFactory af = <span class=\"keyword\">new</span> ActiveMQConnectionFactory(ACTIVEMQ_URL);</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"增强\"><a href=\"#增强\" class=\"headerlink\" title=\"增强\"></a>增强</h3><p>Q: uri以”nio“开头，表示这个端口使用以TCP协议为基础的NIO网络IO模型，但是这样的设置方式，只能使这个端口支持<code>openwire（TCP）</code>，如何让这个端口支持NIO，又支持多个协议呢？</p>\n<p>默认是<code>BIO+TCP</code>，目前是<code>NIO+TCP</code>，那么如何做到<code>NIO+TCP/Mqtt/stomp</code>。</p>\n<p>A: 开启多协议支持，用<code>auto</code>关键字，<a href=\"https://activemq.apache.org/auto\">reference</a>。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transportConnector</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;auto&quot;</span> <span class=\"attr\">uri</span>=<span class=\"string\">&quot;auto://localhost:5761&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>note:</strong> 在activeMQ后台配置面板的<code>Network</code>可以查看开启的网络协议。</p>\n<h1 id=\"ACTIVEMQ的存储和可持久化\"><a href=\"#ACTIVEMQ的存储和可持久化\" class=\"headerlink\" title=\"ACTIVEMQ的存储和可持久化\"></a>ACTIVEMQ的存储和可持久化</h1><p>对于上面的提到的节点（事务、持久、签收），他们都是MQ自带的，不能保证自身故障时的持久，这里提到的可持久化的目的是将数据保存在另外一台机器做备份，达到物理隔离，完成高可用。所以为了避免意外宕机后丢失信息，需要做到重启后可以恢复消息队列，消息系统一般都会<code>采用持久化机制</code>（所有MQ都会这样）：在发送者将消息发送出去后，消息中心首先将消息存储到本地数据文件、内存数据库或者远程数据库等，再试图将消息发送给接收者，成功则将消息从存储中删除，失败i则继续尝试发送；如果是重启，消息中心启动后首先检查指定的存储位置，如果有未发送成功的消息，则需要把消息发送出去。</p>\n<p>主要介绍两个DB：<code>KahaDB</code>, <code>LevelDB</code>, <code>JDBC</code></p>\n<p>Q: AMQ持久化机制</p>\n<h2 id=\"KahaDB\"><a href=\"#KahaDB\" class=\"headerlink\" title=\"KahaDB\"></a>KahaDB</h2><p>基于日志文件，从ActiveMQ5.4开始作为默认的持久化插件（相当于Redis的aof），记录做了哪些操作。</p>\n<p>在配置文件中，有：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">persistenceAdapter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">kahaDB</span> <span class=\"attr\">directory</span>=<span class=\"string\">&quot;$&#123;activemq.data&#125;/kahadb&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">persistenceAdpter</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"存储原理\"><a href=\"#存储原理\" class=\"headerlink\" title=\"存储原理\"></a>存储原理</h3><p>reference <a href=\"https://activemq.apache.org/kahadb\">here</a></p>\n<p>可用于任何场合，提高了性能和恢复能力。消息存储使用一个<strong>事务日志</strong>和一个<strong>索引文件</strong>（存储所有地址）。</p>\n<p>Kahadb在消息保存目录中只有4类文件和一个lock：db-1.log, db.data, db.free, db.redo, lock. （4个文件1把锁）</p>\n<h4 id=\"db-lt-Number-gt-log\"><a href=\"#db-lt-Number-gt-log\" class=\"headerlink\" title=\"db&lt;Number&gt;.log\"></a>db&lt;Number&gt;.log</h4><p>存储消息到预定义大小的数据记录文件中，Number初始为1，。当数据文件已满时，一个新的文件会随之创建。当不再有引用到数据文件中的任何消息时，文件会被删除或归档（自我空间清理）。</p>\n<h4 id=\"db-data\"><a href=\"#db-data\" class=\"headerlink\" title=\"db.data\"></a>db.data</h4><p>包含了持久化的<code>BTree索引</code>，索引了消息数据记录中的消息，它是消息的索引文件，本质上是B-Tree，使用B-Tree作为索引指向<code>db-\\&lt;Number&gt;.log</code>里面存储的消息。</p>\n<h4 id=\"db-free\"><a href=\"#db-free\" class=\"headerlink\" title=\"db.free\"></a>db.free</h4><p>当前<code>db.data</code>文件里哪些页面是空闲的，文件具体内容是所有空闲页的<strong>ID</strong>. 类比linux的bash命令<code>free</code>。</p>\n<h4 id=\"db-redo\"><a href=\"#db-redo\" class=\"headerlink\" title=\"db.redo\"></a>db.redo</h4><p>用来进行消息恢复，如果KahaDB消息存储在强制退出后启动，用于恢复BTree索引。</p>\n<h4 id=\"lock\"><a href=\"#lock\" class=\"headerlink\" title=\"lock\"></a>lock</h4><p>相当于mysql中的悲观锁。表示当前获得kahadb读写权限的broker。</p>\n<h2 id=\"JDBC\"><a href=\"#JDBC\" class=\"headerlink\" title=\"JDBC\"></a>JDBC</h2><p>主要。将数据放入mysql/oracle中，这是对于长时间持久化存储，推荐用jdbc，特别是带了Journal的。缺点是有点慢。kahaDB是将服务器做本地数据库，JDBC是将他放入另外一个磁盘（类似云盘），相对来说更安全。</p>\n<h2 id=\"LevelDB\"><a href=\"#LevelDB\" class=\"headerlink\" title=\"LevelDB\"></a>LevelDB</h2><h2 id=\"JDBC-Message-store-with-ActiveMQ-Journal\"><a href=\"#JDBC-Message-store-with-ActiveMQ-Journal\" class=\"headerlink\" title=\"JDBC Message store with ActiveMQ Journal\"></a>JDBC Message store with ActiveMQ Journal</h2><p>主要。</p>\n<h1 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h1><ol>\n<li><p>引入消息队列后该如何保证其高可用性</p>\n</li>\n<li><p>异步投递Async Sends</p>\n</li>\n<li><p>延迟投递和定时投递</p>\n</li>\n<li><p>分发策略</p>\n</li>\n<li><p>ActiveMQ消费重试机制</p>\n</li>\n<li><p>死信队列</p>\n</li>\n<li><p>如何保证消息不被重复消费呢？谈谈幂等性问题</p>\n</li>\n</ol>\n<h2 id=\"高可用\"><a href=\"#高可用\" class=\"headerlink\" title=\"高可用\"></a>高可用</h2><p>zookeeper + (replicated-leveldb-store)的主从集群，起码非单机版，是集群的。</p>\n<h2 id=\"异步投递\"><a href=\"#异步投递\" class=\"headerlink\" title=\"异步投递\"></a>异步投递</h2><p>如何确认发送成功？ </p>\n<p>在消息发送完后接收回调。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ActiveMQConnectionFacotry acf = <span class=\"keyword\">new</span> ActiveMQConnectionFactory(URL);</span><br><span class=\"line\"><span class=\"comment\">// 设置为异步发送消息</span></span><br><span class=\"line\">acf.setUseAsyncSend(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">ActiveMQMessageProducer amp = (ActiveMQMessageProducer)session.createProducer(queue);</span><br><span class=\"line\">...</span><br><span class=\"line\">TextMessage message = session.createTextMessage();</span><br><span class=\"line\"><span class=\"comment\">// 未message设置属性</span></span><br><span class=\"line\">message.setJMSMessageID(UUID.randomUUID().toString());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用带有回调的send方法来发送</span></span><br><span class=\"line\">amp.send(message, <span class=\"keyword\">new</span> AsyncCallback()&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSucces</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(message.getJMSmessageID+<span class=\"string\">&quot; succeed&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onException</span><span class=\"params\">(JMSException exception)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 拿到属性来确认发送失败的消息</span></span><br><span class=\"line\">        System.out.println(message.getJMSmessageID+<span class=\"string\">&quot; fail&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"延迟投递和定时投递\"><a href=\"#延迟投递和定时投递\" class=\"headerlink\" title=\"延迟投递和定时投递\"></a>延迟投递和定时投递</h2><p>参考<a href=\"http://activemq.apache.org/delay-and-schedule-message-delivery.html\">官网说明</a></p>\n<table>\n<thead>\n<tr>\n<th>Property name</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>AMQ_SCHEDULED_DELAY</td>\n<td>long</td>\n<td>延迟投递的时间</td>\n</tr>\n<tr>\n<td>AMQ_SCHEDULED_PERIOD</td>\n<td>long</td>\n<td>重复投递的时间间隔</td>\n</tr>\n<tr>\n<td>AMQ_SCHEDULED_REPEAT</td>\n<td>int</td>\n<td>重复投递次数</td>\n</tr>\n<tr>\n<td>AMQ_SCHEDULED_CRON</td>\n<td>String</td>\n<td>Cron表达式</td>\n</tr>\n</tbody></table>\n<p>在<code>activemq.xml</code>中配置<em>schedulerSupport</em>属性为<em>true</em>且Java代码中封装的辅助消息类型为<em>ScheduledMessage</em>即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">long</span> delay = <span class=\"number\">3</span> * <span class=\"number\">1000</span>; <span class=\"comment\">//延迟投递的时间，每3秒</span></span><br><span class=\"line\"><span class=\"keyword\">long</span> period = <span class=\"number\">4</span> * <span class=\"number\">1000</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> repeat = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">TextMessage message = session.createTextMessage();</span><br><span class=\"line\">message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, delay);</span><br><span class=\"line\">message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD, delay);</span><br><span class=\"line\">message.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT, delay);</span><br><span class=\"line\"></span><br><span class=\"line\">messageProducer.send(mesage);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ActiveMQ消费重试机制\"><a href=\"#ActiveMQ消费重试机制\" class=\"headerlink\" title=\"ActiveMQ消费重试机制\"></a>ActiveMQ消费重试机制</h2><ul>\n<li><p>哪些情况会引起消息重发？</p>\n</li>\n<li><p>消息重发时间间隔和重发次数</p>\n</li>\n<li><p>有毒消息Posion ACK</p>\n</li>\n</ul>\n<p>reference <a href=\"activemq.apache.org/redelivery-policy\">here</a></p>\n<p>重发：在设置事务后没有进行提交（commit），消息就会被重复消费，这时会触发重发机制，默认被重复消费6次后MQ会把这个消息放入DLQ（Dead Letter Queue）死信队列供开发查看，不会再被消费。</p>\n<h2 id=\"如何保证消息不被重复消费（幂等性）\"><a href=\"#如何保证消息不被重复消费（幂等性）\" class=\"headerlink\" title=\"如何保证消息不被重复消费（幂等性）\"></a>如何保证消息不被重复消费（幂等性）</h2><p><strong>note</strong>: 何时会重复消费？网络延迟造成MQ重试，进而重复消费。</p>\n<ul>\n<li><p>如果是做数据库的插入操作，可以给消息做一个唯一主键，重复消费时会导致主键冲突</p>\n</li>\n<li><p>使用第三方服务来做消费记录。以redis为例，给消息分配一个<strong>全局id</strong>，只要消费过该消息，将&lt;id, message&gt;以K-V形式写入redis，消费者消费前先去redis中查询有没有消费记录即可。</p>\n</li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"cke6smgbk0009byih7o5a78ht","category_id":"cke6smgbf0004byihg7kwdscf","_id":"cke6smgbs000jbyihh5b8adya"},{"post_id":"cke6smgb40001byih3z3d3asz","category_id":"cke6smgbf0004byihg7kwdscf","_id":"cke6smgbv000nbyih0phv02d0"},{"post_id":"cke6smgbo000gbyih8tnu9ce3","category_id":"cke6smgbf0004byihg7kwdscf","_id":"cke6smgbw000qbyihagdyaofy"},{"post_id":"cke6smgbd0003byiha6jp7izh","category_id":"cke6smgbm000cbyih4breh4cf","_id":"cke6smgbz000ubyihd3w30p5v"},{"post_id":"cke6smgbi0007byih2a6z4g5o","category_id":"cke6smgbm000cbyih4breh4cf","_id":"cke6smgc1000xbyihfr9z7eua"},{"post_id":"cke6smgbl000bbyihbdsp49ax","category_id":"cke6smgbx000rbyih8b1sbu2t","_id":"cke6smgc50013byih7l6v72tr"},{"post_id":"cke6smgbr000ibyihg2ovgplt","category_id":"cke6smgc1000ybyiha0dtbl90","_id":"cke6smgc8001abyih48691xi4"},{"post_id":"cke6smgc50015byihe6bee5io","category_id":"cke6smgbf0004byihg7kwdscf","_id":"cke6smgcd001ebyih4yn832qw"},{"post_id":"cke6smgbu000mbyih3ig9dojg","category_id":"cke6smgc1000ybyiha0dtbl90","_id":"cke6smgcg001ibyih7ni0fsxc"},{"post_id":"cke6smgbw000pbyihfl868qlo","category_id":"cke6smgc1000ybyiha0dtbl90","_id":"cke6smgci001mbyiha7og2uus"},{"post_id":"cke6smgch001kbyih35p1ecqj","category_id":"cke6smgbf0004byihg7kwdscf","_id":"cke6smgcp001tbyihhh6h4hgx"},{"post_id":"cke6smgbx000tbyihd2bh5t4m","category_id":"cke6smgce001gbyih3t2zfxyy","_id":"cke6smgcr001wbyih595ock4j"},{"post_id":"cke6smgcm001qbyih18fb1yir","category_id":"cke6smgbf0004byihg7kwdscf","_id":"cke6smgct0020byihbltk46vp"},{"post_id":"cke6smgc0000wbyih4f4herkx","category_id":"cke6smgce001gbyih3t2zfxyy","_id":"cke6smgcv0023byih58i9ebna"},{"post_id":"cke6smgc20010byih9lp20dur","category_id":"cke6smgce001gbyih3t2zfxyy","_id":"cke6smgcw0026byih4lkp0urd"},{"post_id":"cke6smgcu0022byihebjh5kv5","category_id":"cke6smgbf0004byihg7kwdscf","_id":"cke6smgcz002cbyih31e11vm2"},{"post_id":"cke6smgc8001bbyih1nchec5k","category_id":"cke6smgct0021byih845ceotn","_id":"cke6smgd1002gbyih90df84sm"},{"post_id":"cke6smgcw0025byihgd5s4pwk","category_id":"cke6smgct0021byih845ceotn","_id":"cke6smgd2002jbyih947fcbmy"},{"post_id":"cke6smgcx0029byih1vjv3nou","category_id":"cke6smgct0021byih845ceotn","_id":"cke6smgd3002nbyih526x5ukm"},{"post_id":"cke6smgcc001dbyih4tokfaya","category_id":"cke6smgcw0028byih30w389vr","_id":"cke6smgd5002qbyihb3edamkh"},{"post_id":"cke6smgcz002bbyih1j971bpx","category_id":"cke6smgbf0004byihg7kwdscf","_id":"cke6smgd8002tbyih98bv1wha"},{"post_id":"cke6smgd0002fbyih09177mo3","category_id":"cke6smgbf0004byihg7kwdscf","_id":"cke6smgda002xbyih7ay8h5yf"},{"post_id":"cke6smgcj001nbyih471x0gt3","category_id":"cke6smgd0002ebyih1ylv9dxw","_id":"cke6smgdc0030byihhpq16bh2"},{"post_id":"cke6smgd1002ibyih1tos61ra","category_id":"cke6smgd0002ebyih1ylv9dxw","_id":"cke6smgdf0033byih7q5z4npy"},{"post_id":"cke6smgd3002mbyihft1n58g9","category_id":"cke6smgbf0004byihg7kwdscf","_id":"cke6smgdg0037byihfyioblkt"},{"post_id":"cke6smgco001sbyih66h9ehsh","category_id":"cke6smgd2002lbyihdvwk93lp","_id":"cke6smgdi003abyiha27ma29u"},{"post_id":"cke6smgd7002sbyih0qmhhzrs","category_id":"cke6smgbf0004byihg7kwdscf","_id":"cke6smgdj003dbyih5rb59i6c"},{"post_id":"cke6smgd9002wbyihbo4uh6qx","category_id":"cke6smgbf0004byihg7kwdscf","_id":"cke6smgdl003hbyih7i2gah9r"},{"post_id":"cke6smgcq001vbyihdkbp219t","category_id":"cke6smgd8002ubyih3ed33otu","_id":"cke6smgdm003kbyihcjjy5dy1"},{"post_id":"cke6smgde0032byihfd1ha414","category_id":"cke6smgbf0004byihg7kwdscf","_id":"cke6smgdn003obyihd5m627cn"},{"post_id":"cke6smgcs001zbyih2aphh9wo","category_id":"cke6smgct0021byih845ceotn","_id":"cke6smgdp003rbyih11y781z9"},{"post_id":"cke6smgdg0036byih1pk21dti","category_id":"cke6smgce001gbyih3t2zfxyy","_id":"cke6smgdq003ubyihggazddve"},{"post_id":"cke6smgdh0039byihhv4je5r4","category_id":"cke6smgbf0004byihg7kwdscf","_id":"cke6smgdt003ybyihfcn0g1sa"},{"post_id":"cke6smgd4002pbyih4sfnfjjw","category_id":"cke6smgdh0038byih80ft33ei","_id":"cke6smgdu0041byihadk66aav"},{"post_id":"cke6smgdb002zbyihh3i56g47","category_id":"cke6smgdk003fbyihc5ao5gf6","_id":"cke6smgdw0043byih34sw0249"},{"post_id":"cke6smgdl003jbyihh74s2hil","category_id":"cke6smgbx000rbyih8b1sbu2t","_id":"cke6smgdy0047byihhzwucxwg"},{"post_id":"cke6smgdn003nbyihh913hr7i","category_id":"cke6smgbf0004byihg7kwdscf","_id":"cke6smge1004abyih7ux3eewq"},{"post_id":"cke6smgdo003qbyih8jdn9eiv","category_id":"cke6smgbx000rbyih8b1sbu2t","_id":"cke6smge3004fbyihaa3tdtxn"},{"post_id":"cke6smgdj003cbyih95mv08oy","category_id":"cke6smgdm003mbyihdgi8axzp","_id":"cke6smge4004ibyih8yr96w6d"},{"post_id":"cke6smgdp003tbyih2m9f9jux","category_id":"cke6smgbx000rbyih8b1sbu2t","_id":"cke6smge5004lbyih5eyq329f"},{"post_id":"cke6smgdr003xbyih6sl4c0ju","category_id":"cke6smgbf0004byihg7kwdscf","_id":"cke6smge6004nbyihh7j99wvr"},{"post_id":"cke6smgdk003gbyihat7ob9nq","category_id":"cke6smgdm003mbyihdgi8axzp","_id":"cke6smge6004obyih9xyghuys"},{"post_id":"cke6smgdy0049byih5n60acnv","category_id":"cke6smgdw0045byihee6j52tz","_id":"cke6smge7004rbyih2yv20noq"},{"post_id":"cke6smgdu0040byihee681rji","category_id":"cke6smgdw0045byihee6j52tz","_id":"cke6smge7004sbyiheiks3zkt"},{"post_id":"cke6smge2004dbyihhz3d8c7o","category_id":"cke6smgdw0045byihee6j52tz","_id":"cke6smge7004ubyihfzewdtz4"},{"post_id":"cke6smge3004hbyih0h6nf64g","category_id":"cke6smgdw0045byihee6j52tz","_id":"cke6smge7004vbyihhtftayxq"},{"post_id":"cke6smgdv0042byih8jvahtwi","category_id":"cke6smgdw0045byihee6j52tz","_id":"cke6smge8004xbyih6eshdfqr"},{"post_id":"cke6smgdx0046byih2r5y0qa4","category_id":"cke6smgdw0045byihee6j52tz","_id":"cke6smge8004zbyihejagf5t4"},{"post_id":"cke6smgf3006sbyihc3bw92md","category_id":"cke6smgd8002ubyih3ed33otu","_id":"cke6smgf6006ubyih9rqe9k93"}],"PostTag":[{"post_id":"cke6smgb40001byih3z3d3asz","tag_id":"cke6smgbh0005byih8wd6fqeu","_id":"cke6smgbo000ebyihc4j85nbi"},{"post_id":"cke6smgbd0003byiha6jp7izh","tag_id":"cke6smgbn000dbyih4nds4iqm","_id":"cke6smgbv000obyihcbfb0rys"},{"post_id":"cke6smgbi0007byih2a6z4g5o","tag_id":"cke6smgbs000lbyihbg3efmkd","_id":"cke6smgc0000vbyihgczv09gl"},{"post_id":"cke6smgbk0009byih7o5a78ht","tag_id":"cke6smgbx000sbyih2teia52v","_id":"cke6smgc30011byihdxs72cpk"},{"post_id":"cke6smgbl000bbyihbdsp49ax","tag_id":"cke6smgc2000zbyih174m0se8","_id":"cke6smgc70017byih709q9ysz"},{"post_id":"cke6smgbo000gbyih8tnu9ce3","tag_id":"cke6smgc60016byih8yxq92du","_id":"cke6smgcd001fbyihbpfmbz64"},{"post_id":"cke6smgbr000ibyihg2ovgplt","tag_id":"cke6smgc9001cbyih6kvn6et1","_id":"cke6smgci001lbyih9zaq77n5"},{"post_id":"cke6smgbu000mbyih3ig9dojg","tag_id":"cke6smgcg001jbyihcy6q3cmx","_id":"cke6smgco001rbyihaphvh7n5"},{"post_id":"cke6smgbw000pbyihfl868qlo","tag_id":"cke6smgcl001pbyih3spsc0hm","_id":"cke6smgcs001ybyihe4fn1tmw"},{"post_id":"cke6smgbx000tbyihd2bh5t4m","tag_id":"cke6smgcr001xbyihd48s1sv1","_id":"cke6smgcw0027byihdq0yf41f"},{"post_id":"cke6smgc0000wbyih4f4herkx","tag_id":"cke6smgcr001xbyihd48s1sv1","_id":"cke6smgcz002dbyiheo3b9tpf"},{"post_id":"cke6smgc20010byih9lp20dur","tag_id":"cke6smgcr001xbyihd48s1sv1","_id":"cke6smgd2002kbyih0xkm6l0a"},{"post_id":"cke6smgc30012byihgfxk75qi","tag_id":"cke6smgd1002hbyih79soa0dx","_id":"cke6smgd6002rbyihgd9hbd75"},{"post_id":"cke6smgc50015byihe6bee5io","tag_id":"cke6smgd4002obyih72tchxka","_id":"cke6smgda002ybyih1i8b01lo"},{"post_id":"cke6smgc8001bbyih1nchec5k","tag_id":"cke6smgd9002vbyih6ntoa9g9","_id":"cke6smgdf0035byih1dg91s6a"},{"post_id":"cke6smgcc001dbyih4tokfaya","tag_id":"cke6smgdf0034byihcs7t6lky","_id":"cke6smgdj003ebyih2h34b6yv"},{"post_id":"cke6smgcf001hbyih2i9gblf0","tag_id":"cke6smgdi003bbyih16z6ft8m","_id":"cke6smgdm003lbyih6xs6cre2"},{"post_id":"cke6smgch001kbyih35p1ecqj","tag_id":"cke6smgdl003ibyih3rqqezr6","_id":"cke6smgdp003sbyih2kt0biu5"},{"post_id":"cke6smgdn003nbyihh913hr7i","tag_id":"cke6smgdl003ibyih3rqqezr6","_id":"cke6smgdr003wbyih2fpsc4sg"},{"post_id":"cke6smgcj001nbyih471x0gt3","tag_id":"cke6smgdo003pbyihb3babfvg","_id":"cke6smgdy0048byih2jdm907o"},{"post_id":"cke6smgcj001nbyih471x0gt3","tag_id":"cke6smgdt003zbyih9y7u6xy2","_id":"cke6smge1004bbyihegmg34xa"},{"post_id":"cke6smgcm001qbyih18fb1yir","tag_id":"cke6smgdw0044byih305p4dl6","_id":"cke6smge3004gbyih15kt1j6l"},{"post_id":"cke6smgco001sbyih66h9ehsh","tag_id":"cke6smge1004cbyih8qy7hhc8","_id":"cke6smge6004mbyih6q8s920n"},{"post_id":"cke6smgcq001vbyihdkbp219t","tag_id":"cke6smge5004jbyih0qkrb07j","_id":"cke6smge7004qbyih4f76crme"},{"post_id":"cke6smgcs001zbyih2aphh9wo","tag_id":"cke6smge6004pbyih2edmdino","_id":"cke6smge8004ybyihav7ee5bw"},{"post_id":"cke6smgcs001zbyih2aphh9wo","tag_id":"cke6smge7004tbyihepz85r59","_id":"cke6smge80050byih2ixaball"},{"post_id":"cke6smgcu0022byihebjh5kv5","tag_id":"cke6smge8004wbyih8m6i7vig","_id":"cke6smge90052byihg4za7cyw"},{"post_id":"cke6smgcw0025byihgd5s4pwk","tag_id":"cke6smge80051byiheinh3ari","_id":"cke6smge90054byih76zhfzla"},{"post_id":"cke6smgcx0029byih1vjv3nou","tag_id":"cke6smge90053byih2m2j2p7n","_id":"cke6smgea0057byihax7r8dm3"},{"post_id":"cke6smgcx0029byih1vjv3nou","tag_id":"cke6smge90055byih24w6gomw","_id":"cke6smgea0058byih9lg88xpe"},{"post_id":"cke6smgcz002bbyih1j971bpx","tag_id":"cke6smgea0056byihhb2xh1zx","_id":"cke6smgea005abyih6u7246uc"},{"post_id":"cke6smgd0002fbyih09177mo3","tag_id":"cke6smgea0059byih0q3gezfu","_id":"cke6smgeb005cbyih2ahf9rjm"},{"post_id":"cke6smgd1002ibyih1tos61ra","tag_id":"cke6smgeb005bbyih1mzyfpel","_id":"cke6smgec005ebyihbkcofzbd"},{"post_id":"cke6smgd3002mbyihft1n58g9","tag_id":"cke6smgd4002obyih72tchxka","_id":"cke6smgec005gbyihdnri73zc"},{"post_id":"cke6smgd4002pbyih4sfnfjjw","tag_id":"cke6smgec005fbyih2xa7hp24","_id":"cke6smgee005jbyihgz0h0whk"},{"post_id":"cke6smgd4002pbyih4sfnfjjw","tag_id":"cke6smged005hbyih1ijz2jl9","_id":"cke6smgee005kbyihe0fq2yus"},{"post_id":"cke6smgd7002sbyih0qmhhzrs","tag_id":"cke6smged005ibyihgre0dhin","_id":"cke6smgef005mbyih7c741n4h"},{"post_id":"cke6smgd9002wbyihbo4uh6qx","tag_id":"cke6smgdo003pbyihb3babfvg","_id":"cke6smgeg005pbyihbar89hy4"},{"post_id":"cke6smgd9002wbyihbo4uh6qx","tag_id":"cke6smgeg005nbyih6wsr93ca","_id":"cke6smgeg005qbyih6mtl6k60"},{"post_id":"cke6smgdb002zbyihh3i56g47","tag_id":"cke6smgeg005obyih2zdiglfn","_id":"cke6smgeh005sbyih7xce1vk8"},{"post_id":"cke6smgde0032byihfd1ha414","tag_id":"cke6smgeh005rbyih28ps80kf","_id":"cke6smgej005vbyihavbncmsa"},{"post_id":"cke6smgde0032byihfd1ha414","tag_id":"cke6smgei005tbyihboce3cns","_id":"cke6smgej005wbyih784f9prc"},{"post_id":"cke6smgdh0039byihhv4je5r4","tag_id":"cke6smgeg005nbyih6wsr93ca","_id":"cke6smgek005zbyihbklz8hol"},{"post_id":"cke6smgdh0039byihhv4je5r4","tag_id":"cke6smgej005xbyih4rz55a0z","_id":"cke6smgek0060byih2316aagv"},{"post_id":"cke6smgdj003cbyih95mv08oy","tag_id":"cke6smgek005ybyihbqq0big0","_id":"cke6smgem0063byih8cukhndw"},{"post_id":"cke6smgdj003cbyih95mv08oy","tag_id":"cke6smgek0061byih4ncffd79","_id":"cke6smgem0064byih6shyfevj"},{"post_id":"cke6smgdk003gbyihat7ob9nq","tag_id":"cke6smgek005ybyihbqq0big0","_id":"cke6smgem0066byiheech64o0"},{"post_id":"cke6smgdl003jbyihh74s2hil","tag_id":"cke6smgem0065byih94hk2ja5","_id":"cke6smgen0069byih5aqc6gzx"},{"post_id":"cke6smgdl003jbyihh74s2hil","tag_id":"cke6smgen0067byih103hatqm","_id":"cke6smgeo006abyihc4ks6m9m"},{"post_id":"cke6smgdo003qbyih8jdn9eiv","tag_id":"cke6smge8004wbyih8m6i7vig","_id":"cke6smgeo006cbyih35na4aq9"},{"post_id":"cke6smgdp003tbyih2m9f9jux","tag_id":"cke6smgeo006bbyih973d0yxh","_id":"cke6smgep006ebyih996762nv"},{"post_id":"cke6smgdr003xbyih6sl4c0ju","tag_id":"cke6smgea0056byihhb2xh1zx","_id":"cke6smgep006gbyih8n8935i8"},{"post_id":"cke6smgdu0040byihee681rji","tag_id":"cke6smgep006fbyihfaatfx4w","_id":"cke6smgeq006ibyihg0o8gejn"},{"post_id":"cke6smgdv0042byih8jvahtwi","tag_id":"cke6smgep006fbyihfaatfx4w","_id":"cke6smgeq006kbyihglnfbmu8"},{"post_id":"cke6smgdx0046byih2r5y0qa4","tag_id":"cke6smgep006fbyihfaatfx4w","_id":"cke6smger006mbyihdn4m2hwk"},{"post_id":"cke6smgdy0049byih5n60acnv","tag_id":"cke6smgep006fbyihfaatfx4w","_id":"cke6smger006obyihbjvxd5sa"},{"post_id":"cke6smge2004dbyihhz3d8c7o","tag_id":"cke6smgep006fbyihfaatfx4w","_id":"cke6smges006qbyihdovd2rh2"},{"post_id":"cke6smge3004hbyih0h6nf64g","tag_id":"cke6smgep006fbyihfaatfx4w","_id":"cke6smget006rbyih91m113iu"},{"post_id":"cke6smgf3006sbyihc3bw92md","tag_id":"cke6smgf4006tbyih9ypc0k68","_id":"cke6smgf6006vbyih7h30hdel"}],"Tag":[{"name":"fs","_id":"cke6smgbh0005byih8wd6fqeu"},{"name":"PermutationAndCombination","_id":"cke6smgbn000dbyih4nds4iqm"},{"name":"parobablity&Statics","_id":"cke6smgbs000lbyihbg3efmkd"},{"name":"annatation, reflect","_id":"cke6smgbx000sbyih2teia52v"},{"name":"Windows","_id":"cke6smgc2000zbyih174m0se8"},{"name":"bitwise","_id":"cke6smgc60016byih8yxq92du"},{"name":"密码学","_id":"cke6smgc9001cbyih6kvn6et1"},{"name":"数据结构","_id":"cke6smgcg001jbyihcy6q3cmx"},{"name":"principle","_id":"cke6smgcl001pbyih3spsc0hm"},{"name":"algorithm","_id":"cke6smgcr001xbyihd48s1sv1"},{"name":"LeetCode","_id":"cke6smgd1002hbyih79soa0dx"},{"name":"design_patterns","_id":"cke6smgd4002obyih72tchxka"},{"name":"gcd","_id":"cke6smgd9002vbyih6ntoa9g9"},{"name":"test","_id":"cke6smgdf0034byihcs7t6lky"},{"name":"hashmap, data structure","_id":"cke6smgdi003bbyih16z6ft8m"},{"name":"datastructure","_id":"cke6smgdl003ibyih3rqqezr6"},{"name":"http","_id":"cke6smgdo003pbyihb3babfvg"},{"name":"https","_id":"cke6smgdt003zbyih9y7u6xy2"},{"name":"JavaFX","_id":"cke6smgdw0044byih305p4dl6"},{"name":"jvm","_id":"cke6smge1004cbyih8qy7hhc8"},{"name":"kafka","_id":"cke6smge5004jbyih0qkrb07j"},{"name":"kmp","_id":"cke6smge6004pbyih2edmdino"},{"name":"dp","_id":"cke6smge7004tbyihepz85r59"},{"name":"utils","_id":"cke6smge8004wbyih8m6i7vig"},{"name":"leecode_easy","_id":"cke6smge80051byiheinh3ari"},{"name":"lcs","_id":"cke6smge90053byih2m2j2p7n"},{"name":"recursion","_id":"cke6smge90055byih24w6gomw"},{"name":"lock","_id":"cke6smgea0056byihhb2xh1zx"},{"name":"mybatis","_id":"cke6smgea0059byih0q3gezfu"},{"name":"network","_id":"cke6smgeb005bbyih1mzyfpel"},{"name":"redis","_id":"cke6smgec005fbyih2xa7hp24"},{"name":"nosql","_id":"cke6smged005hbyih1ijz2jl9"},{"name":"regex","_id":"cke6smged005ibyihgre0dhin"},{"name":"swagger","_id":"cke6smgeg005nbyih6wsr93ca"},{"name":"aop","_id":"cke6smgeg005obyih2zdiglfn"},{"name":"static","_id":"cke6smgeh005rbyih28ps80kf"},{"name":"final","_id":"cke6smgei005tbyihboce3cns"},{"name":"SpringBoot","_id":"cke6smgej005xbyih4rz55a0z"},{"name":"tensorflow","_id":"cke6smgek005ybyihbqq0big0"},{"name":"python","_id":"cke6smgek0061byih4ncffd79"},{"name":"springboot","_id":"cke6smgem0065byih94hk2ja5"},{"name":"thymeleaf","_id":"cke6smgen0067byih103hatqm"},{"name":"vim","_id":"cke6smgeo006bbyih973d0yxh"},{"name":"vue","_id":"cke6smgep006fbyihfaatfx4w"},{"name":"activemq","_id":"cke6smgf4006tbyih9ypc0k68"}]}}